# coding: utf-8

"""
    Connect API

    mbed Cloud Connect API allows web applications to communicate with devices. You can subscribe to device resources and read/write values to them. mbed Cloud Connect makes connectivity to devices easy by queuing requests and caching resource values.

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NotificationData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, timestamp=None, payload=None, path=None, max_age=None, ep=None, ct=None):
        """
        NotificationData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'timestamp': 'str',
            'payload': 'str',
            'path': 'str',
            'max_age': 'str',
            'ep': 'str',
            'ct': 'str'
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'payload': 'payload',
            'path': 'path',
            'max_age': 'max-age',
            'ep': 'ep',
            'ct': 'ct'
        }

        self._timestamp = timestamp
        self._payload = payload
        self._path = path
        self._max_age = max_age
        self._ep = ep
        self._ct = ct

    @property
    def timestamp(self):
        """
        Gets the timestamp of this NotificationData.
        Timestamp.

        :return: The timestamp of this NotificationData.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this NotificationData.
        Timestamp.

        :param timestamp: The timestamp of this NotificationData.
        :type: str
        """

        self._timestamp = timestamp

    @property
    def payload(self):
        """
        Gets the payload of this NotificationData.
        Base64 encoded payload.

        :return: The payload of this NotificationData.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """
        Sets the payload of this NotificationData.
        Base64 encoded payload.

        :param payload: The payload of this NotificationData.
        :type: str
        """

        self._payload = payload

    @property
    def path(self):
        """
        Gets the path of this NotificationData.
        URI path.

        :return: The path of this NotificationData.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this NotificationData.
        URI path.

        :param path: The path of this NotificationData.
        :type: str
        """

        self._path = path

    @property
    def max_age(self):
        """
        Gets the max_age of this NotificationData.
        Max age value is an integer number of seconds between 0 and 2^32-1 but the actual maximum cache time is limited to 3 days. A default value of 60 seconds is assumed in the absence of the option. 

        :return: The max_age of this NotificationData.
        :rtype: str
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """
        Sets the max_age of this NotificationData.
        Max age value is an integer number of seconds between 0 and 2^32-1 but the actual maximum cache time is limited to 3 days. A default value of 60 seconds is assumed in the absence of the option. 

        :param max_age: The max_age of this NotificationData.
        :type: str
        """

        self._max_age = max_age

    @property
    def ep(self):
        """
        Gets the ep of this NotificationData.
        Device ID.

        :return: The ep of this NotificationData.
        :rtype: str
        """
        return self._ep

    @ep.setter
    def ep(self, ep):
        """
        Sets the ep of this NotificationData.
        Device ID.

        :param ep: The ep of this NotificationData.
        :type: str
        """

        self._ep = ep

    @property
    def ct(self):
        """
        Gets the ct of this NotificationData.
        Content type.

        :return: The ct of this NotificationData.
        :rtype: str
        """
        return self._ct

    @ct.setter
    def ct(self, ct):
        """
        Sets the ct of this NotificationData.
        Content type.

        :param ct: The ct of this NotificationData.
        :type: str
        """

        self._ct = ct

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NotificationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
