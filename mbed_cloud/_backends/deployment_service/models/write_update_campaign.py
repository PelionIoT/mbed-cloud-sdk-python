# coding: utf-8

"""
    Deployment Service API

    This is the API Documentation for the mbed deployment service which is part of the update service.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WriteUpdateCampaign(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, state=None, updating_user_id=None, object=None, root_manifest_id=None, campaign_id=None, updating_api_key=None, when=None, finished=None, updating_account_id=None, device_filter=None, description=None):
        """
        WriteUpdateCampaign - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'state': 'str',
            'updating_user_id': 'str',
            'object': 'str',
            'root_manifest_id': 'str',
            'campaign_id': 'str',
            'updating_api_key': 'str',
            'when': 'datetime',
            'finished': 'datetime',
            'updating_account_id': 'str',
            'device_filter': 'str',
            'description': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'state': 'state',
            'updating_user_id': 'updating_user_id',
            'object': 'object',
            'root_manifest_id': 'root_manifest_id',
            'campaign_id': 'campaign_id',
            'updating_api_key': 'updating_api_key',
            'when': 'when',
            'finished': 'finished',
            'updating_account_id': 'updating_account_id',
            'device_filter': 'device_filter',
            'description': 'description'
        }

        self._name = name
        self._state = state
        self._updating_user_id = updating_user_id
        self._object = object
        self._root_manifest_id = root_manifest_id
        self._campaign_id = campaign_id
        self._updating_api_key = updating_api_key
        self._when = when
        self._finished = finished
        self._updating_account_id = updating_account_id
        self._device_filter = device_filter
        self._description = description

    @property
    def name(self):
        """
        Gets the name of this WriteUpdateCampaign.
        A name for this campaign

        :return: The name of this WriteUpdateCampaign.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WriteUpdateCampaign.
        A name for this campaign

        :param name: The name of this WriteUpdateCampaign.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def state(self):
        """
        Gets the state of this WriteUpdateCampaign.
        The state of the campaign

        :return: The state of this WriteUpdateCampaign.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this WriteUpdateCampaign.
        The state of the campaign

        :param state: The state of this WriteUpdateCampaign.
        :type: str
        """
        allowed_values = ["draft", "scheduled", "devicefetch", "devicecopy", "devicecopycomplete", "publishing", "deploying", "deployed", "manifestremoved", "expired"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def updating_user_id(self):
        """
        Gets the updating_user_id of this WriteUpdateCampaign.
        The updating IAM user ID

        :return: The updating_user_id of this WriteUpdateCampaign.
        :rtype: str
        """
        return self._updating_user_id

    @updating_user_id.setter
    def updating_user_id(self, updating_user_id):
        """
        Sets the updating_user_id of this WriteUpdateCampaign.
        The updating IAM user ID

        :param updating_user_id: The updating_user_id of this WriteUpdateCampaign.
        :type: str
        """

        self._updating_user_id = updating_user_id

    @property
    def object(self):
        """
        Gets the object of this WriteUpdateCampaign.
        The API resource entity

        :return: The object of this WriteUpdateCampaign.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this WriteUpdateCampaign.
        The API resource entity

        :param object: The object of this WriteUpdateCampaign.
        :type: str
        """

        self._object = object

    @property
    def root_manifest_id(self):
        """
        Gets the root_manifest_id of this WriteUpdateCampaign.

        :return: The root_manifest_id of this WriteUpdateCampaign.
        :rtype: str
        """
        return self._root_manifest_id

    @root_manifest_id.setter
    def root_manifest_id(self, root_manifest_id):
        """
        Sets the root_manifest_id of this WriteUpdateCampaign.

        :param root_manifest_id: The root_manifest_id of this WriteUpdateCampaign.
        :type: str
        """

        self._root_manifest_id = root_manifest_id

    @property
    def campaign_id(self):
        """
        Gets the campaign_id of this WriteUpdateCampaign.
        DEPRECATED: The ID of the campaign

        :return: The campaign_id of this WriteUpdateCampaign.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """
        Sets the campaign_id of this WriteUpdateCampaign.
        DEPRECATED: The ID of the campaign

        :param campaign_id: The campaign_id of this WriteUpdateCampaign.
        :type: str
        """

        self._campaign_id = campaign_id

    @property
    def updating_api_key(self):
        """
        Gets the updating_api_key of this WriteUpdateCampaign.
        The gateway client API key

        :return: The updating_api_key of this WriteUpdateCampaign.
        :rtype: str
        """
        return self._updating_api_key

    @updating_api_key.setter
    def updating_api_key(self, updating_api_key):
        """
        Sets the updating_api_key of this WriteUpdateCampaign.
        The gateway client API key

        :param updating_api_key: The updating_api_key of this WriteUpdateCampaign.
        :type: str
        """

        self._updating_api_key = updating_api_key

    @property
    def when(self):
        """
        Gets the when of this WriteUpdateCampaign.
        The timestamp at which update campaign scheduled to start

        :return: The when of this WriteUpdateCampaign.
        :rtype: datetime
        """
        return self._when

    @when.setter
    def when(self, when):
        """
        Sets the when of this WriteUpdateCampaign.
        The timestamp at which update campaign scheduled to start

        :param when: The when of this WriteUpdateCampaign.
        :type: datetime
        """

        self._when = when

    @property
    def finished(self):
        """
        Gets the finished of this WriteUpdateCampaign.
        The timestamp when the update campaign finished

        :return: The finished of this WriteUpdateCampaign.
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """
        Sets the finished of this WriteUpdateCampaign.
        The timestamp when the update campaign finished

        :param finished: The finished of this WriteUpdateCampaign.
        :type: datetime
        """

        self._finished = finished

    @property
    def updating_account_id(self):
        """
        Gets the updating_account_id of this WriteUpdateCampaign.
        The updating account ID

        :return: The updating_account_id of this WriteUpdateCampaign.
        :rtype: str
        """
        return self._updating_account_id

    @updating_account_id.setter
    def updating_account_id(self, updating_account_id):
        """
        Sets the updating_account_id of this WriteUpdateCampaign.
        The updating account ID

        :param updating_account_id: The updating_account_id of this WriteUpdateCampaign.
        :type: str
        """

        self._updating_account_id = updating_account_id

    @property
    def device_filter(self):
        """
        Gets the device_filter of this WriteUpdateCampaign.
        The filter for the devices the campaign will target

        :return: The device_filter of this WriteUpdateCampaign.
        :rtype: str
        """
        return self._device_filter

    @device_filter.setter
    def device_filter(self, device_filter):
        """
        Sets the device_filter of this WriteUpdateCampaign.
        The filter for the devices the campaign will target

        :param device_filter: The device_filter of this WriteUpdateCampaign.
        :type: str
        """
        if device_filter is None:
            raise ValueError("Invalid value for `device_filter`, must not be `None`")

        self._device_filter = device_filter

    @property
    def description(self):
        """
        Gets the description of this WriteUpdateCampaign.
        An optional description of the campaign

        :return: The description of this WriteUpdateCampaign.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WriteUpdateCampaign.
        An optional description of the campaign

        :param description: The description of this WriteUpdateCampaign.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WriteUpdateCampaign):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
