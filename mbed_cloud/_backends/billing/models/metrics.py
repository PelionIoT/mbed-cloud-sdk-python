# coding: utf-8

"""
    mbed-billing REST API documentation for API-server

    This document contains the public REST API definitions of the mbed-billing service's API server component.

    OpenAPI spec version: 1.3.6-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Metrics(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, vertx_http_servers_delete_requests=None, jvm_mem_pools_ps_survivor_space_init=None, vertx_pools_worker_vert_x_worker_thread_queue_size=None, vertx_http_servers_options_requests=None, jvm_mem_non_heap_max=None, jvm_mem_heap_used=None, jvm_mem_total_max=None, persistence_insert_account=None, vertx_http_servers_bytes_read=None, vertx_http_clients_iam_bytes_written=None, vertx_http_clients_iam_options_requests=None, vertx_http_clients_iam_requests=None, persistent_store_ds_pool_usage=None, vertx_pools_worker_vert_x_internal_blocking_pool_ratio=None, persistence_insert_active_devices=None, jvm_mem_total_init=None, jvm_mem_pools_ps_old_gen_committed=None, vertx_timers=None, vertx_eventbus_messages_sent=None, persistence_select_service_update_log=None, persistence_select_accounts_statistics_with_accounts=None, http_handler_activedevices_in_imports_timer=None, persistence_select_healthcheck=None, vertx_http_clients_iam_bytes_read=None, persistence_select_initial_accounts=None, vertx_eventbus_handlers=None, vertx_http_servers_exceptions=None, vertx_eventbus_messages_reply_failures=None, vertx_http_clients_iam_head_requests=None, jvm_mem_pools_ps_old_gen_max=None, persistence_update_update_account_upgrade_time=None, jvm_mem_pools_compressed_class_space_init=None, jvm_mem_pools_code_cache_usage=None, vertx_verticles=None, vertx_http_servers_responses_2xx=None, persistence_insert_import_log=None, vertx_http_servers_patch_requests=None, http_handler_service_update_log_timer=None, jvm_mem_pools_metaspace_init=None, jvm_gc_ps_mark_sweep_time=None, http_handler_time_series_timer=None, vertx_http_servers_connections=None, vertx_eventbus_messages_sent_local=None, vertx_http_clients_iam_other_requests=None, vertx_http_clients_iam_responses_5xx=None, jvm_mem_pools_ps_eden_space_max=None, vertx_eventbus_messages_delivered_remote=None, vertx_http_clients_iam_connections_pool_ratio=None, persistent_store_ds_pool_connection_timeout_rate=None, jvm_mem_pools_ps_survivor_space_usage=None, jvm_mem_total_committed=None, jvm_mem_non_heap_used=None, persistent_store_ds_pool_wait=None, vertx_worker_pool_size=None, vertx_pools_worker_vert_x_internal_blocking_in_use=None, vertx_eventbus_messages_published=None, vertx_http_servers_get_requests=None, vertx_http_clients_iam_open_netsockets=None, jvm_mem_non_heap_init=None, vertx_http_clients_iam_delete_requests=None, jvm_mem_pools_ps_eden_space_used=None, http_handler_metrics_handler_timer=None, persistence_select_import_log_active_devices=None, http_handler_activedevices_timer=None, vertx_http_clients_iam_open_connections=None, jvm_mem_pools_ps_survivor_space_used=None, vertx_http_clients_iam_responses_1xx=None, persistence_insert_dlq=None, vertx_eventbus_messages_published_remote=None, jvm_mem_pools_ps_old_gen_init=None, vertx_http_clients_iam_connections=None, vertx_eventbus_messages_pending=None, vertx_http_servers_connect_requests=None, vertx_pools_worker_vert_x_internal_blocking_queue_size=None, http_handler_build_info_timer=None, jvm_mem_pools_ps_eden_space_usage=None, vertx_eventbus_messages_published_local=None, persistence_select_accounts_statistics_all=None, persistence_select_accounts_statistics_with_account=None, jvm_gc_ps_scavenge_time=None, vertx_http_clients_iam_exceptions=None, jvm_mem_pools_ps_old_gen_usage=None, vertx_http_servers_post_requests=None, jvm_mem_pools_ps_old_gen_used_after_gc=None, vertx_eventbus_messages_sent_remote=None, persistence_select_accounts=None, vertx_eventbus_messages_pending_remote=None, vertx_eventbus_messages_received_local=None, jvm_mem_pools_code_cache_max=None, vertx_pools_worker_vert_x_internal_blocking_max_pool_size=None, persistence_operation_store=None, http_handler_health_check_timer=None, vertx_http_clients_iam_connect_requests=None, vertx_http_servers_trace_requests=None, jvm_mem_non_heap_usage=None, vertx_http_servers_put_requests=None, jvm_mem_total_used=None, jvm_mem_pools_code_cache_committed=None, http_handler_account_stats_without_account=None, vertx_eventbus_messages_delivered_local=None, jvm_mem_pools_ps_eden_space_used_after_gc=None, jvm_mem_pools_compressed_class_space_used=None, vertx_pools_worker_vert_x_worker_thread_queue_delay=None, vertx_pools_worker_vert_x_internal_blocking_queue_delay=None, http_handler_account_stats_with_account=None, jvm_mem_pools_compressed_class_space_max=None, http_handler_account_list_timer=None, persistent_store_ds_pool_total_connections=None, jvm_mem_pools_ps_survivor_space_committed=None, vertx_http_servers_responses_5xx=None, jvm_mem_pools_code_cache_init=None, http_handler_report_json=None, vertx_http_servers_responses_4xx=None, vertx_pools_worker_vert_x_worker_thread_usage=None, jvm_mem_heap_init=None, jvm_mem_heap_max=None, vertx_http_servers_responses_1xx=None, vertx_http_clients_iam_post_requests=None, vertx_http_servers_open_websockets=None, vertx_http_servers_other_requests=None, http_handler_report_activedevices_timer=None, jvm_mem_heap_usage=None, jvm_mem_non_heap_committed=None, jvm_mem_pools_compressed_class_space_usage=None, persistent_store_ds_pool_connection_creation=None, vertx_http_clients_iam_open_websockets=None, persistence_select_import_log=None, persistence_select_accounts_statistics_with_accounts_and_starttime=None, persistence_operation_dlq=None, jvm_gc_ps_scavenge_count=None, vertx_http_clients_iam_connections_max_pool_size=None, vertx_eventbus_messages_bytes_written=None, jvm_mem_pools_compressed_class_space_committed=None, vertx_verticles_com_mbed_billing_server_apiserver_http_http_server=None, jvm_mem_pools_code_cache_used=None, http_handler_import_log_timer=None, vertx_eventbus_messages_pending_local=None, vertx_http_servers_bytes_written=None, vertx_eventbus_messages_bytes_read=None, vertx_http_servers_head_requests=None, jvm_mem_pools_ps_survivor_space_used_after_gc=None, persistent_store_ds_pool_active_connections=None, persistence_connection_connect=None, jvm_mem_pools_ps_eden_space_init=None, vertx_http_clients_iam_responses_2xx=None, persistence_insert_account_statistics=None, jvm_mem_pools_metaspace_used=None, jvm_mem_pools_metaspace_max=None, http_handler_report_zip=None, vertx_event_loop_size=None, vertx_http_servers_open_connections=None, vertx_http_clients_iam_responses_3xx=None, jvm_mem_pools_ps_eden_space_committed=None, vertx_http_servers_responses_3xx=None, vertx_http_clients_iam_get_requests=None, jvm_mem_heap_committed=None, vertx_http_servers_open_netsockets=None, vertx_http_servers_requests=None, persistent_store_ds_pool_pending_connections=None, jvm_mem_pools_ps_old_gen_used=None, jvm_mem_pools_metaspace_usage=None, vertx_pools_worker_vert_x_worker_thread_in_use=None, persistence_select_time_series=None, jvm_mem_pools_metaspace_committed=None, vertx_eventbus_messages_delivered=None, vertx_http_clients_iam_patch_requests=None, vertx_eventbus_messages_received_remote=None, vertx_http_clients_iam_responses_4xx=None, vertx_pools_worker_vert_x_worker_thread_pool_ratio=None, vertx_http_clients_iam_trace_requests=None, vertx_pools_worker_vert_x_worker_thread_max_pool_size=None, vertx_pools_worker_vert_x_internal_blocking_usage=None, persistence_select_check_if_exists=None, vertx_eventbus_messages_received=None, jvm_gc_ps_mark_sweep_count=None, jvm_mem_pools_ps_survivor_space_max=None, persistent_store_ds_pool_idle_connections=None, vertx_http_clients_iam_put_requests=None):
        """
        Metrics - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'vertx_http_servers_delete_requests': 'MetricTimer',
            'jvm_mem_pools_ps_survivor_space_init': 'MetricGauge',
            'vertx_pools_worker_vert_x_worker_thread_queue_size': 'MetricCounter',
            'vertx_http_servers_options_requests': 'MetricTimer',
            'jvm_mem_non_heap_max': 'MetricGauge',
            'jvm_mem_heap_used': 'MetricGauge',
            'jvm_mem_total_max': 'MetricGauge',
            'persistence_insert_account': 'MetricTimer',
            'vertx_http_servers_bytes_read': 'MetricHistogram',
            'vertx_http_clients_iam_bytes_written': 'MetricHistogram',
            'vertx_http_clients_iam_options_requests': 'MetricTimer',
            'vertx_http_clients_iam_requests': 'MetricTimer',
            'persistent_store_ds_pool_usage': 'MetricHistogram',
            'vertx_pools_worker_vert_x_internal_blocking_pool_ratio': 'MetricGauge',
            'persistence_insert_active_devices': 'MetricTimer',
            'jvm_mem_total_init': 'MetricGauge',
            'jvm_mem_pools_ps_old_gen_committed': 'MetricGauge',
            'vertx_timers': 'MetricCounter',
            'vertx_eventbus_messages_sent': 'MetricMeter',
            'persistence_select_service_update_log': 'MetricTimer',
            'persistence_select_accounts_statistics_with_accounts': 'MetricTimer',
            'http_handler_activedevices_in_imports_timer': 'MetricTimer',
            'persistence_select_healthcheck': 'MetricTimer',
            'vertx_http_clients_iam_bytes_read': 'MetricHistogram',
            'persistence_select_initial_accounts': 'MetricTimer',
            'vertx_eventbus_handlers': 'MetricCounter',
            'vertx_http_servers_exceptions': 'MetricCounter',
            'vertx_eventbus_messages_reply_failures': 'MetricMeter',
            'vertx_http_clients_iam_head_requests': 'MetricTimer',
            'jvm_mem_pools_ps_old_gen_max': 'MetricGauge',
            'persistence_update_update_account_upgrade_time': 'MetricTimer',
            'jvm_mem_pools_compressed_class_space_init': 'MetricGauge',
            'jvm_mem_pools_code_cache_usage': 'MetricGauge',
            'vertx_verticles': 'MetricCounter',
            'vertx_http_servers_responses_2xx': 'MetricMeter',
            'persistence_insert_import_log': 'MetricTimer',
            'vertx_http_servers_patch_requests': 'MetricTimer',
            'http_handler_service_update_log_timer': 'MetricTimer',
            'jvm_mem_pools_metaspace_init': 'MetricGauge',
            'jvm_gc_ps_mark_sweep_time': 'MetricGauge',
            'http_handler_time_series_timer': 'MetricTimer',
            'vertx_http_servers_connections': 'MetricTimer',
            'vertx_eventbus_messages_sent_local': 'MetricMeter',
            'vertx_http_clients_iam_other_requests': 'MetricTimer',
            'vertx_http_clients_iam_responses_5xx': 'MetricMeter',
            'jvm_mem_pools_ps_eden_space_max': 'MetricGauge',
            'vertx_eventbus_messages_delivered_remote': 'MetricMeter',
            'vertx_http_clients_iam_connections_pool_ratio': 'MetricGauge',
            'persistent_store_ds_pool_connection_timeout_rate': 'MetricMeter',
            'jvm_mem_pools_ps_survivor_space_usage': 'MetricGauge',
            'jvm_mem_total_committed': 'MetricGauge',
            'jvm_mem_non_heap_used': 'MetricGauge',
            'persistent_store_ds_pool_wait': 'MetricTimer',
            'vertx_worker_pool_size': 'MetricGauge',
            'vertx_pools_worker_vert_x_internal_blocking_in_use': 'MetricCounter',
            'vertx_eventbus_messages_published': 'MetricMeter',
            'vertx_http_servers_get_requests': 'MetricTimer',
            'vertx_http_clients_iam_open_netsockets': 'MetricCounter',
            'jvm_mem_non_heap_init': 'MetricGauge',
            'vertx_http_clients_iam_delete_requests': 'MetricTimer',
            'jvm_mem_pools_ps_eden_space_used': 'MetricGauge',
            'http_handler_metrics_handler_timer': 'MetricTimer',
            'persistence_select_import_log_active_devices': 'MetricTimer',
            'http_handler_activedevices_timer': 'MetricTimer',
            'vertx_http_clients_iam_open_connections': 'list[MetricHostCounter]',
            'jvm_mem_pools_ps_survivor_space_used': 'MetricGauge',
            'vertx_http_clients_iam_responses_1xx': 'MetricMeter',
            'persistence_insert_dlq': 'MetricTimer',
            'vertx_eventbus_messages_published_remote': 'MetricMeter',
            'jvm_mem_pools_ps_old_gen_init': 'MetricGauge',
            'vertx_http_clients_iam_connections': 'MetricTimer',
            'vertx_eventbus_messages_pending': 'MetricCounter',
            'vertx_http_servers_connect_requests': 'MetricTimer',
            'vertx_pools_worker_vert_x_internal_blocking_queue_size': 'MetricCounter',
            'http_handler_build_info_timer': 'MetricTimer',
            'jvm_mem_pools_ps_eden_space_usage': 'MetricGauge',
            'vertx_eventbus_messages_published_local': 'MetricMeter',
            'persistence_select_accounts_statistics_all': 'MetricTimer',
            'persistence_select_accounts_statistics_with_account': 'MetricTimer',
            'jvm_gc_ps_scavenge_time': 'MetricGauge',
            'vertx_http_clients_iam_exceptions': 'MetricCounter',
            'jvm_mem_pools_ps_old_gen_usage': 'MetricGauge',
            'vertx_http_servers_post_requests': 'MetricTimer',
            'jvm_mem_pools_ps_old_gen_used_after_gc': 'MetricGauge',
            'vertx_eventbus_messages_sent_remote': 'MetricMeter',
            'persistence_select_accounts': 'MetricTimer',
            'vertx_eventbus_messages_pending_remote': 'MetricCounter',
            'vertx_eventbus_messages_received_local': 'MetricMeter',
            'jvm_mem_pools_code_cache_max': 'MetricGauge',
            'vertx_pools_worker_vert_x_internal_blocking_max_pool_size': 'MetricGauge',
            'persistence_operation_store': 'MetricTimer',
            'http_handler_health_check_timer': 'MetricTimer',
            'vertx_http_clients_iam_connect_requests': 'MetricTimer',
            'vertx_http_servers_trace_requests': 'MetricTimer',
            'jvm_mem_non_heap_usage': 'MetricGauge',
            'vertx_http_servers_put_requests': 'MetricTimer',
            'jvm_mem_total_used': 'MetricGauge',
            'jvm_mem_pools_code_cache_committed': 'MetricGauge',
            'http_handler_account_stats_without_account': 'MetricTimer',
            'vertx_eventbus_messages_delivered_local': 'MetricMeter',
            'jvm_mem_pools_ps_eden_space_used_after_gc': 'MetricGauge',
            'jvm_mem_pools_compressed_class_space_used': 'MetricGauge',
            'vertx_pools_worker_vert_x_worker_thread_queue_delay': 'MetricTimer',
            'vertx_pools_worker_vert_x_internal_blocking_queue_delay': 'MetricTimer',
            'http_handler_account_stats_with_account': 'MetricTimer',
            'jvm_mem_pools_compressed_class_space_max': 'MetricGauge',
            'http_handler_account_list_timer': 'MetricTimer',
            'persistent_store_ds_pool_total_connections': 'MetricGauge',
            'jvm_mem_pools_ps_survivor_space_committed': 'MetricGauge',
            'vertx_http_servers_responses_5xx': 'MetricMeter',
            'jvm_mem_pools_code_cache_init': 'MetricGauge',
            'http_handler_report_json': 'MetricTimer',
            'vertx_http_servers_responses_4xx': 'MetricMeter',
            'vertx_pools_worker_vert_x_worker_thread_usage': 'MetricTimer',
            'jvm_mem_heap_init': 'MetricGauge',
            'jvm_mem_heap_max': 'MetricGauge',
            'vertx_http_servers_responses_1xx': 'MetricMeter',
            'vertx_http_clients_iam_post_requests': 'MetricTimer',
            'vertx_http_servers_open_websockets': 'MetricCounter',
            'vertx_http_servers_other_requests': 'MetricTimer',
            'http_handler_report_activedevices_timer': 'MetricTimer',
            'jvm_mem_heap_usage': 'MetricGauge',
            'jvm_mem_non_heap_committed': 'MetricGauge',
            'jvm_mem_pools_compressed_class_space_usage': 'MetricGauge',
            'persistent_store_ds_pool_connection_creation': 'MetricHistogram',
            'vertx_http_clients_iam_open_websockets': 'MetricCounter',
            'persistence_select_import_log': 'MetricTimer',
            'persistence_select_accounts_statistics_with_accounts_and_starttime': 'MetricTimer',
            'persistence_operation_dlq': 'MetricTimer',
            'jvm_gc_ps_scavenge_count': 'MetricGauge',
            'vertx_http_clients_iam_connections_max_pool_size': 'MetricGauge',
            'vertx_eventbus_messages_bytes_written': 'MetricMeter',
            'jvm_mem_pools_compressed_class_space_committed': 'MetricGauge',
            'vertx_verticles_com_mbed_billing_server_apiserver_http_http_server': 'MetricCounter',
            'jvm_mem_pools_code_cache_used': 'MetricGauge',
            'http_handler_import_log_timer': 'MetricTimer',
            'vertx_eventbus_messages_pending_local': 'MetricCounter',
            'vertx_http_servers_bytes_written': 'MetricHistogram',
            'vertx_eventbus_messages_bytes_read': 'MetricMeter',
            'vertx_http_servers_head_requests': 'MetricTimer',
            'jvm_mem_pools_ps_survivor_space_used_after_gc': 'MetricGauge',
            'persistent_store_ds_pool_active_connections': 'MetricGauge',
            'persistence_connection_connect': 'MetricTimer',
            'jvm_mem_pools_ps_eden_space_init': 'MetricGauge',
            'vertx_http_clients_iam_responses_2xx': 'MetricMeter',
            'persistence_insert_account_statistics': 'MetricTimer',
            'jvm_mem_pools_metaspace_used': 'MetricGauge',
            'jvm_mem_pools_metaspace_max': 'MetricGauge',
            'http_handler_report_zip': 'MetricTimer',
            'vertx_event_loop_size': 'MetricGauge',
            'vertx_http_servers_open_connections': 'list[MetricHostCounter]',
            'vertx_http_clients_iam_responses_3xx': 'MetricMeter',
            'jvm_mem_pools_ps_eden_space_committed': 'MetricGauge',
            'vertx_http_servers_responses_3xx': 'MetricMeter',
            'vertx_http_clients_iam_get_requests': 'MetricTimer',
            'jvm_mem_heap_committed': 'MetricGauge',
            'vertx_http_servers_open_netsockets': 'MetricCounter',
            'vertx_http_servers_requests': 'MetricTimer',
            'persistent_store_ds_pool_pending_connections': 'MetricGauge',
            'jvm_mem_pools_ps_old_gen_used': 'MetricGauge',
            'jvm_mem_pools_metaspace_usage': 'MetricGauge',
            'vertx_pools_worker_vert_x_worker_thread_in_use': 'MetricCounter',
            'persistence_select_time_series': 'MetricTimer',
            'jvm_mem_pools_metaspace_committed': 'MetricGauge',
            'vertx_eventbus_messages_delivered': 'MetricMeter',
            'vertx_http_clients_iam_patch_requests': 'MetricTimer',
            'vertx_eventbus_messages_received_remote': 'MetricMeter',
            'vertx_http_clients_iam_responses_4xx': 'MetricMeter',
            'vertx_pools_worker_vert_x_worker_thread_pool_ratio': 'MetricGauge',
            'vertx_http_clients_iam_trace_requests': 'MetricTimer',
            'vertx_pools_worker_vert_x_worker_thread_max_pool_size': 'MetricGauge',
            'vertx_pools_worker_vert_x_internal_blocking_usage': 'MetricTimer',
            'persistence_select_check_if_exists': 'MetricTimer',
            'vertx_eventbus_messages_received': 'MetricMeter',
            'jvm_gc_ps_mark_sweep_count': 'MetricGauge',
            'jvm_mem_pools_ps_survivor_space_max': 'MetricGauge',
            'persistent_store_ds_pool_idle_connections': 'MetricGauge',
            'vertx_http_clients_iam_put_requests': 'MetricTimer'
        }

        self.attribute_map = {
            'vertx_http_servers_delete_requests': 'vertx.http.servers.delete-requests',
            'jvm_mem_pools_ps_survivor_space_init': 'jvm.mem.pools.PS-Survivor-Space.init',
            'vertx_pools_worker_vert_x_worker_thread_queue_size': 'vertx.pools.worker.vert.x-worker-thread.queue-size',
            'vertx_http_servers_options_requests': 'vertx.http.servers.options-requests',
            'jvm_mem_non_heap_max': 'jvm.mem.non-heap.max',
            'jvm_mem_heap_used': 'jvm.mem.heap.used',
            'jvm_mem_total_max': 'jvm.mem.total.max',
            'persistence_insert_account': 'persistence.insert.account',
            'vertx_http_servers_bytes_read': 'vertx.http.servers.bytes-read',
            'vertx_http_clients_iam_bytes_written': 'vertx.http.clients.iam.bytes-written',
            'vertx_http_clients_iam_options_requests': 'vertx.http.clients.iam.options-requests',
            'vertx_http_clients_iam_requests': 'vertx.http.clients.iam.requests',
            'persistent_store_ds_pool_usage': 'persistent-store-ds.pool.Usage',
            'vertx_pools_worker_vert_x_internal_blocking_pool_ratio': 'vertx.pools.worker.vert.x-internal-blocking.pool-ratio',
            'persistence_insert_active_devices': 'persistence.insert.active-devices',
            'jvm_mem_total_init': 'jvm.mem.total.init',
            'jvm_mem_pools_ps_old_gen_committed': 'jvm.mem.pools.PS-Old-Gen.committed',
            'vertx_timers': 'vertx.timers',
            'vertx_eventbus_messages_sent': 'vertx.eventbus.messages.sent',
            'persistence_select_service_update_log': 'persistence.select.service-update-log',
            'persistence_select_accounts_statistics_with_accounts': 'persistence.select.accounts-statistics-with-accounts',
            'http_handler_activedevices_in_imports_timer': 'http.handler.activedevices-in-imports.timer',
            'persistence_select_healthcheck': 'persistence.select.healthcheck',
            'vertx_http_clients_iam_bytes_read': 'vertx.http.clients.iam.bytes-read',
            'persistence_select_initial_accounts': 'persistence.select.initial-accounts',
            'vertx_eventbus_handlers': 'vertx.eventbus.handlers',
            'vertx_http_servers_exceptions': 'vertx.http.servers.exceptions',
            'vertx_eventbus_messages_reply_failures': 'vertx.eventbus.messages.reply-failures',
            'vertx_http_clients_iam_head_requests': 'vertx.http.clients.iam.head-requests',
            'jvm_mem_pools_ps_old_gen_max': 'jvm.mem.pools.PS-Old-Gen.max',
            'persistence_update_update_account_upgrade_time': 'persistence.update.update-account-upgrade-time',
            'jvm_mem_pools_compressed_class_space_init': 'jvm.mem.pools.Compressed-Class-Space.init',
            'jvm_mem_pools_code_cache_usage': 'jvm.mem.pools.Code-Cache.usage',
            'vertx_verticles': 'vertx.verticles',
            'vertx_http_servers_responses_2xx': 'vertx.http.servers.responses-2xx',
            'persistence_insert_import_log': 'persistence.insert.import-log',
            'vertx_http_servers_patch_requests': 'vertx.http.servers.patch-requests',
            'http_handler_service_update_log_timer': 'http.handler.service-update-log.timer',
            'jvm_mem_pools_metaspace_init': 'jvm.mem.pools.Metaspace.init',
            'jvm_gc_ps_mark_sweep_time': 'jvm.gc.PS-MarkSweep.time',
            'http_handler_time_series_timer': 'http.handler.time-series.timer',
            'vertx_http_servers_connections': 'vertx.http.servers.connections',
            'vertx_eventbus_messages_sent_local': 'vertx.eventbus.messages.sent-local',
            'vertx_http_clients_iam_other_requests': 'vertx.http.clients.iam.other-requests',
            'vertx_http_clients_iam_responses_5xx': 'vertx.http.clients.iam.responses-5xx',
            'jvm_mem_pools_ps_eden_space_max': 'jvm.mem.pools.PS-Eden-Space.max',
            'vertx_eventbus_messages_delivered_remote': 'vertx.eventbus.messages.delivered-remote',
            'vertx_http_clients_iam_connections_pool_ratio': 'vertx.http.clients.iam.connections.pool-ratio',
            'persistent_store_ds_pool_connection_timeout_rate': 'persistent-store-ds.pool.ConnectionTimeoutRate',
            'jvm_mem_pools_ps_survivor_space_usage': 'jvm.mem.pools.PS-Survivor-Space.usage',
            'jvm_mem_total_committed': 'jvm.mem.total.committed',
            'jvm_mem_non_heap_used': 'jvm.mem.non-heap.used',
            'persistent_store_ds_pool_wait': 'persistent-store-ds.pool.Wait',
            'vertx_worker_pool_size': 'vertx.worker-pool-size',
            'vertx_pools_worker_vert_x_internal_blocking_in_use': 'vertx.pools.worker.vert.x-internal-blocking.in-use',
            'vertx_eventbus_messages_published': 'vertx.eventbus.messages.published',
            'vertx_http_servers_get_requests': 'vertx.http.servers.get-requests',
            'vertx_http_clients_iam_open_netsockets': 'vertx.http.clients.iam.open-netsockets',
            'jvm_mem_non_heap_init': 'jvm.mem.non-heap.init',
            'vertx_http_clients_iam_delete_requests': 'vertx.http.clients.iam.delete-requests',
            'jvm_mem_pools_ps_eden_space_used': 'jvm.mem.pools.PS-Eden-Space.used',
            'http_handler_metrics_handler_timer': 'http.handler.metrics-handler.timer',
            'persistence_select_import_log_active_devices': 'persistence.select.import-log-active-devices',
            'http_handler_activedevices_timer': 'http.handler.activedevices.timer',
            'vertx_http_clients_iam_open_connections': 'vertx.http.clients.iam.open-connections',
            'jvm_mem_pools_ps_survivor_space_used': 'jvm.mem.pools.PS-Survivor-Space.used',
            'vertx_http_clients_iam_responses_1xx': 'vertx.http.clients.iam.responses-1xx',
            'persistence_insert_dlq': 'persistence.insert.dlq',
            'vertx_eventbus_messages_published_remote': 'vertx.eventbus.messages.published-remote',
            'jvm_mem_pools_ps_old_gen_init': 'jvm.mem.pools.PS-Old-Gen.init',
            'vertx_http_clients_iam_connections': 'vertx.http.clients.iam.connections',
            'vertx_eventbus_messages_pending': 'vertx.eventbus.messages.pending',
            'vertx_http_servers_connect_requests': 'vertx.http.servers.connect-requests',
            'vertx_pools_worker_vert_x_internal_blocking_queue_size': 'vertx.pools.worker.vert.x-internal-blocking.queue-size',
            'http_handler_build_info_timer': 'http.handler.build-info.timer',
            'jvm_mem_pools_ps_eden_space_usage': 'jvm.mem.pools.PS-Eden-Space.usage',
            'vertx_eventbus_messages_published_local': 'vertx.eventbus.messages.published-local',
            'persistence_select_accounts_statistics_all': 'persistence.select.accounts-statistics-all',
            'persistence_select_accounts_statistics_with_account': 'persistence.select.accounts-statistics-with-account',
            'jvm_gc_ps_scavenge_time': 'jvm.gc.PS-Scavenge.time',
            'vertx_http_clients_iam_exceptions': 'vertx.http.clients.iam.exceptions',
            'jvm_mem_pools_ps_old_gen_usage': 'jvm.mem.pools.PS-Old-Gen.usage',
            'vertx_http_servers_post_requests': 'vertx.http.servers.post-requests',
            'jvm_mem_pools_ps_old_gen_used_after_gc': 'jvm.mem.pools.PS-Old-Gen.used-after-gc',
            'vertx_eventbus_messages_sent_remote': 'vertx.eventbus.messages.sent-remote',
            'persistence_select_accounts': 'persistence.select.accounts',
            'vertx_eventbus_messages_pending_remote': 'vertx.eventbus.messages.pending-remote',
            'vertx_eventbus_messages_received_local': 'vertx.eventbus.messages.received-local',
            'jvm_mem_pools_code_cache_max': 'jvm.mem.pools.Code-Cache.max',
            'vertx_pools_worker_vert_x_internal_blocking_max_pool_size': 'vertx.pools.worker.vert.x-internal-blocking.max-pool-size',
            'persistence_operation_store': 'persistence.operation.store',
            'http_handler_health_check_timer': 'http.handler.health-check.timer',
            'vertx_http_clients_iam_connect_requests': 'vertx.http.clients.iam.connect-requests',
            'vertx_http_servers_trace_requests': 'vertx.http.servers.trace-requests',
            'jvm_mem_non_heap_usage': 'jvm.mem.non-heap.usage',
            'vertx_http_servers_put_requests': 'vertx.http.servers.put-requests',
            'jvm_mem_total_used': 'jvm.mem.total.used',
            'jvm_mem_pools_code_cache_committed': 'jvm.mem.pools.Code-Cache.committed',
            'http_handler_account_stats_without_account': 'http.handler.account-stats.without-account',
            'vertx_eventbus_messages_delivered_local': 'vertx.eventbus.messages.delivered-local',
            'jvm_mem_pools_ps_eden_space_used_after_gc': 'jvm.mem.pools.PS-Eden-Space.used-after-gc',
            'jvm_mem_pools_compressed_class_space_used': 'jvm.mem.pools.Compressed-Class-Space.used',
            'vertx_pools_worker_vert_x_worker_thread_queue_delay': 'vertx.pools.worker.vert.x-worker-thread.queue-delay',
            'vertx_pools_worker_vert_x_internal_blocking_queue_delay': 'vertx.pools.worker.vert.x-internal-blocking.queue-delay',
            'http_handler_account_stats_with_account': 'http.handler.account-stats.with-account',
            'jvm_mem_pools_compressed_class_space_max': 'jvm.mem.pools.Compressed-Class-Space.max',
            'http_handler_account_list_timer': 'http.handler.account-list.timer',
            'persistent_store_ds_pool_total_connections': 'persistent-store-ds.pool.TotalConnections',
            'jvm_mem_pools_ps_survivor_space_committed': 'jvm.mem.pools.PS-Survivor-Space.committed',
            'vertx_http_servers_responses_5xx': 'vertx.http.servers.responses-5xx',
            'jvm_mem_pools_code_cache_init': 'jvm.mem.pools.Code-Cache.init',
            'http_handler_report_json': 'http.handler.report.json',
            'vertx_http_servers_responses_4xx': 'vertx.http.servers.responses-4xx',
            'vertx_pools_worker_vert_x_worker_thread_usage': 'vertx.pools.worker.vert.x-worker-thread.usage',
            'jvm_mem_heap_init': 'jvm.mem.heap.init',
            'jvm_mem_heap_max': 'jvm.mem.heap.max',
            'vertx_http_servers_responses_1xx': 'vertx.http.servers.responses-1xx',
            'vertx_http_clients_iam_post_requests': 'vertx.http.clients.iam.post-requests',
            'vertx_http_servers_open_websockets': 'vertx.http.servers.open-websockets',
            'vertx_http_servers_other_requests': 'vertx.http.servers.other-requests',
            'http_handler_report_activedevices_timer': 'http.handler.report-activedevices.timer',
            'jvm_mem_heap_usage': 'jvm.mem.heap.usage',
            'jvm_mem_non_heap_committed': 'jvm.mem.non-heap.committed',
            'jvm_mem_pools_compressed_class_space_usage': 'jvm.mem.pools.Compressed-Class-Space.usage',
            'persistent_store_ds_pool_connection_creation': 'persistent-store-ds.pool.ConnectionCreation',
            'vertx_http_clients_iam_open_websockets': 'vertx.http.clients.iam.open-websockets',
            'persistence_select_import_log': 'persistence.select.import-log',
            'persistence_select_accounts_statistics_with_accounts_and_starttime': 'persistence.select.accounts-statistics-with-accounts-and-starttime',
            'persistence_operation_dlq': 'persistence.operation.dlq',
            'jvm_gc_ps_scavenge_count': 'jvm.gc.PS-Scavenge.count',
            'vertx_http_clients_iam_connections_max_pool_size': 'vertx.http.clients.iam.connections.max-pool-size',
            'vertx_eventbus_messages_bytes_written': 'vertx.eventbus.messages.bytes-written',
            'jvm_mem_pools_compressed_class_space_committed': 'jvm.mem.pools.Compressed-Class-Space.committed',
            'vertx_verticles_com_mbed_billing_server_apiserver_http_http_server': 'vertx.verticles.com.mbed.billing.server.apiserver.http.HttpServer',
            'jvm_mem_pools_code_cache_used': 'jvm.mem.pools.Code-Cache.used',
            'http_handler_import_log_timer': 'http.handler.import-log.timer',
            'vertx_eventbus_messages_pending_local': 'vertx.eventbus.messages.pending-local',
            'vertx_http_servers_bytes_written': 'vertx.http.servers.bytes-written',
            'vertx_eventbus_messages_bytes_read': 'vertx.eventbus.messages.bytes-read',
            'vertx_http_servers_head_requests': 'vertx.http.servers.head-requests',
            'jvm_mem_pools_ps_survivor_space_used_after_gc': 'jvm.mem.pools.PS-Survivor-Space.used-after-gc',
            'persistent_store_ds_pool_active_connections': 'persistent-store-ds.pool.ActiveConnections',
            'persistence_connection_connect': 'persistence.connection.connect',
            'jvm_mem_pools_ps_eden_space_init': 'jvm.mem.pools.PS-Eden-Space.init',
            'vertx_http_clients_iam_responses_2xx': 'vertx.http.clients.iam.responses-2xx',
            'persistence_insert_account_statistics': 'persistence.insert.account-statistics',
            'jvm_mem_pools_metaspace_used': 'jvm.mem.pools.Metaspace.used',
            'jvm_mem_pools_metaspace_max': 'jvm.mem.pools.Metaspace.max',
            'http_handler_report_zip': 'http.handler.report.zip',
            'vertx_event_loop_size': 'vertx.event-loop-size',
            'vertx_http_servers_open_connections': 'vertx.http.servers.open-connections',
            'vertx_http_clients_iam_responses_3xx': 'vertx.http.clients.iam.responses-3xx',
            'jvm_mem_pools_ps_eden_space_committed': 'jvm.mem.pools.PS-Eden-Space.committed',
            'vertx_http_servers_responses_3xx': 'vertx.http.servers.responses-3xx',
            'vertx_http_clients_iam_get_requests': 'vertx.http.clients.iam.get-requests',
            'jvm_mem_heap_committed': 'jvm.mem.heap.committed',
            'vertx_http_servers_open_netsockets': 'vertx.http.servers.open-netsockets',
            'vertx_http_servers_requests': 'vertx.http.servers.requests',
            'persistent_store_ds_pool_pending_connections': 'persistent-store-ds.pool.PendingConnections',
            'jvm_mem_pools_ps_old_gen_used': 'jvm.mem.pools.PS-Old-Gen.used',
            'jvm_mem_pools_metaspace_usage': 'jvm.mem.pools.Metaspace.usage',
            'vertx_pools_worker_vert_x_worker_thread_in_use': 'vertx.pools.worker.vert.x-worker-thread.in-use',
            'persistence_select_time_series': 'persistence.select.time-series',
            'jvm_mem_pools_metaspace_committed': 'jvm.mem.pools.Metaspace.committed',
            'vertx_eventbus_messages_delivered': 'vertx.eventbus.messages.delivered',
            'vertx_http_clients_iam_patch_requests': 'vertx.http.clients.iam.patch-requests',
            'vertx_eventbus_messages_received_remote': 'vertx.eventbus.messages.received-remote',
            'vertx_http_clients_iam_responses_4xx': 'vertx.http.clients.iam.responses-4xx',
            'vertx_pools_worker_vert_x_worker_thread_pool_ratio': 'vertx.pools.worker.vert.x-worker-thread.pool-ratio',
            'vertx_http_clients_iam_trace_requests': 'vertx.http.clients.iam.trace-requests',
            'vertx_pools_worker_vert_x_worker_thread_max_pool_size': 'vertx.pools.worker.vert.x-worker-thread.max-pool-size',
            'vertx_pools_worker_vert_x_internal_blocking_usage': 'vertx.pools.worker.vert.x-internal-blocking.usage',
            'persistence_select_check_if_exists': 'persistence.select.check-if-exists',
            'vertx_eventbus_messages_received': 'vertx.eventbus.messages.received',
            'jvm_gc_ps_mark_sweep_count': 'jvm.gc.PS-MarkSweep.count',
            'jvm_mem_pools_ps_survivor_space_max': 'jvm.mem.pools.PS-Survivor-Space.max',
            'persistent_store_ds_pool_idle_connections': 'persistent-store-ds.pool.IdleConnections',
            'vertx_http_clients_iam_put_requests': 'vertx.http.clients.iam.put-requests'
        }

        self._vertx_http_servers_delete_requests = vertx_http_servers_delete_requests
        self._jvm_mem_pools_ps_survivor_space_init = jvm_mem_pools_ps_survivor_space_init
        self._vertx_pools_worker_vert_x_worker_thread_queue_size = vertx_pools_worker_vert_x_worker_thread_queue_size
        self._vertx_http_servers_options_requests = vertx_http_servers_options_requests
        self._jvm_mem_non_heap_max = jvm_mem_non_heap_max
        self._jvm_mem_heap_used = jvm_mem_heap_used
        self._jvm_mem_total_max = jvm_mem_total_max
        self._persistence_insert_account = persistence_insert_account
        self._vertx_http_servers_bytes_read = vertx_http_servers_bytes_read
        self._vertx_http_clients_iam_bytes_written = vertx_http_clients_iam_bytes_written
        self._vertx_http_clients_iam_options_requests = vertx_http_clients_iam_options_requests
        self._vertx_http_clients_iam_requests = vertx_http_clients_iam_requests
        self._persistent_store_ds_pool_usage = persistent_store_ds_pool_usage
        self._vertx_pools_worker_vert_x_internal_blocking_pool_ratio = vertx_pools_worker_vert_x_internal_blocking_pool_ratio
        self._persistence_insert_active_devices = persistence_insert_active_devices
        self._jvm_mem_total_init = jvm_mem_total_init
        self._jvm_mem_pools_ps_old_gen_committed = jvm_mem_pools_ps_old_gen_committed
        self._vertx_timers = vertx_timers
        self._vertx_eventbus_messages_sent = vertx_eventbus_messages_sent
        self._persistence_select_service_update_log = persistence_select_service_update_log
        self._persistence_select_accounts_statistics_with_accounts = persistence_select_accounts_statistics_with_accounts
        self._http_handler_activedevices_in_imports_timer = http_handler_activedevices_in_imports_timer
        self._persistence_select_healthcheck = persistence_select_healthcheck
        self._vertx_http_clients_iam_bytes_read = vertx_http_clients_iam_bytes_read
        self._persistence_select_initial_accounts = persistence_select_initial_accounts
        self._vertx_eventbus_handlers = vertx_eventbus_handlers
        self._vertx_http_servers_exceptions = vertx_http_servers_exceptions
        self._vertx_eventbus_messages_reply_failures = vertx_eventbus_messages_reply_failures
        self._vertx_http_clients_iam_head_requests = vertx_http_clients_iam_head_requests
        self._jvm_mem_pools_ps_old_gen_max = jvm_mem_pools_ps_old_gen_max
        self._persistence_update_update_account_upgrade_time = persistence_update_update_account_upgrade_time
        self._jvm_mem_pools_compressed_class_space_init = jvm_mem_pools_compressed_class_space_init
        self._jvm_mem_pools_code_cache_usage = jvm_mem_pools_code_cache_usage
        self._vertx_verticles = vertx_verticles
        self._vertx_http_servers_responses_2xx = vertx_http_servers_responses_2xx
        self._persistence_insert_import_log = persistence_insert_import_log
        self._vertx_http_servers_patch_requests = vertx_http_servers_patch_requests
        self._http_handler_service_update_log_timer = http_handler_service_update_log_timer
        self._jvm_mem_pools_metaspace_init = jvm_mem_pools_metaspace_init
        self._jvm_gc_ps_mark_sweep_time = jvm_gc_ps_mark_sweep_time
        self._http_handler_time_series_timer = http_handler_time_series_timer
        self._vertx_http_servers_connections = vertx_http_servers_connections
        self._vertx_eventbus_messages_sent_local = vertx_eventbus_messages_sent_local
        self._vertx_http_clients_iam_other_requests = vertx_http_clients_iam_other_requests
        self._vertx_http_clients_iam_responses_5xx = vertx_http_clients_iam_responses_5xx
        self._jvm_mem_pools_ps_eden_space_max = jvm_mem_pools_ps_eden_space_max
        self._vertx_eventbus_messages_delivered_remote = vertx_eventbus_messages_delivered_remote
        self._vertx_http_clients_iam_connections_pool_ratio = vertx_http_clients_iam_connections_pool_ratio
        self._persistent_store_ds_pool_connection_timeout_rate = persistent_store_ds_pool_connection_timeout_rate
        self._jvm_mem_pools_ps_survivor_space_usage = jvm_mem_pools_ps_survivor_space_usage
        self._jvm_mem_total_committed = jvm_mem_total_committed
        self._jvm_mem_non_heap_used = jvm_mem_non_heap_used
        self._persistent_store_ds_pool_wait = persistent_store_ds_pool_wait
        self._vertx_worker_pool_size = vertx_worker_pool_size
        self._vertx_pools_worker_vert_x_internal_blocking_in_use = vertx_pools_worker_vert_x_internal_blocking_in_use
        self._vertx_eventbus_messages_published = vertx_eventbus_messages_published
        self._vertx_http_servers_get_requests = vertx_http_servers_get_requests
        self._vertx_http_clients_iam_open_netsockets = vertx_http_clients_iam_open_netsockets
        self._jvm_mem_non_heap_init = jvm_mem_non_heap_init
        self._vertx_http_clients_iam_delete_requests = vertx_http_clients_iam_delete_requests
        self._jvm_mem_pools_ps_eden_space_used = jvm_mem_pools_ps_eden_space_used
        self._http_handler_metrics_handler_timer = http_handler_metrics_handler_timer
        self._persistence_select_import_log_active_devices = persistence_select_import_log_active_devices
        self._http_handler_activedevices_timer = http_handler_activedevices_timer
        self._vertx_http_clients_iam_open_connections = vertx_http_clients_iam_open_connections
        self._jvm_mem_pools_ps_survivor_space_used = jvm_mem_pools_ps_survivor_space_used
        self._vertx_http_clients_iam_responses_1xx = vertx_http_clients_iam_responses_1xx
        self._persistence_insert_dlq = persistence_insert_dlq
        self._vertx_eventbus_messages_published_remote = vertx_eventbus_messages_published_remote
        self._jvm_mem_pools_ps_old_gen_init = jvm_mem_pools_ps_old_gen_init
        self._vertx_http_clients_iam_connections = vertx_http_clients_iam_connections
        self._vertx_eventbus_messages_pending = vertx_eventbus_messages_pending
        self._vertx_http_servers_connect_requests = vertx_http_servers_connect_requests
        self._vertx_pools_worker_vert_x_internal_blocking_queue_size = vertx_pools_worker_vert_x_internal_blocking_queue_size
        self._http_handler_build_info_timer = http_handler_build_info_timer
        self._jvm_mem_pools_ps_eden_space_usage = jvm_mem_pools_ps_eden_space_usage
        self._vertx_eventbus_messages_published_local = vertx_eventbus_messages_published_local
        self._persistence_select_accounts_statistics_all = persistence_select_accounts_statistics_all
        self._persistence_select_accounts_statistics_with_account = persistence_select_accounts_statistics_with_account
        self._jvm_gc_ps_scavenge_time = jvm_gc_ps_scavenge_time
        self._vertx_http_clients_iam_exceptions = vertx_http_clients_iam_exceptions
        self._jvm_mem_pools_ps_old_gen_usage = jvm_mem_pools_ps_old_gen_usage
        self._vertx_http_servers_post_requests = vertx_http_servers_post_requests
        self._jvm_mem_pools_ps_old_gen_used_after_gc = jvm_mem_pools_ps_old_gen_used_after_gc
        self._vertx_eventbus_messages_sent_remote = vertx_eventbus_messages_sent_remote
        self._persistence_select_accounts = persistence_select_accounts
        self._vertx_eventbus_messages_pending_remote = vertx_eventbus_messages_pending_remote
        self._vertx_eventbus_messages_received_local = vertx_eventbus_messages_received_local
        self._jvm_mem_pools_code_cache_max = jvm_mem_pools_code_cache_max
        self._vertx_pools_worker_vert_x_internal_blocking_max_pool_size = vertx_pools_worker_vert_x_internal_blocking_max_pool_size
        self._persistence_operation_store = persistence_operation_store
        self._http_handler_health_check_timer = http_handler_health_check_timer
        self._vertx_http_clients_iam_connect_requests = vertx_http_clients_iam_connect_requests
        self._vertx_http_servers_trace_requests = vertx_http_servers_trace_requests
        self._jvm_mem_non_heap_usage = jvm_mem_non_heap_usage
        self._vertx_http_servers_put_requests = vertx_http_servers_put_requests
        self._jvm_mem_total_used = jvm_mem_total_used
        self._jvm_mem_pools_code_cache_committed = jvm_mem_pools_code_cache_committed
        self._http_handler_account_stats_without_account = http_handler_account_stats_without_account
        self._vertx_eventbus_messages_delivered_local = vertx_eventbus_messages_delivered_local
        self._jvm_mem_pools_ps_eden_space_used_after_gc = jvm_mem_pools_ps_eden_space_used_after_gc
        self._jvm_mem_pools_compressed_class_space_used = jvm_mem_pools_compressed_class_space_used
        self._vertx_pools_worker_vert_x_worker_thread_queue_delay = vertx_pools_worker_vert_x_worker_thread_queue_delay
        self._vertx_pools_worker_vert_x_internal_blocking_queue_delay = vertx_pools_worker_vert_x_internal_blocking_queue_delay
        self._http_handler_account_stats_with_account = http_handler_account_stats_with_account
        self._jvm_mem_pools_compressed_class_space_max = jvm_mem_pools_compressed_class_space_max
        self._http_handler_account_list_timer = http_handler_account_list_timer
        self._persistent_store_ds_pool_total_connections = persistent_store_ds_pool_total_connections
        self._jvm_mem_pools_ps_survivor_space_committed = jvm_mem_pools_ps_survivor_space_committed
        self._vertx_http_servers_responses_5xx = vertx_http_servers_responses_5xx
        self._jvm_mem_pools_code_cache_init = jvm_mem_pools_code_cache_init
        self._http_handler_report_json = http_handler_report_json
        self._vertx_http_servers_responses_4xx = vertx_http_servers_responses_4xx
        self._vertx_pools_worker_vert_x_worker_thread_usage = vertx_pools_worker_vert_x_worker_thread_usage
        self._jvm_mem_heap_init = jvm_mem_heap_init
        self._jvm_mem_heap_max = jvm_mem_heap_max
        self._vertx_http_servers_responses_1xx = vertx_http_servers_responses_1xx
        self._vertx_http_clients_iam_post_requests = vertx_http_clients_iam_post_requests
        self._vertx_http_servers_open_websockets = vertx_http_servers_open_websockets
        self._vertx_http_servers_other_requests = vertx_http_servers_other_requests
        self._http_handler_report_activedevices_timer = http_handler_report_activedevices_timer
        self._jvm_mem_heap_usage = jvm_mem_heap_usage
        self._jvm_mem_non_heap_committed = jvm_mem_non_heap_committed
        self._jvm_mem_pools_compressed_class_space_usage = jvm_mem_pools_compressed_class_space_usage
        self._persistent_store_ds_pool_connection_creation = persistent_store_ds_pool_connection_creation
        self._vertx_http_clients_iam_open_websockets = vertx_http_clients_iam_open_websockets
        self._persistence_select_import_log = persistence_select_import_log
        self._persistence_select_accounts_statistics_with_accounts_and_starttime = persistence_select_accounts_statistics_with_accounts_and_starttime
        self._persistence_operation_dlq = persistence_operation_dlq
        self._jvm_gc_ps_scavenge_count = jvm_gc_ps_scavenge_count
        self._vertx_http_clients_iam_connections_max_pool_size = vertx_http_clients_iam_connections_max_pool_size
        self._vertx_eventbus_messages_bytes_written = vertx_eventbus_messages_bytes_written
        self._jvm_mem_pools_compressed_class_space_committed = jvm_mem_pools_compressed_class_space_committed
        self._vertx_verticles_com_mbed_billing_server_apiserver_http_http_server = vertx_verticles_com_mbed_billing_server_apiserver_http_http_server
        self._jvm_mem_pools_code_cache_used = jvm_mem_pools_code_cache_used
        self._http_handler_import_log_timer = http_handler_import_log_timer
        self._vertx_eventbus_messages_pending_local = vertx_eventbus_messages_pending_local
        self._vertx_http_servers_bytes_written = vertx_http_servers_bytes_written
        self._vertx_eventbus_messages_bytes_read = vertx_eventbus_messages_bytes_read
        self._vertx_http_servers_head_requests = vertx_http_servers_head_requests
        self._jvm_mem_pools_ps_survivor_space_used_after_gc = jvm_mem_pools_ps_survivor_space_used_after_gc
        self._persistent_store_ds_pool_active_connections = persistent_store_ds_pool_active_connections
        self._persistence_connection_connect = persistence_connection_connect
        self._jvm_mem_pools_ps_eden_space_init = jvm_mem_pools_ps_eden_space_init
        self._vertx_http_clients_iam_responses_2xx = vertx_http_clients_iam_responses_2xx
        self._persistence_insert_account_statistics = persistence_insert_account_statistics
        self._jvm_mem_pools_metaspace_used = jvm_mem_pools_metaspace_used
        self._jvm_mem_pools_metaspace_max = jvm_mem_pools_metaspace_max
        self._http_handler_report_zip = http_handler_report_zip
        self._vertx_event_loop_size = vertx_event_loop_size
        self._vertx_http_servers_open_connections = vertx_http_servers_open_connections
        self._vertx_http_clients_iam_responses_3xx = vertx_http_clients_iam_responses_3xx
        self._jvm_mem_pools_ps_eden_space_committed = jvm_mem_pools_ps_eden_space_committed
        self._vertx_http_servers_responses_3xx = vertx_http_servers_responses_3xx
        self._vertx_http_clients_iam_get_requests = vertx_http_clients_iam_get_requests
        self._jvm_mem_heap_committed = jvm_mem_heap_committed
        self._vertx_http_servers_open_netsockets = vertx_http_servers_open_netsockets
        self._vertx_http_servers_requests = vertx_http_servers_requests
        self._persistent_store_ds_pool_pending_connections = persistent_store_ds_pool_pending_connections
        self._jvm_mem_pools_ps_old_gen_used = jvm_mem_pools_ps_old_gen_used
        self._jvm_mem_pools_metaspace_usage = jvm_mem_pools_metaspace_usage
        self._vertx_pools_worker_vert_x_worker_thread_in_use = vertx_pools_worker_vert_x_worker_thread_in_use
        self._persistence_select_time_series = persistence_select_time_series
        self._jvm_mem_pools_metaspace_committed = jvm_mem_pools_metaspace_committed
        self._vertx_eventbus_messages_delivered = vertx_eventbus_messages_delivered
        self._vertx_http_clients_iam_patch_requests = vertx_http_clients_iam_patch_requests
        self._vertx_eventbus_messages_received_remote = vertx_eventbus_messages_received_remote
        self._vertx_http_clients_iam_responses_4xx = vertx_http_clients_iam_responses_4xx
        self._vertx_pools_worker_vert_x_worker_thread_pool_ratio = vertx_pools_worker_vert_x_worker_thread_pool_ratio
        self._vertx_http_clients_iam_trace_requests = vertx_http_clients_iam_trace_requests
        self._vertx_pools_worker_vert_x_worker_thread_max_pool_size = vertx_pools_worker_vert_x_worker_thread_max_pool_size
        self._vertx_pools_worker_vert_x_internal_blocking_usage = vertx_pools_worker_vert_x_internal_blocking_usage
        self._persistence_select_check_if_exists = persistence_select_check_if_exists
        self._vertx_eventbus_messages_received = vertx_eventbus_messages_received
        self._jvm_gc_ps_mark_sweep_count = jvm_gc_ps_mark_sweep_count
        self._jvm_mem_pools_ps_survivor_space_max = jvm_mem_pools_ps_survivor_space_max
        self._persistent_store_ds_pool_idle_connections = persistent_store_ds_pool_idle_connections
        self._vertx_http_clients_iam_put_requests = vertx_http_clients_iam_put_requests

    @property
    def vertx_http_servers_delete_requests(self):
        """
        Gets the vertx_http_servers_delete_requests of this Metrics.

        :return: The vertx_http_servers_delete_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_servers_delete_requests

    @vertx_http_servers_delete_requests.setter
    def vertx_http_servers_delete_requests(self, vertx_http_servers_delete_requests):
        """
        Sets the vertx_http_servers_delete_requests of this Metrics.

        :param vertx_http_servers_delete_requests: The vertx_http_servers_delete_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_servers_delete_requests is None:
            raise ValueError("Invalid value for `vertx_http_servers_delete_requests`, must not be `None`")

        self._vertx_http_servers_delete_requests = vertx_http_servers_delete_requests

    @property
    def jvm_mem_pools_ps_survivor_space_init(self):
        """
        Gets the jvm_mem_pools_ps_survivor_space_init of this Metrics.

        :return: The jvm_mem_pools_ps_survivor_space_init of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_survivor_space_init

    @jvm_mem_pools_ps_survivor_space_init.setter
    def jvm_mem_pools_ps_survivor_space_init(self, jvm_mem_pools_ps_survivor_space_init):
        """
        Sets the jvm_mem_pools_ps_survivor_space_init of this Metrics.

        :param jvm_mem_pools_ps_survivor_space_init: The jvm_mem_pools_ps_survivor_space_init of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_survivor_space_init is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_survivor_space_init`, must not be `None`")

        self._jvm_mem_pools_ps_survivor_space_init = jvm_mem_pools_ps_survivor_space_init

    @property
    def vertx_pools_worker_vert_x_worker_thread_queue_size(self):
        """
        Gets the vertx_pools_worker_vert_x_worker_thread_queue_size of this Metrics.

        :return: The vertx_pools_worker_vert_x_worker_thread_queue_size of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_pools_worker_vert_x_worker_thread_queue_size

    @vertx_pools_worker_vert_x_worker_thread_queue_size.setter
    def vertx_pools_worker_vert_x_worker_thread_queue_size(self, vertx_pools_worker_vert_x_worker_thread_queue_size):
        """
        Sets the vertx_pools_worker_vert_x_worker_thread_queue_size of this Metrics.

        :param vertx_pools_worker_vert_x_worker_thread_queue_size: The vertx_pools_worker_vert_x_worker_thread_queue_size of this Metrics.
        :type: MetricCounter
        """
        if vertx_pools_worker_vert_x_worker_thread_queue_size is None:
            raise ValueError("Invalid value for `vertx_pools_worker_vert_x_worker_thread_queue_size`, must not be `None`")

        self._vertx_pools_worker_vert_x_worker_thread_queue_size = vertx_pools_worker_vert_x_worker_thread_queue_size

    @property
    def vertx_http_servers_options_requests(self):
        """
        Gets the vertx_http_servers_options_requests of this Metrics.

        :return: The vertx_http_servers_options_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_servers_options_requests

    @vertx_http_servers_options_requests.setter
    def vertx_http_servers_options_requests(self, vertx_http_servers_options_requests):
        """
        Sets the vertx_http_servers_options_requests of this Metrics.

        :param vertx_http_servers_options_requests: The vertx_http_servers_options_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_servers_options_requests is None:
            raise ValueError("Invalid value for `vertx_http_servers_options_requests`, must not be `None`")

        self._vertx_http_servers_options_requests = vertx_http_servers_options_requests

    @property
    def jvm_mem_non_heap_max(self):
        """
        Gets the jvm_mem_non_heap_max of this Metrics.

        :return: The jvm_mem_non_heap_max of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_non_heap_max

    @jvm_mem_non_heap_max.setter
    def jvm_mem_non_heap_max(self, jvm_mem_non_heap_max):
        """
        Sets the jvm_mem_non_heap_max of this Metrics.

        :param jvm_mem_non_heap_max: The jvm_mem_non_heap_max of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_non_heap_max is None:
            raise ValueError("Invalid value for `jvm_mem_non_heap_max`, must not be `None`")

        self._jvm_mem_non_heap_max = jvm_mem_non_heap_max

    @property
    def jvm_mem_heap_used(self):
        """
        Gets the jvm_mem_heap_used of this Metrics.

        :return: The jvm_mem_heap_used of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_heap_used

    @jvm_mem_heap_used.setter
    def jvm_mem_heap_used(self, jvm_mem_heap_used):
        """
        Sets the jvm_mem_heap_used of this Metrics.

        :param jvm_mem_heap_used: The jvm_mem_heap_used of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_heap_used is None:
            raise ValueError("Invalid value for `jvm_mem_heap_used`, must not be `None`")

        self._jvm_mem_heap_used = jvm_mem_heap_used

    @property
    def jvm_mem_total_max(self):
        """
        Gets the jvm_mem_total_max of this Metrics.

        :return: The jvm_mem_total_max of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_total_max

    @jvm_mem_total_max.setter
    def jvm_mem_total_max(self, jvm_mem_total_max):
        """
        Sets the jvm_mem_total_max of this Metrics.

        :param jvm_mem_total_max: The jvm_mem_total_max of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_total_max is None:
            raise ValueError("Invalid value for `jvm_mem_total_max`, must not be `None`")

        self._jvm_mem_total_max = jvm_mem_total_max

    @property
    def persistence_insert_account(self):
        """
        Gets the persistence_insert_account of this Metrics.

        :return: The persistence_insert_account of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_insert_account

    @persistence_insert_account.setter
    def persistence_insert_account(self, persistence_insert_account):
        """
        Sets the persistence_insert_account of this Metrics.

        :param persistence_insert_account: The persistence_insert_account of this Metrics.
        :type: MetricTimer
        """
        if persistence_insert_account is None:
            raise ValueError("Invalid value for `persistence_insert_account`, must not be `None`")

        self._persistence_insert_account = persistence_insert_account

    @property
    def vertx_http_servers_bytes_read(self):
        """
        Gets the vertx_http_servers_bytes_read of this Metrics.

        :return: The vertx_http_servers_bytes_read of this Metrics.
        :rtype: MetricHistogram
        """
        return self._vertx_http_servers_bytes_read

    @vertx_http_servers_bytes_read.setter
    def vertx_http_servers_bytes_read(self, vertx_http_servers_bytes_read):
        """
        Sets the vertx_http_servers_bytes_read of this Metrics.

        :param vertx_http_servers_bytes_read: The vertx_http_servers_bytes_read of this Metrics.
        :type: MetricHistogram
        """
        if vertx_http_servers_bytes_read is None:
            raise ValueError("Invalid value for `vertx_http_servers_bytes_read`, must not be `None`")

        self._vertx_http_servers_bytes_read = vertx_http_servers_bytes_read

    @property
    def vertx_http_clients_iam_bytes_written(self):
        """
        Gets the vertx_http_clients_iam_bytes_written of this Metrics.

        :return: The vertx_http_clients_iam_bytes_written of this Metrics.
        :rtype: MetricHistogram
        """
        return self._vertx_http_clients_iam_bytes_written

    @vertx_http_clients_iam_bytes_written.setter
    def vertx_http_clients_iam_bytes_written(self, vertx_http_clients_iam_bytes_written):
        """
        Sets the vertx_http_clients_iam_bytes_written of this Metrics.

        :param vertx_http_clients_iam_bytes_written: The vertx_http_clients_iam_bytes_written of this Metrics.
        :type: MetricHistogram
        """
        if vertx_http_clients_iam_bytes_written is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_bytes_written`, must not be `None`")

        self._vertx_http_clients_iam_bytes_written = vertx_http_clients_iam_bytes_written

    @property
    def vertx_http_clients_iam_options_requests(self):
        """
        Gets the vertx_http_clients_iam_options_requests of this Metrics.

        :return: The vertx_http_clients_iam_options_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_clients_iam_options_requests

    @vertx_http_clients_iam_options_requests.setter
    def vertx_http_clients_iam_options_requests(self, vertx_http_clients_iam_options_requests):
        """
        Sets the vertx_http_clients_iam_options_requests of this Metrics.

        :param vertx_http_clients_iam_options_requests: The vertx_http_clients_iam_options_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_clients_iam_options_requests is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_options_requests`, must not be `None`")

        self._vertx_http_clients_iam_options_requests = vertx_http_clients_iam_options_requests

    @property
    def vertx_http_clients_iam_requests(self):
        """
        Gets the vertx_http_clients_iam_requests of this Metrics.

        :return: The vertx_http_clients_iam_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_clients_iam_requests

    @vertx_http_clients_iam_requests.setter
    def vertx_http_clients_iam_requests(self, vertx_http_clients_iam_requests):
        """
        Sets the vertx_http_clients_iam_requests of this Metrics.

        :param vertx_http_clients_iam_requests: The vertx_http_clients_iam_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_clients_iam_requests is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_requests`, must not be `None`")

        self._vertx_http_clients_iam_requests = vertx_http_clients_iam_requests

    @property
    def persistent_store_ds_pool_usage(self):
        """
        Gets the persistent_store_ds_pool_usage of this Metrics.

        :return: The persistent_store_ds_pool_usage of this Metrics.
        :rtype: MetricHistogram
        """
        return self._persistent_store_ds_pool_usage

    @persistent_store_ds_pool_usage.setter
    def persistent_store_ds_pool_usage(self, persistent_store_ds_pool_usage):
        """
        Sets the persistent_store_ds_pool_usage of this Metrics.

        :param persistent_store_ds_pool_usage: The persistent_store_ds_pool_usage of this Metrics.
        :type: MetricHistogram
        """
        if persistent_store_ds_pool_usage is None:
            raise ValueError("Invalid value for `persistent_store_ds_pool_usage`, must not be `None`")

        self._persistent_store_ds_pool_usage = persistent_store_ds_pool_usage

    @property
    def vertx_pools_worker_vert_x_internal_blocking_pool_ratio(self):
        """
        Gets the vertx_pools_worker_vert_x_internal_blocking_pool_ratio of this Metrics.

        :return: The vertx_pools_worker_vert_x_internal_blocking_pool_ratio of this Metrics.
        :rtype: MetricGauge
        """
        return self._vertx_pools_worker_vert_x_internal_blocking_pool_ratio

    @vertx_pools_worker_vert_x_internal_blocking_pool_ratio.setter
    def vertx_pools_worker_vert_x_internal_blocking_pool_ratio(self, vertx_pools_worker_vert_x_internal_blocking_pool_ratio):
        """
        Sets the vertx_pools_worker_vert_x_internal_blocking_pool_ratio of this Metrics.

        :param vertx_pools_worker_vert_x_internal_blocking_pool_ratio: The vertx_pools_worker_vert_x_internal_blocking_pool_ratio of this Metrics.
        :type: MetricGauge
        """
        if vertx_pools_worker_vert_x_internal_blocking_pool_ratio is None:
            raise ValueError("Invalid value for `vertx_pools_worker_vert_x_internal_blocking_pool_ratio`, must not be `None`")

        self._vertx_pools_worker_vert_x_internal_blocking_pool_ratio = vertx_pools_worker_vert_x_internal_blocking_pool_ratio

    @property
    def persistence_insert_active_devices(self):
        """
        Gets the persistence_insert_active_devices of this Metrics.

        :return: The persistence_insert_active_devices of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_insert_active_devices

    @persistence_insert_active_devices.setter
    def persistence_insert_active_devices(self, persistence_insert_active_devices):
        """
        Sets the persistence_insert_active_devices of this Metrics.

        :param persistence_insert_active_devices: The persistence_insert_active_devices of this Metrics.
        :type: MetricTimer
        """
        if persistence_insert_active_devices is None:
            raise ValueError("Invalid value for `persistence_insert_active_devices`, must not be `None`")

        self._persistence_insert_active_devices = persistence_insert_active_devices

    @property
    def jvm_mem_total_init(self):
        """
        Gets the jvm_mem_total_init of this Metrics.

        :return: The jvm_mem_total_init of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_total_init

    @jvm_mem_total_init.setter
    def jvm_mem_total_init(self, jvm_mem_total_init):
        """
        Sets the jvm_mem_total_init of this Metrics.

        :param jvm_mem_total_init: The jvm_mem_total_init of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_total_init is None:
            raise ValueError("Invalid value for `jvm_mem_total_init`, must not be `None`")

        self._jvm_mem_total_init = jvm_mem_total_init

    @property
    def jvm_mem_pools_ps_old_gen_committed(self):
        """
        Gets the jvm_mem_pools_ps_old_gen_committed of this Metrics.

        :return: The jvm_mem_pools_ps_old_gen_committed of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_old_gen_committed

    @jvm_mem_pools_ps_old_gen_committed.setter
    def jvm_mem_pools_ps_old_gen_committed(self, jvm_mem_pools_ps_old_gen_committed):
        """
        Sets the jvm_mem_pools_ps_old_gen_committed of this Metrics.

        :param jvm_mem_pools_ps_old_gen_committed: The jvm_mem_pools_ps_old_gen_committed of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_old_gen_committed is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_old_gen_committed`, must not be `None`")

        self._jvm_mem_pools_ps_old_gen_committed = jvm_mem_pools_ps_old_gen_committed

    @property
    def vertx_timers(self):
        """
        Gets the vertx_timers of this Metrics.

        :return: The vertx_timers of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_timers

    @vertx_timers.setter
    def vertx_timers(self, vertx_timers):
        """
        Sets the vertx_timers of this Metrics.

        :param vertx_timers: The vertx_timers of this Metrics.
        :type: MetricCounter
        """
        if vertx_timers is None:
            raise ValueError("Invalid value for `vertx_timers`, must not be `None`")

        self._vertx_timers = vertx_timers

    @property
    def vertx_eventbus_messages_sent(self):
        """
        Gets the vertx_eventbus_messages_sent of this Metrics.

        :return: The vertx_eventbus_messages_sent of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_sent

    @vertx_eventbus_messages_sent.setter
    def vertx_eventbus_messages_sent(self, vertx_eventbus_messages_sent):
        """
        Sets the vertx_eventbus_messages_sent of this Metrics.

        :param vertx_eventbus_messages_sent: The vertx_eventbus_messages_sent of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_sent is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_sent`, must not be `None`")

        self._vertx_eventbus_messages_sent = vertx_eventbus_messages_sent

    @property
    def persistence_select_service_update_log(self):
        """
        Gets the persistence_select_service_update_log of this Metrics.

        :return: The persistence_select_service_update_log of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_select_service_update_log

    @persistence_select_service_update_log.setter
    def persistence_select_service_update_log(self, persistence_select_service_update_log):
        """
        Sets the persistence_select_service_update_log of this Metrics.

        :param persistence_select_service_update_log: The persistence_select_service_update_log of this Metrics.
        :type: MetricTimer
        """
        if persistence_select_service_update_log is None:
            raise ValueError("Invalid value for `persistence_select_service_update_log`, must not be `None`")

        self._persistence_select_service_update_log = persistence_select_service_update_log

    @property
    def persistence_select_accounts_statistics_with_accounts(self):
        """
        Gets the persistence_select_accounts_statistics_with_accounts of this Metrics.

        :return: The persistence_select_accounts_statistics_with_accounts of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_select_accounts_statistics_with_accounts

    @persistence_select_accounts_statistics_with_accounts.setter
    def persistence_select_accounts_statistics_with_accounts(self, persistence_select_accounts_statistics_with_accounts):
        """
        Sets the persistence_select_accounts_statistics_with_accounts of this Metrics.

        :param persistence_select_accounts_statistics_with_accounts: The persistence_select_accounts_statistics_with_accounts of this Metrics.
        :type: MetricTimer
        """
        if persistence_select_accounts_statistics_with_accounts is None:
            raise ValueError("Invalid value for `persistence_select_accounts_statistics_with_accounts`, must not be `None`")

        self._persistence_select_accounts_statistics_with_accounts = persistence_select_accounts_statistics_with_accounts

    @property
    def http_handler_activedevices_in_imports_timer(self):
        """
        Gets the http_handler_activedevices_in_imports_timer of this Metrics.

        :return: The http_handler_activedevices_in_imports_timer of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_activedevices_in_imports_timer

    @http_handler_activedevices_in_imports_timer.setter
    def http_handler_activedevices_in_imports_timer(self, http_handler_activedevices_in_imports_timer):
        """
        Sets the http_handler_activedevices_in_imports_timer of this Metrics.

        :param http_handler_activedevices_in_imports_timer: The http_handler_activedevices_in_imports_timer of this Metrics.
        :type: MetricTimer
        """
        if http_handler_activedevices_in_imports_timer is None:
            raise ValueError("Invalid value for `http_handler_activedevices_in_imports_timer`, must not be `None`")

        self._http_handler_activedevices_in_imports_timer = http_handler_activedevices_in_imports_timer

    @property
    def persistence_select_healthcheck(self):
        """
        Gets the persistence_select_healthcheck of this Metrics.

        :return: The persistence_select_healthcheck of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_select_healthcheck

    @persistence_select_healthcheck.setter
    def persistence_select_healthcheck(self, persistence_select_healthcheck):
        """
        Sets the persistence_select_healthcheck of this Metrics.

        :param persistence_select_healthcheck: The persistence_select_healthcheck of this Metrics.
        :type: MetricTimer
        """
        if persistence_select_healthcheck is None:
            raise ValueError("Invalid value for `persistence_select_healthcheck`, must not be `None`")

        self._persistence_select_healthcheck = persistence_select_healthcheck

    @property
    def vertx_http_clients_iam_bytes_read(self):
        """
        Gets the vertx_http_clients_iam_bytes_read of this Metrics.

        :return: The vertx_http_clients_iam_bytes_read of this Metrics.
        :rtype: MetricHistogram
        """
        return self._vertx_http_clients_iam_bytes_read

    @vertx_http_clients_iam_bytes_read.setter
    def vertx_http_clients_iam_bytes_read(self, vertx_http_clients_iam_bytes_read):
        """
        Sets the vertx_http_clients_iam_bytes_read of this Metrics.

        :param vertx_http_clients_iam_bytes_read: The vertx_http_clients_iam_bytes_read of this Metrics.
        :type: MetricHistogram
        """
        if vertx_http_clients_iam_bytes_read is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_bytes_read`, must not be `None`")

        self._vertx_http_clients_iam_bytes_read = vertx_http_clients_iam_bytes_read

    @property
    def persistence_select_initial_accounts(self):
        """
        Gets the persistence_select_initial_accounts of this Metrics.

        :return: The persistence_select_initial_accounts of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_select_initial_accounts

    @persistence_select_initial_accounts.setter
    def persistence_select_initial_accounts(self, persistence_select_initial_accounts):
        """
        Sets the persistence_select_initial_accounts of this Metrics.

        :param persistence_select_initial_accounts: The persistence_select_initial_accounts of this Metrics.
        :type: MetricTimer
        """
        if persistence_select_initial_accounts is None:
            raise ValueError("Invalid value for `persistence_select_initial_accounts`, must not be `None`")

        self._persistence_select_initial_accounts = persistence_select_initial_accounts

    @property
    def vertx_eventbus_handlers(self):
        """
        Gets the vertx_eventbus_handlers of this Metrics.

        :return: The vertx_eventbus_handlers of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_eventbus_handlers

    @vertx_eventbus_handlers.setter
    def vertx_eventbus_handlers(self, vertx_eventbus_handlers):
        """
        Sets the vertx_eventbus_handlers of this Metrics.

        :param vertx_eventbus_handlers: The vertx_eventbus_handlers of this Metrics.
        :type: MetricCounter
        """
        if vertx_eventbus_handlers is None:
            raise ValueError("Invalid value for `vertx_eventbus_handlers`, must not be `None`")

        self._vertx_eventbus_handlers = vertx_eventbus_handlers

    @property
    def vertx_http_servers_exceptions(self):
        """
        Gets the vertx_http_servers_exceptions of this Metrics.

        :return: The vertx_http_servers_exceptions of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_http_servers_exceptions

    @vertx_http_servers_exceptions.setter
    def vertx_http_servers_exceptions(self, vertx_http_servers_exceptions):
        """
        Sets the vertx_http_servers_exceptions of this Metrics.

        :param vertx_http_servers_exceptions: The vertx_http_servers_exceptions of this Metrics.
        :type: MetricCounter
        """
        if vertx_http_servers_exceptions is None:
            raise ValueError("Invalid value for `vertx_http_servers_exceptions`, must not be `None`")

        self._vertx_http_servers_exceptions = vertx_http_servers_exceptions

    @property
    def vertx_eventbus_messages_reply_failures(self):
        """
        Gets the vertx_eventbus_messages_reply_failures of this Metrics.

        :return: The vertx_eventbus_messages_reply_failures of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_reply_failures

    @vertx_eventbus_messages_reply_failures.setter
    def vertx_eventbus_messages_reply_failures(self, vertx_eventbus_messages_reply_failures):
        """
        Sets the vertx_eventbus_messages_reply_failures of this Metrics.

        :param vertx_eventbus_messages_reply_failures: The vertx_eventbus_messages_reply_failures of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_reply_failures is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_reply_failures`, must not be `None`")

        self._vertx_eventbus_messages_reply_failures = vertx_eventbus_messages_reply_failures

    @property
    def vertx_http_clients_iam_head_requests(self):
        """
        Gets the vertx_http_clients_iam_head_requests of this Metrics.

        :return: The vertx_http_clients_iam_head_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_clients_iam_head_requests

    @vertx_http_clients_iam_head_requests.setter
    def vertx_http_clients_iam_head_requests(self, vertx_http_clients_iam_head_requests):
        """
        Sets the vertx_http_clients_iam_head_requests of this Metrics.

        :param vertx_http_clients_iam_head_requests: The vertx_http_clients_iam_head_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_clients_iam_head_requests is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_head_requests`, must not be `None`")

        self._vertx_http_clients_iam_head_requests = vertx_http_clients_iam_head_requests

    @property
    def jvm_mem_pools_ps_old_gen_max(self):
        """
        Gets the jvm_mem_pools_ps_old_gen_max of this Metrics.

        :return: The jvm_mem_pools_ps_old_gen_max of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_old_gen_max

    @jvm_mem_pools_ps_old_gen_max.setter
    def jvm_mem_pools_ps_old_gen_max(self, jvm_mem_pools_ps_old_gen_max):
        """
        Sets the jvm_mem_pools_ps_old_gen_max of this Metrics.

        :param jvm_mem_pools_ps_old_gen_max: The jvm_mem_pools_ps_old_gen_max of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_old_gen_max is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_old_gen_max`, must not be `None`")

        self._jvm_mem_pools_ps_old_gen_max = jvm_mem_pools_ps_old_gen_max

    @property
    def persistence_update_update_account_upgrade_time(self):
        """
        Gets the persistence_update_update_account_upgrade_time of this Metrics.

        :return: The persistence_update_update_account_upgrade_time of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_update_update_account_upgrade_time

    @persistence_update_update_account_upgrade_time.setter
    def persistence_update_update_account_upgrade_time(self, persistence_update_update_account_upgrade_time):
        """
        Sets the persistence_update_update_account_upgrade_time of this Metrics.

        :param persistence_update_update_account_upgrade_time: The persistence_update_update_account_upgrade_time of this Metrics.
        :type: MetricTimer
        """
        if persistence_update_update_account_upgrade_time is None:
            raise ValueError("Invalid value for `persistence_update_update_account_upgrade_time`, must not be `None`")

        self._persistence_update_update_account_upgrade_time = persistence_update_update_account_upgrade_time

    @property
    def jvm_mem_pools_compressed_class_space_init(self):
        """
        Gets the jvm_mem_pools_compressed_class_space_init of this Metrics.

        :return: The jvm_mem_pools_compressed_class_space_init of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_compressed_class_space_init

    @jvm_mem_pools_compressed_class_space_init.setter
    def jvm_mem_pools_compressed_class_space_init(self, jvm_mem_pools_compressed_class_space_init):
        """
        Sets the jvm_mem_pools_compressed_class_space_init of this Metrics.

        :param jvm_mem_pools_compressed_class_space_init: The jvm_mem_pools_compressed_class_space_init of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_compressed_class_space_init is None:
            raise ValueError("Invalid value for `jvm_mem_pools_compressed_class_space_init`, must not be `None`")

        self._jvm_mem_pools_compressed_class_space_init = jvm_mem_pools_compressed_class_space_init

    @property
    def jvm_mem_pools_code_cache_usage(self):
        """
        Gets the jvm_mem_pools_code_cache_usage of this Metrics.

        :return: The jvm_mem_pools_code_cache_usage of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_code_cache_usage

    @jvm_mem_pools_code_cache_usage.setter
    def jvm_mem_pools_code_cache_usage(self, jvm_mem_pools_code_cache_usage):
        """
        Sets the jvm_mem_pools_code_cache_usage of this Metrics.

        :param jvm_mem_pools_code_cache_usage: The jvm_mem_pools_code_cache_usage of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_code_cache_usage is None:
            raise ValueError("Invalid value for `jvm_mem_pools_code_cache_usage`, must not be `None`")

        self._jvm_mem_pools_code_cache_usage = jvm_mem_pools_code_cache_usage

    @property
    def vertx_verticles(self):
        """
        Gets the vertx_verticles of this Metrics.

        :return: The vertx_verticles of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_verticles

    @vertx_verticles.setter
    def vertx_verticles(self, vertx_verticles):
        """
        Sets the vertx_verticles of this Metrics.

        :param vertx_verticles: The vertx_verticles of this Metrics.
        :type: MetricCounter
        """
        if vertx_verticles is None:
            raise ValueError("Invalid value for `vertx_verticles`, must not be `None`")

        self._vertx_verticles = vertx_verticles

    @property
    def vertx_http_servers_responses_2xx(self):
        """
        Gets the vertx_http_servers_responses_2xx of this Metrics.

        :return: The vertx_http_servers_responses_2xx of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_http_servers_responses_2xx

    @vertx_http_servers_responses_2xx.setter
    def vertx_http_servers_responses_2xx(self, vertx_http_servers_responses_2xx):
        """
        Sets the vertx_http_servers_responses_2xx of this Metrics.

        :param vertx_http_servers_responses_2xx: The vertx_http_servers_responses_2xx of this Metrics.
        :type: MetricMeter
        """
        if vertx_http_servers_responses_2xx is None:
            raise ValueError("Invalid value for `vertx_http_servers_responses_2xx`, must not be `None`")

        self._vertx_http_servers_responses_2xx = vertx_http_servers_responses_2xx

    @property
    def persistence_insert_import_log(self):
        """
        Gets the persistence_insert_import_log of this Metrics.

        :return: The persistence_insert_import_log of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_insert_import_log

    @persistence_insert_import_log.setter
    def persistence_insert_import_log(self, persistence_insert_import_log):
        """
        Sets the persistence_insert_import_log of this Metrics.

        :param persistence_insert_import_log: The persistence_insert_import_log of this Metrics.
        :type: MetricTimer
        """
        if persistence_insert_import_log is None:
            raise ValueError("Invalid value for `persistence_insert_import_log`, must not be `None`")

        self._persistence_insert_import_log = persistence_insert_import_log

    @property
    def vertx_http_servers_patch_requests(self):
        """
        Gets the vertx_http_servers_patch_requests of this Metrics.

        :return: The vertx_http_servers_patch_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_servers_patch_requests

    @vertx_http_servers_patch_requests.setter
    def vertx_http_servers_patch_requests(self, vertx_http_servers_patch_requests):
        """
        Sets the vertx_http_servers_patch_requests of this Metrics.

        :param vertx_http_servers_patch_requests: The vertx_http_servers_patch_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_servers_patch_requests is None:
            raise ValueError("Invalid value for `vertx_http_servers_patch_requests`, must not be `None`")

        self._vertx_http_servers_patch_requests = vertx_http_servers_patch_requests

    @property
    def http_handler_service_update_log_timer(self):
        """
        Gets the http_handler_service_update_log_timer of this Metrics.

        :return: The http_handler_service_update_log_timer of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_service_update_log_timer

    @http_handler_service_update_log_timer.setter
    def http_handler_service_update_log_timer(self, http_handler_service_update_log_timer):
        """
        Sets the http_handler_service_update_log_timer of this Metrics.

        :param http_handler_service_update_log_timer: The http_handler_service_update_log_timer of this Metrics.
        :type: MetricTimer
        """
        if http_handler_service_update_log_timer is None:
            raise ValueError("Invalid value for `http_handler_service_update_log_timer`, must not be `None`")

        self._http_handler_service_update_log_timer = http_handler_service_update_log_timer

    @property
    def jvm_mem_pools_metaspace_init(self):
        """
        Gets the jvm_mem_pools_metaspace_init of this Metrics.

        :return: The jvm_mem_pools_metaspace_init of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_metaspace_init

    @jvm_mem_pools_metaspace_init.setter
    def jvm_mem_pools_metaspace_init(self, jvm_mem_pools_metaspace_init):
        """
        Sets the jvm_mem_pools_metaspace_init of this Metrics.

        :param jvm_mem_pools_metaspace_init: The jvm_mem_pools_metaspace_init of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_metaspace_init is None:
            raise ValueError("Invalid value for `jvm_mem_pools_metaspace_init`, must not be `None`")

        self._jvm_mem_pools_metaspace_init = jvm_mem_pools_metaspace_init

    @property
    def jvm_gc_ps_mark_sweep_time(self):
        """
        Gets the jvm_gc_ps_mark_sweep_time of this Metrics.

        :return: The jvm_gc_ps_mark_sweep_time of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_gc_ps_mark_sweep_time

    @jvm_gc_ps_mark_sweep_time.setter
    def jvm_gc_ps_mark_sweep_time(self, jvm_gc_ps_mark_sweep_time):
        """
        Sets the jvm_gc_ps_mark_sweep_time of this Metrics.

        :param jvm_gc_ps_mark_sweep_time: The jvm_gc_ps_mark_sweep_time of this Metrics.
        :type: MetricGauge
        """
        if jvm_gc_ps_mark_sweep_time is None:
            raise ValueError("Invalid value for `jvm_gc_ps_mark_sweep_time`, must not be `None`")

        self._jvm_gc_ps_mark_sweep_time = jvm_gc_ps_mark_sweep_time

    @property
    def http_handler_time_series_timer(self):
        """
        Gets the http_handler_time_series_timer of this Metrics.

        :return: The http_handler_time_series_timer of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_time_series_timer

    @http_handler_time_series_timer.setter
    def http_handler_time_series_timer(self, http_handler_time_series_timer):
        """
        Sets the http_handler_time_series_timer of this Metrics.

        :param http_handler_time_series_timer: The http_handler_time_series_timer of this Metrics.
        :type: MetricTimer
        """
        if http_handler_time_series_timer is None:
            raise ValueError("Invalid value for `http_handler_time_series_timer`, must not be `None`")

        self._http_handler_time_series_timer = http_handler_time_series_timer

    @property
    def vertx_http_servers_connections(self):
        """
        Gets the vertx_http_servers_connections of this Metrics.

        :return: The vertx_http_servers_connections of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_servers_connections

    @vertx_http_servers_connections.setter
    def vertx_http_servers_connections(self, vertx_http_servers_connections):
        """
        Sets the vertx_http_servers_connections of this Metrics.

        :param vertx_http_servers_connections: The vertx_http_servers_connections of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_servers_connections is None:
            raise ValueError("Invalid value for `vertx_http_servers_connections`, must not be `None`")

        self._vertx_http_servers_connections = vertx_http_servers_connections

    @property
    def vertx_eventbus_messages_sent_local(self):
        """
        Gets the vertx_eventbus_messages_sent_local of this Metrics.

        :return: The vertx_eventbus_messages_sent_local of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_sent_local

    @vertx_eventbus_messages_sent_local.setter
    def vertx_eventbus_messages_sent_local(self, vertx_eventbus_messages_sent_local):
        """
        Sets the vertx_eventbus_messages_sent_local of this Metrics.

        :param vertx_eventbus_messages_sent_local: The vertx_eventbus_messages_sent_local of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_sent_local is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_sent_local`, must not be `None`")

        self._vertx_eventbus_messages_sent_local = vertx_eventbus_messages_sent_local

    @property
    def vertx_http_clients_iam_other_requests(self):
        """
        Gets the vertx_http_clients_iam_other_requests of this Metrics.

        :return: The vertx_http_clients_iam_other_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_clients_iam_other_requests

    @vertx_http_clients_iam_other_requests.setter
    def vertx_http_clients_iam_other_requests(self, vertx_http_clients_iam_other_requests):
        """
        Sets the vertx_http_clients_iam_other_requests of this Metrics.

        :param vertx_http_clients_iam_other_requests: The vertx_http_clients_iam_other_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_clients_iam_other_requests is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_other_requests`, must not be `None`")

        self._vertx_http_clients_iam_other_requests = vertx_http_clients_iam_other_requests

    @property
    def vertx_http_clients_iam_responses_5xx(self):
        """
        Gets the vertx_http_clients_iam_responses_5xx of this Metrics.

        :return: The vertx_http_clients_iam_responses_5xx of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_http_clients_iam_responses_5xx

    @vertx_http_clients_iam_responses_5xx.setter
    def vertx_http_clients_iam_responses_5xx(self, vertx_http_clients_iam_responses_5xx):
        """
        Sets the vertx_http_clients_iam_responses_5xx of this Metrics.

        :param vertx_http_clients_iam_responses_5xx: The vertx_http_clients_iam_responses_5xx of this Metrics.
        :type: MetricMeter
        """
        if vertx_http_clients_iam_responses_5xx is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_responses_5xx`, must not be `None`")

        self._vertx_http_clients_iam_responses_5xx = vertx_http_clients_iam_responses_5xx

    @property
    def jvm_mem_pools_ps_eden_space_max(self):
        """
        Gets the jvm_mem_pools_ps_eden_space_max of this Metrics.

        :return: The jvm_mem_pools_ps_eden_space_max of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_eden_space_max

    @jvm_mem_pools_ps_eden_space_max.setter
    def jvm_mem_pools_ps_eden_space_max(self, jvm_mem_pools_ps_eden_space_max):
        """
        Sets the jvm_mem_pools_ps_eden_space_max of this Metrics.

        :param jvm_mem_pools_ps_eden_space_max: The jvm_mem_pools_ps_eden_space_max of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_eden_space_max is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_eden_space_max`, must not be `None`")

        self._jvm_mem_pools_ps_eden_space_max = jvm_mem_pools_ps_eden_space_max

    @property
    def vertx_eventbus_messages_delivered_remote(self):
        """
        Gets the vertx_eventbus_messages_delivered_remote of this Metrics.

        :return: The vertx_eventbus_messages_delivered_remote of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_delivered_remote

    @vertx_eventbus_messages_delivered_remote.setter
    def vertx_eventbus_messages_delivered_remote(self, vertx_eventbus_messages_delivered_remote):
        """
        Sets the vertx_eventbus_messages_delivered_remote of this Metrics.

        :param vertx_eventbus_messages_delivered_remote: The vertx_eventbus_messages_delivered_remote of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_delivered_remote is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_delivered_remote`, must not be `None`")

        self._vertx_eventbus_messages_delivered_remote = vertx_eventbus_messages_delivered_remote

    @property
    def vertx_http_clients_iam_connections_pool_ratio(self):
        """
        Gets the vertx_http_clients_iam_connections_pool_ratio of this Metrics.

        :return: The vertx_http_clients_iam_connections_pool_ratio of this Metrics.
        :rtype: MetricGauge
        """
        return self._vertx_http_clients_iam_connections_pool_ratio

    @vertx_http_clients_iam_connections_pool_ratio.setter
    def vertx_http_clients_iam_connections_pool_ratio(self, vertx_http_clients_iam_connections_pool_ratio):
        """
        Sets the vertx_http_clients_iam_connections_pool_ratio of this Metrics.

        :param vertx_http_clients_iam_connections_pool_ratio: The vertx_http_clients_iam_connections_pool_ratio of this Metrics.
        :type: MetricGauge
        """
        if vertx_http_clients_iam_connections_pool_ratio is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_connections_pool_ratio`, must not be `None`")

        self._vertx_http_clients_iam_connections_pool_ratio = vertx_http_clients_iam_connections_pool_ratio

    @property
    def persistent_store_ds_pool_connection_timeout_rate(self):
        """
        Gets the persistent_store_ds_pool_connection_timeout_rate of this Metrics.

        :return: The persistent_store_ds_pool_connection_timeout_rate of this Metrics.
        :rtype: MetricMeter
        """
        return self._persistent_store_ds_pool_connection_timeout_rate

    @persistent_store_ds_pool_connection_timeout_rate.setter
    def persistent_store_ds_pool_connection_timeout_rate(self, persistent_store_ds_pool_connection_timeout_rate):
        """
        Sets the persistent_store_ds_pool_connection_timeout_rate of this Metrics.

        :param persistent_store_ds_pool_connection_timeout_rate: The persistent_store_ds_pool_connection_timeout_rate of this Metrics.
        :type: MetricMeter
        """
        if persistent_store_ds_pool_connection_timeout_rate is None:
            raise ValueError("Invalid value for `persistent_store_ds_pool_connection_timeout_rate`, must not be `None`")

        self._persistent_store_ds_pool_connection_timeout_rate = persistent_store_ds_pool_connection_timeout_rate

    @property
    def jvm_mem_pools_ps_survivor_space_usage(self):
        """
        Gets the jvm_mem_pools_ps_survivor_space_usage of this Metrics.

        :return: The jvm_mem_pools_ps_survivor_space_usage of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_survivor_space_usage

    @jvm_mem_pools_ps_survivor_space_usage.setter
    def jvm_mem_pools_ps_survivor_space_usage(self, jvm_mem_pools_ps_survivor_space_usage):
        """
        Sets the jvm_mem_pools_ps_survivor_space_usage of this Metrics.

        :param jvm_mem_pools_ps_survivor_space_usage: The jvm_mem_pools_ps_survivor_space_usage of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_survivor_space_usage is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_survivor_space_usage`, must not be `None`")

        self._jvm_mem_pools_ps_survivor_space_usage = jvm_mem_pools_ps_survivor_space_usage

    @property
    def jvm_mem_total_committed(self):
        """
        Gets the jvm_mem_total_committed of this Metrics.

        :return: The jvm_mem_total_committed of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_total_committed

    @jvm_mem_total_committed.setter
    def jvm_mem_total_committed(self, jvm_mem_total_committed):
        """
        Sets the jvm_mem_total_committed of this Metrics.

        :param jvm_mem_total_committed: The jvm_mem_total_committed of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_total_committed is None:
            raise ValueError("Invalid value for `jvm_mem_total_committed`, must not be `None`")

        self._jvm_mem_total_committed = jvm_mem_total_committed

    @property
    def jvm_mem_non_heap_used(self):
        """
        Gets the jvm_mem_non_heap_used of this Metrics.

        :return: The jvm_mem_non_heap_used of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_non_heap_used

    @jvm_mem_non_heap_used.setter
    def jvm_mem_non_heap_used(self, jvm_mem_non_heap_used):
        """
        Sets the jvm_mem_non_heap_used of this Metrics.

        :param jvm_mem_non_heap_used: The jvm_mem_non_heap_used of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_non_heap_used is None:
            raise ValueError("Invalid value for `jvm_mem_non_heap_used`, must not be `None`")

        self._jvm_mem_non_heap_used = jvm_mem_non_heap_used

    @property
    def persistent_store_ds_pool_wait(self):
        """
        Gets the persistent_store_ds_pool_wait of this Metrics.

        :return: The persistent_store_ds_pool_wait of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistent_store_ds_pool_wait

    @persistent_store_ds_pool_wait.setter
    def persistent_store_ds_pool_wait(self, persistent_store_ds_pool_wait):
        """
        Sets the persistent_store_ds_pool_wait of this Metrics.

        :param persistent_store_ds_pool_wait: The persistent_store_ds_pool_wait of this Metrics.
        :type: MetricTimer
        """
        if persistent_store_ds_pool_wait is None:
            raise ValueError("Invalid value for `persistent_store_ds_pool_wait`, must not be `None`")

        self._persistent_store_ds_pool_wait = persistent_store_ds_pool_wait

    @property
    def vertx_worker_pool_size(self):
        """
        Gets the vertx_worker_pool_size of this Metrics.

        :return: The vertx_worker_pool_size of this Metrics.
        :rtype: MetricGauge
        """
        return self._vertx_worker_pool_size

    @vertx_worker_pool_size.setter
    def vertx_worker_pool_size(self, vertx_worker_pool_size):
        """
        Sets the vertx_worker_pool_size of this Metrics.

        :param vertx_worker_pool_size: The vertx_worker_pool_size of this Metrics.
        :type: MetricGauge
        """
        if vertx_worker_pool_size is None:
            raise ValueError("Invalid value for `vertx_worker_pool_size`, must not be `None`")

        self._vertx_worker_pool_size = vertx_worker_pool_size

    @property
    def vertx_pools_worker_vert_x_internal_blocking_in_use(self):
        """
        Gets the vertx_pools_worker_vert_x_internal_blocking_in_use of this Metrics.

        :return: The vertx_pools_worker_vert_x_internal_blocking_in_use of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_pools_worker_vert_x_internal_blocking_in_use

    @vertx_pools_worker_vert_x_internal_blocking_in_use.setter
    def vertx_pools_worker_vert_x_internal_blocking_in_use(self, vertx_pools_worker_vert_x_internal_blocking_in_use):
        """
        Sets the vertx_pools_worker_vert_x_internal_blocking_in_use of this Metrics.

        :param vertx_pools_worker_vert_x_internal_blocking_in_use: The vertx_pools_worker_vert_x_internal_blocking_in_use of this Metrics.
        :type: MetricCounter
        """
        if vertx_pools_worker_vert_x_internal_blocking_in_use is None:
            raise ValueError("Invalid value for `vertx_pools_worker_vert_x_internal_blocking_in_use`, must not be `None`")

        self._vertx_pools_worker_vert_x_internal_blocking_in_use = vertx_pools_worker_vert_x_internal_blocking_in_use

    @property
    def vertx_eventbus_messages_published(self):
        """
        Gets the vertx_eventbus_messages_published of this Metrics.

        :return: The vertx_eventbus_messages_published of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_published

    @vertx_eventbus_messages_published.setter
    def vertx_eventbus_messages_published(self, vertx_eventbus_messages_published):
        """
        Sets the vertx_eventbus_messages_published of this Metrics.

        :param vertx_eventbus_messages_published: The vertx_eventbus_messages_published of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_published is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_published`, must not be `None`")

        self._vertx_eventbus_messages_published = vertx_eventbus_messages_published

    @property
    def vertx_http_servers_get_requests(self):
        """
        Gets the vertx_http_servers_get_requests of this Metrics.

        :return: The vertx_http_servers_get_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_servers_get_requests

    @vertx_http_servers_get_requests.setter
    def vertx_http_servers_get_requests(self, vertx_http_servers_get_requests):
        """
        Sets the vertx_http_servers_get_requests of this Metrics.

        :param vertx_http_servers_get_requests: The vertx_http_servers_get_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_servers_get_requests is None:
            raise ValueError("Invalid value for `vertx_http_servers_get_requests`, must not be `None`")

        self._vertx_http_servers_get_requests = vertx_http_servers_get_requests

    @property
    def vertx_http_clients_iam_open_netsockets(self):
        """
        Gets the vertx_http_clients_iam_open_netsockets of this Metrics.

        :return: The vertx_http_clients_iam_open_netsockets of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_http_clients_iam_open_netsockets

    @vertx_http_clients_iam_open_netsockets.setter
    def vertx_http_clients_iam_open_netsockets(self, vertx_http_clients_iam_open_netsockets):
        """
        Sets the vertx_http_clients_iam_open_netsockets of this Metrics.

        :param vertx_http_clients_iam_open_netsockets: The vertx_http_clients_iam_open_netsockets of this Metrics.
        :type: MetricCounter
        """
        if vertx_http_clients_iam_open_netsockets is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_open_netsockets`, must not be `None`")

        self._vertx_http_clients_iam_open_netsockets = vertx_http_clients_iam_open_netsockets

    @property
    def jvm_mem_non_heap_init(self):
        """
        Gets the jvm_mem_non_heap_init of this Metrics.

        :return: The jvm_mem_non_heap_init of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_non_heap_init

    @jvm_mem_non_heap_init.setter
    def jvm_mem_non_heap_init(self, jvm_mem_non_heap_init):
        """
        Sets the jvm_mem_non_heap_init of this Metrics.

        :param jvm_mem_non_heap_init: The jvm_mem_non_heap_init of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_non_heap_init is None:
            raise ValueError("Invalid value for `jvm_mem_non_heap_init`, must not be `None`")

        self._jvm_mem_non_heap_init = jvm_mem_non_heap_init

    @property
    def vertx_http_clients_iam_delete_requests(self):
        """
        Gets the vertx_http_clients_iam_delete_requests of this Metrics.

        :return: The vertx_http_clients_iam_delete_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_clients_iam_delete_requests

    @vertx_http_clients_iam_delete_requests.setter
    def vertx_http_clients_iam_delete_requests(self, vertx_http_clients_iam_delete_requests):
        """
        Sets the vertx_http_clients_iam_delete_requests of this Metrics.

        :param vertx_http_clients_iam_delete_requests: The vertx_http_clients_iam_delete_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_clients_iam_delete_requests is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_delete_requests`, must not be `None`")

        self._vertx_http_clients_iam_delete_requests = vertx_http_clients_iam_delete_requests

    @property
    def jvm_mem_pools_ps_eden_space_used(self):
        """
        Gets the jvm_mem_pools_ps_eden_space_used of this Metrics.

        :return: The jvm_mem_pools_ps_eden_space_used of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_eden_space_used

    @jvm_mem_pools_ps_eden_space_used.setter
    def jvm_mem_pools_ps_eden_space_used(self, jvm_mem_pools_ps_eden_space_used):
        """
        Sets the jvm_mem_pools_ps_eden_space_used of this Metrics.

        :param jvm_mem_pools_ps_eden_space_used: The jvm_mem_pools_ps_eden_space_used of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_eden_space_used is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_eden_space_used`, must not be `None`")

        self._jvm_mem_pools_ps_eden_space_used = jvm_mem_pools_ps_eden_space_used

    @property
    def http_handler_metrics_handler_timer(self):
        """
        Gets the http_handler_metrics_handler_timer of this Metrics.

        :return: The http_handler_metrics_handler_timer of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_metrics_handler_timer

    @http_handler_metrics_handler_timer.setter
    def http_handler_metrics_handler_timer(self, http_handler_metrics_handler_timer):
        """
        Sets the http_handler_metrics_handler_timer of this Metrics.

        :param http_handler_metrics_handler_timer: The http_handler_metrics_handler_timer of this Metrics.
        :type: MetricTimer
        """
        if http_handler_metrics_handler_timer is None:
            raise ValueError("Invalid value for `http_handler_metrics_handler_timer`, must not be `None`")

        self._http_handler_metrics_handler_timer = http_handler_metrics_handler_timer

    @property
    def persistence_select_import_log_active_devices(self):
        """
        Gets the persistence_select_import_log_active_devices of this Metrics.

        :return: The persistence_select_import_log_active_devices of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_select_import_log_active_devices

    @persistence_select_import_log_active_devices.setter
    def persistence_select_import_log_active_devices(self, persistence_select_import_log_active_devices):
        """
        Sets the persistence_select_import_log_active_devices of this Metrics.

        :param persistence_select_import_log_active_devices: The persistence_select_import_log_active_devices of this Metrics.
        :type: MetricTimer
        """
        if persistence_select_import_log_active_devices is None:
            raise ValueError("Invalid value for `persistence_select_import_log_active_devices`, must not be `None`")

        self._persistence_select_import_log_active_devices = persistence_select_import_log_active_devices

    @property
    def http_handler_activedevices_timer(self):
        """
        Gets the http_handler_activedevices_timer of this Metrics.

        :return: The http_handler_activedevices_timer of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_activedevices_timer

    @http_handler_activedevices_timer.setter
    def http_handler_activedevices_timer(self, http_handler_activedevices_timer):
        """
        Sets the http_handler_activedevices_timer of this Metrics.

        :param http_handler_activedevices_timer: The http_handler_activedevices_timer of this Metrics.
        :type: MetricTimer
        """
        if http_handler_activedevices_timer is None:
            raise ValueError("Invalid value for `http_handler_activedevices_timer`, must not be `None`")

        self._http_handler_activedevices_timer = http_handler_activedevices_timer

    @property
    def vertx_http_clients_iam_open_connections(self):
        """
        Gets the vertx_http_clients_iam_open_connections of this Metrics.

        :return: The vertx_http_clients_iam_open_connections of this Metrics.
        :rtype: list[MetricHostCounter]
        """
        return self._vertx_http_clients_iam_open_connections

    @vertx_http_clients_iam_open_connections.setter
    def vertx_http_clients_iam_open_connections(self, vertx_http_clients_iam_open_connections):
        """
        Sets the vertx_http_clients_iam_open_connections of this Metrics.

        :param vertx_http_clients_iam_open_connections: The vertx_http_clients_iam_open_connections of this Metrics.
        :type: list[MetricHostCounter]
        """
        if vertx_http_clients_iam_open_connections is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_open_connections`, must not be `None`")

        self._vertx_http_clients_iam_open_connections = vertx_http_clients_iam_open_connections

    @property
    def jvm_mem_pools_ps_survivor_space_used(self):
        """
        Gets the jvm_mem_pools_ps_survivor_space_used of this Metrics.

        :return: The jvm_mem_pools_ps_survivor_space_used of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_survivor_space_used

    @jvm_mem_pools_ps_survivor_space_used.setter
    def jvm_mem_pools_ps_survivor_space_used(self, jvm_mem_pools_ps_survivor_space_used):
        """
        Sets the jvm_mem_pools_ps_survivor_space_used of this Metrics.

        :param jvm_mem_pools_ps_survivor_space_used: The jvm_mem_pools_ps_survivor_space_used of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_survivor_space_used is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_survivor_space_used`, must not be `None`")

        self._jvm_mem_pools_ps_survivor_space_used = jvm_mem_pools_ps_survivor_space_used

    @property
    def vertx_http_clients_iam_responses_1xx(self):
        """
        Gets the vertx_http_clients_iam_responses_1xx of this Metrics.

        :return: The vertx_http_clients_iam_responses_1xx of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_http_clients_iam_responses_1xx

    @vertx_http_clients_iam_responses_1xx.setter
    def vertx_http_clients_iam_responses_1xx(self, vertx_http_clients_iam_responses_1xx):
        """
        Sets the vertx_http_clients_iam_responses_1xx of this Metrics.

        :param vertx_http_clients_iam_responses_1xx: The vertx_http_clients_iam_responses_1xx of this Metrics.
        :type: MetricMeter
        """
        if vertx_http_clients_iam_responses_1xx is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_responses_1xx`, must not be `None`")

        self._vertx_http_clients_iam_responses_1xx = vertx_http_clients_iam_responses_1xx

    @property
    def persistence_insert_dlq(self):
        """
        Gets the persistence_insert_dlq of this Metrics.

        :return: The persistence_insert_dlq of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_insert_dlq

    @persistence_insert_dlq.setter
    def persistence_insert_dlq(self, persistence_insert_dlq):
        """
        Sets the persistence_insert_dlq of this Metrics.

        :param persistence_insert_dlq: The persistence_insert_dlq of this Metrics.
        :type: MetricTimer
        """
        if persistence_insert_dlq is None:
            raise ValueError("Invalid value for `persistence_insert_dlq`, must not be `None`")

        self._persistence_insert_dlq = persistence_insert_dlq

    @property
    def vertx_eventbus_messages_published_remote(self):
        """
        Gets the vertx_eventbus_messages_published_remote of this Metrics.

        :return: The vertx_eventbus_messages_published_remote of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_published_remote

    @vertx_eventbus_messages_published_remote.setter
    def vertx_eventbus_messages_published_remote(self, vertx_eventbus_messages_published_remote):
        """
        Sets the vertx_eventbus_messages_published_remote of this Metrics.

        :param vertx_eventbus_messages_published_remote: The vertx_eventbus_messages_published_remote of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_published_remote is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_published_remote`, must not be `None`")

        self._vertx_eventbus_messages_published_remote = vertx_eventbus_messages_published_remote

    @property
    def jvm_mem_pools_ps_old_gen_init(self):
        """
        Gets the jvm_mem_pools_ps_old_gen_init of this Metrics.

        :return: The jvm_mem_pools_ps_old_gen_init of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_old_gen_init

    @jvm_mem_pools_ps_old_gen_init.setter
    def jvm_mem_pools_ps_old_gen_init(self, jvm_mem_pools_ps_old_gen_init):
        """
        Sets the jvm_mem_pools_ps_old_gen_init of this Metrics.

        :param jvm_mem_pools_ps_old_gen_init: The jvm_mem_pools_ps_old_gen_init of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_old_gen_init is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_old_gen_init`, must not be `None`")

        self._jvm_mem_pools_ps_old_gen_init = jvm_mem_pools_ps_old_gen_init

    @property
    def vertx_http_clients_iam_connections(self):
        """
        Gets the vertx_http_clients_iam_connections of this Metrics.

        :return: The vertx_http_clients_iam_connections of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_clients_iam_connections

    @vertx_http_clients_iam_connections.setter
    def vertx_http_clients_iam_connections(self, vertx_http_clients_iam_connections):
        """
        Sets the vertx_http_clients_iam_connections of this Metrics.

        :param vertx_http_clients_iam_connections: The vertx_http_clients_iam_connections of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_clients_iam_connections is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_connections`, must not be `None`")

        self._vertx_http_clients_iam_connections = vertx_http_clients_iam_connections

    @property
    def vertx_eventbus_messages_pending(self):
        """
        Gets the vertx_eventbus_messages_pending of this Metrics.

        :return: The vertx_eventbus_messages_pending of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_eventbus_messages_pending

    @vertx_eventbus_messages_pending.setter
    def vertx_eventbus_messages_pending(self, vertx_eventbus_messages_pending):
        """
        Sets the vertx_eventbus_messages_pending of this Metrics.

        :param vertx_eventbus_messages_pending: The vertx_eventbus_messages_pending of this Metrics.
        :type: MetricCounter
        """
        if vertx_eventbus_messages_pending is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_pending`, must not be `None`")

        self._vertx_eventbus_messages_pending = vertx_eventbus_messages_pending

    @property
    def vertx_http_servers_connect_requests(self):
        """
        Gets the vertx_http_servers_connect_requests of this Metrics.

        :return: The vertx_http_servers_connect_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_servers_connect_requests

    @vertx_http_servers_connect_requests.setter
    def vertx_http_servers_connect_requests(self, vertx_http_servers_connect_requests):
        """
        Sets the vertx_http_servers_connect_requests of this Metrics.

        :param vertx_http_servers_connect_requests: The vertx_http_servers_connect_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_servers_connect_requests is None:
            raise ValueError("Invalid value for `vertx_http_servers_connect_requests`, must not be `None`")

        self._vertx_http_servers_connect_requests = vertx_http_servers_connect_requests

    @property
    def vertx_pools_worker_vert_x_internal_blocking_queue_size(self):
        """
        Gets the vertx_pools_worker_vert_x_internal_blocking_queue_size of this Metrics.

        :return: The vertx_pools_worker_vert_x_internal_blocking_queue_size of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_pools_worker_vert_x_internal_blocking_queue_size

    @vertx_pools_worker_vert_x_internal_blocking_queue_size.setter
    def vertx_pools_worker_vert_x_internal_blocking_queue_size(self, vertx_pools_worker_vert_x_internal_blocking_queue_size):
        """
        Sets the vertx_pools_worker_vert_x_internal_blocking_queue_size of this Metrics.

        :param vertx_pools_worker_vert_x_internal_blocking_queue_size: The vertx_pools_worker_vert_x_internal_blocking_queue_size of this Metrics.
        :type: MetricCounter
        """
        if vertx_pools_worker_vert_x_internal_blocking_queue_size is None:
            raise ValueError("Invalid value for `vertx_pools_worker_vert_x_internal_blocking_queue_size`, must not be `None`")

        self._vertx_pools_worker_vert_x_internal_blocking_queue_size = vertx_pools_worker_vert_x_internal_blocking_queue_size

    @property
    def http_handler_build_info_timer(self):
        """
        Gets the http_handler_build_info_timer of this Metrics.

        :return: The http_handler_build_info_timer of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_build_info_timer

    @http_handler_build_info_timer.setter
    def http_handler_build_info_timer(self, http_handler_build_info_timer):
        """
        Sets the http_handler_build_info_timer of this Metrics.

        :param http_handler_build_info_timer: The http_handler_build_info_timer of this Metrics.
        :type: MetricTimer
        """
        if http_handler_build_info_timer is None:
            raise ValueError("Invalid value for `http_handler_build_info_timer`, must not be `None`")

        self._http_handler_build_info_timer = http_handler_build_info_timer

    @property
    def jvm_mem_pools_ps_eden_space_usage(self):
        """
        Gets the jvm_mem_pools_ps_eden_space_usage of this Metrics.

        :return: The jvm_mem_pools_ps_eden_space_usage of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_eden_space_usage

    @jvm_mem_pools_ps_eden_space_usage.setter
    def jvm_mem_pools_ps_eden_space_usage(self, jvm_mem_pools_ps_eden_space_usage):
        """
        Sets the jvm_mem_pools_ps_eden_space_usage of this Metrics.

        :param jvm_mem_pools_ps_eden_space_usage: The jvm_mem_pools_ps_eden_space_usage of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_eden_space_usage is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_eden_space_usage`, must not be `None`")

        self._jvm_mem_pools_ps_eden_space_usage = jvm_mem_pools_ps_eden_space_usage

    @property
    def vertx_eventbus_messages_published_local(self):
        """
        Gets the vertx_eventbus_messages_published_local of this Metrics.

        :return: The vertx_eventbus_messages_published_local of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_published_local

    @vertx_eventbus_messages_published_local.setter
    def vertx_eventbus_messages_published_local(self, vertx_eventbus_messages_published_local):
        """
        Sets the vertx_eventbus_messages_published_local of this Metrics.

        :param vertx_eventbus_messages_published_local: The vertx_eventbus_messages_published_local of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_published_local is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_published_local`, must not be `None`")

        self._vertx_eventbus_messages_published_local = vertx_eventbus_messages_published_local

    @property
    def persistence_select_accounts_statistics_all(self):
        """
        Gets the persistence_select_accounts_statistics_all of this Metrics.

        :return: The persistence_select_accounts_statistics_all of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_select_accounts_statistics_all

    @persistence_select_accounts_statistics_all.setter
    def persistence_select_accounts_statistics_all(self, persistence_select_accounts_statistics_all):
        """
        Sets the persistence_select_accounts_statistics_all of this Metrics.

        :param persistence_select_accounts_statistics_all: The persistence_select_accounts_statistics_all of this Metrics.
        :type: MetricTimer
        """
        if persistence_select_accounts_statistics_all is None:
            raise ValueError("Invalid value for `persistence_select_accounts_statistics_all`, must not be `None`")

        self._persistence_select_accounts_statistics_all = persistence_select_accounts_statistics_all

    @property
    def persistence_select_accounts_statistics_with_account(self):
        """
        Gets the persistence_select_accounts_statistics_with_account of this Metrics.

        :return: The persistence_select_accounts_statistics_with_account of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_select_accounts_statistics_with_account

    @persistence_select_accounts_statistics_with_account.setter
    def persistence_select_accounts_statistics_with_account(self, persistence_select_accounts_statistics_with_account):
        """
        Sets the persistence_select_accounts_statistics_with_account of this Metrics.

        :param persistence_select_accounts_statistics_with_account: The persistence_select_accounts_statistics_with_account of this Metrics.
        :type: MetricTimer
        """
        if persistence_select_accounts_statistics_with_account is None:
            raise ValueError("Invalid value for `persistence_select_accounts_statistics_with_account`, must not be `None`")

        self._persistence_select_accounts_statistics_with_account = persistence_select_accounts_statistics_with_account

    @property
    def jvm_gc_ps_scavenge_time(self):
        """
        Gets the jvm_gc_ps_scavenge_time of this Metrics.

        :return: The jvm_gc_ps_scavenge_time of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_gc_ps_scavenge_time

    @jvm_gc_ps_scavenge_time.setter
    def jvm_gc_ps_scavenge_time(self, jvm_gc_ps_scavenge_time):
        """
        Sets the jvm_gc_ps_scavenge_time of this Metrics.

        :param jvm_gc_ps_scavenge_time: The jvm_gc_ps_scavenge_time of this Metrics.
        :type: MetricGauge
        """
        if jvm_gc_ps_scavenge_time is None:
            raise ValueError("Invalid value for `jvm_gc_ps_scavenge_time`, must not be `None`")

        self._jvm_gc_ps_scavenge_time = jvm_gc_ps_scavenge_time

    @property
    def vertx_http_clients_iam_exceptions(self):
        """
        Gets the vertx_http_clients_iam_exceptions of this Metrics.

        :return: The vertx_http_clients_iam_exceptions of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_http_clients_iam_exceptions

    @vertx_http_clients_iam_exceptions.setter
    def vertx_http_clients_iam_exceptions(self, vertx_http_clients_iam_exceptions):
        """
        Sets the vertx_http_clients_iam_exceptions of this Metrics.

        :param vertx_http_clients_iam_exceptions: The vertx_http_clients_iam_exceptions of this Metrics.
        :type: MetricCounter
        """
        if vertx_http_clients_iam_exceptions is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_exceptions`, must not be `None`")

        self._vertx_http_clients_iam_exceptions = vertx_http_clients_iam_exceptions

    @property
    def jvm_mem_pools_ps_old_gen_usage(self):
        """
        Gets the jvm_mem_pools_ps_old_gen_usage of this Metrics.

        :return: The jvm_mem_pools_ps_old_gen_usage of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_old_gen_usage

    @jvm_mem_pools_ps_old_gen_usage.setter
    def jvm_mem_pools_ps_old_gen_usage(self, jvm_mem_pools_ps_old_gen_usage):
        """
        Sets the jvm_mem_pools_ps_old_gen_usage of this Metrics.

        :param jvm_mem_pools_ps_old_gen_usage: The jvm_mem_pools_ps_old_gen_usage of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_old_gen_usage is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_old_gen_usage`, must not be `None`")

        self._jvm_mem_pools_ps_old_gen_usage = jvm_mem_pools_ps_old_gen_usage

    @property
    def vertx_http_servers_post_requests(self):
        """
        Gets the vertx_http_servers_post_requests of this Metrics.

        :return: The vertx_http_servers_post_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_servers_post_requests

    @vertx_http_servers_post_requests.setter
    def vertx_http_servers_post_requests(self, vertx_http_servers_post_requests):
        """
        Sets the vertx_http_servers_post_requests of this Metrics.

        :param vertx_http_servers_post_requests: The vertx_http_servers_post_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_servers_post_requests is None:
            raise ValueError("Invalid value for `vertx_http_servers_post_requests`, must not be `None`")

        self._vertx_http_servers_post_requests = vertx_http_servers_post_requests

    @property
    def jvm_mem_pools_ps_old_gen_used_after_gc(self):
        """
        Gets the jvm_mem_pools_ps_old_gen_used_after_gc of this Metrics.

        :return: The jvm_mem_pools_ps_old_gen_used_after_gc of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_old_gen_used_after_gc

    @jvm_mem_pools_ps_old_gen_used_after_gc.setter
    def jvm_mem_pools_ps_old_gen_used_after_gc(self, jvm_mem_pools_ps_old_gen_used_after_gc):
        """
        Sets the jvm_mem_pools_ps_old_gen_used_after_gc of this Metrics.

        :param jvm_mem_pools_ps_old_gen_used_after_gc: The jvm_mem_pools_ps_old_gen_used_after_gc of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_old_gen_used_after_gc is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_old_gen_used_after_gc`, must not be `None`")

        self._jvm_mem_pools_ps_old_gen_used_after_gc = jvm_mem_pools_ps_old_gen_used_after_gc

    @property
    def vertx_eventbus_messages_sent_remote(self):
        """
        Gets the vertx_eventbus_messages_sent_remote of this Metrics.

        :return: The vertx_eventbus_messages_sent_remote of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_sent_remote

    @vertx_eventbus_messages_sent_remote.setter
    def vertx_eventbus_messages_sent_remote(self, vertx_eventbus_messages_sent_remote):
        """
        Sets the vertx_eventbus_messages_sent_remote of this Metrics.

        :param vertx_eventbus_messages_sent_remote: The vertx_eventbus_messages_sent_remote of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_sent_remote is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_sent_remote`, must not be `None`")

        self._vertx_eventbus_messages_sent_remote = vertx_eventbus_messages_sent_remote

    @property
    def persistence_select_accounts(self):
        """
        Gets the persistence_select_accounts of this Metrics.

        :return: The persistence_select_accounts of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_select_accounts

    @persistence_select_accounts.setter
    def persistence_select_accounts(self, persistence_select_accounts):
        """
        Sets the persistence_select_accounts of this Metrics.

        :param persistence_select_accounts: The persistence_select_accounts of this Metrics.
        :type: MetricTimer
        """
        if persistence_select_accounts is None:
            raise ValueError("Invalid value for `persistence_select_accounts`, must not be `None`")

        self._persistence_select_accounts = persistence_select_accounts

    @property
    def vertx_eventbus_messages_pending_remote(self):
        """
        Gets the vertx_eventbus_messages_pending_remote of this Metrics.

        :return: The vertx_eventbus_messages_pending_remote of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_eventbus_messages_pending_remote

    @vertx_eventbus_messages_pending_remote.setter
    def vertx_eventbus_messages_pending_remote(self, vertx_eventbus_messages_pending_remote):
        """
        Sets the vertx_eventbus_messages_pending_remote of this Metrics.

        :param vertx_eventbus_messages_pending_remote: The vertx_eventbus_messages_pending_remote of this Metrics.
        :type: MetricCounter
        """
        if vertx_eventbus_messages_pending_remote is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_pending_remote`, must not be `None`")

        self._vertx_eventbus_messages_pending_remote = vertx_eventbus_messages_pending_remote

    @property
    def vertx_eventbus_messages_received_local(self):
        """
        Gets the vertx_eventbus_messages_received_local of this Metrics.

        :return: The vertx_eventbus_messages_received_local of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_received_local

    @vertx_eventbus_messages_received_local.setter
    def vertx_eventbus_messages_received_local(self, vertx_eventbus_messages_received_local):
        """
        Sets the vertx_eventbus_messages_received_local of this Metrics.

        :param vertx_eventbus_messages_received_local: The vertx_eventbus_messages_received_local of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_received_local is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_received_local`, must not be `None`")

        self._vertx_eventbus_messages_received_local = vertx_eventbus_messages_received_local

    @property
    def jvm_mem_pools_code_cache_max(self):
        """
        Gets the jvm_mem_pools_code_cache_max of this Metrics.

        :return: The jvm_mem_pools_code_cache_max of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_code_cache_max

    @jvm_mem_pools_code_cache_max.setter
    def jvm_mem_pools_code_cache_max(self, jvm_mem_pools_code_cache_max):
        """
        Sets the jvm_mem_pools_code_cache_max of this Metrics.

        :param jvm_mem_pools_code_cache_max: The jvm_mem_pools_code_cache_max of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_code_cache_max is None:
            raise ValueError("Invalid value for `jvm_mem_pools_code_cache_max`, must not be `None`")

        self._jvm_mem_pools_code_cache_max = jvm_mem_pools_code_cache_max

    @property
    def vertx_pools_worker_vert_x_internal_blocking_max_pool_size(self):
        """
        Gets the vertx_pools_worker_vert_x_internal_blocking_max_pool_size of this Metrics.

        :return: The vertx_pools_worker_vert_x_internal_blocking_max_pool_size of this Metrics.
        :rtype: MetricGauge
        """
        return self._vertx_pools_worker_vert_x_internal_blocking_max_pool_size

    @vertx_pools_worker_vert_x_internal_blocking_max_pool_size.setter
    def vertx_pools_worker_vert_x_internal_blocking_max_pool_size(self, vertx_pools_worker_vert_x_internal_blocking_max_pool_size):
        """
        Sets the vertx_pools_worker_vert_x_internal_blocking_max_pool_size of this Metrics.

        :param vertx_pools_worker_vert_x_internal_blocking_max_pool_size: The vertx_pools_worker_vert_x_internal_blocking_max_pool_size of this Metrics.
        :type: MetricGauge
        """
        if vertx_pools_worker_vert_x_internal_blocking_max_pool_size is None:
            raise ValueError("Invalid value for `vertx_pools_worker_vert_x_internal_blocking_max_pool_size`, must not be `None`")

        self._vertx_pools_worker_vert_x_internal_blocking_max_pool_size = vertx_pools_worker_vert_x_internal_blocking_max_pool_size

    @property
    def persistence_operation_store(self):
        """
        Gets the persistence_operation_store of this Metrics.

        :return: The persistence_operation_store of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_operation_store

    @persistence_operation_store.setter
    def persistence_operation_store(self, persistence_operation_store):
        """
        Sets the persistence_operation_store of this Metrics.

        :param persistence_operation_store: The persistence_operation_store of this Metrics.
        :type: MetricTimer
        """
        if persistence_operation_store is None:
            raise ValueError("Invalid value for `persistence_operation_store`, must not be `None`")

        self._persistence_operation_store = persistence_operation_store

    @property
    def http_handler_health_check_timer(self):
        """
        Gets the http_handler_health_check_timer of this Metrics.

        :return: The http_handler_health_check_timer of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_health_check_timer

    @http_handler_health_check_timer.setter
    def http_handler_health_check_timer(self, http_handler_health_check_timer):
        """
        Sets the http_handler_health_check_timer of this Metrics.

        :param http_handler_health_check_timer: The http_handler_health_check_timer of this Metrics.
        :type: MetricTimer
        """
        if http_handler_health_check_timer is None:
            raise ValueError("Invalid value for `http_handler_health_check_timer`, must not be `None`")

        self._http_handler_health_check_timer = http_handler_health_check_timer

    @property
    def vertx_http_clients_iam_connect_requests(self):
        """
        Gets the vertx_http_clients_iam_connect_requests of this Metrics.

        :return: The vertx_http_clients_iam_connect_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_clients_iam_connect_requests

    @vertx_http_clients_iam_connect_requests.setter
    def vertx_http_clients_iam_connect_requests(self, vertx_http_clients_iam_connect_requests):
        """
        Sets the vertx_http_clients_iam_connect_requests of this Metrics.

        :param vertx_http_clients_iam_connect_requests: The vertx_http_clients_iam_connect_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_clients_iam_connect_requests is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_connect_requests`, must not be `None`")

        self._vertx_http_clients_iam_connect_requests = vertx_http_clients_iam_connect_requests

    @property
    def vertx_http_servers_trace_requests(self):
        """
        Gets the vertx_http_servers_trace_requests of this Metrics.

        :return: The vertx_http_servers_trace_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_servers_trace_requests

    @vertx_http_servers_trace_requests.setter
    def vertx_http_servers_trace_requests(self, vertx_http_servers_trace_requests):
        """
        Sets the vertx_http_servers_trace_requests of this Metrics.

        :param vertx_http_servers_trace_requests: The vertx_http_servers_trace_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_servers_trace_requests is None:
            raise ValueError("Invalid value for `vertx_http_servers_trace_requests`, must not be `None`")

        self._vertx_http_servers_trace_requests = vertx_http_servers_trace_requests

    @property
    def jvm_mem_non_heap_usage(self):
        """
        Gets the jvm_mem_non_heap_usage of this Metrics.

        :return: The jvm_mem_non_heap_usage of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_non_heap_usage

    @jvm_mem_non_heap_usage.setter
    def jvm_mem_non_heap_usage(self, jvm_mem_non_heap_usage):
        """
        Sets the jvm_mem_non_heap_usage of this Metrics.

        :param jvm_mem_non_heap_usage: The jvm_mem_non_heap_usage of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_non_heap_usage is None:
            raise ValueError("Invalid value for `jvm_mem_non_heap_usage`, must not be `None`")

        self._jvm_mem_non_heap_usage = jvm_mem_non_heap_usage

    @property
    def vertx_http_servers_put_requests(self):
        """
        Gets the vertx_http_servers_put_requests of this Metrics.

        :return: The vertx_http_servers_put_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_servers_put_requests

    @vertx_http_servers_put_requests.setter
    def vertx_http_servers_put_requests(self, vertx_http_servers_put_requests):
        """
        Sets the vertx_http_servers_put_requests of this Metrics.

        :param vertx_http_servers_put_requests: The vertx_http_servers_put_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_servers_put_requests is None:
            raise ValueError("Invalid value for `vertx_http_servers_put_requests`, must not be `None`")

        self._vertx_http_servers_put_requests = vertx_http_servers_put_requests

    @property
    def jvm_mem_total_used(self):
        """
        Gets the jvm_mem_total_used of this Metrics.

        :return: The jvm_mem_total_used of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_total_used

    @jvm_mem_total_used.setter
    def jvm_mem_total_used(self, jvm_mem_total_used):
        """
        Sets the jvm_mem_total_used of this Metrics.

        :param jvm_mem_total_used: The jvm_mem_total_used of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_total_used is None:
            raise ValueError("Invalid value for `jvm_mem_total_used`, must not be `None`")

        self._jvm_mem_total_used = jvm_mem_total_used

    @property
    def jvm_mem_pools_code_cache_committed(self):
        """
        Gets the jvm_mem_pools_code_cache_committed of this Metrics.

        :return: The jvm_mem_pools_code_cache_committed of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_code_cache_committed

    @jvm_mem_pools_code_cache_committed.setter
    def jvm_mem_pools_code_cache_committed(self, jvm_mem_pools_code_cache_committed):
        """
        Sets the jvm_mem_pools_code_cache_committed of this Metrics.

        :param jvm_mem_pools_code_cache_committed: The jvm_mem_pools_code_cache_committed of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_code_cache_committed is None:
            raise ValueError("Invalid value for `jvm_mem_pools_code_cache_committed`, must not be `None`")

        self._jvm_mem_pools_code_cache_committed = jvm_mem_pools_code_cache_committed

    @property
    def http_handler_account_stats_without_account(self):
        """
        Gets the http_handler_account_stats_without_account of this Metrics.

        :return: The http_handler_account_stats_without_account of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_account_stats_without_account

    @http_handler_account_stats_without_account.setter
    def http_handler_account_stats_without_account(self, http_handler_account_stats_without_account):
        """
        Sets the http_handler_account_stats_without_account of this Metrics.

        :param http_handler_account_stats_without_account: The http_handler_account_stats_without_account of this Metrics.
        :type: MetricTimer
        """
        if http_handler_account_stats_without_account is None:
            raise ValueError("Invalid value for `http_handler_account_stats_without_account`, must not be `None`")

        self._http_handler_account_stats_without_account = http_handler_account_stats_without_account

    @property
    def vertx_eventbus_messages_delivered_local(self):
        """
        Gets the vertx_eventbus_messages_delivered_local of this Metrics.

        :return: The vertx_eventbus_messages_delivered_local of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_delivered_local

    @vertx_eventbus_messages_delivered_local.setter
    def vertx_eventbus_messages_delivered_local(self, vertx_eventbus_messages_delivered_local):
        """
        Sets the vertx_eventbus_messages_delivered_local of this Metrics.

        :param vertx_eventbus_messages_delivered_local: The vertx_eventbus_messages_delivered_local of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_delivered_local is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_delivered_local`, must not be `None`")

        self._vertx_eventbus_messages_delivered_local = vertx_eventbus_messages_delivered_local

    @property
    def jvm_mem_pools_ps_eden_space_used_after_gc(self):
        """
        Gets the jvm_mem_pools_ps_eden_space_used_after_gc of this Metrics.

        :return: The jvm_mem_pools_ps_eden_space_used_after_gc of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_eden_space_used_after_gc

    @jvm_mem_pools_ps_eden_space_used_after_gc.setter
    def jvm_mem_pools_ps_eden_space_used_after_gc(self, jvm_mem_pools_ps_eden_space_used_after_gc):
        """
        Sets the jvm_mem_pools_ps_eden_space_used_after_gc of this Metrics.

        :param jvm_mem_pools_ps_eden_space_used_after_gc: The jvm_mem_pools_ps_eden_space_used_after_gc of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_eden_space_used_after_gc is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_eden_space_used_after_gc`, must not be `None`")

        self._jvm_mem_pools_ps_eden_space_used_after_gc = jvm_mem_pools_ps_eden_space_used_after_gc

    @property
    def jvm_mem_pools_compressed_class_space_used(self):
        """
        Gets the jvm_mem_pools_compressed_class_space_used of this Metrics.

        :return: The jvm_mem_pools_compressed_class_space_used of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_compressed_class_space_used

    @jvm_mem_pools_compressed_class_space_used.setter
    def jvm_mem_pools_compressed_class_space_used(self, jvm_mem_pools_compressed_class_space_used):
        """
        Sets the jvm_mem_pools_compressed_class_space_used of this Metrics.

        :param jvm_mem_pools_compressed_class_space_used: The jvm_mem_pools_compressed_class_space_used of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_compressed_class_space_used is None:
            raise ValueError("Invalid value for `jvm_mem_pools_compressed_class_space_used`, must not be `None`")

        self._jvm_mem_pools_compressed_class_space_used = jvm_mem_pools_compressed_class_space_used

    @property
    def vertx_pools_worker_vert_x_worker_thread_queue_delay(self):
        """
        Gets the vertx_pools_worker_vert_x_worker_thread_queue_delay of this Metrics.

        :return: The vertx_pools_worker_vert_x_worker_thread_queue_delay of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_pools_worker_vert_x_worker_thread_queue_delay

    @vertx_pools_worker_vert_x_worker_thread_queue_delay.setter
    def vertx_pools_worker_vert_x_worker_thread_queue_delay(self, vertx_pools_worker_vert_x_worker_thread_queue_delay):
        """
        Sets the vertx_pools_worker_vert_x_worker_thread_queue_delay of this Metrics.

        :param vertx_pools_worker_vert_x_worker_thread_queue_delay: The vertx_pools_worker_vert_x_worker_thread_queue_delay of this Metrics.
        :type: MetricTimer
        """
        if vertx_pools_worker_vert_x_worker_thread_queue_delay is None:
            raise ValueError("Invalid value for `vertx_pools_worker_vert_x_worker_thread_queue_delay`, must not be `None`")

        self._vertx_pools_worker_vert_x_worker_thread_queue_delay = vertx_pools_worker_vert_x_worker_thread_queue_delay

    @property
    def vertx_pools_worker_vert_x_internal_blocking_queue_delay(self):
        """
        Gets the vertx_pools_worker_vert_x_internal_blocking_queue_delay of this Metrics.

        :return: The vertx_pools_worker_vert_x_internal_blocking_queue_delay of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_pools_worker_vert_x_internal_blocking_queue_delay

    @vertx_pools_worker_vert_x_internal_blocking_queue_delay.setter
    def vertx_pools_worker_vert_x_internal_blocking_queue_delay(self, vertx_pools_worker_vert_x_internal_blocking_queue_delay):
        """
        Sets the vertx_pools_worker_vert_x_internal_blocking_queue_delay of this Metrics.

        :param vertx_pools_worker_vert_x_internal_blocking_queue_delay: The vertx_pools_worker_vert_x_internal_blocking_queue_delay of this Metrics.
        :type: MetricTimer
        """
        if vertx_pools_worker_vert_x_internal_blocking_queue_delay is None:
            raise ValueError("Invalid value for `vertx_pools_worker_vert_x_internal_blocking_queue_delay`, must not be `None`")

        self._vertx_pools_worker_vert_x_internal_blocking_queue_delay = vertx_pools_worker_vert_x_internal_blocking_queue_delay

    @property
    def http_handler_account_stats_with_account(self):
        """
        Gets the http_handler_account_stats_with_account of this Metrics.

        :return: The http_handler_account_stats_with_account of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_account_stats_with_account

    @http_handler_account_stats_with_account.setter
    def http_handler_account_stats_with_account(self, http_handler_account_stats_with_account):
        """
        Sets the http_handler_account_stats_with_account of this Metrics.

        :param http_handler_account_stats_with_account: The http_handler_account_stats_with_account of this Metrics.
        :type: MetricTimer
        """
        if http_handler_account_stats_with_account is None:
            raise ValueError("Invalid value for `http_handler_account_stats_with_account`, must not be `None`")

        self._http_handler_account_stats_with_account = http_handler_account_stats_with_account

    @property
    def jvm_mem_pools_compressed_class_space_max(self):
        """
        Gets the jvm_mem_pools_compressed_class_space_max of this Metrics.

        :return: The jvm_mem_pools_compressed_class_space_max of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_compressed_class_space_max

    @jvm_mem_pools_compressed_class_space_max.setter
    def jvm_mem_pools_compressed_class_space_max(self, jvm_mem_pools_compressed_class_space_max):
        """
        Sets the jvm_mem_pools_compressed_class_space_max of this Metrics.

        :param jvm_mem_pools_compressed_class_space_max: The jvm_mem_pools_compressed_class_space_max of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_compressed_class_space_max is None:
            raise ValueError("Invalid value for `jvm_mem_pools_compressed_class_space_max`, must not be `None`")

        self._jvm_mem_pools_compressed_class_space_max = jvm_mem_pools_compressed_class_space_max

    @property
    def http_handler_account_list_timer(self):
        """
        Gets the http_handler_account_list_timer of this Metrics.

        :return: The http_handler_account_list_timer of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_account_list_timer

    @http_handler_account_list_timer.setter
    def http_handler_account_list_timer(self, http_handler_account_list_timer):
        """
        Sets the http_handler_account_list_timer of this Metrics.

        :param http_handler_account_list_timer: The http_handler_account_list_timer of this Metrics.
        :type: MetricTimer
        """
        if http_handler_account_list_timer is None:
            raise ValueError("Invalid value for `http_handler_account_list_timer`, must not be `None`")

        self._http_handler_account_list_timer = http_handler_account_list_timer

    @property
    def persistent_store_ds_pool_total_connections(self):
        """
        Gets the persistent_store_ds_pool_total_connections of this Metrics.

        :return: The persistent_store_ds_pool_total_connections of this Metrics.
        :rtype: MetricGauge
        """
        return self._persistent_store_ds_pool_total_connections

    @persistent_store_ds_pool_total_connections.setter
    def persistent_store_ds_pool_total_connections(self, persistent_store_ds_pool_total_connections):
        """
        Sets the persistent_store_ds_pool_total_connections of this Metrics.

        :param persistent_store_ds_pool_total_connections: The persistent_store_ds_pool_total_connections of this Metrics.
        :type: MetricGauge
        """
        if persistent_store_ds_pool_total_connections is None:
            raise ValueError("Invalid value for `persistent_store_ds_pool_total_connections`, must not be `None`")

        self._persistent_store_ds_pool_total_connections = persistent_store_ds_pool_total_connections

    @property
    def jvm_mem_pools_ps_survivor_space_committed(self):
        """
        Gets the jvm_mem_pools_ps_survivor_space_committed of this Metrics.

        :return: The jvm_mem_pools_ps_survivor_space_committed of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_survivor_space_committed

    @jvm_mem_pools_ps_survivor_space_committed.setter
    def jvm_mem_pools_ps_survivor_space_committed(self, jvm_mem_pools_ps_survivor_space_committed):
        """
        Sets the jvm_mem_pools_ps_survivor_space_committed of this Metrics.

        :param jvm_mem_pools_ps_survivor_space_committed: The jvm_mem_pools_ps_survivor_space_committed of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_survivor_space_committed is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_survivor_space_committed`, must not be `None`")

        self._jvm_mem_pools_ps_survivor_space_committed = jvm_mem_pools_ps_survivor_space_committed

    @property
    def vertx_http_servers_responses_5xx(self):
        """
        Gets the vertx_http_servers_responses_5xx of this Metrics.

        :return: The vertx_http_servers_responses_5xx of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_http_servers_responses_5xx

    @vertx_http_servers_responses_5xx.setter
    def vertx_http_servers_responses_5xx(self, vertx_http_servers_responses_5xx):
        """
        Sets the vertx_http_servers_responses_5xx of this Metrics.

        :param vertx_http_servers_responses_5xx: The vertx_http_servers_responses_5xx of this Metrics.
        :type: MetricMeter
        """
        if vertx_http_servers_responses_5xx is None:
            raise ValueError("Invalid value for `vertx_http_servers_responses_5xx`, must not be `None`")

        self._vertx_http_servers_responses_5xx = vertx_http_servers_responses_5xx

    @property
    def jvm_mem_pools_code_cache_init(self):
        """
        Gets the jvm_mem_pools_code_cache_init of this Metrics.

        :return: The jvm_mem_pools_code_cache_init of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_code_cache_init

    @jvm_mem_pools_code_cache_init.setter
    def jvm_mem_pools_code_cache_init(self, jvm_mem_pools_code_cache_init):
        """
        Sets the jvm_mem_pools_code_cache_init of this Metrics.

        :param jvm_mem_pools_code_cache_init: The jvm_mem_pools_code_cache_init of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_code_cache_init is None:
            raise ValueError("Invalid value for `jvm_mem_pools_code_cache_init`, must not be `None`")

        self._jvm_mem_pools_code_cache_init = jvm_mem_pools_code_cache_init

    @property
    def http_handler_report_json(self):
        """
        Gets the http_handler_report_json of this Metrics.

        :return: The http_handler_report_json of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_report_json

    @http_handler_report_json.setter
    def http_handler_report_json(self, http_handler_report_json):
        """
        Sets the http_handler_report_json of this Metrics.

        :param http_handler_report_json: The http_handler_report_json of this Metrics.
        :type: MetricTimer
        """
        if http_handler_report_json is None:
            raise ValueError("Invalid value for `http_handler_report_json`, must not be `None`")

        self._http_handler_report_json = http_handler_report_json

    @property
    def vertx_http_servers_responses_4xx(self):
        """
        Gets the vertx_http_servers_responses_4xx of this Metrics.

        :return: The vertx_http_servers_responses_4xx of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_http_servers_responses_4xx

    @vertx_http_servers_responses_4xx.setter
    def vertx_http_servers_responses_4xx(self, vertx_http_servers_responses_4xx):
        """
        Sets the vertx_http_servers_responses_4xx of this Metrics.

        :param vertx_http_servers_responses_4xx: The vertx_http_servers_responses_4xx of this Metrics.
        :type: MetricMeter
        """
        if vertx_http_servers_responses_4xx is None:
            raise ValueError("Invalid value for `vertx_http_servers_responses_4xx`, must not be `None`")

        self._vertx_http_servers_responses_4xx = vertx_http_servers_responses_4xx

    @property
    def vertx_pools_worker_vert_x_worker_thread_usage(self):
        """
        Gets the vertx_pools_worker_vert_x_worker_thread_usage of this Metrics.

        :return: The vertx_pools_worker_vert_x_worker_thread_usage of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_pools_worker_vert_x_worker_thread_usage

    @vertx_pools_worker_vert_x_worker_thread_usage.setter
    def vertx_pools_worker_vert_x_worker_thread_usage(self, vertx_pools_worker_vert_x_worker_thread_usage):
        """
        Sets the vertx_pools_worker_vert_x_worker_thread_usage of this Metrics.

        :param vertx_pools_worker_vert_x_worker_thread_usage: The vertx_pools_worker_vert_x_worker_thread_usage of this Metrics.
        :type: MetricTimer
        """
        if vertx_pools_worker_vert_x_worker_thread_usage is None:
            raise ValueError("Invalid value for `vertx_pools_worker_vert_x_worker_thread_usage`, must not be `None`")

        self._vertx_pools_worker_vert_x_worker_thread_usage = vertx_pools_worker_vert_x_worker_thread_usage

    @property
    def jvm_mem_heap_init(self):
        """
        Gets the jvm_mem_heap_init of this Metrics.

        :return: The jvm_mem_heap_init of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_heap_init

    @jvm_mem_heap_init.setter
    def jvm_mem_heap_init(self, jvm_mem_heap_init):
        """
        Sets the jvm_mem_heap_init of this Metrics.

        :param jvm_mem_heap_init: The jvm_mem_heap_init of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_heap_init is None:
            raise ValueError("Invalid value for `jvm_mem_heap_init`, must not be `None`")

        self._jvm_mem_heap_init = jvm_mem_heap_init

    @property
    def jvm_mem_heap_max(self):
        """
        Gets the jvm_mem_heap_max of this Metrics.

        :return: The jvm_mem_heap_max of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_heap_max

    @jvm_mem_heap_max.setter
    def jvm_mem_heap_max(self, jvm_mem_heap_max):
        """
        Sets the jvm_mem_heap_max of this Metrics.

        :param jvm_mem_heap_max: The jvm_mem_heap_max of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_heap_max is None:
            raise ValueError("Invalid value for `jvm_mem_heap_max`, must not be `None`")

        self._jvm_mem_heap_max = jvm_mem_heap_max

    @property
    def vertx_http_servers_responses_1xx(self):
        """
        Gets the vertx_http_servers_responses_1xx of this Metrics.

        :return: The vertx_http_servers_responses_1xx of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_http_servers_responses_1xx

    @vertx_http_servers_responses_1xx.setter
    def vertx_http_servers_responses_1xx(self, vertx_http_servers_responses_1xx):
        """
        Sets the vertx_http_servers_responses_1xx of this Metrics.

        :param vertx_http_servers_responses_1xx: The vertx_http_servers_responses_1xx of this Metrics.
        :type: MetricMeter
        """
        if vertx_http_servers_responses_1xx is None:
            raise ValueError("Invalid value for `vertx_http_servers_responses_1xx`, must not be `None`")

        self._vertx_http_servers_responses_1xx = vertx_http_servers_responses_1xx

    @property
    def vertx_http_clients_iam_post_requests(self):
        """
        Gets the vertx_http_clients_iam_post_requests of this Metrics.

        :return: The vertx_http_clients_iam_post_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_clients_iam_post_requests

    @vertx_http_clients_iam_post_requests.setter
    def vertx_http_clients_iam_post_requests(self, vertx_http_clients_iam_post_requests):
        """
        Sets the vertx_http_clients_iam_post_requests of this Metrics.

        :param vertx_http_clients_iam_post_requests: The vertx_http_clients_iam_post_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_clients_iam_post_requests is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_post_requests`, must not be `None`")

        self._vertx_http_clients_iam_post_requests = vertx_http_clients_iam_post_requests

    @property
    def vertx_http_servers_open_websockets(self):
        """
        Gets the vertx_http_servers_open_websockets of this Metrics.

        :return: The vertx_http_servers_open_websockets of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_http_servers_open_websockets

    @vertx_http_servers_open_websockets.setter
    def vertx_http_servers_open_websockets(self, vertx_http_servers_open_websockets):
        """
        Sets the vertx_http_servers_open_websockets of this Metrics.

        :param vertx_http_servers_open_websockets: The vertx_http_servers_open_websockets of this Metrics.
        :type: MetricCounter
        """
        if vertx_http_servers_open_websockets is None:
            raise ValueError("Invalid value for `vertx_http_servers_open_websockets`, must not be `None`")

        self._vertx_http_servers_open_websockets = vertx_http_servers_open_websockets

    @property
    def vertx_http_servers_other_requests(self):
        """
        Gets the vertx_http_servers_other_requests of this Metrics.

        :return: The vertx_http_servers_other_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_servers_other_requests

    @vertx_http_servers_other_requests.setter
    def vertx_http_servers_other_requests(self, vertx_http_servers_other_requests):
        """
        Sets the vertx_http_servers_other_requests of this Metrics.

        :param vertx_http_servers_other_requests: The vertx_http_servers_other_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_servers_other_requests is None:
            raise ValueError("Invalid value for `vertx_http_servers_other_requests`, must not be `None`")

        self._vertx_http_servers_other_requests = vertx_http_servers_other_requests

    @property
    def http_handler_report_activedevices_timer(self):
        """
        Gets the http_handler_report_activedevices_timer of this Metrics.

        :return: The http_handler_report_activedevices_timer of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_report_activedevices_timer

    @http_handler_report_activedevices_timer.setter
    def http_handler_report_activedevices_timer(self, http_handler_report_activedevices_timer):
        """
        Sets the http_handler_report_activedevices_timer of this Metrics.

        :param http_handler_report_activedevices_timer: The http_handler_report_activedevices_timer of this Metrics.
        :type: MetricTimer
        """
        if http_handler_report_activedevices_timer is None:
            raise ValueError("Invalid value for `http_handler_report_activedevices_timer`, must not be `None`")

        self._http_handler_report_activedevices_timer = http_handler_report_activedevices_timer

    @property
    def jvm_mem_heap_usage(self):
        """
        Gets the jvm_mem_heap_usage of this Metrics.

        :return: The jvm_mem_heap_usage of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_heap_usage

    @jvm_mem_heap_usage.setter
    def jvm_mem_heap_usage(self, jvm_mem_heap_usage):
        """
        Sets the jvm_mem_heap_usage of this Metrics.

        :param jvm_mem_heap_usage: The jvm_mem_heap_usage of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_heap_usage is None:
            raise ValueError("Invalid value for `jvm_mem_heap_usage`, must not be `None`")

        self._jvm_mem_heap_usage = jvm_mem_heap_usage

    @property
    def jvm_mem_non_heap_committed(self):
        """
        Gets the jvm_mem_non_heap_committed of this Metrics.

        :return: The jvm_mem_non_heap_committed of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_non_heap_committed

    @jvm_mem_non_heap_committed.setter
    def jvm_mem_non_heap_committed(self, jvm_mem_non_heap_committed):
        """
        Sets the jvm_mem_non_heap_committed of this Metrics.

        :param jvm_mem_non_heap_committed: The jvm_mem_non_heap_committed of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_non_heap_committed is None:
            raise ValueError("Invalid value for `jvm_mem_non_heap_committed`, must not be `None`")

        self._jvm_mem_non_heap_committed = jvm_mem_non_heap_committed

    @property
    def jvm_mem_pools_compressed_class_space_usage(self):
        """
        Gets the jvm_mem_pools_compressed_class_space_usage of this Metrics.

        :return: The jvm_mem_pools_compressed_class_space_usage of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_compressed_class_space_usage

    @jvm_mem_pools_compressed_class_space_usage.setter
    def jvm_mem_pools_compressed_class_space_usage(self, jvm_mem_pools_compressed_class_space_usage):
        """
        Sets the jvm_mem_pools_compressed_class_space_usage of this Metrics.

        :param jvm_mem_pools_compressed_class_space_usage: The jvm_mem_pools_compressed_class_space_usage of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_compressed_class_space_usage is None:
            raise ValueError("Invalid value for `jvm_mem_pools_compressed_class_space_usage`, must not be `None`")

        self._jvm_mem_pools_compressed_class_space_usage = jvm_mem_pools_compressed_class_space_usage

    @property
    def persistent_store_ds_pool_connection_creation(self):
        """
        Gets the persistent_store_ds_pool_connection_creation of this Metrics.

        :return: The persistent_store_ds_pool_connection_creation of this Metrics.
        :rtype: MetricHistogram
        """
        return self._persistent_store_ds_pool_connection_creation

    @persistent_store_ds_pool_connection_creation.setter
    def persistent_store_ds_pool_connection_creation(self, persistent_store_ds_pool_connection_creation):
        """
        Sets the persistent_store_ds_pool_connection_creation of this Metrics.

        :param persistent_store_ds_pool_connection_creation: The persistent_store_ds_pool_connection_creation of this Metrics.
        :type: MetricHistogram
        """
        if persistent_store_ds_pool_connection_creation is None:
            raise ValueError("Invalid value for `persistent_store_ds_pool_connection_creation`, must not be `None`")

        self._persistent_store_ds_pool_connection_creation = persistent_store_ds_pool_connection_creation

    @property
    def vertx_http_clients_iam_open_websockets(self):
        """
        Gets the vertx_http_clients_iam_open_websockets of this Metrics.

        :return: The vertx_http_clients_iam_open_websockets of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_http_clients_iam_open_websockets

    @vertx_http_clients_iam_open_websockets.setter
    def vertx_http_clients_iam_open_websockets(self, vertx_http_clients_iam_open_websockets):
        """
        Sets the vertx_http_clients_iam_open_websockets of this Metrics.

        :param vertx_http_clients_iam_open_websockets: The vertx_http_clients_iam_open_websockets of this Metrics.
        :type: MetricCounter
        """
        if vertx_http_clients_iam_open_websockets is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_open_websockets`, must not be `None`")

        self._vertx_http_clients_iam_open_websockets = vertx_http_clients_iam_open_websockets

    @property
    def persistence_select_import_log(self):
        """
        Gets the persistence_select_import_log of this Metrics.

        :return: The persistence_select_import_log of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_select_import_log

    @persistence_select_import_log.setter
    def persistence_select_import_log(self, persistence_select_import_log):
        """
        Sets the persistence_select_import_log of this Metrics.

        :param persistence_select_import_log: The persistence_select_import_log of this Metrics.
        :type: MetricTimer
        """
        if persistence_select_import_log is None:
            raise ValueError("Invalid value for `persistence_select_import_log`, must not be `None`")

        self._persistence_select_import_log = persistence_select_import_log

    @property
    def persistence_select_accounts_statistics_with_accounts_and_starttime(self):
        """
        Gets the persistence_select_accounts_statistics_with_accounts_and_starttime of this Metrics.

        :return: The persistence_select_accounts_statistics_with_accounts_and_starttime of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_select_accounts_statistics_with_accounts_and_starttime

    @persistence_select_accounts_statistics_with_accounts_and_starttime.setter
    def persistence_select_accounts_statistics_with_accounts_and_starttime(self, persistence_select_accounts_statistics_with_accounts_and_starttime):
        """
        Sets the persistence_select_accounts_statistics_with_accounts_and_starttime of this Metrics.

        :param persistence_select_accounts_statistics_with_accounts_and_starttime: The persistence_select_accounts_statistics_with_accounts_and_starttime of this Metrics.
        :type: MetricTimer
        """
        if persistence_select_accounts_statistics_with_accounts_and_starttime is None:
            raise ValueError("Invalid value for `persistence_select_accounts_statistics_with_accounts_and_starttime`, must not be `None`")

        self._persistence_select_accounts_statistics_with_accounts_and_starttime = persistence_select_accounts_statistics_with_accounts_and_starttime

    @property
    def persistence_operation_dlq(self):
        """
        Gets the persistence_operation_dlq of this Metrics.

        :return: The persistence_operation_dlq of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_operation_dlq

    @persistence_operation_dlq.setter
    def persistence_operation_dlq(self, persistence_operation_dlq):
        """
        Sets the persistence_operation_dlq of this Metrics.

        :param persistence_operation_dlq: The persistence_operation_dlq of this Metrics.
        :type: MetricTimer
        """
        if persistence_operation_dlq is None:
            raise ValueError("Invalid value for `persistence_operation_dlq`, must not be `None`")

        self._persistence_operation_dlq = persistence_operation_dlq

    @property
    def jvm_gc_ps_scavenge_count(self):
        """
        Gets the jvm_gc_ps_scavenge_count of this Metrics.

        :return: The jvm_gc_ps_scavenge_count of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_gc_ps_scavenge_count

    @jvm_gc_ps_scavenge_count.setter
    def jvm_gc_ps_scavenge_count(self, jvm_gc_ps_scavenge_count):
        """
        Sets the jvm_gc_ps_scavenge_count of this Metrics.

        :param jvm_gc_ps_scavenge_count: The jvm_gc_ps_scavenge_count of this Metrics.
        :type: MetricGauge
        """
        if jvm_gc_ps_scavenge_count is None:
            raise ValueError("Invalid value for `jvm_gc_ps_scavenge_count`, must not be `None`")

        self._jvm_gc_ps_scavenge_count = jvm_gc_ps_scavenge_count

    @property
    def vertx_http_clients_iam_connections_max_pool_size(self):
        """
        Gets the vertx_http_clients_iam_connections_max_pool_size of this Metrics.

        :return: The vertx_http_clients_iam_connections_max_pool_size of this Metrics.
        :rtype: MetricGauge
        """
        return self._vertx_http_clients_iam_connections_max_pool_size

    @vertx_http_clients_iam_connections_max_pool_size.setter
    def vertx_http_clients_iam_connections_max_pool_size(self, vertx_http_clients_iam_connections_max_pool_size):
        """
        Sets the vertx_http_clients_iam_connections_max_pool_size of this Metrics.

        :param vertx_http_clients_iam_connections_max_pool_size: The vertx_http_clients_iam_connections_max_pool_size of this Metrics.
        :type: MetricGauge
        """
        if vertx_http_clients_iam_connections_max_pool_size is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_connections_max_pool_size`, must not be `None`")

        self._vertx_http_clients_iam_connections_max_pool_size = vertx_http_clients_iam_connections_max_pool_size

    @property
    def vertx_eventbus_messages_bytes_written(self):
        """
        Gets the vertx_eventbus_messages_bytes_written of this Metrics.

        :return: The vertx_eventbus_messages_bytes_written of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_bytes_written

    @vertx_eventbus_messages_bytes_written.setter
    def vertx_eventbus_messages_bytes_written(self, vertx_eventbus_messages_bytes_written):
        """
        Sets the vertx_eventbus_messages_bytes_written of this Metrics.

        :param vertx_eventbus_messages_bytes_written: The vertx_eventbus_messages_bytes_written of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_bytes_written is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_bytes_written`, must not be `None`")

        self._vertx_eventbus_messages_bytes_written = vertx_eventbus_messages_bytes_written

    @property
    def jvm_mem_pools_compressed_class_space_committed(self):
        """
        Gets the jvm_mem_pools_compressed_class_space_committed of this Metrics.

        :return: The jvm_mem_pools_compressed_class_space_committed of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_compressed_class_space_committed

    @jvm_mem_pools_compressed_class_space_committed.setter
    def jvm_mem_pools_compressed_class_space_committed(self, jvm_mem_pools_compressed_class_space_committed):
        """
        Sets the jvm_mem_pools_compressed_class_space_committed of this Metrics.

        :param jvm_mem_pools_compressed_class_space_committed: The jvm_mem_pools_compressed_class_space_committed of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_compressed_class_space_committed is None:
            raise ValueError("Invalid value for `jvm_mem_pools_compressed_class_space_committed`, must not be `None`")

        self._jvm_mem_pools_compressed_class_space_committed = jvm_mem_pools_compressed_class_space_committed

    @property
    def vertx_verticles_com_mbed_billing_server_apiserver_http_http_server(self):
        """
        Gets the vertx_verticles_com_mbed_billing_server_apiserver_http_http_server of this Metrics.

        :return: The vertx_verticles_com_mbed_billing_server_apiserver_http_http_server of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_verticles_com_mbed_billing_server_apiserver_http_http_server

    @vertx_verticles_com_mbed_billing_server_apiserver_http_http_server.setter
    def vertx_verticles_com_mbed_billing_server_apiserver_http_http_server(self, vertx_verticles_com_mbed_billing_server_apiserver_http_http_server):
        """
        Sets the vertx_verticles_com_mbed_billing_server_apiserver_http_http_server of this Metrics.

        :param vertx_verticles_com_mbed_billing_server_apiserver_http_http_server: The vertx_verticles_com_mbed_billing_server_apiserver_http_http_server of this Metrics.
        :type: MetricCounter
        """
        if vertx_verticles_com_mbed_billing_server_apiserver_http_http_server is None:
            raise ValueError("Invalid value for `vertx_verticles_com_mbed_billing_server_apiserver_http_http_server`, must not be `None`")

        self._vertx_verticles_com_mbed_billing_server_apiserver_http_http_server = vertx_verticles_com_mbed_billing_server_apiserver_http_http_server

    @property
    def jvm_mem_pools_code_cache_used(self):
        """
        Gets the jvm_mem_pools_code_cache_used of this Metrics.

        :return: The jvm_mem_pools_code_cache_used of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_code_cache_used

    @jvm_mem_pools_code_cache_used.setter
    def jvm_mem_pools_code_cache_used(self, jvm_mem_pools_code_cache_used):
        """
        Sets the jvm_mem_pools_code_cache_used of this Metrics.

        :param jvm_mem_pools_code_cache_used: The jvm_mem_pools_code_cache_used of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_code_cache_used is None:
            raise ValueError("Invalid value for `jvm_mem_pools_code_cache_used`, must not be `None`")

        self._jvm_mem_pools_code_cache_used = jvm_mem_pools_code_cache_used

    @property
    def http_handler_import_log_timer(self):
        """
        Gets the http_handler_import_log_timer of this Metrics.

        :return: The http_handler_import_log_timer of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_import_log_timer

    @http_handler_import_log_timer.setter
    def http_handler_import_log_timer(self, http_handler_import_log_timer):
        """
        Sets the http_handler_import_log_timer of this Metrics.

        :param http_handler_import_log_timer: The http_handler_import_log_timer of this Metrics.
        :type: MetricTimer
        """
        if http_handler_import_log_timer is None:
            raise ValueError("Invalid value for `http_handler_import_log_timer`, must not be `None`")

        self._http_handler_import_log_timer = http_handler_import_log_timer

    @property
    def vertx_eventbus_messages_pending_local(self):
        """
        Gets the vertx_eventbus_messages_pending_local of this Metrics.

        :return: The vertx_eventbus_messages_pending_local of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_eventbus_messages_pending_local

    @vertx_eventbus_messages_pending_local.setter
    def vertx_eventbus_messages_pending_local(self, vertx_eventbus_messages_pending_local):
        """
        Sets the vertx_eventbus_messages_pending_local of this Metrics.

        :param vertx_eventbus_messages_pending_local: The vertx_eventbus_messages_pending_local of this Metrics.
        :type: MetricCounter
        """
        if vertx_eventbus_messages_pending_local is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_pending_local`, must not be `None`")

        self._vertx_eventbus_messages_pending_local = vertx_eventbus_messages_pending_local

    @property
    def vertx_http_servers_bytes_written(self):
        """
        Gets the vertx_http_servers_bytes_written of this Metrics.

        :return: The vertx_http_servers_bytes_written of this Metrics.
        :rtype: MetricHistogram
        """
        return self._vertx_http_servers_bytes_written

    @vertx_http_servers_bytes_written.setter
    def vertx_http_servers_bytes_written(self, vertx_http_servers_bytes_written):
        """
        Sets the vertx_http_servers_bytes_written of this Metrics.

        :param vertx_http_servers_bytes_written: The vertx_http_servers_bytes_written of this Metrics.
        :type: MetricHistogram
        """
        if vertx_http_servers_bytes_written is None:
            raise ValueError("Invalid value for `vertx_http_servers_bytes_written`, must not be `None`")

        self._vertx_http_servers_bytes_written = vertx_http_servers_bytes_written

    @property
    def vertx_eventbus_messages_bytes_read(self):
        """
        Gets the vertx_eventbus_messages_bytes_read of this Metrics.

        :return: The vertx_eventbus_messages_bytes_read of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_bytes_read

    @vertx_eventbus_messages_bytes_read.setter
    def vertx_eventbus_messages_bytes_read(self, vertx_eventbus_messages_bytes_read):
        """
        Sets the vertx_eventbus_messages_bytes_read of this Metrics.

        :param vertx_eventbus_messages_bytes_read: The vertx_eventbus_messages_bytes_read of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_bytes_read is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_bytes_read`, must not be `None`")

        self._vertx_eventbus_messages_bytes_read = vertx_eventbus_messages_bytes_read

    @property
    def vertx_http_servers_head_requests(self):
        """
        Gets the vertx_http_servers_head_requests of this Metrics.

        :return: The vertx_http_servers_head_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_servers_head_requests

    @vertx_http_servers_head_requests.setter
    def vertx_http_servers_head_requests(self, vertx_http_servers_head_requests):
        """
        Sets the vertx_http_servers_head_requests of this Metrics.

        :param vertx_http_servers_head_requests: The vertx_http_servers_head_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_servers_head_requests is None:
            raise ValueError("Invalid value for `vertx_http_servers_head_requests`, must not be `None`")

        self._vertx_http_servers_head_requests = vertx_http_servers_head_requests

    @property
    def jvm_mem_pools_ps_survivor_space_used_after_gc(self):
        """
        Gets the jvm_mem_pools_ps_survivor_space_used_after_gc of this Metrics.

        :return: The jvm_mem_pools_ps_survivor_space_used_after_gc of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_survivor_space_used_after_gc

    @jvm_mem_pools_ps_survivor_space_used_after_gc.setter
    def jvm_mem_pools_ps_survivor_space_used_after_gc(self, jvm_mem_pools_ps_survivor_space_used_after_gc):
        """
        Sets the jvm_mem_pools_ps_survivor_space_used_after_gc of this Metrics.

        :param jvm_mem_pools_ps_survivor_space_used_after_gc: The jvm_mem_pools_ps_survivor_space_used_after_gc of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_survivor_space_used_after_gc is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_survivor_space_used_after_gc`, must not be `None`")

        self._jvm_mem_pools_ps_survivor_space_used_after_gc = jvm_mem_pools_ps_survivor_space_used_after_gc

    @property
    def persistent_store_ds_pool_active_connections(self):
        """
        Gets the persistent_store_ds_pool_active_connections of this Metrics.

        :return: The persistent_store_ds_pool_active_connections of this Metrics.
        :rtype: MetricGauge
        """
        return self._persistent_store_ds_pool_active_connections

    @persistent_store_ds_pool_active_connections.setter
    def persistent_store_ds_pool_active_connections(self, persistent_store_ds_pool_active_connections):
        """
        Sets the persistent_store_ds_pool_active_connections of this Metrics.

        :param persistent_store_ds_pool_active_connections: The persistent_store_ds_pool_active_connections of this Metrics.
        :type: MetricGauge
        """
        if persistent_store_ds_pool_active_connections is None:
            raise ValueError("Invalid value for `persistent_store_ds_pool_active_connections`, must not be `None`")

        self._persistent_store_ds_pool_active_connections = persistent_store_ds_pool_active_connections

    @property
    def persistence_connection_connect(self):
        """
        Gets the persistence_connection_connect of this Metrics.

        :return: The persistence_connection_connect of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_connection_connect

    @persistence_connection_connect.setter
    def persistence_connection_connect(self, persistence_connection_connect):
        """
        Sets the persistence_connection_connect of this Metrics.

        :param persistence_connection_connect: The persistence_connection_connect of this Metrics.
        :type: MetricTimer
        """
        if persistence_connection_connect is None:
            raise ValueError("Invalid value for `persistence_connection_connect`, must not be `None`")

        self._persistence_connection_connect = persistence_connection_connect

    @property
    def jvm_mem_pools_ps_eden_space_init(self):
        """
        Gets the jvm_mem_pools_ps_eden_space_init of this Metrics.

        :return: The jvm_mem_pools_ps_eden_space_init of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_eden_space_init

    @jvm_mem_pools_ps_eden_space_init.setter
    def jvm_mem_pools_ps_eden_space_init(self, jvm_mem_pools_ps_eden_space_init):
        """
        Sets the jvm_mem_pools_ps_eden_space_init of this Metrics.

        :param jvm_mem_pools_ps_eden_space_init: The jvm_mem_pools_ps_eden_space_init of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_eden_space_init is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_eden_space_init`, must not be `None`")

        self._jvm_mem_pools_ps_eden_space_init = jvm_mem_pools_ps_eden_space_init

    @property
    def vertx_http_clients_iam_responses_2xx(self):
        """
        Gets the vertx_http_clients_iam_responses_2xx of this Metrics.

        :return: The vertx_http_clients_iam_responses_2xx of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_http_clients_iam_responses_2xx

    @vertx_http_clients_iam_responses_2xx.setter
    def vertx_http_clients_iam_responses_2xx(self, vertx_http_clients_iam_responses_2xx):
        """
        Sets the vertx_http_clients_iam_responses_2xx of this Metrics.

        :param vertx_http_clients_iam_responses_2xx: The vertx_http_clients_iam_responses_2xx of this Metrics.
        :type: MetricMeter
        """
        if vertx_http_clients_iam_responses_2xx is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_responses_2xx`, must not be `None`")

        self._vertx_http_clients_iam_responses_2xx = vertx_http_clients_iam_responses_2xx

    @property
    def persistence_insert_account_statistics(self):
        """
        Gets the persistence_insert_account_statistics of this Metrics.

        :return: The persistence_insert_account_statistics of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_insert_account_statistics

    @persistence_insert_account_statistics.setter
    def persistence_insert_account_statistics(self, persistence_insert_account_statistics):
        """
        Sets the persistence_insert_account_statistics of this Metrics.

        :param persistence_insert_account_statistics: The persistence_insert_account_statistics of this Metrics.
        :type: MetricTimer
        """
        if persistence_insert_account_statistics is None:
            raise ValueError("Invalid value for `persistence_insert_account_statistics`, must not be `None`")

        self._persistence_insert_account_statistics = persistence_insert_account_statistics

    @property
    def jvm_mem_pools_metaspace_used(self):
        """
        Gets the jvm_mem_pools_metaspace_used of this Metrics.

        :return: The jvm_mem_pools_metaspace_used of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_metaspace_used

    @jvm_mem_pools_metaspace_used.setter
    def jvm_mem_pools_metaspace_used(self, jvm_mem_pools_metaspace_used):
        """
        Sets the jvm_mem_pools_metaspace_used of this Metrics.

        :param jvm_mem_pools_metaspace_used: The jvm_mem_pools_metaspace_used of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_metaspace_used is None:
            raise ValueError("Invalid value for `jvm_mem_pools_metaspace_used`, must not be `None`")

        self._jvm_mem_pools_metaspace_used = jvm_mem_pools_metaspace_used

    @property
    def jvm_mem_pools_metaspace_max(self):
        """
        Gets the jvm_mem_pools_metaspace_max of this Metrics.

        :return: The jvm_mem_pools_metaspace_max of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_metaspace_max

    @jvm_mem_pools_metaspace_max.setter
    def jvm_mem_pools_metaspace_max(self, jvm_mem_pools_metaspace_max):
        """
        Sets the jvm_mem_pools_metaspace_max of this Metrics.

        :param jvm_mem_pools_metaspace_max: The jvm_mem_pools_metaspace_max of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_metaspace_max is None:
            raise ValueError("Invalid value for `jvm_mem_pools_metaspace_max`, must not be `None`")

        self._jvm_mem_pools_metaspace_max = jvm_mem_pools_metaspace_max

    @property
    def http_handler_report_zip(self):
        """
        Gets the http_handler_report_zip of this Metrics.

        :return: The http_handler_report_zip of this Metrics.
        :rtype: MetricTimer
        """
        return self._http_handler_report_zip

    @http_handler_report_zip.setter
    def http_handler_report_zip(self, http_handler_report_zip):
        """
        Sets the http_handler_report_zip of this Metrics.

        :param http_handler_report_zip: The http_handler_report_zip of this Metrics.
        :type: MetricTimer
        """
        if http_handler_report_zip is None:
            raise ValueError("Invalid value for `http_handler_report_zip`, must not be `None`")

        self._http_handler_report_zip = http_handler_report_zip

    @property
    def vertx_event_loop_size(self):
        """
        Gets the vertx_event_loop_size of this Metrics.

        :return: The vertx_event_loop_size of this Metrics.
        :rtype: MetricGauge
        """
        return self._vertx_event_loop_size

    @vertx_event_loop_size.setter
    def vertx_event_loop_size(self, vertx_event_loop_size):
        """
        Sets the vertx_event_loop_size of this Metrics.

        :param vertx_event_loop_size: The vertx_event_loop_size of this Metrics.
        :type: MetricGauge
        """
        if vertx_event_loop_size is None:
            raise ValueError("Invalid value for `vertx_event_loop_size`, must not be `None`")

        self._vertx_event_loop_size = vertx_event_loop_size

    @property
    def vertx_http_servers_open_connections(self):
        """
        Gets the vertx_http_servers_open_connections of this Metrics.

        :return: The vertx_http_servers_open_connections of this Metrics.
        :rtype: list[MetricHostCounter]
        """
        return self._vertx_http_servers_open_connections

    @vertx_http_servers_open_connections.setter
    def vertx_http_servers_open_connections(self, vertx_http_servers_open_connections):
        """
        Sets the vertx_http_servers_open_connections of this Metrics.

        :param vertx_http_servers_open_connections: The vertx_http_servers_open_connections of this Metrics.
        :type: list[MetricHostCounter]
        """
        if vertx_http_servers_open_connections is None:
            raise ValueError("Invalid value for `vertx_http_servers_open_connections`, must not be `None`")

        self._vertx_http_servers_open_connections = vertx_http_servers_open_connections

    @property
    def vertx_http_clients_iam_responses_3xx(self):
        """
        Gets the vertx_http_clients_iam_responses_3xx of this Metrics.

        :return: The vertx_http_clients_iam_responses_3xx of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_http_clients_iam_responses_3xx

    @vertx_http_clients_iam_responses_3xx.setter
    def vertx_http_clients_iam_responses_3xx(self, vertx_http_clients_iam_responses_3xx):
        """
        Sets the vertx_http_clients_iam_responses_3xx of this Metrics.

        :param vertx_http_clients_iam_responses_3xx: The vertx_http_clients_iam_responses_3xx of this Metrics.
        :type: MetricMeter
        """
        if vertx_http_clients_iam_responses_3xx is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_responses_3xx`, must not be `None`")

        self._vertx_http_clients_iam_responses_3xx = vertx_http_clients_iam_responses_3xx

    @property
    def jvm_mem_pools_ps_eden_space_committed(self):
        """
        Gets the jvm_mem_pools_ps_eden_space_committed of this Metrics.

        :return: The jvm_mem_pools_ps_eden_space_committed of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_eden_space_committed

    @jvm_mem_pools_ps_eden_space_committed.setter
    def jvm_mem_pools_ps_eden_space_committed(self, jvm_mem_pools_ps_eden_space_committed):
        """
        Sets the jvm_mem_pools_ps_eden_space_committed of this Metrics.

        :param jvm_mem_pools_ps_eden_space_committed: The jvm_mem_pools_ps_eden_space_committed of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_eden_space_committed is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_eden_space_committed`, must not be `None`")

        self._jvm_mem_pools_ps_eden_space_committed = jvm_mem_pools_ps_eden_space_committed

    @property
    def vertx_http_servers_responses_3xx(self):
        """
        Gets the vertx_http_servers_responses_3xx of this Metrics.

        :return: The vertx_http_servers_responses_3xx of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_http_servers_responses_3xx

    @vertx_http_servers_responses_3xx.setter
    def vertx_http_servers_responses_3xx(self, vertx_http_servers_responses_3xx):
        """
        Sets the vertx_http_servers_responses_3xx of this Metrics.

        :param vertx_http_servers_responses_3xx: The vertx_http_servers_responses_3xx of this Metrics.
        :type: MetricMeter
        """
        if vertx_http_servers_responses_3xx is None:
            raise ValueError("Invalid value for `vertx_http_servers_responses_3xx`, must not be `None`")

        self._vertx_http_servers_responses_3xx = vertx_http_servers_responses_3xx

    @property
    def vertx_http_clients_iam_get_requests(self):
        """
        Gets the vertx_http_clients_iam_get_requests of this Metrics.

        :return: The vertx_http_clients_iam_get_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_clients_iam_get_requests

    @vertx_http_clients_iam_get_requests.setter
    def vertx_http_clients_iam_get_requests(self, vertx_http_clients_iam_get_requests):
        """
        Sets the vertx_http_clients_iam_get_requests of this Metrics.

        :param vertx_http_clients_iam_get_requests: The vertx_http_clients_iam_get_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_clients_iam_get_requests is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_get_requests`, must not be `None`")

        self._vertx_http_clients_iam_get_requests = vertx_http_clients_iam_get_requests

    @property
    def jvm_mem_heap_committed(self):
        """
        Gets the jvm_mem_heap_committed of this Metrics.

        :return: The jvm_mem_heap_committed of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_heap_committed

    @jvm_mem_heap_committed.setter
    def jvm_mem_heap_committed(self, jvm_mem_heap_committed):
        """
        Sets the jvm_mem_heap_committed of this Metrics.

        :param jvm_mem_heap_committed: The jvm_mem_heap_committed of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_heap_committed is None:
            raise ValueError("Invalid value for `jvm_mem_heap_committed`, must not be `None`")

        self._jvm_mem_heap_committed = jvm_mem_heap_committed

    @property
    def vertx_http_servers_open_netsockets(self):
        """
        Gets the vertx_http_servers_open_netsockets of this Metrics.

        :return: The vertx_http_servers_open_netsockets of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_http_servers_open_netsockets

    @vertx_http_servers_open_netsockets.setter
    def vertx_http_servers_open_netsockets(self, vertx_http_servers_open_netsockets):
        """
        Sets the vertx_http_servers_open_netsockets of this Metrics.

        :param vertx_http_servers_open_netsockets: The vertx_http_servers_open_netsockets of this Metrics.
        :type: MetricCounter
        """
        if vertx_http_servers_open_netsockets is None:
            raise ValueError("Invalid value for `vertx_http_servers_open_netsockets`, must not be `None`")

        self._vertx_http_servers_open_netsockets = vertx_http_servers_open_netsockets

    @property
    def vertx_http_servers_requests(self):
        """
        Gets the vertx_http_servers_requests of this Metrics.

        :return: The vertx_http_servers_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_servers_requests

    @vertx_http_servers_requests.setter
    def vertx_http_servers_requests(self, vertx_http_servers_requests):
        """
        Sets the vertx_http_servers_requests of this Metrics.

        :param vertx_http_servers_requests: The vertx_http_servers_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_servers_requests is None:
            raise ValueError("Invalid value for `vertx_http_servers_requests`, must not be `None`")

        self._vertx_http_servers_requests = vertx_http_servers_requests

    @property
    def persistent_store_ds_pool_pending_connections(self):
        """
        Gets the persistent_store_ds_pool_pending_connections of this Metrics.

        :return: The persistent_store_ds_pool_pending_connections of this Metrics.
        :rtype: MetricGauge
        """
        return self._persistent_store_ds_pool_pending_connections

    @persistent_store_ds_pool_pending_connections.setter
    def persistent_store_ds_pool_pending_connections(self, persistent_store_ds_pool_pending_connections):
        """
        Sets the persistent_store_ds_pool_pending_connections of this Metrics.

        :param persistent_store_ds_pool_pending_connections: The persistent_store_ds_pool_pending_connections of this Metrics.
        :type: MetricGauge
        """
        if persistent_store_ds_pool_pending_connections is None:
            raise ValueError("Invalid value for `persistent_store_ds_pool_pending_connections`, must not be `None`")

        self._persistent_store_ds_pool_pending_connections = persistent_store_ds_pool_pending_connections

    @property
    def jvm_mem_pools_ps_old_gen_used(self):
        """
        Gets the jvm_mem_pools_ps_old_gen_used of this Metrics.

        :return: The jvm_mem_pools_ps_old_gen_used of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_old_gen_used

    @jvm_mem_pools_ps_old_gen_used.setter
    def jvm_mem_pools_ps_old_gen_used(self, jvm_mem_pools_ps_old_gen_used):
        """
        Sets the jvm_mem_pools_ps_old_gen_used of this Metrics.

        :param jvm_mem_pools_ps_old_gen_used: The jvm_mem_pools_ps_old_gen_used of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_old_gen_used is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_old_gen_used`, must not be `None`")

        self._jvm_mem_pools_ps_old_gen_used = jvm_mem_pools_ps_old_gen_used

    @property
    def jvm_mem_pools_metaspace_usage(self):
        """
        Gets the jvm_mem_pools_metaspace_usage of this Metrics.

        :return: The jvm_mem_pools_metaspace_usage of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_metaspace_usage

    @jvm_mem_pools_metaspace_usage.setter
    def jvm_mem_pools_metaspace_usage(self, jvm_mem_pools_metaspace_usage):
        """
        Sets the jvm_mem_pools_metaspace_usage of this Metrics.

        :param jvm_mem_pools_metaspace_usage: The jvm_mem_pools_metaspace_usage of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_metaspace_usage is None:
            raise ValueError("Invalid value for `jvm_mem_pools_metaspace_usage`, must not be `None`")

        self._jvm_mem_pools_metaspace_usage = jvm_mem_pools_metaspace_usage

    @property
    def vertx_pools_worker_vert_x_worker_thread_in_use(self):
        """
        Gets the vertx_pools_worker_vert_x_worker_thread_in_use of this Metrics.

        :return: The vertx_pools_worker_vert_x_worker_thread_in_use of this Metrics.
        :rtype: MetricCounter
        """
        return self._vertx_pools_worker_vert_x_worker_thread_in_use

    @vertx_pools_worker_vert_x_worker_thread_in_use.setter
    def vertx_pools_worker_vert_x_worker_thread_in_use(self, vertx_pools_worker_vert_x_worker_thread_in_use):
        """
        Sets the vertx_pools_worker_vert_x_worker_thread_in_use of this Metrics.

        :param vertx_pools_worker_vert_x_worker_thread_in_use: The vertx_pools_worker_vert_x_worker_thread_in_use of this Metrics.
        :type: MetricCounter
        """
        if vertx_pools_worker_vert_x_worker_thread_in_use is None:
            raise ValueError("Invalid value for `vertx_pools_worker_vert_x_worker_thread_in_use`, must not be `None`")

        self._vertx_pools_worker_vert_x_worker_thread_in_use = vertx_pools_worker_vert_x_worker_thread_in_use

    @property
    def persistence_select_time_series(self):
        """
        Gets the persistence_select_time_series of this Metrics.

        :return: The persistence_select_time_series of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_select_time_series

    @persistence_select_time_series.setter
    def persistence_select_time_series(self, persistence_select_time_series):
        """
        Sets the persistence_select_time_series of this Metrics.

        :param persistence_select_time_series: The persistence_select_time_series of this Metrics.
        :type: MetricTimer
        """
        if persistence_select_time_series is None:
            raise ValueError("Invalid value for `persistence_select_time_series`, must not be `None`")

        self._persistence_select_time_series = persistence_select_time_series

    @property
    def jvm_mem_pools_metaspace_committed(self):
        """
        Gets the jvm_mem_pools_metaspace_committed of this Metrics.

        :return: The jvm_mem_pools_metaspace_committed of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_metaspace_committed

    @jvm_mem_pools_metaspace_committed.setter
    def jvm_mem_pools_metaspace_committed(self, jvm_mem_pools_metaspace_committed):
        """
        Sets the jvm_mem_pools_metaspace_committed of this Metrics.

        :param jvm_mem_pools_metaspace_committed: The jvm_mem_pools_metaspace_committed of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_metaspace_committed is None:
            raise ValueError("Invalid value for `jvm_mem_pools_metaspace_committed`, must not be `None`")

        self._jvm_mem_pools_metaspace_committed = jvm_mem_pools_metaspace_committed

    @property
    def vertx_eventbus_messages_delivered(self):
        """
        Gets the vertx_eventbus_messages_delivered of this Metrics.

        :return: The vertx_eventbus_messages_delivered of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_delivered

    @vertx_eventbus_messages_delivered.setter
    def vertx_eventbus_messages_delivered(self, vertx_eventbus_messages_delivered):
        """
        Sets the vertx_eventbus_messages_delivered of this Metrics.

        :param vertx_eventbus_messages_delivered: The vertx_eventbus_messages_delivered of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_delivered is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_delivered`, must not be `None`")

        self._vertx_eventbus_messages_delivered = vertx_eventbus_messages_delivered

    @property
    def vertx_http_clients_iam_patch_requests(self):
        """
        Gets the vertx_http_clients_iam_patch_requests of this Metrics.

        :return: The vertx_http_clients_iam_patch_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_clients_iam_patch_requests

    @vertx_http_clients_iam_patch_requests.setter
    def vertx_http_clients_iam_patch_requests(self, vertx_http_clients_iam_patch_requests):
        """
        Sets the vertx_http_clients_iam_patch_requests of this Metrics.

        :param vertx_http_clients_iam_patch_requests: The vertx_http_clients_iam_patch_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_clients_iam_patch_requests is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_patch_requests`, must not be `None`")

        self._vertx_http_clients_iam_patch_requests = vertx_http_clients_iam_patch_requests

    @property
    def vertx_eventbus_messages_received_remote(self):
        """
        Gets the vertx_eventbus_messages_received_remote of this Metrics.

        :return: The vertx_eventbus_messages_received_remote of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_received_remote

    @vertx_eventbus_messages_received_remote.setter
    def vertx_eventbus_messages_received_remote(self, vertx_eventbus_messages_received_remote):
        """
        Sets the vertx_eventbus_messages_received_remote of this Metrics.

        :param vertx_eventbus_messages_received_remote: The vertx_eventbus_messages_received_remote of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_received_remote is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_received_remote`, must not be `None`")

        self._vertx_eventbus_messages_received_remote = vertx_eventbus_messages_received_remote

    @property
    def vertx_http_clients_iam_responses_4xx(self):
        """
        Gets the vertx_http_clients_iam_responses_4xx of this Metrics.

        :return: The vertx_http_clients_iam_responses_4xx of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_http_clients_iam_responses_4xx

    @vertx_http_clients_iam_responses_4xx.setter
    def vertx_http_clients_iam_responses_4xx(self, vertx_http_clients_iam_responses_4xx):
        """
        Sets the vertx_http_clients_iam_responses_4xx of this Metrics.

        :param vertx_http_clients_iam_responses_4xx: The vertx_http_clients_iam_responses_4xx of this Metrics.
        :type: MetricMeter
        """
        if vertx_http_clients_iam_responses_4xx is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_responses_4xx`, must not be `None`")

        self._vertx_http_clients_iam_responses_4xx = vertx_http_clients_iam_responses_4xx

    @property
    def vertx_pools_worker_vert_x_worker_thread_pool_ratio(self):
        """
        Gets the vertx_pools_worker_vert_x_worker_thread_pool_ratio of this Metrics.

        :return: The vertx_pools_worker_vert_x_worker_thread_pool_ratio of this Metrics.
        :rtype: MetricGauge
        """
        return self._vertx_pools_worker_vert_x_worker_thread_pool_ratio

    @vertx_pools_worker_vert_x_worker_thread_pool_ratio.setter
    def vertx_pools_worker_vert_x_worker_thread_pool_ratio(self, vertx_pools_worker_vert_x_worker_thread_pool_ratio):
        """
        Sets the vertx_pools_worker_vert_x_worker_thread_pool_ratio of this Metrics.

        :param vertx_pools_worker_vert_x_worker_thread_pool_ratio: The vertx_pools_worker_vert_x_worker_thread_pool_ratio of this Metrics.
        :type: MetricGauge
        """
        if vertx_pools_worker_vert_x_worker_thread_pool_ratio is None:
            raise ValueError("Invalid value for `vertx_pools_worker_vert_x_worker_thread_pool_ratio`, must not be `None`")

        self._vertx_pools_worker_vert_x_worker_thread_pool_ratio = vertx_pools_worker_vert_x_worker_thread_pool_ratio

    @property
    def vertx_http_clients_iam_trace_requests(self):
        """
        Gets the vertx_http_clients_iam_trace_requests of this Metrics.

        :return: The vertx_http_clients_iam_trace_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_clients_iam_trace_requests

    @vertx_http_clients_iam_trace_requests.setter
    def vertx_http_clients_iam_trace_requests(self, vertx_http_clients_iam_trace_requests):
        """
        Sets the vertx_http_clients_iam_trace_requests of this Metrics.

        :param vertx_http_clients_iam_trace_requests: The vertx_http_clients_iam_trace_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_clients_iam_trace_requests is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_trace_requests`, must not be `None`")

        self._vertx_http_clients_iam_trace_requests = vertx_http_clients_iam_trace_requests

    @property
    def vertx_pools_worker_vert_x_worker_thread_max_pool_size(self):
        """
        Gets the vertx_pools_worker_vert_x_worker_thread_max_pool_size of this Metrics.

        :return: The vertx_pools_worker_vert_x_worker_thread_max_pool_size of this Metrics.
        :rtype: MetricGauge
        """
        return self._vertx_pools_worker_vert_x_worker_thread_max_pool_size

    @vertx_pools_worker_vert_x_worker_thread_max_pool_size.setter
    def vertx_pools_worker_vert_x_worker_thread_max_pool_size(self, vertx_pools_worker_vert_x_worker_thread_max_pool_size):
        """
        Sets the vertx_pools_worker_vert_x_worker_thread_max_pool_size of this Metrics.

        :param vertx_pools_worker_vert_x_worker_thread_max_pool_size: The vertx_pools_worker_vert_x_worker_thread_max_pool_size of this Metrics.
        :type: MetricGauge
        """
        if vertx_pools_worker_vert_x_worker_thread_max_pool_size is None:
            raise ValueError("Invalid value for `vertx_pools_worker_vert_x_worker_thread_max_pool_size`, must not be `None`")

        self._vertx_pools_worker_vert_x_worker_thread_max_pool_size = vertx_pools_worker_vert_x_worker_thread_max_pool_size

    @property
    def vertx_pools_worker_vert_x_internal_blocking_usage(self):
        """
        Gets the vertx_pools_worker_vert_x_internal_blocking_usage of this Metrics.

        :return: The vertx_pools_worker_vert_x_internal_blocking_usage of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_pools_worker_vert_x_internal_blocking_usage

    @vertx_pools_worker_vert_x_internal_blocking_usage.setter
    def vertx_pools_worker_vert_x_internal_blocking_usage(self, vertx_pools_worker_vert_x_internal_blocking_usage):
        """
        Sets the vertx_pools_worker_vert_x_internal_blocking_usage of this Metrics.

        :param vertx_pools_worker_vert_x_internal_blocking_usage: The vertx_pools_worker_vert_x_internal_blocking_usage of this Metrics.
        :type: MetricTimer
        """
        if vertx_pools_worker_vert_x_internal_blocking_usage is None:
            raise ValueError("Invalid value for `vertx_pools_worker_vert_x_internal_blocking_usage`, must not be `None`")

        self._vertx_pools_worker_vert_x_internal_blocking_usage = vertx_pools_worker_vert_x_internal_blocking_usage

    @property
    def persistence_select_check_if_exists(self):
        """
        Gets the persistence_select_check_if_exists of this Metrics.

        :return: The persistence_select_check_if_exists of this Metrics.
        :rtype: MetricTimer
        """
        return self._persistence_select_check_if_exists

    @persistence_select_check_if_exists.setter
    def persistence_select_check_if_exists(self, persistence_select_check_if_exists):
        """
        Sets the persistence_select_check_if_exists of this Metrics.

        :param persistence_select_check_if_exists: The persistence_select_check_if_exists of this Metrics.
        :type: MetricTimer
        """
        if persistence_select_check_if_exists is None:
            raise ValueError("Invalid value for `persistence_select_check_if_exists`, must not be `None`")

        self._persistence_select_check_if_exists = persistence_select_check_if_exists

    @property
    def vertx_eventbus_messages_received(self):
        """
        Gets the vertx_eventbus_messages_received of this Metrics.

        :return: The vertx_eventbus_messages_received of this Metrics.
        :rtype: MetricMeter
        """
        return self._vertx_eventbus_messages_received

    @vertx_eventbus_messages_received.setter
    def vertx_eventbus_messages_received(self, vertx_eventbus_messages_received):
        """
        Sets the vertx_eventbus_messages_received of this Metrics.

        :param vertx_eventbus_messages_received: The vertx_eventbus_messages_received of this Metrics.
        :type: MetricMeter
        """
        if vertx_eventbus_messages_received is None:
            raise ValueError("Invalid value for `vertx_eventbus_messages_received`, must not be `None`")

        self._vertx_eventbus_messages_received = vertx_eventbus_messages_received

    @property
    def jvm_gc_ps_mark_sweep_count(self):
        """
        Gets the jvm_gc_ps_mark_sweep_count of this Metrics.

        :return: The jvm_gc_ps_mark_sweep_count of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_gc_ps_mark_sweep_count

    @jvm_gc_ps_mark_sweep_count.setter
    def jvm_gc_ps_mark_sweep_count(self, jvm_gc_ps_mark_sweep_count):
        """
        Sets the jvm_gc_ps_mark_sweep_count of this Metrics.

        :param jvm_gc_ps_mark_sweep_count: The jvm_gc_ps_mark_sweep_count of this Metrics.
        :type: MetricGauge
        """
        if jvm_gc_ps_mark_sweep_count is None:
            raise ValueError("Invalid value for `jvm_gc_ps_mark_sweep_count`, must not be `None`")

        self._jvm_gc_ps_mark_sweep_count = jvm_gc_ps_mark_sweep_count

    @property
    def jvm_mem_pools_ps_survivor_space_max(self):
        """
        Gets the jvm_mem_pools_ps_survivor_space_max of this Metrics.

        :return: The jvm_mem_pools_ps_survivor_space_max of this Metrics.
        :rtype: MetricGauge
        """
        return self._jvm_mem_pools_ps_survivor_space_max

    @jvm_mem_pools_ps_survivor_space_max.setter
    def jvm_mem_pools_ps_survivor_space_max(self, jvm_mem_pools_ps_survivor_space_max):
        """
        Sets the jvm_mem_pools_ps_survivor_space_max of this Metrics.

        :param jvm_mem_pools_ps_survivor_space_max: The jvm_mem_pools_ps_survivor_space_max of this Metrics.
        :type: MetricGauge
        """
        if jvm_mem_pools_ps_survivor_space_max is None:
            raise ValueError("Invalid value for `jvm_mem_pools_ps_survivor_space_max`, must not be `None`")

        self._jvm_mem_pools_ps_survivor_space_max = jvm_mem_pools_ps_survivor_space_max

    @property
    def persistent_store_ds_pool_idle_connections(self):
        """
        Gets the persistent_store_ds_pool_idle_connections of this Metrics.

        :return: The persistent_store_ds_pool_idle_connections of this Metrics.
        :rtype: MetricGauge
        """
        return self._persistent_store_ds_pool_idle_connections

    @persistent_store_ds_pool_idle_connections.setter
    def persistent_store_ds_pool_idle_connections(self, persistent_store_ds_pool_idle_connections):
        """
        Sets the persistent_store_ds_pool_idle_connections of this Metrics.

        :param persistent_store_ds_pool_idle_connections: The persistent_store_ds_pool_idle_connections of this Metrics.
        :type: MetricGauge
        """
        if persistent_store_ds_pool_idle_connections is None:
            raise ValueError("Invalid value for `persistent_store_ds_pool_idle_connections`, must not be `None`")

        self._persistent_store_ds_pool_idle_connections = persistent_store_ds_pool_idle_connections

    @property
    def vertx_http_clients_iam_put_requests(self):
        """
        Gets the vertx_http_clients_iam_put_requests of this Metrics.

        :return: The vertx_http_clients_iam_put_requests of this Metrics.
        :rtype: MetricTimer
        """
        return self._vertx_http_clients_iam_put_requests

    @vertx_http_clients_iam_put_requests.setter
    def vertx_http_clients_iam_put_requests(self, vertx_http_clients_iam_put_requests):
        """
        Sets the vertx_http_clients_iam_put_requests of this Metrics.

        :param vertx_http_clients_iam_put_requests: The vertx_http_clients_iam_put_requests of this Metrics.
        :type: MetricTimer
        """
        if vertx_http_clients_iam_put_requests is None:
            raise ValueError("Invalid value for `vertx_http_clients_iam_put_requests`, must not be `None`")

        self._vertx_http_clients_iam_put_requests = vertx_http_clients_iam_put_requests

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Metrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
