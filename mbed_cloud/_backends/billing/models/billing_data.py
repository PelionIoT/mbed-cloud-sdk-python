# coding: utf-8

"""
    mbed-billing REST API documentation for API-server

    This document contains the public REST API definitions of the mbed-billing service's API server component.

    OpenAPI spec version: 1.3.6-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BillingData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, transactions=None, active_devices=None, generated=None, period_end=None, firmware_updates=None, period_start=None, bootstraps=None):
        """
        BillingData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'transactions': 'int',
            'active_devices': 'int',
            'generated': 'str',
            'period_end': 'str',
            'firmware_updates': 'int',
            'period_start': 'str',
            'bootstraps': 'int'
        }

        self.attribute_map = {
            'transactions': 'transactions',
            'active_devices': 'active_devices',
            'generated': 'generated',
            'period_end': 'period_end',
            'firmware_updates': 'firmware_updates',
            'period_start': 'period_start',
            'bootstraps': 'bootstraps'
        }

        self._transactions = transactions
        self._active_devices = active_devices
        self._generated = generated
        self._period_end = period_end
        self._firmware_updates = firmware_updates
        self._period_start = period_start
        self._bootstraps = bootstraps

    @property
    def transactions(self):
        """
        Gets the transactions of this BillingData.

        :return: The transactions of this BillingData.
        :rtype: int
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """
        Sets the transactions of this BillingData.

        :param transactions: The transactions of this BillingData.
        :type: int
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")

        self._transactions = transactions

    @property
    def active_devices(self):
        """
        Gets the active_devices of this BillingData.

        :return: The active_devices of this BillingData.
        :rtype: int
        """
        return self._active_devices

    @active_devices.setter
    def active_devices(self, active_devices):
        """
        Sets the active_devices of this BillingData.

        :param active_devices: The active_devices of this BillingData.
        :type: int
        """
        if active_devices is None:
            raise ValueError("Invalid value for `active_devices`, must not be `None`")

        self._active_devices = active_devices

    @property
    def generated(self):
        """
        Gets the generated of this BillingData.

        :return: The generated of this BillingData.
        :rtype: str
        """
        return self._generated

    @generated.setter
    def generated(self, generated):
        """
        Sets the generated of this BillingData.

        :param generated: The generated of this BillingData.
        :type: str
        """
        if generated is None:
            raise ValueError("Invalid value for `generated`, must not be `None`")
        if generated is not None and not re.search('(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{9})Z', generated):
            raise ValueError("Invalid value for `generated`, must be a follow pattern or equal to `/(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{9})Z/`")

        self._generated = generated

    @property
    def period_end(self):
        """
        Gets the period_end of this BillingData.

        :return: The period_end of this BillingData.
        :rtype: str
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """
        Sets the period_end of this BillingData.

        :param period_end: The period_end of this BillingData.
        :type: str
        """
        if period_end is None:
            raise ValueError("Invalid value for `period_end`, must not be `None`")
        if period_end is not None and not re.search('(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{9})Z', period_end):
            raise ValueError("Invalid value for `period_end`, must be a follow pattern or equal to `/(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{9})Z/`")

        self._period_end = period_end

    @property
    def firmware_updates(self):
        """
        Gets the firmware_updates of this BillingData.

        :return: The firmware_updates of this BillingData.
        :rtype: int
        """
        return self._firmware_updates

    @firmware_updates.setter
    def firmware_updates(self, firmware_updates):
        """
        Sets the firmware_updates of this BillingData.

        :param firmware_updates: The firmware_updates of this BillingData.
        :type: int
        """
        if firmware_updates is None:
            raise ValueError("Invalid value for `firmware_updates`, must not be `None`")

        self._firmware_updates = firmware_updates

    @property
    def period_start(self):
        """
        Gets the period_start of this BillingData.

        :return: The period_start of this BillingData.
        :rtype: str
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """
        Sets the period_start of this BillingData.

        :param period_start: The period_start of this BillingData.
        :type: str
        """
        if period_start is None:
            raise ValueError("Invalid value for `period_start`, must not be `None`")
        if period_start is not None and not re.search('(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{9})Z', period_start):
            raise ValueError("Invalid value for `period_start`, must be a follow pattern or equal to `/(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{9})Z/`")

        self._period_start = period_start

    @property
    def bootstraps(self):
        """
        Gets the bootstraps of this BillingData.

        :return: The bootstraps of this BillingData.
        :rtype: int
        """
        return self._bootstraps

    @bootstraps.setter
    def bootstraps(self, bootstraps):
        """
        Sets the bootstraps of this BillingData.

        :param bootstraps: The bootstraps of this BillingData.
        :type: int
        """
        if bootstraps is None:
            raise ValueError("Invalid value for `bootstraps`, must not be `None`")

        self._bootstraps = bootstraps

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BillingData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
