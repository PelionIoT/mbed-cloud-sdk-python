# coding: utf-8

"""
    mbed-billing REST API documentation for API-server

    This document contains the public REST API definitions of the mbed-billing service's API server component.

    OpenAPI spec version: 1.3.6-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MetricTimer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, p98=None, p99=None, p75=None, mean=None, mean_rate=None, m15_rate=None, min=None, m5_rate=None, p95=None, median=None, stddev=None, max=None, m1_rate=None, s1_rate=None, p999=None, count=None):
        """
        MetricTimer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'p98': 'float',
            'p99': 'float',
            'p75': 'float',
            'mean': 'float',
            'mean_rate': 'float',
            'm15_rate': 'float',
            'min': 'float',
            'm5_rate': 'float',
            'p95': 'float',
            'median': 'float',
            'stddev': 'float',
            'max': 'float',
            'm1_rate': 'float',
            's1_rate': 'float',
            'p999': 'float',
            'count': 'float'
        }

        self.attribute_map = {
            'p98': 'p98',
            'p99': 'p99',
            'p75': 'p75',
            'mean': 'mean',
            'mean_rate': 'mean_rate',
            'm15_rate': 'm15_rate',
            'min': 'min',
            'm5_rate': 'm5_rate',
            'p95': 'p95',
            'median': 'median',
            'stddev': 'stddev',
            'max': 'max',
            'm1_rate': 'm1_rate',
            's1_rate': 's1_rate',
            'p999': 'p999',
            'count': 'count'
        }

        self._p98 = p98
        self._p99 = p99
        self._p75 = p75
        self._mean = mean
        self._mean_rate = mean_rate
        self._m15_rate = m15_rate
        self._min = min
        self._m5_rate = m5_rate
        self._p95 = p95
        self._median = median
        self._stddev = stddev
        self._max = max
        self._m1_rate = m1_rate
        self._s1_rate = s1_rate
        self._p999 = p999
        self._count = count

    @property
    def p98(self):
        """
        Gets the p98 of this MetricTimer.

        :return: The p98 of this MetricTimer.
        :rtype: float
        """
        return self._p98

    @p98.setter
    def p98(self, p98):
        """
        Sets the p98 of this MetricTimer.

        :param p98: The p98 of this MetricTimer.
        :type: float
        """
        if p98 is None:
            raise ValueError("Invalid value for `p98`, must not be `None`")

        self._p98 = p98

    @property
    def p99(self):
        """
        Gets the p99 of this MetricTimer.

        :return: The p99 of this MetricTimer.
        :rtype: float
        """
        return self._p99

    @p99.setter
    def p99(self, p99):
        """
        Sets the p99 of this MetricTimer.

        :param p99: The p99 of this MetricTimer.
        :type: float
        """
        if p99 is None:
            raise ValueError("Invalid value for `p99`, must not be `None`")

        self._p99 = p99

    @property
    def p75(self):
        """
        Gets the p75 of this MetricTimer.

        :return: The p75 of this MetricTimer.
        :rtype: float
        """
        return self._p75

    @p75.setter
    def p75(self, p75):
        """
        Sets the p75 of this MetricTimer.

        :param p75: The p75 of this MetricTimer.
        :type: float
        """
        if p75 is None:
            raise ValueError("Invalid value for `p75`, must not be `None`")

        self._p75 = p75

    @property
    def mean(self):
        """
        Gets the mean of this MetricTimer.

        :return: The mean of this MetricTimer.
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """
        Sets the mean of this MetricTimer.

        :param mean: The mean of this MetricTimer.
        :type: float
        """
        if mean is None:
            raise ValueError("Invalid value for `mean`, must not be `None`")

        self._mean = mean

    @property
    def mean_rate(self):
        """
        Gets the mean_rate of this MetricTimer.

        :return: The mean_rate of this MetricTimer.
        :rtype: float
        """
        return self._mean_rate

    @mean_rate.setter
    def mean_rate(self, mean_rate):
        """
        Sets the mean_rate of this MetricTimer.

        :param mean_rate: The mean_rate of this MetricTimer.
        :type: float
        """
        if mean_rate is None:
            raise ValueError("Invalid value for `mean_rate`, must not be `None`")

        self._mean_rate = mean_rate

    @property
    def m15_rate(self):
        """
        Gets the m15_rate of this MetricTimer.

        :return: The m15_rate of this MetricTimer.
        :rtype: float
        """
        return self._m15_rate

    @m15_rate.setter
    def m15_rate(self, m15_rate):
        """
        Sets the m15_rate of this MetricTimer.

        :param m15_rate: The m15_rate of this MetricTimer.
        :type: float
        """
        if m15_rate is None:
            raise ValueError("Invalid value for `m15_rate`, must not be `None`")

        self._m15_rate = m15_rate

    @property
    def min(self):
        """
        Gets the min of this MetricTimer.

        :return: The min of this MetricTimer.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """
        Sets the min of this MetricTimer.

        :param min: The min of this MetricTimer.
        :type: float
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")

        self._min = min

    @property
    def m5_rate(self):
        """
        Gets the m5_rate of this MetricTimer.

        :return: The m5_rate of this MetricTimer.
        :rtype: float
        """
        return self._m5_rate

    @m5_rate.setter
    def m5_rate(self, m5_rate):
        """
        Sets the m5_rate of this MetricTimer.

        :param m5_rate: The m5_rate of this MetricTimer.
        :type: float
        """
        if m5_rate is None:
            raise ValueError("Invalid value for `m5_rate`, must not be `None`")

        self._m5_rate = m5_rate

    @property
    def p95(self):
        """
        Gets the p95 of this MetricTimer.

        :return: The p95 of this MetricTimer.
        :rtype: float
        """
        return self._p95

    @p95.setter
    def p95(self, p95):
        """
        Sets the p95 of this MetricTimer.

        :param p95: The p95 of this MetricTimer.
        :type: float
        """
        if p95 is None:
            raise ValueError("Invalid value for `p95`, must not be `None`")

        self._p95 = p95

    @property
    def median(self):
        """
        Gets the median of this MetricTimer.

        :return: The median of this MetricTimer.
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median):
        """
        Sets the median of this MetricTimer.

        :param median: The median of this MetricTimer.
        :type: float
        """
        if median is None:
            raise ValueError("Invalid value for `median`, must not be `None`")

        self._median = median

    @property
    def stddev(self):
        """
        Gets the stddev of this MetricTimer.

        :return: The stddev of this MetricTimer.
        :rtype: float
        """
        return self._stddev

    @stddev.setter
    def stddev(self, stddev):
        """
        Sets the stddev of this MetricTimer.

        :param stddev: The stddev of this MetricTimer.
        :type: float
        """
        if stddev is None:
            raise ValueError("Invalid value for `stddev`, must not be `None`")

        self._stddev = stddev

    @property
    def max(self):
        """
        Gets the max of this MetricTimer.

        :return: The max of this MetricTimer.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """
        Sets the max of this MetricTimer.

        :param max: The max of this MetricTimer.
        :type: float
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")

        self._max = max

    @property
    def m1_rate(self):
        """
        Gets the m1_rate of this MetricTimer.

        :return: The m1_rate of this MetricTimer.
        :rtype: float
        """
        return self._m1_rate

    @m1_rate.setter
    def m1_rate(self, m1_rate):
        """
        Sets the m1_rate of this MetricTimer.

        :param m1_rate: The m1_rate of this MetricTimer.
        :type: float
        """
        if m1_rate is None:
            raise ValueError("Invalid value for `m1_rate`, must not be `None`")

        self._m1_rate = m1_rate

    @property
    def s1_rate(self):
        """
        Gets the s1_rate of this MetricTimer.

        :return: The s1_rate of this MetricTimer.
        :rtype: float
        """
        return self._s1_rate

    @s1_rate.setter
    def s1_rate(self, s1_rate):
        """
        Sets the s1_rate of this MetricTimer.

        :param s1_rate: The s1_rate of this MetricTimer.
        :type: float
        """
        if s1_rate is None:
            raise ValueError("Invalid value for `s1_rate`, must not be `None`")

        self._s1_rate = s1_rate

    @property
    def p999(self):
        """
        Gets the p999 of this MetricTimer.

        :return: The p999 of this MetricTimer.
        :rtype: float
        """
        return self._p999

    @p999.setter
    def p999(self, p999):
        """
        Sets the p999 of this MetricTimer.

        :param p999: The p999 of this MetricTimer.
        :type: float
        """
        if p999 is None:
            raise ValueError("Invalid value for `p999`, must not be `None`")

        self._p999 = p999

    @property
    def count(self):
        """
        Gets the count of this MetricTimer.

        :return: The count of this MetricTimer.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this MetricTimer.

        :param count: The count of this MetricTimer.
        :type: float
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MetricTimer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
