# coding: utf-8

"""
    mbed-billing REST API documentation for API-server

    This document contains the public REST API definitions of the mbed-billing service's API server component.

    OpenAPI spec version: 1.3.6-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BuildInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, build_timestamp=None, built_by=None, build_number=None, build_tag=None, build_version=None):
        """
        BuildInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'build_timestamp': 'datetime',
            'built_by': 'str',
            'build_number': 'str',
            'build_tag': 'str',
            'build_version': 'str'
        }

        self.attribute_map = {
            'build_timestamp': 'build-timestamp',
            'built_by': 'built-by',
            'build_number': 'build-number',
            'build_tag': 'build-tag',
            'build_version': 'build-version'
        }

        self._build_timestamp = build_timestamp
        self._built_by = built_by
        self._build_number = build_number
        self._build_tag = build_tag
        self._build_version = build_version

    @property
    def build_timestamp(self):
        """
        Gets the build_timestamp of this BuildInfo.

        :return: The build_timestamp of this BuildInfo.
        :rtype: datetime
        """
        return self._build_timestamp

    @build_timestamp.setter
    def build_timestamp(self, build_timestamp):
        """
        Sets the build_timestamp of this BuildInfo.

        :param build_timestamp: The build_timestamp of this BuildInfo.
        :type: datetime
        """

        self._build_timestamp = build_timestamp

    @property
    def built_by(self):
        """
        Gets the built_by of this BuildInfo.

        :return: The built_by of this BuildInfo.
        :rtype: str
        """
        return self._built_by

    @built_by.setter
    def built_by(self, built_by):
        """
        Sets the built_by of this BuildInfo.

        :param built_by: The built_by of this BuildInfo.
        :type: str
        """

        self._built_by = built_by

    @property
    def build_number(self):
        """
        Gets the build_number of this BuildInfo.

        :return: The build_number of this BuildInfo.
        :rtype: str
        """
        return self._build_number

    @build_number.setter
    def build_number(self, build_number):
        """
        Sets the build_number of this BuildInfo.

        :param build_number: The build_number of this BuildInfo.
        :type: str
        """

        self._build_number = build_number

    @property
    def build_tag(self):
        """
        Gets the build_tag of this BuildInfo.

        :return: The build_tag of this BuildInfo.
        :rtype: str
        """
        return self._build_tag

    @build_tag.setter
    def build_tag(self, build_tag):
        """
        Sets the build_tag of this BuildInfo.

        :param build_tag: The build_tag of this BuildInfo.
        :type: str
        """

        self._build_tag = build_tag

    @property
    def build_version(self):
        """
        Gets the build_version of this BuildInfo.

        :return: The build_version of this BuildInfo.
        :rtype: str
        """
        return self._build_version

    @build_version.setter
    def build_version(self, build_version):
        """
        Sets the build_version of this BuildInfo.

        :param build_version: The build_version of this BuildInfo.
        :type: str
        """

        self._build_version = build_version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BuildInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
