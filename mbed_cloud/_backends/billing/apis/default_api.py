# coding: utf-8

"""
    mbed-billing REST API documentation for API-server

    This document contains the public REST API definitions of the mbed-billing service's API server component.

    OpenAPI spec version: 1.3.6-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def public_v1_build_get(self, **kwargs):
        """
        Build information
        Get a full build information of the running system.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.public_v1_build_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: BuildInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.public_v1_build_get_with_http_info(**kwargs)
        else:
            (data) = self.public_v1_build_get_with_http_info(**kwargs)
            return data

    def public_v1_build_get_with_http_info(self, **kwargs):
        """
        Build information
        Get a full build information of the running system.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.public_v1_build_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: BuildInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_v1_build_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/public/v1/build'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BuildInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def public_v1_health_get(self, **kwargs):
        """
        Service health
        Check current service health
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.public_v1_health_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Health
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.public_v1_health_get_with_http_info(**kwargs)
        else:
            (data) = self.public_v1_health_get_with_http_info(**kwargs)
            return data

    def public_v1_health_get_with_http_info(self, **kwargs):
        """
        Service health
        Check current service health
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.public_v1_health_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Health
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_v1_health_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/public/v1/health'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Health',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v1_accounts_get(self, **kwargs):
        """
        List of accounts
        Get a list of all accounts.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_accounts_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1_accounts_get_with_http_info(**kwargs)
        else:
            (data) = self.v1_accounts_get_with_http_info(**kwargs)
            return data

    def v1_accounts_get_with_http_info(self, **kwargs):
        """
        List of accounts
        Get a list of all accounts.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_accounts_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/v1/accounts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v1_activedevices_get(self, account, _from, to, **kwargs):
        """
        Active devices per account
        Get active devices for an account with specified from and to timestamp. Can be used to fetch active device data for a single month (full or partial) (for example: between 01.04.2017 00:00:00.000Z (inclusive) - 01.05.2017 00:00:00.000Z (exclusive) or between 15.04.2017 15:00:00.000Z (inclusive) - 15.04.2017 16:00.00.000Z (exclusive)).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_activedevices_get(account, _from, to, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account: account id (required)
        :param int _from: in epoch milliseconds, inclusive. (required)
        :param int to: in epoch milliseconds, exclusive. Must be greater than 'from' parameter and be on the same calendar month as 'from' parameter (can be also the absolute beginning of the next month as this parameter is exclusive). (required)
        :return: list[ActiveDevice]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1_activedevices_get_with_http_info(account, _from, to, **kwargs)
        else:
            (data) = self.v1_activedevices_get_with_http_info(account, _from, to, **kwargs)
            return data

    def v1_activedevices_get_with_http_info(self, account, _from, to, **kwargs):
        """
        Active devices per account
        Get active devices for an account with specified from and to timestamp. Can be used to fetch active device data for a single month (full or partial) (for example: between 01.04.2017 00:00:00.000Z (inclusive) - 01.05.2017 00:00:00.000Z (exclusive) or between 15.04.2017 15:00:00.000Z (inclusive) - 15.04.2017 16:00.00.000Z (exclusive)).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_activedevices_get_with_http_info(account, _from, to, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account: account id (required)
        :param int _from: in epoch milliseconds, inclusive. (required)
        :param int to: in epoch milliseconds, exclusive. Must be greater than 'from' parameter and be on the same calendar month as 'from' parameter (can be also the absolute beginning of the next month as this parameter is exclusive). (required)
        :return: list[ActiveDevice]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account', '_from', 'to']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_activedevices_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account' is set
        if ('account' not in params) or (params['account'] is None):
            raise ValueError("Missing the required parameter `account` when calling `v1_activedevices_get`")
        # verify the required parameter '_from' is set
        if ('_from' not in params) or (params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `v1_activedevices_get`")
        # verify the required parameter 'to' is set
        if ('to' not in params) or (params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `v1_activedevices_get`")

        if 'account' in params and len(params['account']) > 250:
            raise ValueError("Invalid value for parameter `account` when calling `v1_activedevices_get`, length must be less than or equal to `250`")
        if 'account' in params and len(params['account']) < 1:
            raise ValueError("Invalid value for parameter `account` when calling `v1_activedevices_get`, length must be greater than or equal to `1`")
        if '_from' in params and params['_from'] > 253402300800000:
            raise ValueError("Invalid value for parameter `_from` when calling `v1_activedevices_get`, must be a value less than or equal to `253402300800000`")
        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `v1_activedevices_get`, must be a value greater than or equal to `0`")
        if 'to' in params and params['to'] > 253402300800000:
            raise ValueError("Invalid value for parameter `to` when calling `v1_activedevices_get`, must be a value less than or equal to `253402300800000`")
        if 'to' in params and params['to'] < 0:
            raise ValueError("Invalid value for parameter `to` when calling `v1_activedevices_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        resource_path = '/v1/activedevices'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'account' in params:
            query_params['account'] = params['account']
        if '_from' in params:
            query_params['from'] = params['_from']
        if 'to' in params:
            query_params['to'] = params['to']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ActiveDevice]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v1_imports_activedevices_get(self, account, import_id, **kwargs):
        """
        Active devices
        Get active devices for an account in import log
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_imports_activedevices_get(account, import_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account: account id (required)
        :param int import_id: import id (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1_imports_activedevices_get_with_http_info(account, import_id, **kwargs)
        else:
            (data) = self.v1_imports_activedevices_get_with_http_info(account, import_id, **kwargs)
            return data

    def v1_imports_activedevices_get_with_http_info(self, account, import_id, **kwargs):
        """
        Active devices
        Get active devices for an account in import log
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_imports_activedevices_get_with_http_info(account, import_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account: account id (required)
        :param int import_id: import id (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account', 'import_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_imports_activedevices_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account' is set
        if ('account' not in params) or (params['account'] is None):
            raise ValueError("Missing the required parameter `account` when calling `v1_imports_activedevices_get`")
        # verify the required parameter 'import_id' is set
        if ('import_id' not in params) or (params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `v1_imports_activedevices_get`")

        if 'account' in params and len(params['account']) > 250:
            raise ValueError("Invalid value for parameter `account` when calling `v1_imports_activedevices_get`, length must be less than or equal to `250`")
        if 'account' in params and len(params['account']) < 1:
            raise ValueError("Invalid value for parameter `account` when calling `v1_imports_activedevices_get`, length must be greater than or equal to `1`")

        collection_formats = {}

        resource_path = '/v1/imports/activedevices'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'account' in params:
            query_params['account'] = params['account']
        if 'import_id' in params:
            query_params['import_id'] = params['import_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v1_imports_get(self, account, **kwargs):
        """
        Import log
        Get full import log for a single account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_imports_get(account, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account: account id (required)
        :return: list[ImportLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1_imports_get_with_http_info(account, **kwargs)
        else:
            (data) = self.v1_imports_get_with_http_info(account, **kwargs)
            return data

    def v1_imports_get_with_http_info(self, account, **kwargs):
        """
        Import log
        Get full import log for a single account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_imports_get_with_http_info(account, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account: account id (required)
        :return: list[ImportLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_imports_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account' is set
        if ('account' not in params) or (params['account'] is None):
            raise ValueError("Missing the required parameter `account` when calling `v1_imports_get`")

        if 'account' in params and len(params['account']) > 250:
            raise ValueError("Invalid value for parameter `account` when calling `v1_imports_get`, length must be less than or equal to `250`")
        if 'account' in params and len(params['account']) < 1:
            raise ValueError("Invalid value for parameter `account` when calling `v1_imports_get`, length must be greater than or equal to `1`")

        collection_formats = {}

        resource_path = '/v1/imports'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'account' in params:
            query_params['account'] = params['account']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ImportLog]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v1_metrics_get(self, **kwargs):
        """
        System metrics
        Get various internal metrics of the service.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_metrics_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Metrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1_metrics_get_with_http_info(**kwargs)
        else:
            (data) = self.v1_metrics_get_with_http_info(**kwargs)
            return data

    def v1_metrics_get_with_http_info(self, **kwargs):
        """
        System metrics
        Get various internal metrics of the service.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_metrics_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Metrics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_metrics_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/v1/metrics'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Metrics',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v1_report_activedevices_get(self, account, month, **kwargs):
        """
        Active devices per account in reporting
        Get active devices for a commercial account with specified month.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_report_activedevices_get(account, month, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account: account id (required)
        :param str month: year and month (required)
        :return: list[ActiveDevice]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1_report_activedevices_get_with_http_info(account, month, **kwargs)
        else:
            (data) = self.v1_report_activedevices_get_with_http_info(account, month, **kwargs)
            return data

    def v1_report_activedevices_get_with_http_info(self, account, month, **kwargs):
        """
        Active devices per account in reporting
        Get active devices for a commercial account with specified month.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_report_activedevices_get_with_http_info(account, month, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account: account id (required)
        :param str month: year and month (required)
        :return: list[ActiveDevice]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account', 'month']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_report_activedevices_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account' is set
        if ('account' not in params) or (params['account'] is None):
            raise ValueError("Missing the required parameter `account` when calling `v1_report_activedevices_get`")
        # verify the required parameter 'month' is set
        if ('month' not in params) or (params['month'] is None):
            raise ValueError("Missing the required parameter `month` when calling `v1_report_activedevices_get`")

        if 'account' in params and len(params['account']) > 250:
            raise ValueError("Invalid value for parameter `account` when calling `v1_report_activedevices_get`, length must be less than or equal to `250`")
        if 'account' in params and len(params['account']) < 1:
            raise ValueError("Invalid value for parameter `account` when calling `v1_report_activedevices_get`, length must be greater than or equal to `1`")
        if 'month' in params and not re.search('^\\d{4}-\\d{2}$', params['month']):
            raise ValueError("Invalid value for parameter `month` when calling `v1_report_activedevices_get`, must conform to the pattern `/^\\d{4}-\\d{2}$/`")

        collection_formats = {}

        resource_path = '/v1/report/activedevices'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'account' in params:
            query_params['account'] = params['account']
        if 'month' in params:
            query_params['month'] = params['month']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ActiveDevice]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v1_report_get(self, month, **kwargs):
        """
        Billing report
        Generate billing report for all commercial accounts.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_report_get(month, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str month: year and month (required)
        :param str format: report format
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1_report_get_with_http_info(month, **kwargs)
        else:
            (data) = self.v1_report_get_with_http_info(month, **kwargs)
            return data

    def v1_report_get_with_http_info(self, month, **kwargs):
        """
        Billing report
        Generate billing report for all commercial accounts.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_report_get_with_http_info(month, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str month: year and month (required)
        :param str format: report format
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['month', 'format']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_report_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'month' is set
        if ('month' not in params) or (params['month'] is None):
            raise ValueError("Missing the required parameter `month` when calling `v1_report_get`")

        if 'month' in params and not re.search('^\\d{4}-\\d{2}$', params['month']):
            raise ValueError("Invalid value for parameter `month` when calling `v1_report_get`, must conform to the pattern `/^\\d{4}-\\d{2}$/`")

        collection_formats = {}

        resource_path = '/v1/report'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'month' in params:
            query_params['month'] = params['month']
        if 'format' in params:
            query_params['format'] = params['format']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/zip'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Report',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v1_services_get(self, **kwargs):
        """
        Known services
        Get a full list of known services and when they have last updated data to the system.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_services_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Service]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1_services_get_with_http_info(**kwargs)
        else:
            (data) = self.v1_services_get_with_http_info(**kwargs)
            return data

    def v1_services_get_with_http_info(self, **kwargs):
        """
        Known services
        Get a full list of known services and when they have last updated data to the system.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_services_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Service]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_services_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/v1/services'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Service]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v1_stats_get(self, month, **kwargs):
        """
        Account billing data
        Get account billing data for one or multiple accounts for a given month.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_stats_get(month, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str month: year and month (required)
        :param str account: account id
        :return: list[AccountBillingData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1_stats_get_with_http_info(month, **kwargs)
        else:
            (data) = self.v1_stats_get_with_http_info(month, **kwargs)
            return data

    def v1_stats_get_with_http_info(self, month, **kwargs):
        """
        Account billing data
        Get account billing data for one or multiple accounts for a given month.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_stats_get_with_http_info(month, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str month: year and month (required)
        :param str account: account id
        :return: list[AccountBillingData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['month', 'account']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_stats_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'month' is set
        if ('month' not in params) or (params['month'] is None):
            raise ValueError("Missing the required parameter `month` when calling `v1_stats_get`")

        if 'month' in params and not re.search('^\\d{4}-\\d{2}$', params['month']):
            raise ValueError("Invalid value for parameter `month` when calling `v1_stats_get`, must conform to the pattern `/^\\d{4}-\\d{2}$/`")
        if 'account' in params and len(params['account']) > 250:
            raise ValueError("Invalid value for parameter `account` when calling `v1_stats_get`, length must be less than or equal to `250`")
        if 'account' in params and len(params['account']) < 1:
            raise ValueError("Invalid value for parameter `account` when calling `v1_stats_get`, length must be greater than or equal to `1`")

        collection_formats = {}

        resource_path = '/v1/stats'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'month' in params:
            query_params['month'] = params['month']
        if 'account' in params:
            query_params['account'] = params['account']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AccountBillingData]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v1_timeseries_get(self, **kwargs):
        """
        Known time series
        Get a full list of consecutive known time series grouped by service and timestamp.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_timeseries_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[ServiceTimeSeries]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v1_timeseries_get_with_http_info(**kwargs)
        else:
            (data) = self.v1_timeseries_get_with_http_info(**kwargs)
            return data

    def v1_timeseries_get_with_http_info(self, **kwargs):
        """
        Known time series
        Get a full list of consecutive known time series grouped by service and timestamp.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_timeseries_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[ServiceTimeSeries]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_timeseries_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/v1/timeseries'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ServiceTimeSeries]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
