# coding: utf-8

"""
    Connect Statistics API

    mbed Cloud Connect Statistics API provides statistics about other cloud services through defined counters.

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Metric(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, device_server_rest_api_error=None, bootstraps_failed=None, transactions=None, timestamp=None, registered_devices=None, bootstraps_pending=None, handshakes_failed=None, handshakes_successful=None, bootstraps_successful=None, device_server_rest_api_success=None):
        """
        Metric - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device_server_rest_api_error': 'int',
            'bootstraps_failed': 'int',
            'transactions': 'int',
            'timestamp': 'str',
            'registered_devices': 'int',
            'bootstraps_pending': 'int',
            'handshakes_failed': 'int',
            'handshakes_successful': 'int',
            'bootstraps_successful': 'int',
            'device_server_rest_api_success': 'int'
        }

        self.attribute_map = {
            'device_server_rest_api_error': 'device_server_rest_api_error',
            'bootstraps_failed': 'bootstraps_failed',
            'transactions': 'transactions',
            'timestamp': 'timestamp',
            'registered_devices': 'registered_devices',
            'bootstraps_pending': 'bootstraps_pending',
            'handshakes_failed': 'handshakes_failed',
            'handshakes_successful': 'handshakes_successful',
            'bootstraps_successful': 'bootstraps_successful',
            'device_server_rest_api_success': 'device_server_rest_api_success'
        }

        self._device_server_rest_api_error = device_server_rest_api_error
        self._bootstraps_failed = bootstraps_failed
        self._transactions = transactions
        self._timestamp = timestamp
        self._registered_devices = registered_devices
        self._bootstraps_pending = bootstraps_pending
        self._handshakes_failed = handshakes_failed
        self._handshakes_successful = handshakes_successful
        self._bootstraps_successful = bootstraps_successful
        self._device_server_rest_api_success = device_server_rest_api_success

    @property
    def device_server_rest_api_error(self):
        """
        Gets the device_server_rest_api_error of this Metric.
        Number of failed device server REST API requests the account has used.

        :return: The device_server_rest_api_error of this Metric.
        :rtype: int
        """
        return self._device_server_rest_api_error

    @device_server_rest_api_error.setter
    def device_server_rest_api_error(self, device_server_rest_api_error):
        """
        Sets the device_server_rest_api_error of this Metric.
        Number of failed device server REST API requests the account has used.

        :param device_server_rest_api_error: The device_server_rest_api_error of this Metric.
        :type: int
        """

        self._device_server_rest_api_error = device_server_rest_api_error

    @property
    def bootstraps_failed(self):
        """
        Gets the bootstraps_failed of this Metric.
        Number of failed bootstraps the account has used.

        :return: The bootstraps_failed of this Metric.
        :rtype: int
        """
        return self._bootstraps_failed

    @bootstraps_failed.setter
    def bootstraps_failed(self, bootstraps_failed):
        """
        Sets the bootstraps_failed of this Metric.
        Number of failed bootstraps the account has used.

        :param bootstraps_failed: The bootstraps_failed of this Metric.
        :type: int
        """

        self._bootstraps_failed = bootstraps_failed

    @property
    def transactions(self):
        """
        Gets the transactions of this Metric.
        Number of transaction events from devices linked to the account.

        :return: The transactions of this Metric.
        :rtype: int
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """
        Sets the transactions of this Metric.
        Number of transaction events from devices linked to the account.

        :param transactions: The transactions of this Metric.
        :type: int
        """

        self._transactions = transactions

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Metric.
        UTC time in RFC3339 format

        :return: The timestamp of this Metric.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Metric.
        UTC time in RFC3339 format

        :param timestamp: The timestamp of this Metric.
        :type: str
        """

        self._timestamp = timestamp

    @property
    def registered_devices(self):
        """
        Gets the registered_devices of this Metric.
        Maximum number of registered devices linked to the account.

        :return: The registered_devices of this Metric.
        :rtype: int
        """
        return self._registered_devices

    @registered_devices.setter
    def registered_devices(self, registered_devices):
        """
        Sets the registered_devices of this Metric.
        Maximum number of registered devices linked to the account.

        :param registered_devices: The registered_devices of this Metric.
        :type: int
        """

        self._registered_devices = registered_devices

    @property
    def bootstraps_pending(self):
        """
        Gets the bootstraps_pending of this Metric.
        Number of pending bootstraps the account has used.

        :return: The bootstraps_pending of this Metric.
        :rtype: int
        """
        return self._bootstraps_pending

    @bootstraps_pending.setter
    def bootstraps_pending(self, bootstraps_pending):
        """
        Sets the bootstraps_pending of this Metric.
        Number of pending bootstraps the account has used.

        :param bootstraps_pending: The bootstraps_pending of this Metric.
        :type: int
        """

        self._bootstraps_pending = bootstraps_pending

    @property
    def handshakes_failed(self):
        """
        Gets the handshakes_failed of this Metric.
        Number of failed handshakes the account has used.

        :return: The handshakes_failed of this Metric.
        :rtype: int
        """
        return self._handshakes_failed

    @handshakes_failed.setter
    def handshakes_failed(self, handshakes_failed):
        """
        Sets the handshakes_failed of this Metric.
        Number of failed handshakes the account has used.

        :param handshakes_failed: The handshakes_failed of this Metric.
        :type: int
        """

        self._handshakes_failed = handshakes_failed

    @property
    def handshakes_successful(self):
        """
        Gets the handshakes_successful of this Metric.
        Number of successful handshakes the account has used.

        :return: The handshakes_successful of this Metric.
        :rtype: int
        """
        return self._handshakes_successful

    @handshakes_successful.setter
    def handshakes_successful(self, handshakes_successful):
        """
        Sets the handshakes_successful of this Metric.
        Number of successful handshakes the account has used.

        :param handshakes_successful: The handshakes_successful of this Metric.
        :type: int
        """

        self._handshakes_successful = handshakes_successful

    @property
    def bootstraps_successful(self):
        """
        Gets the bootstraps_successful of this Metric.
        Number of successful bootstraps the account has used.

        :return: The bootstraps_successful of this Metric.
        :rtype: int
        """
        return self._bootstraps_successful

    @bootstraps_successful.setter
    def bootstraps_successful(self, bootstraps_successful):
        """
        Sets the bootstraps_successful of this Metric.
        Number of successful bootstraps the account has used.

        :param bootstraps_successful: The bootstraps_successful of this Metric.
        :type: int
        """

        self._bootstraps_successful = bootstraps_successful

    @property
    def device_server_rest_api_success(self):
        """
        Gets the device_server_rest_api_success of this Metric.
        Number of successful device server REST API requests the account has used.

        :return: The device_server_rest_api_success of this Metric.
        :rtype: int
        """
        return self._device_server_rest_api_success

    @device_server_rest_api_success.setter
    def device_server_rest_api_success(self, device_server_rest_api_success):
        """
        Sets the device_server_rest_api_success of this Metric.
        Number of successful device server REST API requests the account has used.

        :param device_server_rest_api_success: The device_server_rest_api_success of this Metric.
        :type: int
        """

        self._device_server_rest_api_success = device_server_rest_api_success

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Metric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
