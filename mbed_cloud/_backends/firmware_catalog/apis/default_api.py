# coding: utf-8

"""
    Firmware Catalog API

    This is the API Documentation for the mbed firmware catalog service which is part of the update service.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def firmware_image_create(self, datafile, name, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware images.  </p> <p>Create firmware image</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_create(datafile, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file datafile: The firmware image file to upload (required)
        :param str name: The name of the object (required)
        :param str description: The description of the object
        :return: FirmwareImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_image_create_with_http_info(datafile, name, **kwargs)
        else:
            (data) = self.firmware_image_create_with_http_info(datafile, name, **kwargs)
            return data

    def firmware_image_create_with_http_info(self, datafile, name, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware images.  </p> <p>Create firmware image</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_create_with_http_info(datafile, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file datafile: The firmware image file to upload (required)
        :param str name: The name of the object (required)
        :param str description: The description of the object
        :return: FirmwareImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datafile', 'name', 'description']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_image_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'datafile' is set
        if ('datafile' not in params) or (params['datafile'] is None):
            raise ValueError("Missing the required parameter `datafile` when calling `firmware_image_create`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `firmware_image_create`")

        if 'name' in params and len(params['name']) > 128:
            raise ValueError("Invalid value for parameter `name` when calling `firmware_image_create`, length must be less than or equal to `128`")

        collection_formats = {}

        resource_path = '/v3/firmware-images/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'datafile' in params:
            local_var_files['datafile'] = params['datafile']
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'name' in params:
            form_params.append(('name', params['name']))

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FirmwareImage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def firmware_image_destroy(self, image_id, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware images.  </p> <p>Delete firmware image</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_destroy(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int image_id: The ID of the firmware image (required)
        :return: FirmwareImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_image_destroy_with_http_info(image_id, **kwargs)
        else:
            (data) = self.firmware_image_destroy_with_http_info(image_id, **kwargs)
            return data

    def firmware_image_destroy_with_http_info(self, image_id, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware images.  </p> <p>Delete firmware image</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_destroy_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int image_id: The ID of the firmware image (required)
        :return: FirmwareImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_image_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `firmware_image_destroy`")


        collection_formats = {}

        resource_path = '/v3/firmware-images/{image_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FirmwareImage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def firmware_image_list(self, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware images.  </p> <p>List all firmware images. The result will be paged into pages of 50.</p> <h4 id=\"filtering\">Filtering:</h4> <p><code>?filter={URL encoded query string}</code></p> <p>The query string is made up of key/value pairs separated by ampersands. So for a query of <code>key1=value1&amp;key2=value2&amp;key3=value3</code> this would be encoded as follows:</p> <p><code>?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3</code></p> <p>The examples below show the queries in <em>unencoded</em> form.</p> <p>`</p> <h5 id=\"by-firmware-image-properties-all-properties-are-filterable\">By firmware image properties (all properties are filterable):</h5> <p>For example:</p> <p><code>name={value}</code></p> <h5 id=\"on-date-time-fields\">On date-time fields:</h5> <p>Date-time fields should be specified in UTC RFC3339 format <code>YYYY-MM-DDThh:mm:ss.msZ</code>. There are three permitted variations:</p> <ul> <li>UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z</li> <li>UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z</li> <li>UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z</li> </ul> <p>Date-time filtering supports three operators:</p> <ul> <li>equality</li> <li>greater than or equal to &ndash; field name suffixed with <code>__gte</code></li> <li>less than or equal to &ndash; field name suffixed with <code>__lte</code></li> </ul> <p>Lower and upper limits to a date-time range may be specified by including both the <code>__gte</code> and <code>__lte</code> forms in the filter.</p> <p><code>{field name}[|__lte|__gte]={UTC RFC3339 date-time}</code></p> <h4 id=\"multi-field-example\">Multi-field example</h4> <p><code>name=MyName&amp;bootstrapped&amp;created_at__gte=2016-11-30T16:25:12.1234Z&amp;created_at__lte=2016-12-30T00:00:00Z</code></p> <p>Encoded: <code>?filter=name%3DMyName%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z</code></p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: how many objects to retrieve in the page
        :param str order: ASC or DESC
        :param str after: the ID of the the item after which to retrieve the next page
        :param str filter: URL encoded query string parameter to filter returned data
        :param str include: Comma separated list of data fields to return. Currently supported: total_count
        :return: FirmwareImagePage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_image_list_with_http_info(**kwargs)
        else:
            (data) = self.firmware_image_list_with_http_info(**kwargs)
            return data

    def firmware_image_list_with_http_info(self, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware images.  </p> <p>List all firmware images. The result will be paged into pages of 50.</p> <h4 id=\"filtering\">Filtering:</h4> <p><code>?filter={URL encoded query string}</code></p> <p>The query string is made up of key/value pairs separated by ampersands. So for a query of <code>key1=value1&amp;key2=value2&amp;key3=value3</code> this would be encoded as follows:</p> <p><code>?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3</code></p> <p>The examples below show the queries in <em>unencoded</em> form.</p> <p>`</p> <h5 id=\"by-firmware-image-properties-all-properties-are-filterable\">By firmware image properties (all properties are filterable):</h5> <p>For example:</p> <p><code>name={value}</code></p> <h5 id=\"on-date-time-fields\">On date-time fields:</h5> <p>Date-time fields should be specified in UTC RFC3339 format <code>YYYY-MM-DDThh:mm:ss.msZ</code>. There are three permitted variations:</p> <ul> <li>UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z</li> <li>UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z</li> <li>UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z</li> </ul> <p>Date-time filtering supports three operators:</p> <ul> <li>equality</li> <li>greater than or equal to &ndash; field name suffixed with <code>__gte</code></li> <li>less than or equal to &ndash; field name suffixed with <code>__lte</code></li> </ul> <p>Lower and upper limits to a date-time range may be specified by including both the <code>__gte</code> and <code>__lte</code> forms in the filter.</p> <p><code>{field name}[|__lte|__gte]={UTC RFC3339 date-time}</code></p> <h4 id=\"multi-field-example\">Multi-field example</h4> <p><code>name=MyName&amp;bootstrapped&amp;created_at__gte=2016-11-30T16:25:12.1234Z&amp;created_at__lte=2016-12-30T00:00:00Z</code></p> <p>Encoded: <code>?filter=name%3DMyName%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z</code></p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: how many objects to retrieve in the page
        :param str order: ASC or DESC
        :param str after: the ID of the the item after which to retrieve the next page
        :param str filter: URL encoded query string parameter to filter returned data
        :param str include: Comma separated list of data fields to return. Currently supported: total_count
        :return: FirmwareImagePage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'order', 'after', 'filter', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_image_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/v3/firmware-images/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FirmwareImagePage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def firmware_image_retrieve(self, image_id, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware images.  </p> <p>Retrieve firmware image</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_retrieve(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int image_id: The ID of the firmware image (required)
        :return: FirmwareImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_image_retrieve_with_http_info(image_id, **kwargs)
        else:
            (data) = self.firmware_image_retrieve_with_http_info(image_id, **kwargs)
            return data

    def firmware_image_retrieve_with_http_info(self, image_id, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware images.  </p> <p>Retrieve firmware image</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_retrieve_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int image_id: The ID of the firmware image (required)
        :return: FirmwareImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_image_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `firmware_image_retrieve`")


        collection_formats = {}

        resource_path = '/v3/firmware-images/{image_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FirmwareImage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def firmware_manifest_create(self, datafile, name, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>Create firmware manifest</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_create(datafile, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file datafile: The manifest file to create. The size of the file is account specific and enforced by the api gateway (required)
        :param str name: The name of the object (required)
        :param str description: The description of the object
        :return: FirmwareManifest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_manifest_create_with_http_info(datafile, name, **kwargs)
        else:
            (data) = self.firmware_manifest_create_with_http_info(datafile, name, **kwargs)
            return data

    def firmware_manifest_create_with_http_info(self, datafile, name, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>Create firmware manifest</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_create_with_http_info(datafile, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file datafile: The manifest file to create. The size of the file is account specific and enforced by the api gateway (required)
        :param str name: The name of the object (required)
        :param str description: The description of the object
        :return: FirmwareManifest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datafile', 'name', 'description']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_manifest_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'datafile' is set
        if ('datafile' not in params) or (params['datafile'] is None):
            raise ValueError("Missing the required parameter `datafile` when calling `firmware_manifest_create`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `firmware_manifest_create`")

        if 'name' in params and len(params['name']) > 128:
            raise ValueError("Invalid value for parameter `name` when calling `firmware_manifest_create`, length must be less than or equal to `128`")

        collection_formats = {}

        resource_path = '/v3/firmware-manifests/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'datafile' in params:
            local_var_files['datafile'] = params['datafile']
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'name' in params:
            form_params.append(('name', params['name']))

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FirmwareManifest',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def firmware_manifest_destroy(self, manifest_id, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>Delete firmware manifest</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_destroy(manifest_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int manifest_id: The ID of the firmware manifest (required)
        :return: FirmwareManifest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_manifest_destroy_with_http_info(manifest_id, **kwargs)
        else:
            (data) = self.firmware_manifest_destroy_with_http_info(manifest_id, **kwargs)
            return data

    def firmware_manifest_destroy_with_http_info(self, manifest_id, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>Delete firmware manifest</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_destroy_with_http_info(manifest_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int manifest_id: The ID of the firmware manifest (required)
        :return: FirmwareManifest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['manifest_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_manifest_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'manifest_id' is set
        if ('manifest_id' not in params) or (params['manifest_id'] is None):
            raise ValueError("Missing the required parameter `manifest_id` when calling `firmware_manifest_destroy`")


        collection_formats = {}

        resource_path = '/v3/firmware-manifests/{manifest_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'manifest_id' in params:
            path_params['manifest_id'] = params['manifest_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FirmwareManifest',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def firmware_manifest_list(self, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>List all firmware manifests.</p> <h4 id=\"filtering\">Filtering:</h4> <p><code>?filter={URL encoded query string}</code></p> <p>The query string is made up of key/value pairs separated by ampersands. So for a query of <code>key1=value1&amp;key2=value2&amp;key3=value3</code> this would be encoded as follows:</p> <p><code>?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3</code></p> <p>The examples below show the queries in <em>unencoded</em> form.</p> <h5 id=\"by-manifest-id\">By manifest ID:</h5> <p>` manifest_id={id} '</p> <h5 id=\"by-firmware-manifest-properties-all-properties-are-filterable\">By firmware manifest properties (all properties are filterable):</h5> <p><code>device_class={value}</code></p> <h5 id=\"on-date-time-fields\">On date-time fields:</h5> <p>Date-time fields should be specified in UTC RFC3339 format <code>YYYY-MM-DDThh:mm:ss.msZ</code>. There are three permitted variations:</p> <ul> <li>UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z</li> <li>UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z</li> <li>UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z</li> </ul> <p>Date-time filtering supports three operators:</p> <ul> <li>equality</li> <li>greater than or equal to &ndash; field name suffixed with <code>__gte</code></li> <li>less than or equal to &ndash; field name suffixed with <code>__lte</code></li> </ul> <p>Lower and upper limits to a date-time range may be specified by including both the <code>__gte</code> and <code>__lte</code> forms in the filter.</p> <p><code>{field name}[|__lte|__gte]={UTC RFC3339 date-time}</code></p> <h4 id=\"multi-field-example\">Multi-field example</h4> <p><code>device_class=1234&amp;d&amp;created_at__gte=2016-11-30T16:25:12.1234Z&amp;created_at__lte=2016-12-30T00:00:00Z</code></p> <p>Encoded: <code>?filter=device_class%3D1234%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z</code></p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: how many objects to retrieve in the page
        :param str order: ASC or DESC
        :param str after: the ID of the the item after which to retrieve the next page
        :param str filter: URL encoded query string parameter to filter returned data
        :param str include: Comma separated list of data fields to return. Currently supported: total_count
        :return: FirmwareManifestPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_manifest_list_with_http_info(**kwargs)
        else:
            (data) = self.firmware_manifest_list_with_http_info(**kwargs)
            return data

    def firmware_manifest_list_with_http_info(self, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>List all firmware manifests.</p> <h4 id=\"filtering\">Filtering:</h4> <p><code>?filter={URL encoded query string}</code></p> <p>The query string is made up of key/value pairs separated by ampersands. So for a query of <code>key1=value1&amp;key2=value2&amp;key3=value3</code> this would be encoded as follows:</p> <p><code>?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3</code></p> <p>The examples below show the queries in <em>unencoded</em> form.</p> <h5 id=\"by-manifest-id\">By manifest ID:</h5> <p>` manifest_id={id} '</p> <h5 id=\"by-firmware-manifest-properties-all-properties-are-filterable\">By firmware manifest properties (all properties are filterable):</h5> <p><code>device_class={value}</code></p> <h5 id=\"on-date-time-fields\">On date-time fields:</h5> <p>Date-time fields should be specified in UTC RFC3339 format <code>YYYY-MM-DDThh:mm:ss.msZ</code>. There are three permitted variations:</p> <ul> <li>UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z</li> <li>UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z</li> <li>UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z</li> </ul> <p>Date-time filtering supports three operators:</p> <ul> <li>equality</li> <li>greater than or equal to &ndash; field name suffixed with <code>__gte</code></li> <li>less than or equal to &ndash; field name suffixed with <code>__lte</code></li> </ul> <p>Lower and upper limits to a date-time range may be specified by including both the <code>__gte</code> and <code>__lte</code> forms in the filter.</p> <p><code>{field name}[|__lte|__gte]={UTC RFC3339 date-time}</code></p> <h4 id=\"multi-field-example\">Multi-field example</h4> <p><code>device_class=1234&amp;d&amp;created_at__gte=2016-11-30T16:25:12.1234Z&amp;created_at__lte=2016-12-30T00:00:00Z</code></p> <p>Encoded: <code>?filter=device_class%3D1234%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z</code></p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: how many objects to retrieve in the page
        :param str order: ASC or DESC
        :param str after: the ID of the the item after which to retrieve the next page
        :param str filter: URL encoded query string parameter to filter returned data
        :param str include: Comma separated list of data fields to return. Currently supported: total_count
        :return: FirmwareManifestPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'order', 'after', 'filter', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_manifest_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/v3/firmware-manifests/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FirmwareManifestPage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def firmware_manifest_retrieve(self, manifest_id, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>Retrieve firmware manifest</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_retrieve(manifest_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int manifest_id: The ID of the firmware manifest (required)
        :return: FirmwareManifest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_manifest_retrieve_with_http_info(manifest_id, **kwargs)
        else:
            (data) = self.firmware_manifest_retrieve_with_http_info(manifest_id, **kwargs)
            return data

    def firmware_manifest_retrieve_with_http_info(self, manifest_id, **kwargs):
        """
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>Retrieve firmware manifest</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_retrieve_with_http_info(manifest_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int manifest_id: The ID of the firmware manifest (required)
        :return: FirmwareManifest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['manifest_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_manifest_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'manifest_id' is set
        if ('manifest_id' not in params) or (params['manifest_id'] is None):
            raise ValueError("Missing the required parameter `manifest_id` when calling `firmware_manifest_retrieve`")


        collection_formats = {}

        resource_path = '/v3/firmware-manifests/{manifest_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'manifest_id' in params:
            path_params['manifest_id'] = params['manifest_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FirmwareManifest',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
