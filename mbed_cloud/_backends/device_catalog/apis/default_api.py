# coding: utf-8

"""
    Device Catalog API

    This is the API Documentation for the mbed device catalog update service.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def device_create(self, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>Create device</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_create(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_create_with_http_info(**kwargs)
        else:
            (data) = self.device_create_with_http_info(**kwargs)
            return data

    def device_create_with_http_info(self, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>Create device</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_create_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/v3/devices/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def device_destroy(self, device_id, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>Delete device</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_destroy(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_destroy_with_http_info(device_id, **kwargs)
        else:
            (data) = self.device_destroy_with_http_info(device_id, **kwargs)
            return data

    def device_destroy_with_http_info(self, device_id, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>Delete device</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_destroy_with_http_info(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `device_destroy`")


        collection_formats = {}

        resource_path = '/v3/devices/{device_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'device_id' in params:
            path_params['device_id'] = params['device_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def device_list(self, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>List all update devices.</p> <h4 id=\"filtering\">Filtering:</h4> <p><code>?filter={URL encoded query string}</code></p> <p>The query string is made up of key/value pairs separated by ampersands. So for a query of <code>key1=value1&amp;key2=value2&amp;key3=value3</code> this would be encoded as follows:</p> <p><code>?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3</code></p> <p>The examples below show the queries in <em>unencoded</em> form.</p> <h5 id=\"by-device-properties-all-properties-are-filterable\">By device properties (all properties are filterable):</h5> <p><code>state=[unenrolled|cloud_enrolling|bootstrapped|registered]</code></p> <p><code>device_class={value}</code></p> <h5 id=\"on-date-time-fields\">On date-time fields:</h5> <p>Date-time fields should be specified in UTC RFC3339 format <code>YYYY-MM-DDThh:mm:ss.msZ</code>. There are three permitted variations:</p> <ul> <li>UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z</li> <li>UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z</li> <li>UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z</li> </ul> <p>Date-time filtering supports three operators:</p> <ul> <li>equality</li> <li>greater than or equal to &ndash; field name suffixed with <code>__gte</code></li> <li>less than or equal to &ndash; field name suffixed with <code>__lte</code></li> </ul> <p>Lower and upper limits to a date-time range may be specified by including both the <code>__gte</code> and <code>__lte</code> forms in the filter.</p> <p><code>{field name}[|__lte|__gte]={UTC RFC3339 date-time}</code></p> <h5 id=\"on-device-custom-attributes\">On device custom attributes:</h5> <p><code>custom_attributes__{param}={value}</code></p> <p><code>custom_attributes__tag=TAG1</code></p> <h4 id=\"multi-field-example\">Multi-field example</h4> <p><code>state=bootstrapped&amp;created_at__gte=2016-11-30T16:25:12.1234Z&amp;created_at__lte=2016-12-30T00:00:00Z</code></p> <p>Encoded: <code>?filter=state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z</code></p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: how many objects to retrieve in the page
        :param str order: ASC or DESC
        :param str after: the ID of the the item after which to retrieve the next page
        :param str filter: URL encoded query string parameter to filter returned data
        :return: DevicePage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_list_with_http_info(**kwargs)
        else:
            (data) = self.device_list_with_http_info(**kwargs)
            return data

    def device_list_with_http_info(self, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>List all update devices.</p> <h4 id=\"filtering\">Filtering:</h4> <p><code>?filter={URL encoded query string}</code></p> <p>The query string is made up of key/value pairs separated by ampersands. So for a query of <code>key1=value1&amp;key2=value2&amp;key3=value3</code> this would be encoded as follows:</p> <p><code>?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3</code></p> <p>The examples below show the queries in <em>unencoded</em> form.</p> <h5 id=\"by-device-properties-all-properties-are-filterable\">By device properties (all properties are filterable):</h5> <p><code>state=[unenrolled|cloud_enrolling|bootstrapped|registered]</code></p> <p><code>device_class={value}</code></p> <h5 id=\"on-date-time-fields\">On date-time fields:</h5> <p>Date-time fields should be specified in UTC RFC3339 format <code>YYYY-MM-DDThh:mm:ss.msZ</code>. There are three permitted variations:</p> <ul> <li>UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z</li> <li>UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z</li> <li>UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z</li> </ul> <p>Date-time filtering supports three operators:</p> <ul> <li>equality</li> <li>greater than or equal to &ndash; field name suffixed with <code>__gte</code></li> <li>less than or equal to &ndash; field name suffixed with <code>__lte</code></li> </ul> <p>Lower and upper limits to a date-time range may be specified by including both the <code>__gte</code> and <code>__lte</code> forms in the filter.</p> <p><code>{field name}[|__lte|__gte]={UTC RFC3339 date-time}</code></p> <h5 id=\"on-device-custom-attributes\">On device custom attributes:</h5> <p><code>custom_attributes__{param}={value}</code></p> <p><code>custom_attributes__tag=TAG1</code></p> <h4 id=\"multi-field-example\">Multi-field example</h4> <p><code>state=bootstrapped&amp;created_at__gte=2016-11-30T16:25:12.1234Z&amp;created_at__lte=2016-12-30T00:00:00Z</code></p> <p>Encoded: <code>?filter=state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z</code></p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: how many objects to retrieve in the page
        :param str order: ASC or DESC
        :param str after: the ID of the the item after which to retrieve the next page
        :param str filter: URL encoded query string parameter to filter returned data
        :return: DevicePage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'order', 'after', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/v3/devices/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DevicePage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def device_log_list(self, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>List all device logs.</p> <h4 id=\"filtering\">Filtering:</h4> <p><code>?filter={URL encoded query string}</code></p> <p>The query string is made up of key/value pairs separated by ampersands. So for a query of <code>key1=value1&amp;key2=value2&amp;key3=value3</code> this would be encoded as follows:</p> <p><code>?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3</code></p> <p>The examples below show the queries in <em>unencoded</em> form.</p> <h5 id=\"by-device95id\">By device_id:</h5> <p><code>device_id={id}</code></p> <h5 id=\"by-state-change\">By state change:</h5> <p><code>state_change=[True|False]</code></p> <h5 id=\"by-event-type\">By event type:</h5> <p><code>event_type={value}</code></p> <h5 id=\"on-date-time-fields\">On date-time fields:</h5> <p>Date-time fields should be specified in UTC RFC3339 format <code>YYYY-MM-DDThh:mm:ss.msZ</code>. There are three permitted variations:</p> <ul> <li>UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z</li> <li>UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z</li> <li>UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z</li> </ul> <p>Date-time filtering supports three operators:</p> <ul> <li>equality</li> <li>greater than or equal to &ndash; field name suffixed with <code>__gte</code></li> <li>less than or equal to &ndash; field name suffixed with <code>__lte</code></li> </ul> <p>Lower and upper limits to a date-time range may be specified by including both the <code>__gte</code> and <code>__lte</code> forms in the filter.</p> <p><code>{field name}[|__lte|__gte]={UTC RFC3339 date-time}</code></p> <h5 id=\"on-device-custom-attributes\">On device custom attributes:</h5> <p><code>device__custom_attributes__{param}={value}</code></p> <p><code>device__custom_attributes__tag=TAG1</code></p> <h5 id=\"by-device-attributes\">By Device attributes:</h5> <p><code>device__deployed_state={value}</code></p> <p><code>device__device_class={value}</code></p> <p><code>device__name={value}</code></p> <h4 id=\"multi-field-example\">Multi-field example</h4> <p><code>device_id=0158d38771f70000000000010010038c&amp;state_change=True&amp;date_time__gte=2016-11-30T16:25:12.1234Z</code></p> <p>Encoded: <code>?filter=device_id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z</code></p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_log_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: how many objects to retrieve in the page
        :param str order: ASC or DESC
        :param str after: the ID of the the item after which to retrieve the next page
        :param str filter: URL encoded query string parameter to filter returned data
        :return: DeviceLogPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_log_list_with_http_info(**kwargs)
        else:
            (data) = self.device_log_list_with_http_info(**kwargs)
            return data

    def device_log_list_with_http_info(self, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>List all device logs.</p> <h4 id=\"filtering\">Filtering:</h4> <p><code>?filter={URL encoded query string}</code></p> <p>The query string is made up of key/value pairs separated by ampersands. So for a query of <code>key1=value1&amp;key2=value2&amp;key3=value3</code> this would be encoded as follows:</p> <p><code>?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3</code></p> <p>The examples below show the queries in <em>unencoded</em> form.</p> <h5 id=\"by-device95id\">By device_id:</h5> <p><code>device_id={id}</code></p> <h5 id=\"by-state-change\">By state change:</h5> <p><code>state_change=[True|False]</code></p> <h5 id=\"by-event-type\">By event type:</h5> <p><code>event_type={value}</code></p> <h5 id=\"on-date-time-fields\">On date-time fields:</h5> <p>Date-time fields should be specified in UTC RFC3339 format <code>YYYY-MM-DDThh:mm:ss.msZ</code>. There are three permitted variations:</p> <ul> <li>UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z</li> <li>UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z</li> <li>UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z</li> </ul> <p>Date-time filtering supports three operators:</p> <ul> <li>equality</li> <li>greater than or equal to &ndash; field name suffixed with <code>__gte</code></li> <li>less than or equal to &ndash; field name suffixed with <code>__lte</code></li> </ul> <p>Lower and upper limits to a date-time range may be specified by including both the <code>__gte</code> and <code>__lte</code> forms in the filter.</p> <p><code>{field name}[|__lte|__gte]={UTC RFC3339 date-time}</code></p> <h5 id=\"on-device-custom-attributes\">On device custom attributes:</h5> <p><code>device__custom_attributes__{param}={value}</code></p> <p><code>device__custom_attributes__tag=TAG1</code></p> <h5 id=\"by-device-attributes\">By Device attributes:</h5> <p><code>device__deployed_state={value}</code></p> <p><code>device__device_class={value}</code></p> <p><code>device__name={value}</code></p> <h4 id=\"multi-field-example\">Multi-field example</h4> <p><code>device_id=0158d38771f70000000000010010038c&amp;state_change=True&amp;date_time__gte=2016-11-30T16:25:12.1234Z</code></p> <p>Encoded: <code>?filter=device_id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z</code></p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_log_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: how many objects to retrieve in the page
        :param str order: ASC or DESC
        :param str after: the ID of the the item after which to retrieve the next page
        :param str filter: URL encoded query string parameter to filter returned data
        :return: DeviceLogPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'order', 'after', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_log_list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/v3/devicelog/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceLogPage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def device_log_retrieve(self, device_log_id, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>Retrieve device log.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_log_retrieve(device_log_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_log_id: (required)
        :return: DeviceLogData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_log_retrieve_with_http_info(device_log_id, **kwargs)
        else:
            (data) = self.device_log_retrieve_with_http_info(device_log_id, **kwargs)
            return data

    def device_log_retrieve_with_http_info(self, device_log_id, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>Retrieve device log.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_log_retrieve_with_http_info(device_log_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_log_id: (required)
        :return: DeviceLogData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_log_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_log_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_log_id' is set
        if ('device_log_id' not in params) or (params['device_log_id'] is None):
            raise ValueError("Missing the required parameter `device_log_id` when calling `device_log_retrieve`")


        collection_formats = {}

        resource_path = '/v3/devicelog/{device_log_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'device_log_id' in params:
            path_params['device_log_id'] = params['device_log_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceLogData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def device_partial_update(self, device_id, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>Update device fields</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_partial_update(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: The ID of the device (required)
        :param bool auto_update: Mark this device for auto firmware update
        :param str custom_attributes: Up to 5 custom JSON attributes
        :param str deployment: The last deployment used on the device
        :param str description: The description of the object
        :param str device_class: The device class
        :param str manifest: URL for the current device manifest
        :param str mechanism: The ID of the channel used to communicate with the device
        :param str mechanism_url: The address of the connector to use
        :param str name: The name of the object
        :param str object: The API resource entity
        :param str provision_key: The key used to provision the device
        :param str serial_number: The serial number of the device
        :param str state: The current state of the device
        :param str vendor_id: The device vendor ID
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_partial_update_with_http_info(device_id, **kwargs)
        else:
            (data) = self.device_partial_update_with_http_info(device_id, **kwargs)
            return data

    def device_partial_update_with_http_info(self, device_id, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>Update device fields</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_partial_update_with_http_info(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: The ID of the device (required)
        :param bool auto_update: Mark this device for auto firmware update
        :param str custom_attributes: Up to 5 custom JSON attributes
        :param str deployment: The last deployment used on the device
        :param str description: The description of the object
        :param str device_class: The device class
        :param str manifest: URL for the current device manifest
        :param str mechanism: The ID of the channel used to communicate with the device
        :param str mechanism_url: The address of the connector to use
        :param str name: The name of the object
        :param str object: The API resource entity
        :param str provision_key: The key used to provision the device
        :param str serial_number: The serial number of the device
        :param str state: The current state of the device
        :param str vendor_id: The device vendor ID
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'auto_update', 'custom_attributes', 'deployment', 'description', 'device_class', 'manifest', 'mechanism', 'mechanism_url', 'name', 'object', 'provision_key', 'serial_number', 'state', 'vendor_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `device_partial_update`")


        collection_formats = {}

        resource_path = '/v3/devices/{device_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'device_id' in params:
            path_params['device_id'] = params['device_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'auto_update' in params:
            form_params.append(('auto_update', params['auto_update']))
        if 'custom_attributes' in params:
            form_params.append(('custom_attributes', params['custom_attributes']))
        if 'deployment' in params:
            form_params.append(('deployment', params['deployment']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'device_class' in params:
            form_params.append(('device_class', params['device_class']))
        if 'manifest' in params:
            form_params.append(('manifest', params['manifest']))
        if 'mechanism' in params:
            form_params.append(('mechanism', params['mechanism']))
        if 'mechanism_url' in params:
            form_params.append(('mechanism_url', params['mechanism_url']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'object' in params:
            form_params.append(('object', params['object']))
        if 'provision_key' in params:
            form_params.append(('provision_key', params['provision_key']))
        if 'serial_number' in params:
            form_params.append(('serial_number', params['serial_number']))
        if 'state' in params:
            form_params.append(('state', params['state']))
        if 'vendor_id' in params:
            form_params.append(('vendor_id', params['vendor_id']))

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceSerializer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def device_retrieve(self, device_id, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>Retrieve device.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_retrieve(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: (required)
        :return: DeviceData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_retrieve_with_http_info(device_id, **kwargs)
        else:
            (data) = self.device_retrieve_with_http_info(device_id, **kwargs)
            return data

    def device_retrieve_with_http_info(self, device_id, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>Retrieve device.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_retrieve_with_http_info(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: (required)
        :return: DeviceData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `device_retrieve`")


        collection_formats = {}

        resource_path = '/v3/devices/{device_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'device_id' in params:
            path_params['device_id'] = params['device_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def device_update(self, device_id, mechanism, provision_key, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>Update device.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_update(device_id, mechanism, provision_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: The ID of the device (required)
        :param str mechanism: The ID of the channel used to communicate with the device (required)
        :param str provision_key: The key used to provision the device (required)
        :param bool auto_update: Mark this device for auto firmware update
        :param str custom_attributes: Up to 5 custom JSON attributes
        :param str deployment: The last deployment used on the device
        :param str description: The description of the object
        :param str device_class: The device class
        :param str manifest: URL for the current device manifest
        :param str mechanism_url: The address of the connector to use
        :param str name: The name of the object
        :param str object: The API resource entity
        :param str serial_number: The serial number of the device
        :param str state: The current state of the device
        :param str vendor_id: The device vendor ID
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_update_with_http_info(device_id, mechanism, provision_key, **kwargs)
        else:
            (data) = self.device_update_with_http_info(device_id, mechanism, provision_key, **kwargs)
            return data

    def device_update_with_http_info(self, device_id, mechanism, provision_key, **kwargs):
        """
        <p>The APIs for creating and manipulating devices.  </p> <p>Update device.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_update_with_http_info(device_id, mechanism, provision_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: The ID of the device (required)
        :param str mechanism: The ID of the channel used to communicate with the device (required)
        :param str provision_key: The key used to provision the device (required)
        :param bool auto_update: Mark this device for auto firmware update
        :param str custom_attributes: Up to 5 custom JSON attributes
        :param str deployment: The last deployment used on the device
        :param str description: The description of the object
        :param str device_class: The device class
        :param str manifest: URL for the current device manifest
        :param str mechanism_url: The address of the connector to use
        :param str name: The name of the object
        :param str object: The API resource entity
        :param str serial_number: The serial number of the device
        :param str state: The current state of the device
        :param str vendor_id: The device vendor ID
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'mechanism', 'provision_key', 'auto_update', 'custom_attributes', 'deployment', 'description', 'device_class', 'manifest', 'mechanism_url', 'name', 'object', 'serial_number', 'state', 'vendor_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `device_update`")
        # verify the required parameter 'mechanism' is set
        if ('mechanism' not in params) or (params['mechanism'] is None):
            raise ValueError("Missing the required parameter `mechanism` when calling `device_update`")
        # verify the required parameter 'provision_key' is set
        if ('provision_key' not in params) or (params['provision_key'] is None):
            raise ValueError("Missing the required parameter `provision_key` when calling `device_update`")


        collection_formats = {}

        resource_path = '/v3/devices/{device_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'device_id' in params:
            path_params['device_id'] = params['device_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'auto_update' in params:
            form_params.append(('auto_update', params['auto_update']))
        if 'custom_attributes' in params:
            form_params.append(('custom_attributes', params['custom_attributes']))
        if 'deployment' in params:
            form_params.append(('deployment', params['deployment']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'device_class' in params:
            form_params.append(('device_class', params['device_class']))
        if 'manifest' in params:
            form_params.append(('manifest', params['manifest']))
        if 'mechanism' in params:
            form_params.append(('mechanism', params['mechanism']))
        if 'mechanism_url' in params:
            form_params.append(('mechanism_url', params['mechanism_url']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'object' in params:
            form_params.append(('object', params['object']))
        if 'provision_key' in params:
            form_params.append(('provision_key', params['provision_key']))
        if 'serial_number' in params:
            form_params.append(('serial_number', params['serial_number']))
        if 'state' in params:
            form_params.append(('state', params['state']))
        if 'vendor_id' in params:
            form_params.append(('vendor_id', params['vendor_id']))

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceSerializer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
