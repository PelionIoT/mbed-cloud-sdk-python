# coding: utf-8

"""
    Update Service API

    This is the API documentation for the Mbed deployment service, which is part of the update service.

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ManifestContentsPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, format=None, reference=None, storage_identifier=None):
        """
        ManifestContentsPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'format': 'ManifestContentsPayloadFormat',
            'reference': 'ManifestContentsPayloadReference',
            'storage_identifier': 'str'
        }

        self.attribute_map = {
            'format': 'format',
            'reference': 'reference',
            'storage_identifier': 'storageIdentifier'
        }

        self._format = format
        self._reference = reference
        self._storage_identifier = storage_identifier

    @property
    def format(self):
        """
        Gets the format of this ManifestContentsPayload.

        :return: The format of this ManifestContentsPayload.
        :rtype: ManifestContentsPayloadFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this ManifestContentsPayload.

        :param format: The format of this ManifestContentsPayload.
        :type: ManifestContentsPayloadFormat
        """

        self._format = format

    @property
    def reference(self):
        """
        Gets the reference of this ManifestContentsPayload.

        :return: The reference of this ManifestContentsPayload.
        :rtype: ManifestContentsPayloadReference
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """
        Sets the reference of this ManifestContentsPayload.

        :param reference: The reference of this ManifestContentsPayload.
        :type: ManifestContentsPayloadReference
        """

        self._reference = reference

    @property
    def storage_identifier(self):
        """
        Gets the storage_identifier of this ManifestContentsPayload.
        An identifier for where the payload is to be located. This identifier indicates where the image should be placed on the device. For example, when an IoT device contains multiple microcontrollers (MCUs) and the decision needs to be made to which MCU to send which firmware image.

        :return: The storage_identifier of this ManifestContentsPayload.
        :rtype: str
        """
        return self._storage_identifier

    @storage_identifier.setter
    def storage_identifier(self, storage_identifier):
        """
        Sets the storage_identifier of this ManifestContentsPayload.
        An identifier for where the payload is to be located. This identifier indicates where the image should be placed on the device. For example, when an IoT device contains multiple microcontrollers (MCUs) and the decision needs to be made to which MCU to send which firmware image.

        :param storage_identifier: The storage_identifier of this ManifestContentsPayload.
        :type: str
        """

        self._storage_identifier = storage_identifier

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ManifestContentsPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
