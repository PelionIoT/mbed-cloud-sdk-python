# coding: utf-8

"""
    Update Service API

    This is the API documentation for the Mbed deployment service, which is part of the update service.

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ManifestContentsPayloadFormat(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, enum=None):
        """
        ManifestContentsPayloadFormat - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enum': 'int'
        }

        self.attribute_map = {
            'enum': 'enum'
        }

        self._enum = enum

    @property
    def enum(self):
        """
        Gets the enum of this ManifestContentsPayloadFormat.
        Format of the payload. Can be: 1: raw-binary 2: cbor 3: hex-location-length-data 4: elf 

        :return: The enum of this ManifestContentsPayloadFormat.
        :rtype: int
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """
        Sets the enum of this ManifestContentsPayloadFormat.
        Format of the payload. Can be: 1: raw-binary 2: cbor 3: hex-location-length-data 4: elf 

        :param enum: The enum of this ManifestContentsPayloadFormat.
        :type: int
        """

        self._enum = enum

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ManifestContentsPayloadFormat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
