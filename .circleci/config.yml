#
# This file is autogenerated, do not modify manually. See scripts/generate_ci_config.py for instructions.
#
jobs:
  build_documentation:
    docker:
    - image: circleci/node:jessie-browsers
    steps:
    - run:
        command: curl -X POST --header "Content-Type:application/json" -d '{"branch":"master"}'  https://circleci.com/api/v1.1/project/github/${GITHUB_DOCS_ORGANISATION}/${GITHUB_DOCS_PROJECT}/build?circle-token=${DOCS_CIRCLE_CI_TOKEN}
        name: Trigger documentation build
  build_py2:
    machine:
      docker_layer_caching: true
      image: circleci/classic:201710-02
    steps:
    - checkout
    - restore_cache:
        keys:
        - v3-py2-{{ .Branch }}
        paths:
        - ~/caches/app_py2.tar
    - attach_workspace:
        at: ~/caches
    - run:
        command: docker load -i ~/caches/testrunner.tar
        name: Load docker image for TestRunner
    - run:
        command: docker load -i ~/caches/app_py2.tar || true
        name: Load docker image layer cache
    - run:
        command: docker build --cache-from=mbed_sdk_py2:latest -t mbed_sdk_py2:latest
          --build-arg TESTRUNNER_VERSION=$(cat ~/caches/testrunner_version.txt) -f
          container/py2.Dockerfile .
        name: Build application docker image
    - run:
        command: mkdir -p ~/caches
        name: Make cache directory
    - run:
        command: docker save -o ~/caches/app_py2.tar mbed_sdk_py2:latest
        name: Export docker image layer cache
    - save_cache:
        key: v3-py2-{{ .Branch }}
        paths:
        - ~/caches/app_py2.tar
    - persist_to_workspace:
        paths: app_py2.tar
        root: ~/caches
    - run:
        command: docker run --name=SDK mbed_sdk_py2:latest
        name: Start a named container
    - run:
        command: docker cp SDK:/build/built_docs ./built_docs
        name: Extract the documentation
    - store_artifacts:
        path: built_docs
  build_py3:
    machine:
      docker_layer_caching: true
      image: circleci/classic:201710-02
    steps:
    - checkout
    - restore_cache:
        keys:
        - v3-py3-{{ .Branch }}
        paths:
        - ~/caches/app_py3.tar
    - attach_workspace:
        at: ~/caches
    - run:
        command: docker load -i ~/caches/testrunner.tar
        name: Load docker image for TestRunner
    - run:
        command: docker load -i ~/caches/app_py3.tar || true
        name: Load docker image layer cache
    - run:
        command: docker build --cache-from=mbed_sdk_py3:latest -t mbed_sdk_py3:latest
          --build-arg TESTRUNNER_VERSION=$(cat ~/caches/testrunner_version.txt) -f
          container/py3.Dockerfile .
        name: Build application docker image
    - run:
        command: mkdir -p ~/caches
        name: Make cache directory
    - run:
        command: docker save -o ~/caches/app_py3.tar mbed_sdk_py3:latest
        name: Export docker image layer cache
    - save_cache:
        key: v3-py3-{{ .Branch }}
        paths:
        - ~/caches/app_py3.tar
    - persist_to_workspace:
        paths: app_py3.tar
        root: ~/caches
    - run:
        command: docker run --name=SDK mbed_sdk_py3:latest
        name: Start a named container
    - run:
        command: docker cp SDK:/build/built_docs ./built_docs
        name: Extract the documentation
    - store_artifacts:
        path: built_docs
  deploy_py3_beta:
    machine:
      image: circleci/classic:201710-02
    steps:
    - attach_workspace:
        at: ~/caches
    - checkout
    - run:
        command: sudo pip install awscli
        name: Install prerequisites
    - run:
        command: docker load -i ~/caches/app_py3.tar
        name: Load docker image layer cache
    - run:
        command: docker run --name=SDK mbed_sdk_py3:latest
        name: Start a named container
    - run:
        command: docker cp SDK:/build/built_docs ./built_docs
        name: Extract the documentation
    - run:
        command: aws s3 sync --delete --cache-control max-age=3600 built_docs s3://mbed-cloud-sdk-python
        name: Upload the documentation
    - run:
        command: docker run --env-file=scripts/templates/envvars.env -e TWINE_REPOSITORY=pypi
          mbed_sdk_py3:latest sh -c "source .venv/bin/activate && python scripts/tag_and_release.py
          --mode=beta"
        name: Tag and release
  deploy_py3_production:
    machine:
      image: circleci/classic:201710-02
    steps:
    - attach_workspace:
        at: ~/caches
    - checkout
    - run:
        command: sudo pip install awscli
        name: Install prerequisites
    - run:
        command: docker load -i ~/caches/app_py3.tar
        name: Load docker image layer cache
    - run:
        command: docker run --name=SDK mbed_sdk_py3:latest
        name: Start a named container
    - run:
        command: docker cp SDK:/build/built_docs ./built_docs
        name: Extract the documentation
    - run:
        command: aws s3 sync --delete --cache-control max-age=3600 built_docs s3://mbed-cloud-sdk-python
        name: Upload the documentation
    - run:
        command: docker run --env-file=scripts/templates/envvars.env -e TWINE_REPOSITORY=pypi
          mbed_sdk_py3:latest sh -c "source .venv/bin/activate && python scripts/tag_and_release.py
          --mode=prod"
        name: Tag and release
  news_check:
    docker:
    - image: circleci/python:3.6.1
    steps:
    - checkout
    - run: python scripts/assert_news.py
  preload:
    machine:
      image: circleci/classic:201710-02
    steps:
    - run:
        command: 'login="$(aws ecr get-login --no-include-email)"

          ${login}'
        name: AWS login
    - run:
        command: docker pull 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:master
        name: Pull TestRunner Image
    - run:
        command: mkdir -p ~/caches
        name: Make cache directory
    - run:
        command: echo $(docker run 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:master
          python -m trunner --version) > ~/caches/testrunner_version.txt
        name: Obtain Testrunner Version
    - run:
        command: docker save -o ~/caches/testrunner.tar 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:master
        name: Export docker image layer cache
    - persist_to_workspace:
        paths: testrunner.tar
        root: ~/caches
    - persist_to_workspace:
        paths: testrunner_version.txt
        root: ~/caches
    - store_artifacts:
        path: testrunner_version.txt
  test_py2_OS2:
    machine:
      image: circleci/classic:201710-02
    steps:
    - checkout
    - attach_workspace:
        at: ~/caches
    - run:
        command: docker load -i ~/caches/app_py2.tar
        name: Load docker image for SDK
    - run:
        command: docker load -i ~/caches/testrunner.tar
        name: Load docker image for TestRunner
    - run:
        command: pip install docker-compose==1.21.0
        name: Get docker-compose
    - run:
        command: 'echo ''export TEST_RUNNER_DEFAULT_API_HOST=${MBED_CLOUD_API_HOST_OS2}''
          >> $BASH_ENV

          echo ''export TEST_RUNNER_DEFAULT_API_KEY=${MBED_CLOUD_API_KEY_OS2}'' >>
          $BASH_ENV'
        name: Set testrunner parameters
    - run:
        command: docker-compose -f container/py2-compose.yml up --exit-code-from=sdk_test_server
        name: Run all tests
        no_output_timeout: 15m
    - run:
        command: sudo python scripts/ci_summary.py --noblock
        name: Generate summary
        when: always
    - store_artifacts:
        path: results
    - run:
        command: sudo pip install codecov
        name: Install codecov
    - run:
        command: codecov --file=results/coverage.xml --flags py2 staging
        name: Upload code coverage results
  test_py2_PROD:
    machine:
      image: circleci/classic:201710-02
    steps:
    - checkout
    - attach_workspace:
        at: ~/caches
    - run:
        command: docker load -i ~/caches/app_py2.tar
        name: Load docker image for SDK
    - run:
        command: docker load -i ~/caches/testrunner.tar
        name: Load docker image for TestRunner
    - run:
        command: pip install docker-compose==1.21.0
        name: Get docker-compose
    - run:
        command: 'echo ''export TEST_RUNNER_DEFAULT_API_HOST=${MBED_CLOUD_API_HOST_PROD}''
          >> $BASH_ENV

          echo ''export TEST_RUNNER_DEFAULT_API_KEY=${MBED_CLOUD_API_KEY_PROD}'' >>
          $BASH_ENV'
        name: Set testrunner parameters
    - run:
        command: docker-compose -f container/py2-compose.yml up --exit-code-from=sdk_test_server
        name: Run all tests
        no_output_timeout: 15m
    - run:
        command: sudo python scripts/ci_summary.py --noblock
        name: Generate summary
        when: always
    - store_artifacts:
        path: results
    - run:
        command: sudo pip install codecov
        name: Install codecov
    - run:
        command: codecov --file=results/coverage.xml --flags py2 production
        name: Upload code coverage results
  test_py3_OS2:
    machine:
      image: circleci/classic:201710-02
    steps:
    - checkout
    - attach_workspace:
        at: ~/caches
    - run:
        command: docker load -i ~/caches/app_py3.tar
        name: Load docker image for SDK
    - run:
        command: docker load -i ~/caches/testrunner.tar
        name: Load docker image for TestRunner
    - run:
        command: pip install docker-compose==1.21.0
        name: Get docker-compose
    - run:
        command: 'echo ''export TEST_RUNNER_DEFAULT_API_HOST=${MBED_CLOUD_API_HOST_OS2}''
          >> $BASH_ENV

          echo ''export TEST_RUNNER_DEFAULT_API_KEY=${MBED_CLOUD_API_KEY_OS2}'' >>
          $BASH_ENV'
        name: Set testrunner parameters
    - run:
        command: docker-compose -f container/py3-compose.yml up --exit-code-from=sdk_test_server
        name: Run all tests
        no_output_timeout: 15m
    - run:
        command: sudo python scripts/ci_summary.py --noblock
        name: Generate summary
        when: always
    - store_artifacts:
        path: results
    - run:
        command: sudo pip install codecov
        name: Install codecov
    - run:
        command: codecov --file=results/coverage.xml --flags py3 staging
        name: Upload code coverage results
  test_py3_PROD:
    machine:
      image: circleci/classic:201710-02
    steps:
    - checkout
    - attach_workspace:
        at: ~/caches
    - run:
        command: docker load -i ~/caches/app_py3.tar
        name: Load docker image for SDK
    - run:
        command: docker load -i ~/caches/testrunner.tar
        name: Load docker image for TestRunner
    - run:
        command: pip install docker-compose==1.21.0
        name: Get docker-compose
    - run:
        command: 'echo ''export TEST_RUNNER_DEFAULT_API_HOST=${MBED_CLOUD_API_HOST_PROD}''
          >> $BASH_ENV

          echo ''export TEST_RUNNER_DEFAULT_API_KEY=${MBED_CLOUD_API_KEY_PROD}'' >>
          $BASH_ENV'
        name: Set testrunner parameters
    - run:
        command: docker-compose -f container/py3-compose.yml up --exit-code-from=sdk_test_server
        name: Run all tests
        no_output_timeout: 15m
    - run:
        command: sudo python scripts/ci_summary.py --noblock
        name: Generate summary
        when: always
    - store_artifacts:
        path: results
    - run:
        command: sudo pip install codecov
        name: Install codecov
    - run:
        command: codecov --file=results/coverage.xml --flags py3 production
        name: Upload code coverage results
  tpip_report:
    docker:
    - image: circleci/python:3.6.1
    steps:
    - checkout
    - run: sudo pip install -e .
    - run: python scripts/tpip.py python_tpip.csv
    - store_artifacts:
        path: python_tpip.csv
version: 2
workflows:
  python_sdk_workflow:
    jobs:
    - preload: {}
    - build_py3:
        requires:
        - preload
    - test_py3_PROD:
        requires:
        - build_py3
    - test_py3_OS2:
        requires:
        - build_py3
    - release_beta:
        requires:
        - test_py3_OS2
        type: approval
    - deploy_py3_beta:
        requires:
        - release_beta
    - build_py2:
        requires:
        - preload
    - test_py2_PROD:
        requires:
        - build_py2
    - release_production:
        filters:
          branches:
            only: master
        requires:
        - test_py3_PROD
        - test_py2_PROD
        type: approval
    - deploy_py3_production:
        requires:
        - release_production
    - test_py2_OS2:
        requires:
        - build_py2
    - build_documentation:
        filters:
          branches:
            only:
            - master
            - beta
        requires:
        - build_py2
        - build_py3
    - news_check:
        filters:
          branches:
            ignore:
            - master
            - integration
    - tpip_report: {}
  version: 2
