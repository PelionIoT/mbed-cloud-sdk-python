# coding: utf-8

"""
    Device Directory API

    This is the API Documentation for the Mbed Device Directory service.

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceEventPage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'after': 'str',
        'data': 'list[DeviceEventData]',
        'has_more': 'bool',
        'limit': 'int',
        'object': 'str',
        'order': 'str',
        'total_count': 'int'
    }

    attribute_map = {
        'after': 'after',
        'data': 'data',
        'has_more': 'has_more',
        'limit': 'limit',
        'object': 'object',
        'order': 'order',
        'total_count': 'total_count'
    }

    def __init__(self, after=None, data=None, has_more=None, limit=None, object=None, order=None, total_count=None):
        """
        DeviceEventPage - a model defined in Swagger
        """

        self._after = after
        self._data = data
        self._has_more = has_more
        self._limit = limit
        self._object = object
        self._order = order
        self._total_count = total_count
        self.discriminator = None

    @property
    def after(self):
        """
        Gets the after of this DeviceEventPage.

        :return: The after of this DeviceEventPage.
        :rtype: str
        """
        return self._after

    @after.setter
    def after(self, after):
        """
        Sets the after of this DeviceEventPage.

        :param after: The after of this DeviceEventPage.
        :type: str
        """

        self._after = after

    @property
    def data(self):
        """
        Gets the data of this DeviceEventPage.

        :return: The data of this DeviceEventPage.
        :rtype: list[DeviceEventData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this DeviceEventPage.

        :param data: The data of this DeviceEventPage.
        :type: list[DeviceEventData]
        """

        self._data = data

    @property
    def has_more(self):
        """
        Gets the has_more of this DeviceEventPage.

        :return: The has_more of this DeviceEventPage.
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """
        Sets the has_more of this DeviceEventPage.

        :param has_more: The has_more of this DeviceEventPage.
        :type: bool
        """

        self._has_more = has_more

    @property
    def limit(self):
        """
        Gets the limit of this DeviceEventPage.

        :return: The limit of this DeviceEventPage.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this DeviceEventPage.

        :param limit: The limit of this DeviceEventPage.
        :type: int
        """

        self._limit = limit

    @property
    def object(self):
        """
        Gets the object of this DeviceEventPage.

        :return: The object of this DeviceEventPage.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this DeviceEventPage.

        :param object: The object of this DeviceEventPage.
        :type: str
        """

        self._object = object

    @property
    def order(self):
        """
        Gets the order of this DeviceEventPage.

        :return: The order of this DeviceEventPage.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this DeviceEventPage.

        :param order: The order of this DeviceEventPage.
        :type: str
        """

        self._order = order

    @property
    def total_count(self):
        """
        Gets the total_count of this DeviceEventPage.

        :return: The total_count of this DeviceEventPage.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """
        Sets the total_count of this DeviceEventPage.

        :param total_count: The total_count of this DeviceEventPage.
        :type: int
        """

        self._total_count = total_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceEventPage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
