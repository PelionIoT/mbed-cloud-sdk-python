# coding: utf-8

"""
    Connect API

    Mbed Cloud Connect API allows web applications to communicate with devices. You can subscribe to device resources and read/write values to them. mbed Cloud Connect makes connectivity to devices easy by queuing requests and caching resource values.

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Endpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'q': 'bool',
        'type': 'str',
        'name': 'str'
    }

    attribute_map = {
        'status': 'status',
        'q': 'q',
        'type': 'type',
        'name': 'name'
    }

    def __init__(self, status=None, q=None, type=None, name=None):  # noqa: E501
        """Endpoint - a model defined in Swagger"""  # noqa: E501

        self._status = status
        self._q = q
        self._type = type
        self._name = name
        self.discriminator = None


    @property
    def status(self):
        """Gets the status of this Endpoint.  # noqa: E501

        Deprecated and the value is always ACTIVE. Only used for API backwards compatibility reasons.  # noqa: E501

        :return: The status of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Endpoint.

        Deprecated and the value is always ACTIVE. Only used for API backwards compatibility reasons.  # noqa: E501

        :param status: The status of this Endpoint.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def q(self):
        """Gets the q of this Endpoint.  # noqa: E501

        Determines whether the device is in queue mode.  <br/><br/><b>Queue mode</b><br/> When an endpoint is in queue mode, messages sent to the endpoint do not wake up the physical device. The messages are queued  and delivered when the device wakes up and connects to Mbed Cloud Connect itself. You can also use the queue mode when  the device is behind a NAT and cannot be reached directly by Mbed Cloud Connect.   # noqa: E501

        :return: The q of this Endpoint.  # noqa: E501
        :rtype: bool
        """
        return self._q

    @q.setter
    def q(self, q):
        """Sets the q of this Endpoint.

        Determines whether the device is in queue mode.  <br/><br/><b>Queue mode</b><br/> When an endpoint is in queue mode, messages sent to the endpoint do not wake up the physical device. The messages are queued  and delivered when the device wakes up and connects to Mbed Cloud Connect itself. You can also use the queue mode when  the device is behind a NAT and cannot be reached directly by Mbed Cloud Connect.   # noqa: E501

        :param q: The q of this Endpoint.  # noqa: E501
        :type: bool
        """

        self._q = q

    @property
    def type(self):
        """Gets the type of this Endpoint.  # noqa: E501

        Type of endpoint. (Free text)  # noqa: E501

        :return: The type of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Endpoint.

        Type of endpoint. (Free text)  # noqa: E501

        :param type: The type of this Endpoint.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this Endpoint.  # noqa: E501

        Unique Mbed Cloud Device ID representing the endpoint.  # noqa: E501

        :return: The name of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Endpoint.

        Unique Mbed Cloud Device ID representing the endpoint.  # noqa: E501

        :param name: The name of this Endpoint.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Endpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
