# coding: utf-8

"""
    Connect CA API

    mbed Cloud Connect CA API allows services to get device credentials.

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ServerCredentialsResponseData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'etag': 'str',
        'id': 'str',
        'object': 'str',
        'server_certificate': 'str',
        'server_uri': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'etag': 'etag',
        'id': 'id',
        'object': 'object',
        'server_certificate': 'server_certificate',
        'server_uri': 'server_uri'
    }

    def __init__(self, created_at=None, etag=None, id=None, object=None, server_certificate=None, server_uri=None):
        """
        ServerCredentialsResponseData - a model defined in Swagger
        """

        self._created_at = created_at
        self._etag = etag
        self._id = id
        self._object = object
        self._server_certificate = server_certificate
        self._server_uri = server_uri
        self.discriminator = None

    @property
    def created_at(self):
        """
        Gets the created_at of this ServerCredentialsResponseData.
        Creation UTC time RFC3339.

        :return: The created_at of this ServerCredentialsResponseData.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ServerCredentialsResponseData.
        Creation UTC time RFC3339.

        :param created_at: The created_at of this ServerCredentialsResponseData.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def etag(self):
        """
        Gets the etag of this ServerCredentialsResponseData.
        API resource entity version.

        :return: The etag of this ServerCredentialsResponseData.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """
        Sets the etag of this ServerCredentialsResponseData.
        API resource entity version.

        :param etag: The etag of this ServerCredentialsResponseData.
        :type: str
        """

        self._etag = etag

    @property
    def id(self):
        """
        Gets the id of this ServerCredentialsResponseData.
        mUUID that uniquely identifies the entity.

        :return: The id of this ServerCredentialsResponseData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ServerCredentialsResponseData.
        mUUID that uniquely identifies the entity.

        :param id: The id of this ServerCredentialsResponseData.
        :type: str
        """

        self._id = id

    @property
    def object(self):
        """
        Gets the object of this ServerCredentialsResponseData.
        Entity name, always 'server-credentials'

        :return: The object of this ServerCredentialsResponseData.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this ServerCredentialsResponseData.
        Entity name, always 'server-credentials'

        :param object: The object of this ServerCredentialsResponseData.
        :type: str
        """

        self._object = object

    @property
    def server_certificate(self):
        """
        Gets the server_certificate of this ServerCredentialsResponseData.
        PEM format X.509 server certificate that will be used to validate the server certificate that will be received during the TLS/DTLS handshake.

        :return: The server_certificate of this ServerCredentialsResponseData.
        :rtype: str
        """
        return self._server_certificate

    @server_certificate.setter
    def server_certificate(self, server_certificate):
        """
        Sets the server_certificate of this ServerCredentialsResponseData.
        PEM format X.509 server certificate that will be used to validate the server certificate that will be received during the TLS/DTLS handshake.

        :param server_certificate: The server_certificate of this ServerCredentialsResponseData.
        :type: str
        """

        self._server_certificate = server_certificate

    @property
    def server_uri(self):
        """
        Gets the server_uri of this ServerCredentialsResponseData.
        Server URI to which the client needs to connect to.

        :return: The server_uri of this ServerCredentialsResponseData.
        :rtype: str
        """
        return self._server_uri

    @server_uri.setter
    def server_uri(self, server_uri):
        """
        Sets the server_uri of this ServerCredentialsResponseData.
        Server URI to which the client needs to connect to.

        :param server_uri: The server_uri of this ServerCredentialsResponseData.
        :type: str
        """

        self._server_uri = server_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServerCredentialsResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
