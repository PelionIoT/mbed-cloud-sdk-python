# coding: utf-8

"""
    Enrollment API

    Mbed Cloud Connect Enrollment Service allows users to claim the ownership of a device which is not yet assigned to an account. A device without an assigned account can be a device purchased from the open market (OEM dealer) or a device transferred from an account to another. More information in [Device ownership: First-to-claim](https://cloud.mbed.com/docs/current/connecting/device-ownership.html) document. 

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BulkCreateResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'completed_at': 'datetime',
        'created_at': 'datetime',
        'errors_count': 'int',
        'errors_report_file': 'str',
        'etag': 'str',
        'full_report_file': 'str',
        'id': 'str',
        'object': 'str',
        'processed_count': 'int',
        'status': 'str',
        'total_count': 'int'
    }

    attribute_map = {
        'account_id': 'account_id',
        'completed_at': 'completed_at',
        'created_at': 'created_at',
        'errors_count': 'errors_count',
        'errors_report_file': 'errors_report_file',
        'etag': 'etag',
        'full_report_file': 'full_report_file',
        'id': 'id',
        'object': 'object',
        'processed_count': 'processed_count',
        'status': 'status',
        'total_count': 'total_count'
    }

    def __init__(self, account_id=None, completed_at=None, created_at=None, errors_count=None, errors_report_file=None, etag=None, full_report_file=None, id=None, object=None, processed_count=None, status='new', total_count=None):
        """
        BulkCreateResponse - a model defined in Swagger
        """

        self._account_id = account_id
        self._completed_at = completed_at
        self._created_at = created_at
        self._errors_count = errors_count
        self._errors_report_file = errors_report_file
        self._etag = etag
        self._full_report_file = full_report_file
        self._id = id
        self._object = object
        self._processed_count = processed_count
        self._status = status
        self._total_count = total_count
        self.discriminator = None

    @property
    def account_id(self):
        """
        Gets the account_id of this BulkCreateResponse.
        ID

        :return: The account_id of this BulkCreateResponse.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this BulkCreateResponse.
        ID

        :param account_id: The account_id of this BulkCreateResponse.
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def completed_at(self):
        """
        Gets the completed_at of this BulkCreateResponse.
        The time of completing the bulk creation task. 

        :return: The completed_at of this BulkCreateResponse.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """
        Sets the completed_at of this BulkCreateResponse.
        The time of completing the bulk creation task. 

        :param completed_at: The completed_at of this BulkCreateResponse.
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def created_at(self):
        """
        Gets the created_at of this BulkCreateResponse.
        The time of receiving the bulk creation task. 

        :return: The created_at of this BulkCreateResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this BulkCreateResponse.
        The time of receiving the bulk creation task. 

        :param created_at: The created_at of this BulkCreateResponse.
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def errors_count(self):
        """
        Gets the errors_count of this BulkCreateResponse.
        The number of enrollment identities with failed processing. 

        :return: The errors_count of this BulkCreateResponse.
        :rtype: int
        """
        return self._errors_count

    @errors_count.setter
    def errors_count(self, errors_count):
        """
        Sets the errors_count of this BulkCreateResponse.
        The number of enrollment identities with failed processing. 

        :param errors_count: The errors_count of this BulkCreateResponse.
        :type: int
        """
        if errors_count is None:
            raise ValueError("Invalid value for `errors_count`, must not be `None`")

        self._errors_count = errors_count

    @property
    def errors_report_file(self):
        """
        Gets the errors_report_file of this BulkCreateResponse.

        :return: The errors_report_file of this BulkCreateResponse.
        :rtype: str
        """
        return self._errors_report_file

    @errors_report_file.setter
    def errors_report_file(self, errors_report_file):
        """
        Sets the errors_report_file of this BulkCreateResponse.

        :param errors_report_file: The errors_report_file of this BulkCreateResponse.
        :type: str
        """

        self._errors_report_file = errors_report_file

    @property
    def etag(self):
        """
        Gets the etag of this BulkCreateResponse.
        etag

        :return: The etag of this BulkCreateResponse.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """
        Sets the etag of this BulkCreateResponse.
        etag

        :param etag: The etag of this BulkCreateResponse.
        :type: str
        """
        if etag is None:
            raise ValueError("Invalid value for `etag`, must not be `None`")
        if etag is not None and not re.search('[A-Za-z0-9]{0,256}', etag):
            raise ValueError("Invalid value for `etag`, must be a follow pattern or equal to `/[A-Za-z0-9]{0,256}/`")

        self._etag = etag

    @property
    def full_report_file(self):
        """
        Gets the full_report_file of this BulkCreateResponse.

        :return: The full_report_file of this BulkCreateResponse.
        :rtype: str
        """
        return self._full_report_file

    @full_report_file.setter
    def full_report_file(self, full_report_file):
        """
        Sets the full_report_file of this BulkCreateResponse.

        :param full_report_file: The full_report_file of this BulkCreateResponse.
        :type: str
        """

        self._full_report_file = full_report_file

    @property
    def id(self):
        """
        Gets the id of this BulkCreateResponse.
        Bulk ID

        :return: The id of this BulkCreateResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BulkCreateResponse.
        Bulk ID

        :param id: The id of this BulkCreateResponse.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search('^[A-Za-z0-9]{32}', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[A-Za-z0-9]{32}/`")

        self._id = id

    @property
    def object(self):
        """
        Gets the object of this BulkCreateResponse.

        :return: The object of this BulkCreateResponse.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this BulkCreateResponse.

        :param object: The object of this BulkCreateResponse.
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")
        allowed_values = ["enrollment-identity-bulk-uploads"]
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def processed_count(self):
        """
        Gets the processed_count of this BulkCreateResponse.
        The number of enrollment identities processed until now. 

        :return: The processed_count of this BulkCreateResponse.
        :rtype: int
        """
        return self._processed_count

    @processed_count.setter
    def processed_count(self, processed_count):
        """
        Sets the processed_count of this BulkCreateResponse.
        The number of enrollment identities processed until now. 

        :param processed_count: The processed_count of this BulkCreateResponse.
        :type: int
        """
        if processed_count is None:
            raise ValueError("Invalid value for `processed_count`, must not be `None`")

        self._processed_count = processed_count

    @property
    def status(self):
        """
        Gets the status of this BulkCreateResponse.
        The state of the process is 'new' at the time of creation. If the creation is still in progress, the state is shown as 'processing'. When the request has been fully processed, the state changes to 'completed'. 

        :return: The status of this BulkCreateResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BulkCreateResponse.
        The state of the process is 'new' at the time of creation. If the creation is still in progress, the state is shown as 'processing'. When the request has been fully processed, the state changes to 'completed'. 

        :param status: The status of this BulkCreateResponse.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        allowed_values = ["new", "processing", "completed"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def total_count(self):
        """
        Gets the total_count of this BulkCreateResponse.
        Total number of enrollment identities found in the input CSV. 

        :return: The total_count of this BulkCreateResponse.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """
        Sets the total_count of this BulkCreateResponse.
        Total number of enrollment identities found in the input CSV. 

        :param total_count: The total_count of this BulkCreateResponse.
        :type: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BulkCreateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
