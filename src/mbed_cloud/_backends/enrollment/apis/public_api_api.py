# coding: utf-8

"""
    Enrollment API

    Mbed Cloud Connect Enrollment Service allows users to claim the ownership of a device which is not yet assigned to an account. A device without an assigned account can be a device purchased from the open market (OEM dealer) or a device transferred from an account to another. More information in [Device ownership: First-to-claim](https://cloud.mbed.com/docs/current/connecting/device-ownership.html) document. 

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class PublicAPIApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_device_enrollment(self, enrollment_identity, **kwargs):
        """
        Place an enrollment claim for one or several devices.
        When the device connects to the bootstrap server and provides the enrollment ID, it will be assigned to your account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_device_enrollment(enrollment_identity, async=True)
        >>> result = thread.get()

        :param async bool
        :param EnrollmentId enrollment_identity: (required)
        :return: EnrollmentIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_device_enrollment_with_http_info(enrollment_identity, **kwargs)
        else:
            (data) = self.create_device_enrollment_with_http_info(enrollment_identity, **kwargs)
            return data

    def create_device_enrollment_with_http_info(self, enrollment_identity, **kwargs):
        """
        Place an enrollment claim for one or several devices.
        When the device connects to the bootstrap server and provides the enrollment ID, it will be assigned to your account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_device_enrollment_with_http_info(enrollment_identity, async=True)
        >>> result = thread.get()

        :param async bool
        :param EnrollmentId enrollment_identity: (required)
        :return: EnrollmentIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrollment_identity']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_device_enrollment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrollment_identity' is set
        if ('enrollment_identity' not in params) or (params['enrollment_identity'] is None):
            raise ValueError("Missing the required parameter `enrollment_identity` when calling `create_device_enrollment`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'enrollment_identity' in params:
            body_params = params['enrollment_identity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/device-enrollments', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnrollmentIdentity',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_device_enrollment(self, id, **kwargs):
        """
        Delete an enrollment by ID.
        To free a device from your account you can delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and do a factory reset for the device. For more information on the ownership trasfer, see [https://github.com/ARMmbed/mbed_Cloud_Docs/blob/restructure/Docs/provisioning/generic_instructions/device-ownership.md#transferring-ownership-using-first-to-claim](TODO put the right link).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_device_enrollment(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Enrollment identity internal id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_device_enrollment_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_device_enrollment_with_http_info(id, **kwargs)
            return data

    def delete_device_enrollment_with_http_info(self, id, **kwargs):
        """
        Delete an enrollment by ID.
        To free a device from your account you can delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and do a factory reset for the device. For more information on the ownership trasfer, see [https://github.com/ARMmbed/mbed_Cloud_Docs/blob/restructure/Docs/provisioning/generic_instructions/device-ownership.md#transferring-ownership-using-first-to-claim](TODO put the right link).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_device_enrollment_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Enrollment identity internal id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_device_enrollment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_device_enrollment`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/device-enrollments/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_device_enrollment(self, id, **kwargs):
        """
        Get details of an enrollment by ID.
        To check the enrollment info in detail, for example claming date and expiration date.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_enrollment(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Enrollment identity internal id (required)
        :return: EnrollmentIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_device_enrollment_with_http_info(id, **kwargs)
        else:
            (data) = self.get_device_enrollment_with_http_info(id, **kwargs)
            return data

    def get_device_enrollment_with_http_info(self, id, **kwargs):
        """
        Get details of an enrollment by ID.
        To check the enrollment info in detail, for example claming date and expiration date.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_enrollment_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Enrollment identity internal id (required)
        :return: EnrollmentIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_enrollment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_device_enrollment`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/device-enrollments/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnrollmentIdentity',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_device_enrollments(self, **kwargs):
        """
        Get enrollment list.
        Provides a list of pending and claimed enrollments. Example usage: 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_enrollments(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Number of results to be returned. Between 2 and 1000, inclusive.
        :param str after: Entity ID to fetch after.
        :param str order: ASC or DESC
        :param str include: Comma separate additional data to return. Currently supported: total_count
        :return: EnrollmentIdentities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_device_enrollments_with_http_info(**kwargs)
        else:
            (data) = self.get_device_enrollments_with_http_info(**kwargs)
            return data

    def get_device_enrollments_with_http_info(self, **kwargs):
        """
        Get enrollment list.
        Provides a list of pending and claimed enrollments. Example usage: 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_enrollments_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: Number of results to be returned. Between 2 and 1000, inclusive.
        :param str after: Entity ID to fetch after.
        :param str order: ASC or DESC
        :param str include: Comma separate additional data to return. Currently supported: total_count
        :return: EnrollmentIdentities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'after', 'order', 'include']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_enrollments" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `get_device_enrollments`, must be a value less than or equal to `1000`")
        if 'limit' in params and params['limit'] < 2:
            raise ValueError("Invalid value for parameter `limit` when calling `get_device_enrollments`, must be a value greater than or equal to `2`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'after' in params:
            query_params.append(('after', params['after']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'include' in params:
            query_params.append(('include', params['include']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/device-enrollments', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnrollmentIdentities',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
