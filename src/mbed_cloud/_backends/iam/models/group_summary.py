# coding: utf-8

"""
    Account Management API

    API for managing accounts, users, creating API keys, uploading trusted certificates

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GroupSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_update_time': 'int',
        'user_count': 'int',
        'name': 'str',
        'created_at': 'datetime',
        'object': 'str',
        'creation_time': 'int',
        'etag': 'str',
        'apikey_count': 'int',
        'id': 'str',
        'account_id': 'str'
    }

    attribute_map = {
        'last_update_time': 'last_update_time',
        'user_count': 'user_count',
        'name': 'name',
        'created_at': 'created_at',
        'object': 'object',
        'creation_time': 'creation_time',
        'etag': 'etag',
        'apikey_count': 'apikey_count',
        'id': 'id',
        'account_id': 'account_id'
    }

    def __init__(self, last_update_time=None, user_count=None, name=None, created_at=None, object=None, creation_time=None, etag=None, apikey_count=None, id=None, account_id=None):  # noqa: E501
        """GroupSummary - a model defined in Swagger"""  # noqa: E501

        self._last_update_time = last_update_time
        self._user_count = user_count
        self._name = name
        self._created_at = created_at
        self._object = object
        self._creation_time = creation_time
        self._etag = etag
        self._apikey_count = apikey_count
        self._id = id
        self._account_id = account_id
        self.discriminator = None


    @property
    def last_update_time(self):
        """Gets the last_update_time of this GroupSummary.  # noqa: E501

        A timestamp of the latest group update, in milliseconds.  # noqa: E501

        :return: The last_update_time of this GroupSummary.  # noqa: E501
        :rtype: int
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this GroupSummary.

        A timestamp of the latest group update, in milliseconds.  # noqa: E501

        :param last_update_time: The last_update_time of this GroupSummary.  # noqa: E501
        :type: int
        """

        self._last_update_time = last_update_time

    @property
    def user_count(self):
        """Gets the user_count of this GroupSummary.  # noqa: E501

        The number of users in this group.  # noqa: E501

        :return: The user_count of this GroupSummary.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this GroupSummary.

        The number of users in this group.  # noqa: E501

        :param user_count: The user_count of this GroupSummary.  # noqa: E501
        :type: int
        """
        if user_count is None:
            raise ValueError("Invalid value for `user_count`, must not be `None`")  # noqa: E501

        self._user_count = user_count

    @property
    def name(self):
        """Gets the name of this GroupSummary.  # noqa: E501

        The name of the group.  # noqa: E501

        :return: The name of this GroupSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupSummary.

        The name of the group.  # noqa: E501

        :param name: The name of this GroupSummary.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this GroupSummary.  # noqa: E501

        Creation UTC time RFC3339.  # noqa: E501

        :return: The created_at of this GroupSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GroupSummary.

        Creation UTC time RFC3339.  # noqa: E501

        :param created_at: The created_at of this GroupSummary.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def object(self):
        """Gets the object of this GroupSummary.  # noqa: E501

        Entity name: always 'group'  # noqa: E501

        :return: The object of this GroupSummary.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this GroupSummary.

        Entity name: always 'group'  # noqa: E501

        :param object: The object of this GroupSummary.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        allowed_values = ["user", "api-key", "group", "account", "account-template", "trusted-cert", "list", "error"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def creation_time(self):
        """Gets the creation_time of this GroupSummary.  # noqa: E501

        A timestamp of the group creation in the storage, in milliseconds.  # noqa: E501

        :return: The creation_time of this GroupSummary.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this GroupSummary.

        A timestamp of the group creation in the storage, in milliseconds.  # noqa: E501

        :param creation_time: The creation_time of this GroupSummary.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def etag(self):
        """Gets the etag of this GroupSummary.  # noqa: E501

        API resource entity version.  # noqa: E501

        :return: The etag of this GroupSummary.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GroupSummary.

        API resource entity version.  # noqa: E501

        :param etag: The etag of this GroupSummary.  # noqa: E501
        :type: str
        """
        if etag is None:
            raise ValueError("Invalid value for `etag`, must not be `None`")  # noqa: E501

        self._etag = etag

    @property
    def apikey_count(self):
        """Gets the apikey_count of this GroupSummary.  # noqa: E501

        The number of API keys in this group.  # noqa: E501

        :return: The apikey_count of this GroupSummary.  # noqa: E501
        :rtype: int
        """
        return self._apikey_count

    @apikey_count.setter
    def apikey_count(self, apikey_count):
        """Sets the apikey_count of this GroupSummary.

        The number of API keys in this group.  # noqa: E501

        :param apikey_count: The apikey_count of this GroupSummary.  # noqa: E501
        :type: int
        """
        if apikey_count is None:
            raise ValueError("Invalid value for `apikey_count`, must not be `None`")  # noqa: E501

        self._apikey_count = apikey_count

    @property
    def id(self):
        """Gets the id of this GroupSummary.  # noqa: E501

        The UUID of the group.  # noqa: E501

        :return: The id of this GroupSummary.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupSummary.

        The UUID of the group.  # noqa: E501

        :param id: The id of this GroupSummary.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this GroupSummary.  # noqa: E501

        The UUID of the account this group belongs to.  # noqa: E501

        :return: The account_id of this GroupSummary.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GroupSummary.

        The UUID of the account this group belongs to.  # noqa: E501

        :param account_id: The account_id of this GroupSummary.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
