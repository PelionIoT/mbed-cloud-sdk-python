# coding: utf-8

"""
    Account Management API

    API for managing accounts, users, creating API keys, uploading trusted certificates

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiKeyInfoResp(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'groups': 'list[str]',
        'status': 'str',
        'name': 'str',
        'created_at': 'datetime',
        'object': 'str',
        'creation_time': 'int',
        'etag': 'str',
        'key': 'str',
        'owner': 'str',
        'id': 'str',
        'last_login_time': 'int'
    }

    attribute_map = {
        'groups': 'groups',
        'status': 'status',
        'name': 'name',
        'created_at': 'created_at',
        'object': 'object',
        'creation_time': 'creation_time',
        'etag': 'etag',
        'key': 'key',
        'owner': 'owner',
        'id': 'id',
        'last_login_time': 'last_login_time'
    }

    def __init__(self, groups=None, status=None, name=None, created_at=None, object=None, creation_time=None, etag=None, key=None, owner=None, id=None, last_login_time=None):
        """
        ApiKeyInfoResp - a model defined in Swagger
        """

        self._groups = groups
        self._status = status
        self._name = name
        self._created_at = created_at
        self._object = object
        self._creation_time = creation_time
        self._etag = etag
        self._key = key
        self._owner = owner
        self._id = id
        self._last_login_time = last_login_time
        self.discriminator = None

    @property
    def groups(self):
        """
        Gets the groups of this ApiKeyInfoResp.
        A list of group IDs this API key belongs to.

        :return: The groups of this ApiKeyInfoResp.
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this ApiKeyInfoResp.
        A list of group IDs this API key belongs to.

        :param groups: The groups of this ApiKeyInfoResp.
        :type: list[str]
        """

        self._groups = groups

    @property
    def status(self):
        """
        Gets the status of this ApiKeyInfoResp.
        The status of the API key.

        :return: The status of this ApiKeyInfoResp.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ApiKeyInfoResp.
        The status of the API key.

        :param status: The status of this ApiKeyInfoResp.
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def name(self):
        """
        Gets the name of this ApiKeyInfoResp.
        The display name for the API key.

        :return: The name of this ApiKeyInfoResp.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApiKeyInfoResp.
        The display name for the API key.

        :param name: The name of this ApiKeyInfoResp.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def created_at(self):
        """
        Gets the created_at of this ApiKeyInfoResp.
        Creation UTC time RFC3339.

        :return: The created_at of this ApiKeyInfoResp.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ApiKeyInfoResp.
        Creation UTC time RFC3339.

        :param created_at: The created_at of this ApiKeyInfoResp.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def object(self):
        """
        Gets the object of this ApiKeyInfoResp.
        Entity name: always 'api-key'

        :return: The object of this ApiKeyInfoResp.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this ApiKeyInfoResp.
        Entity name: always 'api-key'

        :param object: The object of this ApiKeyInfoResp.
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")
        allowed_values = ["user", "api-key", "group", "account", "account-template", "trusted-cert", "list", "error"]
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def creation_time(self):
        """
        Gets the creation_time of this ApiKeyInfoResp.
        The timestamp of the API key creation in the storage, in milliseconds.

        :return: The creation_time of this ApiKeyInfoResp.
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """
        Sets the creation_time of this ApiKeyInfoResp.
        The timestamp of the API key creation in the storage, in milliseconds.

        :param creation_time: The creation_time of this ApiKeyInfoResp.
        :type: int
        """

        self._creation_time = creation_time

    @property
    def etag(self):
        """
        Gets the etag of this ApiKeyInfoResp.
        API resource entity version.

        :return: The etag of this ApiKeyInfoResp.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """
        Sets the etag of this ApiKeyInfoResp.
        API resource entity version.

        :param etag: The etag of this ApiKeyInfoResp.
        :type: str
        """
        if etag is None:
            raise ValueError("Invalid value for `etag`, must not be `None`")

        self._etag = etag

    @property
    def key(self):
        """
        Gets the key of this ApiKeyInfoResp.
        The API key.

        :return: The key of this ApiKeyInfoResp.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this ApiKeyInfoResp.
        The API key.

        :param key: The key of this ApiKeyInfoResp.
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def owner(self):
        """
        Gets the owner of this ApiKeyInfoResp.
        The owner of this API key.

        :return: The owner of this ApiKeyInfoResp.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this ApiKeyInfoResp.
        The owner of this API key.

        :param owner: The owner of this ApiKeyInfoResp.
        :type: str
        """

        self._owner = owner

    @property
    def id(self):
        """
        Gets the id of this ApiKeyInfoResp.
        The UUID of the API key.

        :return: The id of this ApiKeyInfoResp.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ApiKeyInfoResp.
        The UUID of the API key.

        :param id: The id of this ApiKeyInfoResp.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_login_time(self):
        """
        Gets the last_login_time of this ApiKeyInfoResp.
        The timestamp of the latest API key usage, in milliseconds.

        :return: The last_login_time of this ApiKeyInfoResp.
        :rtype: int
        """
        return self._last_login_time

    @last_login_time.setter
    def last_login_time(self, last_login_time):
        """
        Sets the last_login_time of this ApiKeyInfoResp.
        The timestamp of the latest API key usage, in milliseconds.

        :param last_login_time: The last_login_time of this ApiKeyInfoResp.
        :type: int
        """

        self._last_login_time = last_login_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiKeyInfoResp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
