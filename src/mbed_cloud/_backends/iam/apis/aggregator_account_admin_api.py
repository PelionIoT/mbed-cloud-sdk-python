# coding: utf-8

"""
    Account Management API

    API for managing accounts, users, creating API keys, uploading trusted certificates

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class AggregatorAccountAdminApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_account_api_key_to_groups(self, account_id, api_key, body, **kwargs):
        """
        Add API key to a list of groups.
        An endpoint for adding API key to groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_account_api_key_to_groups(account_id, api_key, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be added to the group. (required)
        :param list[str] body: A list of IDs of the groups to be updated. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_account_api_key_to_groups_with_http_info(account_id, api_key, body, **kwargs)
        else:
            (data) = self.add_account_api_key_to_groups_with_http_info(account_id, api_key, body, **kwargs)
            return data

    def add_account_api_key_to_groups_with_http_info(self, account_id, api_key, body, **kwargs):
        """
        Add API key to a list of groups.
        An endpoint for adding API key to groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_account_api_key_to_groups_with_http_info(account_id, api_key, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be added to the group. (required)
        :param list[str] body: A list of IDs of the groups to be updated. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'api_key', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_account_api_key_to_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `add_account_api_key_to_groups`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `add_account_api_key_to_groups`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_account_api_key_to_groups`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/api-keys/{apiKey}/groups', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_account_certificate(self, account_id, body, **kwargs):
        """
        Upload new trusted certificate.
        An endpoint for uploading new trusted certificates.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_account_certificate(account_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param TrustedCertificateRootReq body: A trusted certificate object with attributes, signature is optional. (required)
        :return: TrustedCertificateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_account_certificate_with_http_info(account_id, body, **kwargs)
        else:
            (data) = self.add_account_certificate_with_http_info(account_id, body, **kwargs)
            return data

    def add_account_certificate_with_http_info(self, account_id, body, **kwargs):
        """
        Upload new trusted certificate.
        An endpoint for uploading new trusted certificates.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_account_certificate_with_http_info(account_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param TrustedCertificateRootReq body: A trusted certificate object with attributes, signature is optional. (required)
        :return: TrustedCertificateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_account_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `add_account_certificate`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_account_certificate`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/trusted-certificates', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TrustedCertificateResp',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_account_user_to_groups(self, account_id, user_id, body, **kwargs):
        """
        Add user to a list of groups.
        An endpoint for adding user to groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_account_user_to_groups(account_id, user_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be added to the group. (required)
        :param list[str] body: A list of IDs of the groups to be updated. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_account_user_to_groups_with_http_info(account_id, user_id, body, **kwargs)
        else:
            (data) = self.add_account_user_to_groups_with_http_info(account_id, user_id, body, **kwargs)
            return data

    def add_account_user_to_groups_with_http_info(self, account_id, user_id, body, **kwargs):
        """
        Add user to a list of groups.
        An endpoint for adding user to groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_account_user_to_groups_with_http_info(account_id, user_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be added to the group. (required)
        :param list[str] body: A list of IDs of the groups to be updated. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_account_user_to_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `add_account_user_to_groups`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `add_account_user_to_groups`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_account_user_to_groups`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/users/{user-id}/groups', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_subjects_to_account_group(self, account_id, group_id, body, **kwargs):
        """
        Add members to a group.
        An endpoint for adding users and API keys to groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_subjects_to_account_group(account_id, group_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group to be updated. (required)
        :param SubjectList body: A list of users and API keys to be added to the group. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_subjects_to_account_group_with_http_info(account_id, group_id, body, **kwargs)
        else:
            (data) = self.add_subjects_to_account_group_with_http_info(account_id, group_id, body, **kwargs)
            return data

    def add_subjects_to_account_group_with_http_info(self, account_id, group_id, body, **kwargs):
        """
        Add members to a group.
        An endpoint for adding users and API keys to groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_subjects_to_account_group_with_http_info(account_id, group_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group to be updated. (required)
        :param SubjectList body: A list of users and API keys to be added to the group. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_subjects_to_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `add_subjects_to_account_group`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `add_subjects_to_account_group`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_subjects_to_account_group`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/policy-groups/{groupID}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def check_account_api_key(self, account_id, api_key, **kwargs):
        """
        Check the API key.
        An endpoint for checking API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_account_api_key(account_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The API key to be checked. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.check_account_api_key_with_http_info(account_id, api_key, **kwargs)
        else:
            (data) = self.check_account_api_key_with_http_info(account_id, api_key, **kwargs)
            return data

    def check_account_api_key_with_http_info(self, account_id, api_key, **kwargs):
        """
        Check the API key.
        An endpoint for checking API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_account_api_key_with_http_info(account_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The API key to be checked. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'api_key']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_account_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `check_account_api_key`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `check_account_api_key`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/api-keys/{apiKey}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_account(self, body, **kwargs):
        """
        Create a new account.
        An endpoint for creating a new account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_account(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param AccountCreationReq body: Details of the account to be created. (required)
        :param str action: Action, either 'create', 'enroll' or 'enrollment_link'.
        :return: AccountCreationResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_account_with_http_info(body, **kwargs)
        else:
            (data) = self.create_account_with_http_info(body, **kwargs)
            return data

    def create_account_with_http_info(self, body, **kwargs):
        """
        Create a new account.
        An endpoint for creating a new account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_account_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param AccountCreationReq body: Details of the account to be created. (required)
        :param str action: Action, either 'create', 'enroll' or 'enrollment_link'.
        :return: AccountCreationResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'action']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_account`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountCreationResp',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_account_api_key(self, account_id, body, **kwargs):
        """
        Create a new API key.
        An endpoint for creating a new API key. There is no default value for the owner ID and it must be from the same account where the new API key is created.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_account_api_key(account_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param ApiKeyInfoReq body: Details of the API key to be created. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_account_api_key_with_http_info(account_id, body, **kwargs)
        else:
            (data) = self.create_account_api_key_with_http_info(account_id, body, **kwargs)
            return data

    def create_account_api_key_with_http_info(self, account_id, body, **kwargs):
        """
        Create a new API key.
        An endpoint for creating a new API key. There is no default value for the owner ID and it must be from the same account where the new API key is created.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_account_api_key_with_http_info(account_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param ApiKeyInfoReq body: Details of the API key to be created. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `create_account_api_key`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_account_api_key`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/api-keys', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiKeyInfoResp',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_account_user(self, account_id, body, **kwargs):
        """
        Create a new user.
        An endpoint for creating or inviting a new user to the account. In case of invitation email address is used only, other attributes are set in the 2nd step.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_account_user(account_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param UserInfoReq body: A user object with attributes. (required)
        :param str action: Create or invite user.
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_account_user_with_http_info(account_id, body, **kwargs)
        else:
            (data) = self.create_account_user_with_http_info(account_id, body, **kwargs)
            return data

    def create_account_user_with_http_info(self, account_id, body, **kwargs):
        """
        Create a new user.
        An endpoint for creating or inviting a new user to the account. In case of invitation email address is used only, other attributes are set in the 2nd step.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_account_user_with_http_info(account_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param UserInfoReq body: A user object with attributes. (required)
        :param str action: Create or invite user.
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'body', 'action']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `create_account_user`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_account_user`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/users', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoResp',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_account_api_key(self, account_id, api_key, **kwargs):
        """
        Delete the API key.
        An endpoint for deleting an API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_account_api_key(account_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_account_api_key_with_http_info(account_id, api_key, **kwargs)
        else:
            (data) = self.delete_account_api_key_with_http_info(account_id, api_key, **kwargs)
            return data

    def delete_account_api_key_with_http_info(self, account_id, api_key, **kwargs):
        """
        Delete the API key.
        An endpoint for deleting an API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_account_api_key_with_http_info(account_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'api_key']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_account_api_key`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `delete_account_api_key`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/api-keys/{apiKey}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_account_certificate(self, account_id, cert_id, **kwargs):
        """
        Delete trusted certificate by ID.
        An endpoint for deleting the trusted certificate.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_account_certificate(account_id, cert_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str cert_id: The ID of the trusted certificate to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_account_certificate_with_http_info(account_id, cert_id, **kwargs)
        else:
            (data) = self.delete_account_certificate_with_http_info(account_id, cert_id, **kwargs)
            return data

    def delete_account_certificate_with_http_info(self, account_id, cert_id, **kwargs):
        """
        Delete trusted certificate by ID.
        An endpoint for deleting the trusted certificate.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_account_certificate_with_http_info(account_id, cert_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str cert_id: The ID of the trusted certificate to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'cert_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_account_certificate`")
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params) or (params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `delete_account_certificate`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'cert_id' in params:
            path_params['cert-id'] = params['cert_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/trusted-certificates/{cert-id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_account_user(self, account_id, user_id, **kwargs):
        """
        Delete a user.
        An endpoint for deleting a user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_account_user(account_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_account_user_with_http_info(account_id, user_id, **kwargs)
        else:
            (data) = self.delete_account_user_with_http_info(account_id, user_id, **kwargs)
            return data

    def delete_account_user_with_http_info(self, account_id, user_id, **kwargs):
        """
        Delete a user.
        An endpoint for deleting a user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_account_user_with_http_info(account_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_account_user`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_account_user`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/users/{user-id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_account_api_key(self, account_id, api_key, **kwargs):
        """
        Get API key details.
        An endpoint for retrieving API key details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_api_key(account_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be retrieved. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_account_api_key_with_http_info(account_id, api_key, **kwargs)
        else:
            (data) = self.get_account_api_key_with_http_info(account_id, api_key, **kwargs)
            return data

    def get_account_api_key_with_http_info(self, account_id, api_key, **kwargs):
        """
        Get API key details.
        An endpoint for retrieving API key details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_api_key_with_http_info(account_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be retrieved. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'api_key']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_api_key`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `get_account_api_key`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/api-keys/{apiKey}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiKeyInfoResp',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_account_certificate(self, account_id, cert_id, **kwargs):
        """
        Get trusted certificate by ID.
        An endpoint for retrieving a trusted certificate by ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_certificate(account_id, cert_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str cert_id: The ID of the trusted certificate to be retrieved. (required)
        :return: TrustedCertificateInternalResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_account_certificate_with_http_info(account_id, cert_id, **kwargs)
        else:
            (data) = self.get_account_certificate_with_http_info(account_id, cert_id, **kwargs)
            return data

    def get_account_certificate_with_http_info(self, account_id, cert_id, **kwargs):
        """
        Get trusted certificate by ID.
        An endpoint for retrieving a trusted certificate by ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_certificate_with_http_info(account_id, cert_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str cert_id: The ID of the trusted certificate to be retrieved. (required)
        :return: TrustedCertificateInternalResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'cert_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_certificate`")
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params) or (params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `get_account_certificate`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'cert_id' in params:
            path_params['cert-id'] = params['cert_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/trusted-certificates/{cert-id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TrustedCertificateInternalResp',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_account_group_summary(self, account_id, group_id, **kwargs):
        """
        Get group information.
        An endpoint for getting general information about the group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_group_summary(account_id, group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group to be retrieved. (required)
        :return: GroupSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_account_group_summary_with_http_info(account_id, group_id, **kwargs)
        else:
            (data) = self.get_account_group_summary_with_http_info(account_id, group_id, **kwargs)
            return data

    def get_account_group_summary_with_http_info(self, account_id, group_id, **kwargs):
        """
        Get group information.
        An endpoint for getting general information about the group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_group_summary_with_http_info(account_id, group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group to be retrieved. (required)
        :return: GroupSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_group_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_group_summary`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_account_group_summary`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/policy-groups/{groupID}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupSummary',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_account_info(self, account_id, **kwargs):
        """
        Get account info.
        Returns detailed information about the account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: The ID of the account to be fetched. (required)
        :param str include: Comma separated additional data to return. Currently supported: limits, policies, sub_accounts
        :param str properties: Property name to be returned from account specific properties.
        :return: AccountInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_account_info_with_http_info(account_id, **kwargs)
        else:
            (data) = self.get_account_info_with_http_info(account_id, **kwargs)
            return data

    def get_account_info_with_http_info(self, account_id, **kwargs):
        """
        Get account info.
        Returns detailed information about the account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_info_with_http_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: The ID of the account to be fetched. (required)
        :param str include: Comma separated additional data to return. Currently supported: limits, policies, sub_accounts
        :param str properties: Property name to be returned from account specific properties.
        :return: AccountInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'include', 'properties']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_info`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))
        if 'properties' in params:
            query_params.append(('properties', params['properties']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountInfo',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_account_user(self, account_id, user_id, **kwargs):
        """
        Details of the user.
        An endpoint for retrieving details of the user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_user(account_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be retrieved. (required)
        :param str properties: Request to return account specific user property values according to the given property name.
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_account_user_with_http_info(account_id, user_id, **kwargs)
        else:
            (data) = self.get_account_user_with_http_info(account_id, user_id, **kwargs)
            return data

    def get_account_user_with_http_info(self, account_id, user_id, **kwargs):
        """
        Details of the user.
        An endpoint for retrieving details of the user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_user_with_http_info(account_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be retrieved. (required)
        :param str properties: Request to return account specific user property values according to the given property name.
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_id', 'properties']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_user`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_account_user`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = []
        if 'properties' in params:
            query_params.append(('properties', params['properties']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/users/{user-id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoResp',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_account_api_keys(self, account_id, **kwargs):
        """
        Get all API keys.
        An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_account_api_keys(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str key__eq: API key filter.
        :param str owner__eq: Owner name filter.
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_account_api_keys_with_http_info(account_id, **kwargs)
        else:
            (data) = self.get_all_account_api_keys_with_http_info(account_id, **kwargs)
            return data

    def get_all_account_api_keys_with_http_info(self, account_id, **kwargs):
        """
        Get all API keys.
        An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_account_api_keys_with_http_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str key__eq: API key filter.
        :param str owner__eq: Owner name filter.
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'after', 'order', 'include', 'key__eq', 'owner__eq']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_account_api_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_all_account_api_keys`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'after' in params:
            query_params.append(('after', params['after']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'include' in params:
            query_params.append(('include', params['include']))
        if 'key__eq' in params:
            query_params.append(('key__eq', params['key__eq']))
        if 'owner__eq' in params:
            query_params.append(('owner__eq', params['owner__eq']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/api-keys', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiKeyInfoRespList',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_account_certificates(self, account_id, **kwargs):
        """
        Get all trusted certificates.
        An endpoint for retrieving trusted certificates in an array.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_account_certificates(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str name__eq: Filter for certificate name
        :param str service__eq: Filter for service
        :param int expire__eq: Filter for expire
        :param int device_execution_mode__eq: Filter for developer certificates
        :param int device_execution_mode__neq: Filter for not developer certificates
        :param str owner__eq: Owner name filter
        :param bool enrollment_mode__eq: Enrollment mode filter
        :param str issuer__like: Filter for issuer. Finds all matches where the filter value is a case insensitive substring of the result. Example: issuer__like=cn=iss matches CN=issuer.
        :param str subject__like: Filter for subject. Finds all matches where the filter value is a case insensitive substring of the result. Example: subject__like=cn=su matches CN=subject.
        :return: TrustedCertificateInternalRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_account_certificates_with_http_info(account_id, **kwargs)
        else:
            (data) = self.get_all_account_certificates_with_http_info(account_id, **kwargs)
            return data

    def get_all_account_certificates_with_http_info(self, account_id, **kwargs):
        """
        Get all trusted certificates.
        An endpoint for retrieving trusted certificates in an array.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_account_certificates_with_http_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str name__eq: Filter for certificate name
        :param str service__eq: Filter for service
        :param int expire__eq: Filter for expire
        :param int device_execution_mode__eq: Filter for developer certificates
        :param int device_execution_mode__neq: Filter for not developer certificates
        :param str owner__eq: Owner name filter
        :param bool enrollment_mode__eq: Enrollment mode filter
        :param str issuer__like: Filter for issuer. Finds all matches where the filter value is a case insensitive substring of the result. Example: issuer__like=cn=iss matches CN=issuer.
        :param str subject__like: Filter for subject. Finds all matches where the filter value is a case insensitive substring of the result. Example: subject__like=cn=su matches CN=subject.
        :return: TrustedCertificateInternalRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'after', 'order', 'include', 'name__eq', 'service__eq', 'expire__eq', 'device_execution_mode__eq', 'device_execution_mode__neq', 'owner__eq', 'enrollment_mode__eq', 'issuer__like', 'subject__like']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_account_certificates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_all_account_certificates`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'after' in params:
            query_params.append(('after', params['after']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'include' in params:
            query_params.append(('include', params['include']))
        if 'name__eq' in params:
            query_params.append(('name__eq', params['name__eq']))
        if 'service__eq' in params:
            query_params.append(('service__eq', params['service__eq']))
        if 'expire__eq' in params:
            query_params.append(('expire__eq', params['expire__eq']))
        if 'device_execution_mode__eq' in params:
            query_params.append(('device_execution_mode__eq', params['device_execution_mode__eq']))
        if 'device_execution_mode__neq' in params:
            query_params.append(('device_execution_mode__neq', params['device_execution_mode__neq']))
        if 'owner__eq' in params:
            query_params.append(('owner__eq', params['owner__eq']))
        if 'enrollment_mode__eq' in params:
            query_params.append(('enrollment_mode__eq', params['enrollment_mode__eq']))
        if 'issuer__like' in params:
            query_params.append(('issuer__like', params['issuer__like']))
        if 'subject__like' in params:
            query_params.append(('subject__like', params['subject__like']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/trusted-certificates', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TrustedCertificateInternalRespList',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_account_groups(self, account_id, **kwargs):
        """
        Get all group information.
        An endpoint for retrieving all group information.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_account_groups(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str name__eq: Filter for group name
        :return: list[GroupSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_account_groups_with_http_info(account_id, **kwargs)
        else:
            (data) = self.get_all_account_groups_with_http_info(account_id, **kwargs)
            return data

    def get_all_account_groups_with_http_info(self, account_id, **kwargs):
        """
        Get all group information.
        An endpoint for retrieving all group information.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_account_groups_with_http_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str name__eq: Filter for group name
        :return: list[GroupSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'after', 'order', 'include', 'name__eq']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_account_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_all_account_groups`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'after' in params:
            query_params.append(('after', params['after']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'include' in params:
            query_params.append(('include', params['include']))
        if 'name__eq' in params:
            query_params.append(('name__eq', params['name__eq']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/policy-groups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[GroupSummary]',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_account_users(self, account_id, **kwargs):
        """
        Get all user details.
        An endpoint for retrieving details of all users.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_account_users(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str email__eq: Filter for email address
        :param str status__eq: Filter for status
        :param str status__in: An optional filter for getting users with a specified set of statuses.
        :param str status__nin: An optional filter for excluding users with a specified set of statuses.
        :return: UserInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_account_users_with_http_info(account_id, **kwargs)
        else:
            (data) = self.get_all_account_users_with_http_info(account_id, **kwargs)
            return data

    def get_all_account_users_with_http_info(self, account_id, **kwargs):
        """
        Get all user details.
        An endpoint for retrieving details of all users.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_account_users_with_http_info(account_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str email__eq: Filter for email address
        :param str status__eq: Filter for status
        :param str status__in: An optional filter for getting users with a specified set of statuses.
        :param str status__nin: An optional filter for excluding users with a specified set of statuses.
        :return: UserInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'after', 'order', 'include', 'email__eq', 'status__eq', 'status__in', 'status__nin']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_account_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_all_account_users`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'after' in params:
            query_params.append(('after', params['after']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'include' in params:
            query_params.append(('include', params['include']))
        if 'email__eq' in params:
            query_params.append(('email__eq', params['email__eq']))
        if 'status__eq' in params:
            query_params.append(('status__eq', params['status__eq']))
        if 'status__in' in params:
            query_params.append(('status__in', params['status__in']))
        if 'status__nin' in params:
            query_params.append(('status__nin', params['status__nin']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/users', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoRespList',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_accounts(self, **kwargs):
        """
        Get all accounts.
        Returns an array of account objects, optionally filtered by status and tier level.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_accounts(async=True)
        >>> result = thread.get()

        :param async bool
        :param str status__eq: An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED.
        :param str status__in: An optional filter for getting accounts with a specified set of statuses.
        :param str status__nin: An optional filter for excluding accounts with a specified set of statuses.
        :param str tier__eq: An optional filter for tier level, must be 0, 1, 2, 98, 99 or omitted.
        :param str parent__eq: An optional filter for parent account ID.
        :param str end_market__eq: An optional filter for account end market.
        :param str country__like: An optional filter for account country. Finds all matches where the filter value is a case insensitive substring of the result. Example: country__like=LAND matches Ireland.
        :param int limit: The number of results to return (2-1000), default is 1000.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC. Default value is ASC
        :param str include: Comma separated additional data to return. Currently supported: limits, policies, sub_accounts
        :param str format: Format information for the response to the query, supported: format=breakdown.
        :param str properties: Property name to be returned from account specific properties.
        :return: AccountInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_accounts_with_http_info(**kwargs)
        else:
            (data) = self.get_all_accounts_with_http_info(**kwargs)
            return data

    def get_all_accounts_with_http_info(self, **kwargs):
        """
        Get all accounts.
        Returns an array of account objects, optionally filtered by status and tier level.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_accounts_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str status__eq: An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED.
        :param str status__in: An optional filter for getting accounts with a specified set of statuses.
        :param str status__nin: An optional filter for excluding accounts with a specified set of statuses.
        :param str tier__eq: An optional filter for tier level, must be 0, 1, 2, 98, 99 or omitted.
        :param str parent__eq: An optional filter for parent account ID.
        :param str end_market__eq: An optional filter for account end market.
        :param str country__like: An optional filter for account country. Finds all matches where the filter value is a case insensitive substring of the result. Example: country__like=LAND matches Ireland.
        :param int limit: The number of results to return (2-1000), default is 1000.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC. Default value is ASC
        :param str include: Comma separated additional data to return. Currently supported: limits, policies, sub_accounts
        :param str format: Format information for the response to the query, supported: format=breakdown.
        :param str properties: Property name to be returned from account specific properties.
        :return: AccountInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status__eq', 'status__in', 'status__nin', 'tier__eq', 'parent__eq', 'end_market__eq', 'country__like', 'limit', 'after', 'order', 'include', 'format', 'properties']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_accounts" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status__eq' in params:
            query_params.append(('status__eq', params['status__eq']))
        if 'status__in' in params:
            query_params.append(('status__in', params['status__in']))
        if 'status__nin' in params:
            query_params.append(('status__nin', params['status__nin']))
        if 'tier__eq' in params:
            query_params.append(('tier__eq', params['tier__eq']))
        if 'parent__eq' in params:
            query_params.append(('parent__eq', params['parent__eq']))
        if 'end_market__eq' in params:
            query_params.append(('end_market__eq', params['end_market__eq']))
        if 'country__like' in params:
            query_params.append(('country__like', params['country__like']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'after' in params:
            query_params.append(('after', params['after']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'include' in params:
            query_params.append(('include', params['include']))
        if 'format' in params:
            query_params.append(('format', params['format']))
        if 'properties' in params:
            query_params.append(('properties', params['properties']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountInfoList',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_api_keys_of_account_group(self, account_id, group_id, **kwargs):
        """
        Get API keys of a group.
        An endpoint for listing the API keys of the group with details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_api_keys_of_account_group(account_id, group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group whose API keys are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_api_keys_of_account_group_with_http_info(account_id, group_id, **kwargs)
        else:
            (data) = self.get_api_keys_of_account_group_with_http_info(account_id, group_id, **kwargs)
            return data

    def get_api_keys_of_account_group_with_http_info(self, account_id, group_id, **kwargs):
        """
        Get API keys of a group.
        An endpoint for listing the API keys of the group with details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_api_keys_of_account_group_with_http_info(account_id, group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group whose API keys are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'limit', 'after', 'order', 'include']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_keys_of_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_api_keys_of_account_group`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_api_keys_of_account_group`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'after' in params:
            query_params.append(('after', params['after']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'include' in params:
            query_params.append(('include', params['include']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiKeyInfoRespList',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_groups_of_account_apikey(self, account_id, api_key, **kwargs):
        """
        Get groups of the API key.
        An endpoint for retrieving groups of the API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_groups_of_account_apikey(account_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key whose details are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: GroupSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_groups_of_account_apikey_with_http_info(account_id, api_key, **kwargs)
        else:
            (data) = self.get_groups_of_account_apikey_with_http_info(account_id, api_key, **kwargs)
            return data

    def get_groups_of_account_apikey_with_http_info(self, account_id, api_key, **kwargs):
        """
        Get groups of the API key.
        An endpoint for retrieving groups of the API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_groups_of_account_apikey_with_http_info(account_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key whose details are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: GroupSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'api_key', 'limit', 'after', 'order', 'include']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups_of_account_apikey" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_groups_of_account_apikey`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `get_groups_of_account_apikey`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'after' in params:
            query_params.append(('after', params['after']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'include' in params:
            query_params.append(('include', params['include']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/api-keys/{apiKey}/groups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupSummaryList',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_groups_of_account_user(self, account_id, user_id, **kwargs):
        """
        Get groups of the user.
        An endpoint for retrieving groups of the user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_groups_of_account_user(account_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user whose details are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: GroupSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_groups_of_account_user_with_http_info(account_id, user_id, **kwargs)
        else:
            (data) = self.get_groups_of_account_user_with_http_info(account_id, user_id, **kwargs)
            return data

    def get_groups_of_account_user_with_http_info(self, account_id, user_id, **kwargs):
        """
        Get groups of the user.
        An endpoint for retrieving groups of the user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_groups_of_account_user_with_http_info(account_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user whose details are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: GroupSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_id', 'limit', 'after', 'order', 'include']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups_of_account_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_groups_of_account_user`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_groups_of_account_user`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'after' in params:
            query_params.append(('after', params['after']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'include' in params:
            query_params.append(('include', params['include']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/users/{user-id}/groups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupSummaryList',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_users_of_account_group(self, account_id, group_id, **kwargs):
        """
        Get users of a group.
        An endpoint for listing users of the group with details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_users_of_account_group(account_id, group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group whose users are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str status__eq: An optional filter for getting users by status.
        :param str status__in: An optional filter for getting users with a specified set of statuses.
        :param str status__nin: An optional filter for excluding users with a specified set of statuses.
        :return: UserInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_users_of_account_group_with_http_info(account_id, group_id, **kwargs)
        else:
            (data) = self.get_users_of_account_group_with_http_info(account_id, group_id, **kwargs)
            return data

    def get_users_of_account_group_with_http_info(self, account_id, group_id, **kwargs):
        """
        Get users of a group.
        An endpoint for listing users of the group with details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_users_of_account_group_with_http_info(account_id, group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group whose users are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str status__eq: An optional filter for getting users by status.
        :param str status__in: An optional filter for getting users with a specified set of statuses.
        :param str status__nin: An optional filter for excluding users with a specified set of statuses.
        :return: UserInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'limit', 'after', 'order', 'include', 'status__eq', 'status__in', 'status__nin']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_of_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_users_of_account_group`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_users_of_account_group`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'after' in params:
            query_params.append(('after', params['after']))
        if 'order' in params:
            query_params.append(('order', params['order']))
        if 'include' in params:
            query_params.append(('include', params['include']))
        if 'status__eq' in params:
            query_params.append(('status__eq', params['status__eq']))
        if 'status__in' in params:
            query_params.append(('status__in', params['status__in']))
        if 'status__nin' in params:
            query_params.append(('status__nin', params['status__nin']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/policy-groups/{groupID}/users', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoRespList',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_account_api_key_from_groups(self, account_id, api_key, body, **kwargs):
        """
        Remove API key from groups.
        An endpoint for removing API key from groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_account_api_key_from_groups(account_id, api_key, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be removed from the group. (required)
        :param list[str] body: A list of IDs of the groups to be updated. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_account_api_key_from_groups_with_http_info(account_id, api_key, body, **kwargs)
        else:
            (data) = self.remove_account_api_key_from_groups_with_http_info(account_id, api_key, body, **kwargs)
            return data

    def remove_account_api_key_from_groups_with_http_info(self, account_id, api_key, body, **kwargs):
        """
        Remove API key from groups.
        An endpoint for removing API key from groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_account_api_key_from_groups_with_http_info(account_id, api_key, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be removed from the group. (required)
        :param list[str] body: A list of IDs of the groups to be updated. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'api_key', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_account_api_key_from_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `remove_account_api_key_from_groups`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `remove_account_api_key_from_groups`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `remove_account_api_key_from_groups`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/api-keys/{apiKey}/groups', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_account_user_from_groups(self, account_id, user_id, body, **kwargs):
        """
        Remove user from groups.
        An endpoint for removing user from groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_account_user_from_groups(account_id, user_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be removed from the group. (required)
        :param list[str] body: A list of IDs of the groups to be updated. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_account_user_from_groups_with_http_info(account_id, user_id, body, **kwargs)
        else:
            (data) = self.remove_account_user_from_groups_with_http_info(account_id, user_id, body, **kwargs)
            return data

    def remove_account_user_from_groups_with_http_info(self, account_id, user_id, body, **kwargs):
        """
        Remove user from groups.
        An endpoint for removing user from groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_account_user_from_groups_with_http_info(account_id, user_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be removed from the group. (required)
        :param list[str] body: A list of IDs of the groups to be updated. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_account_user_from_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `remove_account_user_from_groups`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `remove_account_user_from_groups`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `remove_account_user_from_groups`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/users/{user-id}/groups', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_api_keys_from_account_group(self, account_id, group_id, **kwargs):
        """
        Remove API keys from a group.
        An endpoint for removing API keys from groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_api_keys_from_account_group(account_id, group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str group_id: A list of API keys to be removed from the group. (required)
        :param SubjectList body:
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_api_keys_from_account_group_with_http_info(account_id, group_id, **kwargs)
        else:
            (data) = self.remove_api_keys_from_account_group_with_http_info(account_id, group_id, **kwargs)
            return data

    def remove_api_keys_from_account_group_with_http_info(self, account_id, group_id, **kwargs):
        """
        Remove API keys from a group.
        An endpoint for removing API keys from groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_api_keys_from_account_group_with_http_info(account_id, group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str group_id: A list of API keys to be removed from the group. (required)
        :param SubjectList body:
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_api_keys_from_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `remove_api_keys_from_account_group`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `remove_api_keys_from_account_group`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_users_from_account_group(self, account_id, group_id, **kwargs):
        """
        Remove users from a group.
        An endpoint for removing users from groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_users_from_account_group(account_id, group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str group_id: (required)
        :param SubjectList body:
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_users_from_account_group_with_http_info(account_id, group_id, **kwargs)
        else:
            (data) = self.remove_users_from_account_group_with_http_info(account_id, group_id, **kwargs)
            return data

    def remove_users_from_account_group_with_http_info(self, account_id, group_id, **kwargs):
        """
        Remove users from a group.
        An endpoint for removing users from groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_users_from_account_group_with_http_info(account_id, group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str group_id: (required)
        :param SubjectList body:
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_users_from_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `remove_users_from_account_group`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `remove_users_from_account_group`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/policy-groups/{groupID}/users', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def reset_account_api_key_secret(self, account_id, api_key, **kwargs):
        """
        Reset the secret key.
        An endpoint for resetting the secret key of the API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reset_account_api_key_secret(account_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be reset. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reset_account_api_key_secret_with_http_info(account_id, api_key, **kwargs)
        else:
            (data) = self.reset_account_api_key_secret_with_http_info(account_id, api_key, **kwargs)
            return data

    def reset_account_api_key_secret_with_http_info(self, account_id, api_key, **kwargs):
        """
        Reset the secret key.
        An endpoint for resetting the secret key of the API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reset_account_api_key_secret_with_http_info(account_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be reset. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'api_key']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_account_api_key_secret" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `reset_account_api_key_secret`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `reset_account_api_key_secret`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/api-keys/{apiKey}/reset-secret', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiKeyInfoResp',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_account(self, account_id, body, **kwargs):
        """
        Update attributes of an existing account.
        An endpoint for updating an account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_account(account_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: The ID of the account to be updated. (required)
        :param AccountUpdateRootReq body: Details of the account to be updated. (required)
        :return: AccountInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_account_with_http_info(account_id, body, **kwargs)
        else:
            (data) = self.update_account_with_http_info(account_id, body, **kwargs)
            return data

    def update_account_with_http_info(self, account_id, body, **kwargs):
        """
        Update attributes of an existing account.
        An endpoint for updating an account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_account_with_http_info(account_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: The ID of the account to be updated. (required)
        :param AccountUpdateRootReq body: Details of the account to be updated. (required)
        :return: AccountInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_account`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_account`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountInfo',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_account_api_key(self, account_id, api_key, body, **kwargs):
        """
        Update API key details.
        An endpoint for updating API key details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_account_api_key(account_id, api_key, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be updated. (required)
        :param ApiKeyUpdateReq body: New API key attributes to be stored. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_account_api_key_with_http_info(account_id, api_key, body, **kwargs)
        else:
            (data) = self.update_account_api_key_with_http_info(account_id, api_key, body, **kwargs)
            return data

    def update_account_api_key_with_http_info(self, account_id, api_key, body, **kwargs):
        """
        Update API key details.
        An endpoint for updating API key details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_account_api_key_with_http_info(account_id, api_key, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be updated. (required)
        :param ApiKeyUpdateReq body: New API key attributes to be stored. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'api_key', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_account_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_account_api_key`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `update_account_api_key`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_account_api_key`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/api-keys/{apiKey}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiKeyInfoResp',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_account_certificate(self, account_id, cert_id, body, **kwargs):
        """
        Update trusted certificate.
        An endpoint for updating existing trusted certificates.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_account_certificate(account_id, cert_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str cert_id: The ID of the trusted certificate to be updated. (required)
        :param TrustedCertificateUpdateReq body: A trusted certificate object with attributes. (required)
        :return: TrustedCertificateInternalResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_account_certificate_with_http_info(account_id, cert_id, body, **kwargs)
        else:
            (data) = self.update_account_certificate_with_http_info(account_id, cert_id, body, **kwargs)
            return data

    def update_account_certificate_with_http_info(self, account_id, cert_id, body, **kwargs):
        """
        Update trusted certificate.
        An endpoint for updating existing trusted certificates.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_account_certificate_with_http_info(account_id, cert_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str cert_id: The ID of the trusted certificate to be updated. (required)
        :param TrustedCertificateUpdateReq body: A trusted certificate object with attributes. (required)
        :return: TrustedCertificateInternalResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'cert_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_account_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_account_certificate`")
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params) or (params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `update_account_certificate`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_account_certificate`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'cert_id' in params:
            path_params['cert-id'] = params['cert_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/trusted-certificates/{cert-id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TrustedCertificateInternalResp',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_account_user(self, account_id, user_id, body, **kwargs):
        """
        Update user details.
        An endpoint for updating user details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_account_user(account_id, user_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be updated. (required)
        :param UserUpdateReq body: A user object with attributes. (required)
        :return: UserUpdateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_account_user_with_http_info(account_id, user_id, body, **kwargs)
        else:
            (data) = self.update_account_user_with_http_info(account_id, user_id, body, **kwargs)
            return data

    def update_account_user_with_http_info(self, account_id, user_id, body, **kwargs):
        """
        Update user details.
        An endpoint for updating user details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_account_user_with_http_info(account_id, user_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be updated. (required)
        :param UserUpdateReq body: A user object with attributes. (required)
        :return: UserUpdateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_account_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_account_user`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_account_user`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_account_user`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/users/{user-id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserUpdateResp',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def validate_account_user_email(self, account_id, user_id, **kwargs):
        """
        Validate the user email.
        An endpoint for validating the user email.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.validate_account_user_email(account_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user whose email is validated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.validate_account_user_email_with_http_info(account_id, user_id, **kwargs)
        else:
            (data) = self.validate_account_user_email_with_http_info(account_id, user_id, **kwargs)
            return data

    def validate_account_user_email_with_http_info(self, account_id, user_id, **kwargs):
        """
        Validate the user email.
        An endpoint for validating the user email.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.validate_account_user_email_with_http_info(account_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user whose email is validated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_account_user_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `validate_account_user_email`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `validate_account_user_email`")


        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api('/v3/accounts/{accountID}/users/{user-id}/validate-email', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
