"""
Foundation Entity Factory
=========================

The Entity Factory returns new instance of Foundation Entities using the shared SDK context. All Entities can be created
from :class:`EntityFactory` class using the following methods:
{% for entity in entities %}
- :meth:`EntityFactory.{{ entity._key|to_snake }}`
{%- endfor %}

"""

# Python 2 compatibility
from __future__ import unicode_literals
from builtins import str  # noqa
from builtins import object


class EntityFactory:
    """Creates instances of Foundation Entities using the shared SDK context."""

    def __init__(self, client):
        """EntityFactory takes a client to attach to the models it creates"""
        self._client = client

    {#  this is a duplicate of the __init__ signature from the entity template  #}
    {% for entity in entities %}
    def {{ entity._key|to_snake }}(
        self,
        {% for field in entity.fields if not field.private_field %}
            {{field._key|to_snake}}=None,
        {% endfor %}
    ):
        """Creates a local `{{entity._key|to_pascal}}` instance, using the shared SDK context.

        {% for field in entity.fields if not field.private_field %}:param {{field._key|to_snake}}: {{ (field.description or '')|wordwrap(width=66)|indent(width=12) }}
        :type {{field._key|to_snake}}: {{field.python_type}}
        {% endfor %}
        :return: A new instance of a {{entity._key|to_pascal}} Foundation Entity.
        :rtype: mbed_cloud.foundation.entities.{{ entity.group_id|to_snake }}.{{ entity._key|to_snake }}.{{ entity._key|to_pascal }}
        """
        from mbed_cloud.foundation import {{ entity._key|to_pascal }}
        return {{ entity._key|to_pascal }}(
            _client=self._client,
            {% for field in entity.fields if not field.private_field %}
                {{field._key|to_snake}}={{field._key|to_snake}},
            {% endfor %}
        )
    {% endfor %}
