{%- set entity_names = entities|join(", ", attribute='_key')|to_pascal -%}
"""
.. warning::
    {{ entity_names }} should not be imported directly from this module as the
    organisation may change in the future, please use the :mod:`mbed_cloud.foundation` module to import entities.

Foundation Entity: {{ entity_names }}
==================={% for letter in entity_names %}={% endfor %}
{% for entity in entities %}
{%- for method in entity.methods|sort(attribute='_key') if not method.private_method %}
{%- if loop.index == 1 %}
Entities normally contain methods to create, read, update, delete and list resources. Other
actions may also be possible on the entity depending on the capabilities present in the API.
This entity has the following methods:
{% endif %}
- :meth:`{{ entity._key|to_pascal }}.{{method._key|to_snake}}`
{%- else %}
The {{ entity_names }} entity does not have any methods, all actions must be performed via
the encapsulating entity.
{%- endfor %}
{%- endfor %}

Entity Usage and Importing
--------------------------

The recommended way of working with Entities is via the SDK Interface which will return an instance of an Entity which
will share the same context as other Entities. There is more information in the :mod:`mbed_cloud.sdk.sdk` module.

.. code-block:: python

    from mbed_cloud import SDK
    pelion_dm_sdk = SDK()
    {%- for entity in entities|sort(attribute='_key')|sort(attribute='group_id') %}
    {{ entity._key|to_snake }}s = pelion_dm_sdk.foundation.{{ entity._key|to_snake }}()
    {%- endfor %}

How to import {{ entity_names }} directly:

.. code-block:: python
    {% for entity in entities|sort(attribute='_key')|sort(attribute='group_id') %}
    from mbed_cloud.foundation import {{ entity._key|to_pascal }}
    {%- endfor %}

------------
"""

# Python 2 compatibility
from __future__ import unicode_literals
from builtins import str  # noqa
from builtins import super

from mbed_cloud.foundation.common.entity_base import Entity
from mbed_cloud.foundation.common import fields
from mbed_cloud.foundation import enums

{% for entity in entities %}


class {{ entity._key|to_pascal }}(Entity):
    """Represents the `{{entity._key|to_pascal}}` entity in Mbed Cloud"""

    # all fields available on this entity
    _fieldnames = [
        {% for field in entity.fields %}
        '{{field._key|to_snake}}',
        {% endfor %}
    ]

    # Renames to be performed by the SDK when receiving data {% raw %}{<API Field Name>: <SDK Field Name>}{% endraw %}
    _renames = {
        {% for rename in entity.field_renames %}
        '{{rename.api_fieldname}}': '{{rename._key|to_snake}}',
        {% endfor %}
    }

    # Renames to be performed by the SDK when sending data {% raw %}{<SDK Field Name>: <API Field Name>}{% endraw %}
    _renames_to_api = {
        {% for rename in entity.field_renames %}
        '{{rename._key|to_snake}}' : '{{rename.api_fieldname}}',
        {% endfor %}
    }

    def __init__(
        self, _client=None{% if entity.fields %},{% endif %}
        {% for field in entity.fields if not field.private_field %}
            {{field._key|to_snake}}=None,
        {% endfor %}
    ):
        """Creates a local `{{entity._key|to_pascal}}` instance

        Parameters can be supplied on creation of the instance or given by
        setting the properties on the instance after creation.

        Parameters marked as `required` must be set for one or more operations
        on the entity. For details on when they are required please see the
        documentation for the setter method.

        {% for field in entity.fields if not field.private_field %}:param {{field._key|to_snake}}: {% if field.required %}(Required) {% endif %}{{ (field.description or '')|wordwrap(width=66)|indent(width=12) }}
        :type {{field._key|to_snake}}: {{field.python_type}}
        {% endfor %}"""

        super().__init__(_client=_client)

        # inline imports for avoiding circular references and bulk imports
        {% for field in entity.fields %}{% set fkey = (field.foreign_key or (field['items'] and field['items'].foreign_key)) %}{% if fkey and fkey.entity != entity._key%}
        from mbed_cloud.foundation.entities.{{ fkey.group|to_snake }}.{{ fkey.entity|to_snake }} import {{ fkey.entity|to_pascal }}{% endif %}{% endfor %}

        # fields
        {% for field in entity.fields %}self._{{field._key|to_snake}} = fields.{{field.python_field}}(
            value={{'None' if field.private_field else field._key|to_snake}}
            {% if field.enum_reference %}
            , enum=enums.{{ field.enum_reference|to_pascal }}
            {% endif %}
            {% set fkey = field.foreign_key or (field['items'] and field['items'].foreign_key) %}{% if fkey %}
            , entity={{ fkey.entity|to_pascal }}
            {% endif %}
        )
        {% endfor %}

    {% for field in entity.fields if not field.private_field%}
    @property
    def {{field._key|to_snake}}(self):
        """{{ (field.description or '')|wordwrap(width=78)|indent(width=8) }}
        {%- if field.required %}

        This field must be set when {% if field._key=='id' %}updating or deleting an existing{% else %}creating a new{% endif %} {{ entity._key|to_pascal }} Entity.
        {%- endif %}
        {% if field.example %}
        api example: {{ field.example|repr|wordwrap(width=78)|indent(width=12) }}
        {% endif %}
        :rtype: {{ field.python_type }}{% if field['items'] and field['items'].foreign_key %}[{{ field['items'].foreign_key.entity|to_pascal }}]{% endif %}{% if field.foreign_key %}[{{ field.foreign_key.entity|to_pascal }}]{% endif %}
        """
        {% if field.getter_custom_method %}
        from mbed_cloud.foundation._custom_methods import {{ field.getter_custom_method }}
        return {{ field.getter_custom_method }}(self=self, field=self._{{field._key|to_snake}})
        {% else %}
        return self._{{field._key|to_snake}}.value
        {% endif %}
    {% if not field.read_only and not field=='id' %}
    @{{ field._key|to_snake }}.setter
    def {{field._key|to_snake}}(self, value):
        """Set value of `{{ field._key|to_snake }}`

        :param value: value to set
        :type value: {{ field.python_type }}{% if field['items'] and field['items'].foreign_key %}[{{ field['items'].foreign_key.entity|to_pascal }}]{% endif %}{% if field.foreign_key %}[{{ field.foreign_key.entity|to_pascal }}]{% endif %}
        """
        {% if field.setter_custom_method %}
        from mbed_cloud.foundation._custom_methods import {{ field.setter_custom_method }}
        {{ field.setter_custom_method }}(self=self, field=self._{{field._key|to_snake}}, value=value)
        {% else %}
        self._{{field._key|to_snake}}.set(value)
        {% endif %}
    {% endif %}
    {% endfor %}

    {% for method in entity.methods|sort(attribute='_key') %}
    {# Determine the return type of the method, it may be a paginated response, the entity itself of a foreign key #}
    {% set return_type = method.python_return_type %}
    {% if method.pagination %}
        {% set unpack_type = false %}
        {% set foreign_key_import = false %}
        {% if not return_type %}
            {% set return_type = "mbed_cloud.pagination." + "PaginatedResponse" %}
        {% else %}
            {% set return_type = "mbed_cloud.pagination." + return_type %}
        {% endif %}
    {% elif method.return_info.self %}
        {% set unpack_type = "self" %}
        {% set foreign_key_import = false %}
    {% else %}
        {% set unpack_type = return_type %}
        {% set foreign_key_import = true %}
    {% endif %}
    def {% if method.private_method %}_{% endif %}{{method._key|to_snake}}(
        self
        {% for field in method.fields|sort_parg_kwarg %}
            {% if field.external_param %},
                {% if field.required %}
                    {{field._key|to_snake}}
                {% else %}
                    {{field._key|to_snake}}={{ field.default|repr }}
                {% endif %}
            {% endif %}
        {% endfor %}
        ):
        """{{method.summary}}
        {%- if method.path and not method.private_method %}

        `REST API Documentation <https://os.mbed.com/search/?q=Service+API+References+{{ method.path }}>`_.{% endif %}
        {%- if method.x_filter and method.public_paginator_method %}

        **API Filters**

        The following filters are supported by the API when listing {{ entity._key|to_pascal }} entities:

        {{ method.x_filter_table | indent(8) }}
        **Example Usage**

        .. code-block:: python

            from mbed_cloud.foundation import {{ entity._key|to_pascal }}
            from mbed_cloud import ApiFilter

            api_filter = ApiFilter()
            {%- for field_name, filter_operator in method.x_filter.items() -%}
            {% if loop.index == 1 %}
            api_filter.add_filter("{{ field_name }}", "{{ filter_operator[0] }}", <filter value>){%- endif -%}
            {%- endfor %}
            for {{ entity._key|to_singular_name if method._key == "list" else method._key|to_singular_name}} in {{ entity._key|to_pascal }}().{{method._key|to_snake}}(filter=api_filter):
            {%- for field_name, filter_operator in method.x_filter.items() %}
            {%- if loop.index == 1 %}
                print({{ entity._key|to_singular_name if method._key == "list" else method._key|to_singular_name}}.{{ field_name }})
            {%- endif -%}
            {%- endfor %}
        {%- endif %}
        {% for field in method.fields %}{% if field.external_param %}
        :param {{field._key|to_snake}}: {{ (field.description or field.foreign_key.entity|to_pascal)|wordwrap(width=70)|indent(width=12) }}
        :type {{field._key|to_snake}}: {{ (field.foreign_key and 'mbed_cloud.foundation.entities.' + field.foreign_key.entity|to_pascal) or field.python_type}}
        {% endif %}{% endfor %}
        {%- if method.public_paginator_method %}
        :return: An iterator object which yields instances of an entity.{%- endif %}
        :rtype: {{ return_type }}
        """
    {% for field in method.fields %}
        {% if field.set_foreign_key_properties %}
            {% for set_on_other, set_from_self in field.set_foreign_key_properties.items() %}
        {{field.entity_fieldname}}.{{ set_on_other }} = self.{{ set_from_self }}
            {% endfor %}
        {% endif %}
    {% endfor %}
    {% if method.defer_to_foreign_key_field %}
        return {{ method.defer_to_foreign_key_field.field }}.{{ method.defer_to_foreign_key_field.method }}()
    {% elif method.internal_paginator_method %}
        # Filter query parameters
        query_params=filter.to_api() if filter else {}
        # Add in other query parameters
        {%- for param_in, count in method.python_params_in.items() if param_in == "query" %}
            {%- for field in method.fields if field['in'] == param_in %}
        query_params['{{field.parameter_fieldname}}'] = fields.{{ field.python_field }}({{field._key|to_snake}}{% if field.enum_reference %}, enum=enums.{{ field.enum_reference|to_pascal }}{% endif %}).to_api()
            {%- endfor %}
        {%- endfor %}

        return self._client.call_api(
            method='{{method.method}}',
            path='{{ method.path }}',
            query_params=query_params,
            unpack = {{ unpack_type }},
        )
    {% elif method.custom_method %}
        from mbed_cloud.foundation._custom_methods import {{ method.custom_method }}
        {% if method.foreign_key %}from mbed_cloud.foundation import {{ method.foreign_key.entity|to_pascal }}{% endif %}
        {%- if method.pagination %}
        from mbed_cloud import ApiFilter

        # Be permissive and accept an instance of a dictionary as this was how the Legacy interface worked.
        if isinstance(filter, dict):
            filter = ApiFilter(filter_definition=filter, field_renames={% if method.foreign_key %}{{ method.foreign_key.entity|to_pascal }}{%  else %}self{% endif %}._renames_to_api)
        # The preferred method is an ApiFilter instance as this should be easier to use.
        elif isinstance(filter, ApiFilter):
            # If filter renames have not be defined then configure the ApiFilter so that any renames
            # performed by the SDK are reversed when the query parameters are created.
            if filter.field_renames is None:
                filter.field_renames = {% if method.foreign_key %}{{ method.foreign_key.entity|to_pascal }}{%  else %}self{% endif %}._renames_to_api
        elif filter is not None:
            raise TypeError("The 'filter' parameter may be either 'dict' or 'ApiFilter'.")
        {% endif %}

        return {{ method.custom_method }}(
            self=self,
            foreign_key={% if method.foreign_key %}{{ method.foreign_key.entity|to_pascal }}{% else %}self.__class__{% endif %}
            {% for field in method.fields|pargs_kwargs %}
                {% if field.external_param %},
                    {{field._key|to_snake}}={{field._key|to_snake}}
                {% endif %}
            {% endfor %}
            {% if method.pagination %},wraps=self._{{ method.paginate_target }}{% endif %}
        )
    {% else %}
        {% if foreign_key_import %}from mbed_cloud.foundation import {{ return_type }}{% endif %}
        return self._client.call_api(
            method='{{method.method}}',
            path='{{ method.path }}',
            {% for param_in, count in method.python_params_in.items() %}
                {% if count %}
                {{ param_in }}_params = {% if not method.__REPLACE_BODY or param_in != 'body' %}{% raw %}{{% endraw %}{% endif %}
                    {% for field in method.fields %}
                    {% if field['in'] == param_in %}
                    {% if not method.__REPLACE_BODY or param_in != 'body' %}
                        '{{field.parameter_fieldname}}':
                    {% endif %}
                        {% if field.external_param %}
                            fields.{{ field.python_field }}({{field._key|to_snake}}{% if field.enum_reference %}, enum=enums.{{ field.enum_reference|to_pascal }}{% endif %}).to_api()
                        {% else %}
                            self._{{field._key|to_snake}}.to_api()
                        {% endif %}
                    {% if not method.__REPLACE_BODY or param_in != 'body' %},{% endif %}
                    {% endif %}
                    {% endfor %}
                {% if not method.__REPLACE_BODY or param_in != 'body' %}{% raw %}}{% endraw %}{% endif %},
                {% endif %}
            {% endfor %}
            unpack = {{ unpack_type }},
        )
    {% endif %}
    {% endfor %}
{% endfor %}
