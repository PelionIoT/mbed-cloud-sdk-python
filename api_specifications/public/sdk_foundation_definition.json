{
  "groups": [
    {
      "entities": [
        "password_policy",
        "login_history",
        "parent_account",
        "policy",
        "login_profile",
        "active_session",
        "user",
        "subtenant_user",
        "user_invitation",
        "subtenant_user_invitation",
        "api_key",
        "subtenant_api_key",
        "account",
        "policy_group",
        "subtenant_policy_group",
        "identity_provider",
        "subtenant_identity_provider",
        "saml2_request",
        "oidc_request",
        "oidc_request_claim_mapping",
        "identity_provider_public_key"
      ],
      "enums": [
        "policy_inherited_type_enum",
        "login_profile_type_enum",
        "user_status_enum",
        "user_order_enum",
        "subtenant_user_status_enum",
        "subtenant_user_order_enum",
        "user_invitation_order_enum",
        "api_key_status_enum",
        "api_key_order_enum",
        "subtenant_api_key_status_enum",
        "subtenant_api_key_order_enum",
        "account_status_enum",
        "account_mfa_status_enum",
        "account_business_model_enum",
        "account_order_enum",
        "policy_group_order_enum",
        "subtenant_policy_group_order_enum",
        "identity_provider_status_enum",
        "identity_provider_type_enum",
        "identity_provider_order_enum",
        "identity_provider_algorithm_enum",
        "subtenant_identity_provider_status_enum",
        "subtenant_identity_provider_order_enum",
        "subtenant_identity_provider_algorithm_enum",
        "oidc_request_token_mode_enum"
      ],
      "_key": "Accounts"
    },
    {
      "entities": [
        "dark_theme_color",
        "light_theme_color",
        "dark_theme_image",
        "light_theme_image",
        "subtenant_dark_theme_color",
        "subtenant_light_theme_color",
        "subtenant_dark_theme_image",
        "subtenant_light_theme_image"
      ],
      "enums": [
        "dark_theme_color_reference_enum",
        "light_theme_color_reference_enum",
        "dark_theme_image_reference_enum",
        "light_theme_image_reference_enum",
        "subtenant_dark_theme_color_reference_enum",
        "subtenant_light_theme_color_reference_enum",
        "subtenant_dark_theme_image_reference_enum",
        "subtenant_light_theme_image_reference_enum"
      ],
      "_key": "Branding"
    },
    {
      "entities": [
        "campaign_device_metadata",
        "update_campaign",
        "campaign_statistics",
        "campaign_statistics_events",
        "firmware_image",
        "firmware_manifest"
      ],
      "enums": [
        "campaign_device_metadata_deployment_state_enum",
        "update_campaign_strategy_enum",
        "update_campaign_phase_enum",
        "update_campaign_order_enum",
        "campaign_statistics_summary_status_enum",
        "campaign_statistics_id_enum",
        "firmware_image_order_enum",
        "firmware_manifest_schema_version_enum",
        "firmware_manifest_delivered_payload_type_enum",
        "firmware_manifest_order_enum"
      ],
      "_key": "Device_Update"
    },
    {
      "entities": [
        "device",
        "device_group",
        "device_events",
        "device_enrollment_bulk_create",
        "device_enrollment_bulk_delete",
        "device_enrollment"
      ],
      "enums": [
        "device_lifecycle_status_enum",
        "device_deployed_state_enum",
        "device_mechanism_enum",
        "device_state_enum",
        "device_enrollment_bulk_create_status_enum",
        "device_enrollment_bulk_delete_status_enum",
        "device_enrollment_order_enum"
      ],
      "_key": "Devices"
    },
    {
      "entities": [
        "pre_shared_key",
        "certificate_issuer_config",
        "verification_response",
        "certificate_issuer",
        "certificate_enrollment",
        "server_credentials",
        "trusted_certificate",
        "subtenant_trusted_certificate",
        "developer_certificate"
      ],
      "enums": [
        "certificate_issuer_type_enum",
        "certificate_enrollment_enroll_status_enum",
        "certificate_enrollment_enroll_result_enum",
        "certificate_enrollment_order_enum",
        "certificate_enrollment_include_enum",
        "trusted_certificate_service_enum",
        "trusted_certificate_status_enum",
        "trusted_certificate_order_enum",
        "subtenant_trusted_certificate_service_enum",
        "subtenant_trusted_certificate_status_enum"
      ],
      "_key": "Security"
    }
  ],
  "enums": [
    {
      "entity_name": "account",
      "field_name": "business_model",
      "enum_name": "account_business_model_enum",
      "values": [
        "active_device_business_model",
        "api_calls_1_business_model"
      ],
      "group_id": "Accounts",
      "_key": "account_business_model_enum"
    },
    {
      "entity_name": "account",
      "field_name": "mfa_status",
      "enum_name": "account_mfa_status_enum",
      "values": [
        "enforced",
        "optional"
      ],
      "group_id": "Accounts",
      "_key": "account_mfa_status_enum"
    },
    {
      "entity_name": "account",
      "field_name": "order",
      "enum_name": "account_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Accounts",
      "_key": "account_order_enum"
    },
    {
      "entity_name": "account",
      "field_name": "status",
      "enum_name": "account_status_enum",
      "values": [
        "ACTIVE",
        "ENROLLING",
        "RESTRICTED",
        "SUSPENDED"
      ],
      "group_id": "Accounts",
      "_key": "account_status_enum"
    },
    {
      "entity_name": "api_key",
      "field_name": "order",
      "enum_name": "api_key_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Accounts",
      "_key": "api_key_order_enum"
    },
    {
      "entity_name": "api_key",
      "field_name": "status",
      "enum_name": "api_key_status_enum",
      "values": [
        "ACTIVE",
        "INACTIVE"
      ],
      "group_id": "Accounts",
      "_key": "api_key_status_enum"
    },
    {
      "entity_name": "campaign_device_metadata",
      "field_name": "deployment_state",
      "enum_name": "campaign_device_metadata_deployment_state_enum",
      "values": [
        "deployed",
        "deregistered",
        "failed_connector_channel_update",
        "manifestremoved",
        "pending",
        "updated_connector_channel"
      ],
      "group_id": "Device_Update",
      "_key": "campaign_device_metadata_deployment_state_enum"
    },
    {
      "entity_name": "campaign_statistics",
      "field_name": "id",
      "enum_name": "campaign_statistics_id_enum",
      "values": [
        "fail",
        "info",
        "skipped",
        "success"
      ],
      "group_id": "Device_Update",
      "_key": "campaign_statistics_id_enum"
    },
    {
      "entity_name": "campaign_statistics",
      "field_name": "summary_status",
      "enum_name": "campaign_statistics_summary_status_enum",
      "values": [
        "FAIL",
        "INFO",
        "SKIPPED",
        "SUCCESS"
      ],
      "group_id": "Device_Update",
      "_key": "campaign_statistics_summary_status_enum"
    },
    {
      "entity_name": "certificate_enrollment",
      "field_name": "enroll_result",
      "enum_name": "certificate_enrollment_enroll_result_enum",
      "values": [
        "failure",
        "success"
      ],
      "group_id": "Security",
      "_key": "certificate_enrollment_enroll_result_enum"
    },
    {
      "entity_name": "certificate_enrollment",
      "field_name": "enroll_status",
      "enum_name": "certificate_enrollment_enroll_status_enum",
      "values": [
        "completed",
        "new"
      ],
      "group_id": "Security",
      "_key": "certificate_enrollment_enroll_status_enum"
    },
    {
      "entity_name": "certificate_enrollment",
      "field_name": "include",
      "enum_name": "certificate_enrollment_include_enum",
      "values": [
        "total_count"
      ],
      "group_id": "Security",
      "_key": "certificate_enrollment_include_enum"
    },
    {
      "entity_name": "certificate_enrollment",
      "field_name": "order",
      "enum_name": "certificate_enrollment_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Security",
      "_key": "certificate_enrollment_order_enum"
    },
    {
      "entity_name": "certificate_issuer",
      "field_name": "issuer_type",
      "enum_name": "certificate_issuer_type_enum",
      "values": [
        "CFSSL_AUTH",
        "GLOBAL_SIGN"
      ],
      "group_id": "Security",
      "_key": "certificate_issuer_type_enum"
    },
    {
      "entity_name": "dark_theme_color",
      "field_name": "reference",
      "enum_name": "dark_theme_color_reference_enum",
      "values": [
        "canvas_background",
        "canvas_background_font_color",
        "error_color",
        "error_font_color",
        "info_color",
        "info_font_color",
        "primary",
        "primary_font_color",
        "secondary",
        "secondary_font_color",
        "success_color",
        "success_font_color",
        "warning_color",
        "warning_font_color",
        "workspace_background",
        "workspace_background_font_color"
      ],
      "group_id": "Branding",
      "_key": "dark_theme_color_reference_enum"
    },
    {
      "entity_name": "dark_theme_image",
      "field_name": "reference",
      "enum_name": "dark_theme_image_reference_enum",
      "values": [
        "brand_logo_email",
        "brand_logo_landscape",
        "brand_logo_portrait",
        "brand_logo_square",
        "carousel_image_landscape_0",
        "carousel_image_landscape_1",
        "carousel_image_landscape_2",
        "carousel_image_landscape_3",
        "carousel_image_landscape_4",
        "carousel_image_landscape_5",
        "carousel_image_landscape_6",
        "carousel_image_landscape_7",
        "carousel_image_landscape_8",
        "carousel_image_landscape_9",
        "carousel_image_portrait_0",
        "carousel_image_portrait_1",
        "carousel_image_portrait_2",
        "carousel_image_portrait_3",
        "carousel_image_portrait_4",
        "carousel_image_portrait_5",
        "carousel_image_portrait_6",
        "carousel_image_portrait_7",
        "carousel_image_portrait_8",
        "carousel_image_portrait_9",
        "carousel_image_square_0",
        "carousel_image_square_1",
        "carousel_image_square_2",
        "carousel_image_square_3",
        "carousel_image_square_4",
        "carousel_image_square_5",
        "carousel_image_square_6",
        "carousel_image_square_7",
        "carousel_image_square_8",
        "carousel_image_square_9",
        "desktop_background_landscape",
        "desktop_background_portrait",
        "desktop_background_square"
      ],
      "group_id": "Branding",
      "_key": "dark_theme_image_reference_enum"
    },
    {
      "entity_name": "device",
      "field_name": "deployed_state",
      "enum_name": "device_deployed_state_enum",
      "values": [
        "development",
        "production"
      ],
      "group_id": "Devices",
      "_key": "device_deployed_state_enum"
    },
    {
      "entity_name": "device_enrollment_bulk_create",
      "field_name": "status",
      "enum_name": "device_enrollment_bulk_create_status_enum",
      "values": [
        "completed",
        "new",
        "processing"
      ],
      "group_id": "Devices",
      "_key": "device_enrollment_bulk_create_status_enum"
    },
    {
      "entity_name": "device_enrollment_bulk_delete",
      "field_name": "status",
      "enum_name": "device_enrollment_bulk_delete_status_enum",
      "values": [
        "completed",
        "new",
        "processing"
      ],
      "group_id": "Devices",
      "_key": "device_enrollment_bulk_delete_status_enum"
    },
    {
      "entity_name": "device_enrollment",
      "field_name": "order",
      "enum_name": "device_enrollment_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Devices",
      "_key": "device_enrollment_order_enum"
    },
    {
      "entity_name": "device",
      "field_name": "lifecycle_status",
      "enum_name": "device_lifecycle_status_enum",
      "values": [
        "blocked",
        "enabled"
      ],
      "group_id": "Devices",
      "_key": "device_lifecycle_status_enum"
    },
    {
      "entity_name": "device",
      "field_name": "mechanism",
      "enum_name": "device_mechanism_enum",
      "values": [
        "connector",
        "direct"
      ],
      "group_id": "Devices",
      "_key": "device_mechanism_enum"
    },
    {
      "entity_name": "device",
      "field_name": "state",
      "enum_name": "device_state_enum",
      "values": [
        "bootstrapped",
        "cloud_enrolling",
        "deregistered",
        "registered",
        "unenrolled"
      ],
      "group_id": "Devices",
      "_key": "device_state_enum"
    },
    {
      "entity_name": "firmware_image",
      "field_name": "order",
      "enum_name": "firmware_image_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Device_Update",
      "_key": "firmware_image_order_enum"
    },
    {
      "entity_name": "firmware_manifest",
      "field_name": "delivered_payload_type",
      "enum_name": "firmware_manifest_delivered_payload_type_enum",
      "values": [
        "delta",
        "full"
      ],
      "group_id": "Device_Update",
      "_key": "firmware_manifest_delivered_payload_type_enum"
    },
    {
      "entity_name": "firmware_manifest",
      "field_name": "order",
      "enum_name": "firmware_manifest_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Device_Update",
      "_key": "firmware_manifest_order_enum"
    },
    {
      "entity_name": "firmware_manifest",
      "field_name": "manifest_schema_version",
      "enum_name": "firmware_manifest_schema_version_enum",
      "values": [
        "1",
        "3"
      ],
      "group_id": "Device_Update",
      "_key": "firmware_manifest_schema_version_enum"
    },
    {
      "entity_name": "identity_provider",
      "field_name": "algorithm",
      "enum_name": "identity_provider_algorithm_enum",
      "values": [
        "EC224",
        "EC256",
        "EC384",
        "EC521",
        "ECDSA224",
        "ECDSA256",
        "ECDSA384",
        "ECDSA521",
        "RSA2048",
        "RSA3072"
      ],
      "group_id": "Accounts",
      "_key": "identity_provider_algorithm_enum"
    },
    {
      "entity_name": "identity_provider",
      "field_name": "order",
      "enum_name": "identity_provider_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Accounts",
      "_key": "identity_provider_order_enum"
    },
    {
      "entity_name": "identity_provider",
      "field_name": "status",
      "enum_name": "identity_provider_status_enum",
      "values": [
        "ACTIVE",
        "SUSPENDED"
      ],
      "group_id": "Accounts",
      "_key": "identity_provider_status_enum"
    },
    {
      "entity_name": "identity_provider",
      "field_name": "identity_provider_type",
      "enum_name": "identity_provider_type_enum",
      "values": [
        "MBED",
        "NATIVE",
        "OIDC",
        "SAML2"
      ],
      "group_id": "Accounts",
      "_key": "identity_provider_type_enum"
    },
    {
      "entity_name": "light_theme_color",
      "field_name": "reference",
      "enum_name": "light_theme_color_reference_enum",
      "values": [
        "canvas_background",
        "canvas_background_font_color",
        "error_color",
        "error_font_color",
        "info_color",
        "info_font_color",
        "primary",
        "primary_font_color",
        "secondary",
        "secondary_font_color",
        "success_color",
        "success_font_color",
        "warning_color",
        "warning_font_color",
        "workspace_background",
        "workspace_background_font_color"
      ],
      "group_id": "Branding",
      "_key": "light_theme_color_reference_enum"
    },
    {
      "entity_name": "light_theme_image",
      "field_name": "reference",
      "enum_name": "light_theme_image_reference_enum",
      "values": [
        "brand_logo_email",
        "brand_logo_landscape",
        "brand_logo_portrait",
        "brand_logo_square",
        "carousel_image_landscape_0",
        "carousel_image_landscape_1",
        "carousel_image_landscape_2",
        "carousel_image_landscape_3",
        "carousel_image_landscape_4",
        "carousel_image_landscape_5",
        "carousel_image_landscape_6",
        "carousel_image_landscape_7",
        "carousel_image_landscape_8",
        "carousel_image_landscape_9",
        "carousel_image_portrait_0",
        "carousel_image_portrait_1",
        "carousel_image_portrait_2",
        "carousel_image_portrait_3",
        "carousel_image_portrait_4",
        "carousel_image_portrait_5",
        "carousel_image_portrait_6",
        "carousel_image_portrait_7",
        "carousel_image_portrait_8",
        "carousel_image_portrait_9",
        "carousel_image_square_0",
        "carousel_image_square_1",
        "carousel_image_square_2",
        "carousel_image_square_3",
        "carousel_image_square_4",
        "carousel_image_square_5",
        "carousel_image_square_6",
        "carousel_image_square_7",
        "carousel_image_square_8",
        "carousel_image_square_9",
        "desktop_background_landscape",
        "desktop_background_portrait",
        "desktop_background_square"
      ],
      "group_id": "Branding",
      "_key": "light_theme_image_reference_enum"
    },
    {
      "entity_name": "login_profile",
      "field_name": "login_profile_type",
      "enum_name": "login_profile_type_enum",
      "values": [
        "MBED",
        "NATIVE",
        "OIDC",
        "SAML2"
      ],
      "group_id": "Accounts",
      "_key": "login_profile_type_enum"
    },
    {
      "entity_name": "oidc_request",
      "field_name": "token_request_mode",
      "enum_name": "oidc_request_token_mode_enum",
      "values": [
        "GET",
        "POST"
      ],
      "group_id": "Accounts",
      "_key": "oidc_request_token_mode_enum"
    },
    {
      "entity_name": "policy_group",
      "field_name": "order",
      "enum_name": "policy_group_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Accounts",
      "_key": "policy_group_order_enum"
    },
    {
      "entity_name": "policy",
      "field_name": "inherited_type",
      "enum_name": "policy_inherited_type_enum",
      "values": [
        "account",
        "template",
        "tier_template"
      ],
      "group_id": "Accounts",
      "_key": "policy_inherited_type_enum"
    },
    {
      "entity_name": "subtenant_api_key",
      "field_name": "order",
      "enum_name": "subtenant_api_key_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Accounts",
      "_key": "subtenant_api_key_order_enum"
    },
    {
      "entity_name": "subtenant_api_key",
      "field_name": "status",
      "enum_name": "subtenant_api_key_status_enum",
      "values": [
        "ACTIVE",
        "INACTIVE"
      ],
      "group_id": "Accounts",
      "_key": "subtenant_api_key_status_enum"
    },
    {
      "entity_name": "subtenant_dark_theme_color",
      "field_name": "reference",
      "enum_name": "subtenant_dark_theme_color_reference_enum",
      "values": [
        "canvas_background",
        "canvas_background_font_color",
        "error_color",
        "error_font_color",
        "info_color",
        "info_font_color",
        "primary",
        "primary_font_color",
        "secondary",
        "secondary_font_color",
        "success_color",
        "success_font_color",
        "warning_color",
        "warning_font_color",
        "workspace_background",
        "workspace_background_font_color"
      ],
      "group_id": "Branding",
      "_key": "subtenant_dark_theme_color_reference_enum"
    },
    {
      "entity_name": "subtenant_dark_theme_image",
      "field_name": "reference",
      "enum_name": "subtenant_dark_theme_image_reference_enum",
      "values": [
        "brand_logo_email",
        "brand_logo_landscape",
        "brand_logo_portrait",
        "brand_logo_square",
        "carousel_image_landscape_0",
        "carousel_image_landscape_1",
        "carousel_image_landscape_2",
        "carousel_image_landscape_3",
        "carousel_image_landscape_4",
        "carousel_image_landscape_5",
        "carousel_image_landscape_6",
        "carousel_image_landscape_7",
        "carousel_image_landscape_8",
        "carousel_image_landscape_9",
        "carousel_image_portrait_0",
        "carousel_image_portrait_1",
        "carousel_image_portrait_2",
        "carousel_image_portrait_3",
        "carousel_image_portrait_4",
        "carousel_image_portrait_5",
        "carousel_image_portrait_6",
        "carousel_image_portrait_7",
        "carousel_image_portrait_8",
        "carousel_image_portrait_9",
        "carousel_image_square_0",
        "carousel_image_square_1",
        "carousel_image_square_2",
        "carousel_image_square_3",
        "carousel_image_square_4",
        "carousel_image_square_5",
        "carousel_image_square_6",
        "carousel_image_square_7",
        "carousel_image_square_8",
        "carousel_image_square_9",
        "desktop_background_landscape",
        "desktop_background_portrait",
        "desktop_background_square"
      ],
      "group_id": "Branding",
      "_key": "subtenant_dark_theme_image_reference_enum"
    },
    {
      "entity_name": "subtenant_identity_provider",
      "field_name": "algorithm",
      "enum_name": "subtenant_identity_provider_algorithm_enum",
      "values": [
        "EC224",
        "EC256",
        "EC384",
        "EC521",
        "ECDSA224",
        "ECDSA256",
        "ECDSA384",
        "ECDSA521",
        "RSA2048",
        "RSA3072"
      ],
      "group_id": "Accounts",
      "_key": "subtenant_identity_provider_algorithm_enum"
    },
    {
      "entity_name": "subtenant_identity_provider",
      "field_name": "order",
      "enum_name": "subtenant_identity_provider_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Accounts",
      "_key": "subtenant_identity_provider_order_enum"
    },
    {
      "entity_name": "subtenant_identity_provider",
      "field_name": "status",
      "enum_name": "subtenant_identity_provider_status_enum",
      "values": [
        "ACTIVE",
        "SUSPENDED"
      ],
      "group_id": "Accounts",
      "_key": "subtenant_identity_provider_status_enum"
    },
    {
      "entity_name": "subtenant_light_theme_color",
      "field_name": "reference",
      "enum_name": "subtenant_light_theme_color_reference_enum",
      "values": [
        "canvas_background",
        "canvas_background_font_color",
        "error_color",
        "error_font_color",
        "info_color",
        "info_font_color",
        "primary",
        "primary_font_color",
        "secondary",
        "secondary_font_color",
        "success_color",
        "success_font_color",
        "warning_color",
        "warning_font_color",
        "workspace_background",
        "workspace_background_font_color"
      ],
      "group_id": "Branding",
      "_key": "subtenant_light_theme_color_reference_enum"
    },
    {
      "entity_name": "subtenant_light_theme_image",
      "field_name": "reference",
      "enum_name": "subtenant_light_theme_image_reference_enum",
      "values": [
        "brand_logo_email",
        "brand_logo_landscape",
        "brand_logo_portrait",
        "brand_logo_square",
        "carousel_image_landscape_0",
        "carousel_image_landscape_1",
        "carousel_image_landscape_2",
        "carousel_image_landscape_3",
        "carousel_image_landscape_4",
        "carousel_image_landscape_5",
        "carousel_image_landscape_6",
        "carousel_image_landscape_7",
        "carousel_image_landscape_8",
        "carousel_image_landscape_9",
        "carousel_image_portrait_0",
        "carousel_image_portrait_1",
        "carousel_image_portrait_2",
        "carousel_image_portrait_3",
        "carousel_image_portrait_4",
        "carousel_image_portrait_5",
        "carousel_image_portrait_6",
        "carousel_image_portrait_7",
        "carousel_image_portrait_8",
        "carousel_image_portrait_9",
        "carousel_image_square_0",
        "carousel_image_square_1",
        "carousel_image_square_2",
        "carousel_image_square_3",
        "carousel_image_square_4",
        "carousel_image_square_5",
        "carousel_image_square_6",
        "carousel_image_square_7",
        "carousel_image_square_8",
        "carousel_image_square_9",
        "desktop_background_landscape",
        "desktop_background_portrait",
        "desktop_background_square"
      ],
      "group_id": "Branding",
      "_key": "subtenant_light_theme_image_reference_enum"
    },
    {
      "entity_name": "subtenant_policy_group",
      "field_name": "order",
      "enum_name": "subtenant_policy_group_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Accounts",
      "_key": "subtenant_policy_group_order_enum"
    },
    {
      "entity_name": "subtenant_trusted_certificate",
      "field_name": "service",
      "enum_name": "subtenant_trusted_certificate_service_enum",
      "values": [
        "bootstrap",
        "lwm2m"
      ],
      "group_id": "Security",
      "_key": "subtenant_trusted_certificate_service_enum"
    },
    {
      "entity_name": "subtenant_trusted_certificate",
      "field_name": "status",
      "enum_name": "subtenant_trusted_certificate_status_enum",
      "values": [
        "ACTIVE",
        "INACTIVE"
      ],
      "group_id": "Security",
      "_key": "subtenant_trusted_certificate_status_enum"
    },
    {
      "entity_name": "subtenant_user",
      "field_name": "order",
      "enum_name": "subtenant_user_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Accounts",
      "_key": "subtenant_user_order_enum"
    },
    {
      "entity_name": "subtenant_user",
      "field_name": "status",
      "enum_name": "subtenant_user_status_enum",
      "values": [
        "ACTIVE",
        "ENROLLING",
        "INACTIVE",
        "INVITED",
        "RESET"
      ],
      "group_id": "Accounts",
      "_key": "subtenant_user_status_enum"
    },
    {
      "entity_name": "trusted_certificate",
      "field_name": "order",
      "enum_name": "trusted_certificate_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Security",
      "_key": "trusted_certificate_order_enum"
    },
    {
      "entity_name": "trusted_certificate",
      "field_name": "service",
      "enum_name": "trusted_certificate_service_enum",
      "values": [
        "bootstrap",
        "lwm2m"
      ],
      "group_id": "Security",
      "_key": "trusted_certificate_service_enum"
    },
    {
      "entity_name": "trusted_certificate",
      "field_name": "status",
      "enum_name": "trusted_certificate_status_enum",
      "values": [
        "ACTIVE",
        "INACTIVE"
      ],
      "group_id": "Security",
      "_key": "trusted_certificate_status_enum"
    },
    {
      "entity_name": "update_campaign",
      "field_name": "order",
      "enum_name": "update_campaign_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Device_Update",
      "_key": "update_campaign_order_enum"
    },
    {
      "entity_name": "update_campaign",
      "field_name": "phase",
      "enum_name": "update_campaign_phase_enum",
      "values": [
        "active",
        "archived",
        "awaiting_approval",
        "deleted",
        "draft",
        "starting",
        "stopped",
        "stopping",
        "timed"
      ],
      "group_id": "Device_Update",
      "_key": "update_campaign_phase_enum"
    },
    {
      "entity_name": "update_campaign",
      "field_name": "campaign_strategy",
      "enum_name": "update_campaign_strategy_enum",
      "values": [
        "continuous",
        "one-shot"
      ],
      "group_id": "Device_Update",
      "_key": "update_campaign_strategy_enum"
    },
    {
      "entity_name": "user_invitation",
      "field_name": "order",
      "enum_name": "user_invitation_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Accounts",
      "_key": "user_invitation_order_enum"
    },
    {
      "entity_name": "user",
      "field_name": "order",
      "enum_name": "user_order_enum",
      "values": [
        "ASC",
        "DESC"
      ],
      "group_id": "Accounts",
      "_key": "user_order_enum"
    },
    {
      "entity_name": "user",
      "field_name": "status",
      "enum_name": "user_status_enum",
      "values": [
        "ACTIVE",
        "ENROLLING",
        "INACTIVE",
        "INVITED",
        "RESET"
      ],
      "group_id": "Accounts",
      "_key": "user_status_enum"
    }
  ],
  "entities": [
    {
      "swagger_models": [
        "AccountCreationReq",
        "AccountCreationResp",
        "AccountInfo",
        "AccountInfoList",
        "AccountUpdateRootReq",
        "ApiKeyInfoRespList",
        "BrandingColorList",
        "BrandingImageList",
        "TrustedCertificateRespList",
        "UserInfoRespList",
        "UserInvitationRespList"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Retrieve an array of API keys, optionally filtered by the owner.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "id"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "account_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "api_keys",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "etag",
                        "id",
                        "key",
                        "name",
                        "object"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727683,
                          "description": "The timestamp of the API key creation in the storage, in milliseconds.",
                          "_key": "creation_time"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "array",
                          "description": "A list of group IDs this API key belongs to.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "groups"
                        },
                        {
                          "type": "string",
                          "example": "01619571f7020242ac12000600000000",
                          "description": "The ID of the API key.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
                          "description": "The API key.",
                          "_key": "key"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727688,
                          "description": "The timestamp of the latest API key usage, in milliseconds.",
                          "_key": "last_login_time"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "API key gorgon",
                          "description": "The display name for the API key.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'api-key'",
                          "enum": [
                            "api-key"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e89242ac12000600000000",
                          "description": "The owner of this API key, who is the creator by default.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "owner"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "The status of the API key.",
                          "enum": [
                            "ACTIVE",
                            "INACTIVE"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ],
                      "description": "Represents an API key in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "api_key"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "api_key_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "api_key"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account with the given ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/api-keys",
          "summary": "Get all API keys.",
          "return_type": "paginated_response(subtenant_api_key)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "subtenant_api_key"
          },
          "x_filter": {
            "key": [
              "eq"
            ],
            "owner": [
              "eq"
            ]
          },
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "sub_accounts",
            "total_count",
            "has_more",
            "data",
            "key__eq",
            "owner__eq"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "account_id": "id"
          },
          "operation_id": "getAllAccountApiKeys",
          "notes": "This lists the api keys of the subtenant account.",
          "foreign_key": {
            "entity": "subtenant_api_key"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "api_keys"
        },
        {
          "description": "Create a new account.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{\"display_name\": \"MyAccount1\", \"aliases\": [ \"my-account\" ], \"admin_name\": \"accountAdmin1\", \"email\": \"example_admin@myaccount.info\", \"country\": \"United Kingdom\", \"end_market\": \"Smart City\", \"address_line1\": \"110 Fulbourn Rd\", \"city\": \"Cambridge\", \"contact\": \"J. Doe\", \"company\": \"Arm\"}'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "action",
              "in": "query",
              "description": "Action, either `create` or `enroll`.\n<ul>\n<li>`create` creates the account where its admin user has ACTIVE status if `admin_password` was defined in the request, or RESET status if no `admin_password` was defined. If the user already exists, its status is not modified. </li>\n<li>`enroll` creates the account where its admin user has ENROLLING status. If the user already exists, its status is not modified. Email to finish enrollment or notify the existing user about the new account is sent to the `admin_email` defined in the request. </li></ul>",
              "required": false,
              "type": "string",
              "default": "create",
              "entity_fieldname": "action",
              "api_fieldname": "action",
              "external_param": true,
              "parameter_fieldname": "action",
              "_key": "action"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "110 Fulbourn Rd",
              "description": "Postal address line 1.",
              "api_fieldname": "address_line1",
              "entity_fieldname": "address_line1",
              "parameter_fieldname": "address_line1",
              "in": "body",
              "required": false,
              "_key": "address_line1"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": " ",
              "description": "Postal address line 2.",
              "api_fieldname": "address_line2",
              "entity_fieldname": "address_line2",
              "parameter_fieldname": "address_line2",
              "in": "body",
              "required": false,
              "_key": "address_line2"
            },
            {
              "pattern": "^(?=.{3,254}$).+\\@.+",
              "type": "string",
              "x-nullable": true,
              "example": "admin@arm.com",
              "description": "The email address of the admin user created for this account. Present only in the response for account creation.",
              "api_fieldname": "admin_email",
              "entity_fieldname": "admin_email",
              "parameter_fieldname": "admin_email",
              "in": "body",
              "required": false,
              "_key": "admin_email"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "Admin Doe",
              "description": "The full name of the admin user created for this account. Present only in the response for account creation.",
              "api_fieldname": "admin_full_name",
              "entity_fieldname": "admin_full_name",
              "parameter_fieldname": "admin_full_name",
              "in": "body",
              "required": false,
              "_key": "admin_full_name"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "admin",
              "description": "The username of the admin user created for this account. Present only in the response for account creation.",
              "api_fieldname": "admin_name",
              "entity_fieldname": "admin_name",
              "parameter_fieldname": "admin_name",
              "in": "body",
              "required": false,
              "_key": "admin_name"
            },
            {
              "type": "string",
              "x-nullable": true,
              "example": "PZf9eEUH43DAPE9ULINFeuj",
              "description": "The password of the admin user created for this account. Present only in the response for account creation.",
              "api_fieldname": "admin_password",
              "entity_fieldname": "admin_password",
              "parameter_fieldname": "admin_password",
              "in": "body",
              "required": false,
              "_key": "admin_password"
            },
            {
              "type": "array",
              "maxItems": 10,
              "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
              "items": {
                "type": "string",
                "pattern": "[\\w\\-._]{8,100}"
              },
              "api_fieldname": "aliases",
              "entity_fieldname": "aliases",
              "parameter_fieldname": "aliases",
              "in": "body",
              "required": false,
              "_key": "aliases"
            },
            {
              "type": "string",
              "default": "active_device_business_model",
              "example": "api_calls_1_business_model",
              "description": "Business model for this account. Manageable by the root admin only.",
              "enum": [
                "active_device_business_model",
                "api_calls_1_business_model"
              ],
              "api_fieldname": "business_model",
              "entity_fieldname": "business_model",
              "parameter_fieldname": "business_model",
              "in": "body",
              "required": false,
              "enum_reference": "account_business_model_enum",
              "_key": "business_model"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "Cambridge",
              "description": "The city part of the postal address.",
              "api_fieldname": "city",
              "entity_fieldname": "city",
              "parameter_fieldname": "city",
              "in": "body",
              "required": false,
              "_key": "city"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "ARM Holdings Plc",
              "description": "The name of the company used in billing.",
              "api_fieldname": "company",
              "entity_fieldname": "company",
              "parameter_fieldname": "company",
              "in": "body",
              "required": false,
              "_key": "company"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "J. Doe",
              "description": "The name of the contact person for this account.",
              "api_fieldname": "contact",
              "entity_fieldname": "contact",
              "parameter_fieldname": "contact",
              "in": "body",
              "required": false,
              "_key": "contact"
            },
            {
              "type": "string",
              "example": "1NX25_0001",
              "x-nullable": true,
              "description": "Contract number of the customer.",
              "api_fieldname": "contract_number",
              "entity_fieldname": "contract_number",
              "parameter_fieldname": "contract_number",
              "in": "body",
              "required": false,
              "_key": "contract_number"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "United Kingdom",
              "description": "The country part of the postal address.",
              "api_fieldname": "country",
              "entity_fieldname": "country",
              "parameter_fieldname": "country",
              "in": "body",
              "required": false,
              "_key": "country"
            },
            {
              "type": "string",
              "example": "1NC25_0001",
              "x-nullable": true,
              "description": "Customer number of the customer.",
              "api_fieldname": "customer_number",
              "entity_fieldname": "customer_number",
              "parameter_fieldname": "customer_number",
              "in": "body",
              "required": false,
              "_key": "customer_number"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "ARM",
              "description": "The display name for the tenant account.",
              "api_fieldname": "display_name",
              "entity_fieldname": "display_name",
              "parameter_fieldname": "display_name",
              "in": "body",
              "required": false,
              "_key": "display_name"
            },
            {
              "pattern": "^(?=.{3,254}$).+\\@.+",
              "type": "string",
              "x-nullable": true,
              "example": "info@arm.com",
              "description": "The company email address for this account.",
              "api_fieldname": "email",
              "entity_fieldname": "email",
              "parameter_fieldname": "email",
              "in": "body",
              "required": false,
              "_key": "email"
            },
            {
              "type": "string",
              "example": "IT",
              "description": "Account end market.",
              "api_fieldname": "end_market",
              "entity_fieldname": "end_market",
              "parameter_fieldname": "end_market",
              "in": "body",
              "required": true,
              "_key": "end_market"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "+44 (1223) 400 400",
              "description": "The phone number of a company representative.",
              "api_fieldname": "phone_number",
              "entity_fieldname": "phone_number",
              "parameter_fieldname": "phone_number",
              "in": "body",
              "required": false,
              "_key": "phone_number"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "CB1 9NJ",
              "description": "The postal code part of the postal address.",
              "api_fieldname": "postal_code",
              "entity_fieldname": "postal_code",
              "parameter_fieldname": "postal_code",
              "in": "body",
              "required": false,
              "_key": "postal_code"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": " ",
              "description": "The state part of the postal address.",
              "api_fieldname": "state",
              "entity_fieldname": "state",
              "parameter_fieldname": "state",
              "in": "body",
              "required": false,
              "_key": "state"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "110 Fulbourn Rd",
                    "description": "Postal address line 1.",
                    "api_fieldname": "address_line1",
                    "entity_fieldname": "address_line1",
                    "_key": "address_line1"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": " ",
                    "description": "Postal address line 2.",
                    "api_fieldname": "address_line2",
                    "entity_fieldname": "address_line2",
                    "_key": "address_line2"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "x-nullable": true,
                    "example": "admin@arm.com",
                    "description": "The email address of the admin user created for this account. Present only in the response for account creation.",
                    "api_fieldname": "admin_email",
                    "entity_fieldname": "admin_email",
                    "_key": "admin_email"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "Admin Doe",
                    "description": "The full name of the admin user created for this account. Present only in the response for account creation.",
                    "api_fieldname": "admin_full_name",
                    "entity_fieldname": "admin_full_name",
                    "_key": "admin_full_name"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The ID of the admin user created for this account. Present only in the response for the account creation.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "admin_id",
                    "entity_fieldname": "admin_id",
                    "_key": "admin_id"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000B40IkJADMANmAscAj0Ot0n2yeQnyt9tT",
                    "description": "The admin API key created for this account. Present only in the response for account creation.",
                    "readOnly": true,
                    "x-deprecation": {
                      "issued_at": "2020-09-01T00:00:00+00:00",
                      "end_of_life_at": "2021-09-01T00:00:00+00:00",
                      "comment": "This field is deprecated, do not use it anymore.",
                      "links": []
                    },
                    "api_fieldname": "admin_key",
                    "entity_fieldname": "admin_key",
                    "_key": "admin_key"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "admin",
                    "description": "The username of the admin user created for this account. Present only in the response for account creation.",
                    "api_fieldname": "admin_name",
                    "entity_fieldname": "admin_name",
                    "_key": "admin_name"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "PZf9eEUH43DAPE9ULINFeuj",
                    "description": "The password of the admin user created for this account. Present only in the response for account creation.",
                    "api_fieldname": "admin_password",
                    "entity_fieldname": "admin_password",
                    "_key": "admin_password"
                  },
                  {
                    "type": "array",
                    "maxItems": 10,
                    "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
                    "items": {
                      "type": "string",
                      "pattern": "[\\w\\-._]{8,100}"
                    },
                    "api_fieldname": "aliases",
                    "entity_fieldname": "aliases",
                    "_key": "aliases"
                  },
                  {
                    "type": "string",
                    "default": "active_device_business_model",
                    "example": "api_calls_1_business_model",
                    "description": "Business model for this account. Manageable by the root admin only.",
                    "enum": [
                      "active_device_business_model",
                      "api_calls_1_business_model"
                    ],
                    "api_fieldname": "business_model",
                    "entity_fieldname": "business_model",
                    "_key": "business_model"
                  },
                  {
                    "type": "array",
                    "description": "Business model history for this account.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "default": "active_device_business_model",
                          "example": "api_calls_1_business_model",
                          "description": "Business model for this account. Manageable by the root admin only.",
                          "enum": [
                            "active_device_business_model",
                            "api_calls_1_business_model"
                          ],
                          "_key": "business_model"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ]
                    },
                    "api_fieldname": "business_model_history",
                    "entity_fieldname": "business_model_history",
                    "_key": "business_model_history"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "Cambridge",
                    "description": "The city part of the postal address.",
                    "api_fieldname": "city",
                    "entity_fieldname": "city",
                    "_key": "city"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "ARM Holdings Plc",
                    "description": "The name of the company used in billing.",
                    "api_fieldname": "company",
                    "entity_fieldname": "company",
                    "_key": "company"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "J. Doe",
                    "description": "The name of the contact person for this account.",
                    "api_fieldname": "contact",
                    "entity_fieldname": "contact",
                    "_key": "contact"
                  },
                  {
                    "type": "string",
                    "example": "1NX25_0001",
                    "x-nullable": true,
                    "description": "Contract number of the customer.",
                    "api_fieldname": "contract_number",
                    "entity_fieldname": "contract_number",
                    "_key": "contract_number"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "United Kingdom",
                    "description": "The country part of the postal address.",
                    "api_fieldname": "country",
                    "entity_fieldname": "country",
                    "_key": "country"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "description": "Account's custom properties as key-value pairs.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "custom_fields",
                    "entity_fieldname": "custom_fields",
                    "_key": "custom_fields"
                  },
                  {
                    "type": "string",
                    "example": "1NC25_0001",
                    "x-nullable": true,
                    "description": "Customer number of the customer.",
                    "api_fieldname": "customer_number",
                    "entity_fieldname": "customer_number",
                    "_key": "customer_number"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "ARM",
                    "description": "The display name for the tenant account.",
                    "api_fieldname": "display_name",
                    "entity_fieldname": "display_name",
                    "_key": "display_name"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "x-nullable": true,
                    "example": "info@arm.com",
                    "description": "The company email address for this account.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "_key": "email"
                  },
                  {
                    "type": "string",
                    "example": "IT",
                    "description": "Account end market.",
                    "api_fieldname": "end_market",
                    "entity_fieldname": "end_market",
                    "_key": "end_market"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "format": "date-time",
                    "description": "Expiration time of the account, as UTC time RFC3339.",
                    "api_fieldname": "expiration",
                    "entity_fieldname": "expiration",
                    "_key": "expiration"
                  },
                  {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 180,
                    "example": "180",
                    "x-nullable": true,
                    "description": "Indicates how many days (1-180) before account expiration a notification email is sent.",
                    "api_fieldname": "expiration_warning_threshold",
                    "entity_fieldname": "expiration_warning_threshold",
                    "_key": "expiration_warning_threshold"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "Account ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 120,
                    "x-nullable": true,
                    "example": "30",
                    "description": "The reference token expiration time, in minutes, for this account.",
                    "api_fieldname": "idle_timeout",
                    "entity_fieldname": "idle_timeout",
                    "_key": "idle_timeout"
                  },
                  {
                    "type": "array",
                    "description": "List of account limitation objects.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "integer",
                          "format": "int32",
                          "description": "Billing period of the account limitation.",
                          "_key": "billing_period"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "description": "Description of the account limitation.",
                          "readOnly": true,
                          "_key": "description"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571d01d0242ac12000600000000",
                          "description": "Entity ID.",
                          "_key": "id"
                        },
                        {
                          "type": "boolean",
                          "description": "Flag indicating whether this limitation is inherited.",
                          "readOnly": true,
                          "_key": "inherited"
                        },
                        {
                          "type": "string",
                          "description": "Indicates where this limit is inherited from.",
                          "readOnly": true,
                          "_key": "inherited_from"
                        },
                        {
                          "type": "string",
                          "description": "Indicates the type of the entity where the limitation is inherited from.",
                          "readOnly": true,
                          "_key": "inherited_type"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "description": "The value of the limit.",
                          "_key": "limit"
                        },
                        {
                          "type": "string",
                          "description": "Name of the account limitation.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'limitation'",
                          "enum": [
                            "user",
                            "api-key",
                            "group",
                            "account",
                            "account_template",
                            "trusted_cert",
                            "list",
                            "error",
                            "agreement",
                            "signed_agreement",
                            "policy",
                            "limitation",
                            "identity_provider",
                            "user_session",
                            "user_invitation",
                            "notification_entry",
                            "branding_color",
                            "branding_image"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "description": "Quota of the account limitation.",
                          "_key": "quota"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ],
                      "description": "This object represents an account limitation."
                    },
                    "api_fieldname": "limitations",
                    "entity_fieldname": "limitations",
                    "_key": "limitations"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "x-deprecation": {
                      "issued_at": "2019-08-27T12:03:58+00:00",
                      "end_of_life_at": "2020-08-27T12:03:58+00:00",
                      "comment": "Replaced by the limitations parameter."
                    },
                    "description": "DEPRECATED: Replaced by the limitations parameter.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "limits",
                    "entity_fieldname": "limits",
                    "_key": "limits"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The enforcement status of multi-factor authentication, either `enforced` or `optional`.",
                    "enum": [
                      "enforced",
                      "optional"
                    ],
                    "api_fieldname": "mfa_status",
                    "entity_fieldname": "mfa_status",
                    "_key": "mfa_status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "A list of notification email addresses.",
                    "items": {
                      "pattern": "^(?=.{3,254}$).+\\@.+",
                      "type": "string"
                    },
                    "api_fieldname": "notification_emails",
                    "entity_fieldname": "notification_emails",
                    "_key": "notification_emails"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `account`.",
                    "enum": [
                      "account"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "pattern": "^(?=.{3,254}$).+\\@.+",
                        "type": "string",
                        "example": "info@arm.com",
                        "description": "The email address of the admin user who is the contact person of the parent account.",
                        "api_fieldname": "admin_email",
                        "entity_fieldname": "admin_email",
                        "_key": "admin_email"
                      },
                      {
                        "type": "string",
                        "maxLength": 100,
                        "example": "J. Doe",
                        "description": "The name of the admin user who is the contact person of the parent account.",
                        "api_fieldname": "admin_name",
                        "entity_fieldname": "admin_name",
                        "_key": "admin_name"
                      },
                      {
                        "type": "string",
                        "example": "01619571dad80242ac12000600000000",
                        "description": "The ID of the parent account.",
                        "pattern": "[a-f0-9]{32}",
                        "api_fieldname": "id",
                        "entity_fieldname": "id",
                        "_key": "id"
                      }
                    ],
                    "description": "Represents parent account contact details in responses.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "parent_account"
                    },
                    "x-nullable": true,
                    "api_fieldname": "parent_account",
                    "entity_fieldname": "parent_account",
                    "_key": "parent_account"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "01619571dad80242ac12000600000000",
                    "description": "The ID of the parent account, if any.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "parent_id",
                    "entity_fieldname": "parent_id",
                    "_key": "parent_id"
                  },
                  {
                    "type": "object",
                    "required": [
                      "minimum_length"
                    ],
                    "properties": [
                      {
                        "type": "integer",
                        "minimum": 8,
                        "maximum": 512,
                        "example": "8",
                        "description": "Minimum length for the password.",
                        "api_fieldname": "minimum_length",
                        "entity_fieldname": "minimum_length",
                        "_key": "minimum_length"
                      }
                    ],
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "password_policy"
                    },
                    "description": "The password policy for this account.",
                    "x-nullable": true,
                    "api_fieldname": "password_policy",
                    "entity_fieldname": "password_policy",
                    "_key": "password_policy"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 45,
                    "description": "Indicates for how many minutes a password recovery email is valid.",
                    "api_fieldname": "password_recovery_expiration",
                    "entity_fieldname": "password_recovery_expiration",
                    "_key": "password_recovery_expiration"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "+44 (1223) 400 400",
                    "description": "The phone number of a company representative.",
                    "api_fieldname": "phone_number",
                    "entity_fieldname": "phone_number",
                    "_key": "phone_number"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "List of policies if requested.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "GET",
                          "description": "Comma-separated list of actions, empty string represents all actions.",
                          "api_fieldname": "action",
                          "entity_fieldname": "action",
                          "_key": "action"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "True or false controlling whether an action is allowed or not.",
                          "api_fieldname": "allow",
                          "entity_fieldname": "allow",
                          "_key": "allow"
                        },
                        {
                          "type": "string",
                          "example": "update-campaigns",
                          "description": "Feature name corresponding to this policy.",
                          "api_fieldname": "feature",
                          "entity_fieldname": "feature",
                          "_key": "feature"
                        },
                        {
                          "type": "boolean",
                          "example": false,
                          "description": "Flag indicating whether this feature is inherited or overwritten specifically.",
                          "readOnly": true,
                          "api_fieldname": "inherited",
                          "entity_fieldname": "inherited",
                          "_key": "inherited"
                        },
                        {
                          "type": "string",
                          "example": "016ada3ec2d46665bf66e32e00000000",
                          "description": "An ID indicating where this policy is inherited from.",
                          "pattern": "[a-f0-9]{32}",
                          "readOnly": true,
                          "api_fieldname": "inherited_from",
                          "entity_fieldname": "inherited_from",
                          "_key": "inherited_from"
                        },
                        {
                          "type": "string",
                          "example": "account",
                          "description": "Indicates the type of entity this policy is inherited from.",
                          "readOnly": true,
                          "enum": [
                            "account",
                            "template",
                            "tier_template"
                          ],
                          "api_fieldname": "inherited_type",
                          "entity_fieldname": "inherited_type",
                          "_key": "inherited_type"
                        },
                        {
                          "type": "string",
                          "example": "/v3/update-campaign",
                          "description": "Resource that is protected by this policy.",
                          "api_fieldname": "resource",
                          "entity_fieldname": "resource",
                          "_key": "resource"
                        }
                      ],
                      "description": "Represents a feature policy. Either the feature or the resource must be specified.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "policy"
                      }
                    },
                    "api_fieldname": "policies",
                    "entity_fieldname": "policies",
                    "_key": "policies"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "CB1 9NJ",
                    "description": "The postal code part of the postal address.",
                    "api_fieldname": "postal_code",
                    "entity_fieldname": "postal_code",
                    "_key": "postal_code"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "Subscription paid.",
                    "description": "A note with the reason for account status update.",
                    "api_fieldname": "reason",
                    "entity_fieldname": "reason",
                    "_key": "reason"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "ARM-INT-0001",
                    "description": "A reference note for updating the status of the account.",
                    "api_fieldname": "reference_note",
                    "entity_fieldname": "reference_note",
                    "_key": "reference_note"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "sales@arm.com",
                    "x-nullable": true,
                    "description": "Email address of the sales contact.",
                    "api_fieldname": "sales_contact",
                    "entity_fieldname": "sales_contact",
                    "_key": "sales_contact"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": " ",
                    "description": "The state part of the postal address.",
                    "api_fieldname": "state",
                    "entity_fieldname": "state",
                    "_key": "state"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the account.",
                    "enum": [
                      "ENROLLING",
                      "ACTIVE",
                      "RESTRICTED",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "List of sub accounts. Not available for developer users.",
                    "items": {
                      "type": "object",
                      "required": [
                        "end_market",
                        "etag",
                        "id",
                        "object",
                        "status",
                        "tier"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "110 Fulbourn Rd",
                          "description": "Postal address line 1.",
                          "_key": "address_line1"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": " ",
                          "description": "Postal address line 2.",
                          "_key": "address_line2"
                        },
                        {
                          "type": "array",
                          "maxItems": 10,
                          "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
                          "items": {
                            "type": "string",
                            "pattern": "[\\w\\-._]{8,100}"
                          },
                          "_key": "aliases"
                        },
                        {
                          "type": "string",
                          "default": "active_device_business_model",
                          "example": "api_calls_1_business_model",
                          "description": "Business model for this account. Manageable by the root admin only.",
                          "enum": [
                            "active_device_business_model",
                            "api_calls_1_business_model"
                          ],
                          "_key": "business_model"
                        },
                        {
                          "type": "array",
                          "description": "Business model history for this account.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "default": "active_device_business_model",
                                "example": "api_calls_1_business_model",
                                "description": "Business model for this account. Manageable by the root admin only.",
                                "enum": [
                                  "active_device_business_model",
                                  "api_calls_1_business_model"
                                ],
                                "_key": "business_model"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updated_at"
                              }
                            ]
                          },
                          "_key": "business_model_history"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "Cambridge",
                          "description": "The city part of the postal address.",
                          "_key": "city"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "ARM Holdings Plc",
                          "description": "The name of the company used in billing.",
                          "_key": "company"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "J. Doe",
                          "description": "The name of the contact person for this account.",
                          "_key": "contact"
                        },
                        {
                          "type": "string",
                          "example": "1NX25_0001",
                          "x-nullable": true,
                          "description": "Contract number of the customer.",
                          "_key": "contract_number"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "United Kingdom",
                          "description": "The country part of the postal address.",
                          "_key": "country"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "description": "Account's custom properties as key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "custom_fields"
                        },
                        {
                          "type": "string",
                          "example": "1NC25_0001",
                          "x-nullable": true,
                          "description": "Customer number of the customer.",
                          "_key": "customer_number"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "ARM",
                          "description": "The display name for the tenant account.",
                          "_key": "display_name"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "x-nullable": true,
                          "example": "info@arm.com",
                          "description": "The company email address for this account.",
                          "_key": "email"
                        },
                        {
                          "type": "string",
                          "example": "IT",
                          "description": "Account end market.",
                          "_key": "end_market"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "format": "date-time",
                          "description": "Expiration time of the account, as UTC time RFC3339.",
                          "_key": "expiration"
                        },
                        {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 180,
                          "example": "180",
                          "x-nullable": true,
                          "description": "Indicates how many days (1-180) before account expiration a notification email is sent.",
                          "_key": "expiration_warning_threshold"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "Account ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 120,
                          "x-nullable": true,
                          "example": "30",
                          "description": "The reference token expiration time, in minutes, for this account.",
                          "_key": "idle_timeout"
                        },
                        {
                          "type": "array",
                          "description": "List of account limitation objects.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "Billing period of the account limitation.",
                                "_key": "billing_period"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-13T09:35:20Z",
                                "description": "Creation UTC time RFC3339.",
                                "_key": "created_at"
                              },
                              {
                                "type": "string",
                                "description": "Description of the account limitation.",
                                "readOnly": true,
                                "_key": "description"
                              },
                              {
                                "type": "string",
                                "example": "1",
                                "description": "API resource entity version.",
                                "_key": "etag"
                              },
                              {
                                "type": "string",
                                "example": "01619571d01d0242ac12000600000000",
                                "description": "Entity ID.",
                                "_key": "id"
                              },
                              {
                                "type": "boolean",
                                "description": "Flag indicating whether this limitation is inherited.",
                                "readOnly": true,
                                "_key": "inherited"
                              },
                              {
                                "type": "string",
                                "description": "Indicates where this limit is inherited from.",
                                "readOnly": true,
                                "_key": "inherited_from"
                              },
                              {
                                "type": "string",
                                "description": "Indicates the type of the entity where the limitation is inherited from.",
                                "readOnly": true,
                                "_key": "inherited_type"
                              },
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value of the limit.",
                                "_key": "limit"
                              },
                              {
                                "type": "string",
                                "description": "Name of the account limitation.",
                                "_key": "name"
                              },
                              {
                                "type": "string",
                                "description": "Entity name: always 'limitation'",
                                "enum": [
                                  "user",
                                  "api-key",
                                  "group",
                                  "account",
                                  "account_template",
                                  "trusted_cert",
                                  "list",
                                  "error",
                                  "agreement",
                                  "signed_agreement",
                                  "policy",
                                  "limitation",
                                  "identity_provider",
                                  "user_session",
                                  "user_invitation",
                                  "notification_entry",
                                  "branding_color",
                                  "branding_image"
                                ],
                                "_key": "object"
                              },
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "Quota of the account limitation.",
                                "_key": "quota"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updated_at"
                              }
                            ],
                            "description": "This object represents an account limitation."
                          },
                          "_key": "limitations"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "x-deprecation": {
                            "issued_at": "2019-08-27T12:03:58+00:00",
                            "end_of_life_at": "2020-08-27T12:03:58+00:00",
                            "comment": "Replaced by the limitations parameter."
                          },
                          "description": "DEPRECATED: Replaced by the limitations parameter.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "limits"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "description": "The enforcement status of multi-factor authentication, either `enforced` or `optional`.",
                          "enum": [
                            "enforced",
                            "optional"
                          ],
                          "_key": "mfa_status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "A list of notification email addresses.",
                          "items": {
                            "pattern": "^(?=.{3,254}$).+\\@.+",
                            "type": "string"
                          },
                          "_key": "notification_emails"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `account`.",
                          "enum": [
                            "account"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "object",
                          "properties": [
                            {
                              "pattern": "^(?=.{3,254}$).+\\@.+",
                              "type": "string",
                              "example": "info@arm.com",
                              "description": "The email address of the admin user who is the contact person of the parent account.",
                              "api_fieldname": "admin_email",
                              "entity_fieldname": "admin_email",
                              "_key": "admin_email"
                            },
                            {
                              "type": "string",
                              "maxLength": 100,
                              "example": "J. Doe",
                              "description": "The name of the admin user who is the contact person of the parent account.",
                              "api_fieldname": "admin_name",
                              "entity_fieldname": "admin_name",
                              "_key": "admin_name"
                            },
                            {
                              "type": "string",
                              "example": "01619571dad80242ac12000600000000",
                              "description": "The ID of the parent account.",
                              "pattern": "[a-f0-9]{32}",
                              "api_fieldname": "id",
                              "entity_fieldname": "id",
                              "_key": "id"
                            }
                          ],
                          "description": "Represents parent account contact details in responses.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "parent_account"
                          },
                          "x-nullable": true,
                          "_key": "parent_account"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "01619571dad80242ac12000600000000",
                          "description": "The ID of the parent account, if any.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "parent_id"
                        },
                        {
                          "type": "object",
                          "required": [
                            "minimum_length"
                          ],
                          "properties": [
                            {
                              "type": "integer",
                              "minimum": 8,
                              "maximum": 512,
                              "example": "8",
                              "description": "Minimum length for the password.",
                              "api_fieldname": "minimum_length",
                              "entity_fieldname": "minimum_length",
                              "_key": "minimum_length"
                            }
                          ],
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "password_policy"
                          },
                          "description": "The password policy for this account.",
                          "x-nullable": true,
                          "_key": "password_policy"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "maximum": 45,
                          "description": "Indicates for how many minutes a password recovery email is valid.",
                          "_key": "password_recovery_expiration"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "+44 (1223) 400 400",
                          "description": "The phone number of a company representative.",
                          "_key": "phone_number"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "List of policies if requested.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "example": "GET",
                                "description": "Comma-separated list of actions, empty string represents all actions.",
                                "api_fieldname": "action",
                                "entity_fieldname": "action",
                                "_key": "action"
                              },
                              {
                                "type": "boolean",
                                "example": true,
                                "description": "True or false controlling whether an action is allowed or not.",
                                "api_fieldname": "allow",
                                "entity_fieldname": "allow",
                                "_key": "allow"
                              },
                              {
                                "type": "string",
                                "example": "update-campaigns",
                                "description": "Feature name corresponding to this policy.",
                                "api_fieldname": "feature",
                                "entity_fieldname": "feature",
                                "_key": "feature"
                              },
                              {
                                "type": "boolean",
                                "example": false,
                                "description": "Flag indicating whether this feature is inherited or overwritten specifically.",
                                "readOnly": true,
                                "api_fieldname": "inherited",
                                "entity_fieldname": "inherited",
                                "_key": "inherited"
                              },
                              {
                                "type": "string",
                                "example": "016ada3ec2d46665bf66e32e00000000",
                                "description": "An ID indicating where this policy is inherited from.",
                                "pattern": "[a-f0-9]{32}",
                                "readOnly": true,
                                "api_fieldname": "inherited_from",
                                "entity_fieldname": "inherited_from",
                                "_key": "inherited_from"
                              },
                              {
                                "type": "string",
                                "example": "account",
                                "description": "Indicates the type of entity this policy is inherited from.",
                                "readOnly": true,
                                "enum": [
                                  "account",
                                  "template",
                                  "tier_template"
                                ],
                                "api_fieldname": "inherited_type",
                                "entity_fieldname": "inherited_type",
                                "_key": "inherited_type"
                              },
                              {
                                "type": "string",
                                "example": "/v3/update-campaign",
                                "description": "Resource that is protected by this policy.",
                                "api_fieldname": "resource",
                                "entity_fieldname": "resource",
                                "_key": "resource"
                              }
                            ],
                            "description": "Represents a feature policy. Either the feature or the resource must be specified.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "policy"
                            }
                          },
                          "_key": "policies"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "CB1 9NJ",
                          "description": "The postal code part of the postal address.",
                          "_key": "postal_code"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "Subscription paid.",
                          "description": "A note with the reason for account status update.",
                          "_key": "reason"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "ARM-INT-0001",
                          "description": "A reference note for updating the status of the account.",
                          "_key": "reference_note"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "example": "sales@arm.com",
                          "x-nullable": true,
                          "description": "Email address of the sales contact.",
                          "_key": "sales_contact"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": " ",
                          "description": "The state part of the postal address.",
                          "_key": "state"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "The status of the account.",
                          "enum": [
                            "ENROLLING",
                            "ACTIVE",
                            "RESTRICTED",
                            "SUSPENDED"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "List of sub accounts. Not available for developer users.",
                          "items": {
                            "type": "object",
                            "required": [
                              "end_market",
                              "etag",
                              "id",
                              "object",
                              "status",
                              "tier"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "110 Fulbourn Rd",
                                "description": "Postal address line 1.",
                                "_key": "address_line1"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": " ",
                                "description": "Postal address line 2.",
                                "_key": "address_line2"
                              },
                              {
                                "type": "array",
                                "maxItems": 10,
                                "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
                                "items": {
                                  "type": "string",
                                  "pattern": "[\\w\\-._]{8,100}"
                                },
                                "_key": "aliases"
                              },
                              {
                                "type": "string",
                                "default": "active_device_business_model",
                                "example": "api_calls_1_business_model",
                                "description": "Business model for this account. Manageable by the root admin only.",
                                "enum": [
                                  "active_device_business_model",
                                  "api_calls_1_business_model"
                                ],
                                "_key": "business_model"
                              },
                              {
                                "type": "array",
                                "description": "Business model history for this account.",
                                "items": {
                                  "type": "object",
                                  "properties": [
                                    {
                                      "type": "string",
                                      "default": "active_device_business_model",
                                      "example": "api_calls_1_business_model",
                                      "description": "Business model for this account. Manageable by the root admin only.",
                                      "enum": [
                                        "active_device_business_model",
                                        "api_calls_1_business_model"
                                      ],
                                      "_key": "business_model"
                                    },
                                    {
                                      "type": "string",
                                      "format": "date-time",
                                      "example": "2018-02-14T15:24:14Z",
                                      "description": "Last update UTC time RFC3339.",
                                      "_key": "updated_at"
                                    }
                                  ]
                                },
                                "_key": "business_model_history"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "Cambridge",
                                "description": "The city part of the postal address.",
                                "_key": "city"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "ARM Holdings Plc",
                                "description": "The name of the company used in billing.",
                                "_key": "company"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "J. Doe",
                                "description": "The name of the contact person for this account.",
                                "_key": "contact"
                              },
                              {
                                "type": "string",
                                "example": "1NX25_0001",
                                "x-nullable": true,
                                "description": "Contract number of the customer.",
                                "_key": "contract_number"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "United Kingdom",
                                "description": "The country part of the postal address.",
                                "_key": "country"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-13T09:35:20Z",
                                "description": "Creation UTC time RFC3339.",
                                "_key": "created_at"
                              },
                              {
                                "type": "object",
                                "x-nullable": true,
                                "description": "Account's custom properties as key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "_key": "custom_fields"
                              },
                              {
                                "type": "string",
                                "example": "1NC25_0001",
                                "x-nullable": true,
                                "description": "Customer number of the customer.",
                                "_key": "customer_number"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "ARM",
                                "description": "The display name for the tenant account.",
                                "_key": "display_name"
                              },
                              {
                                "pattern": "^(?=.{3,254}$).+\\@.+",
                                "type": "string",
                                "x-nullable": true,
                                "example": "info@arm.com",
                                "description": "The company email address for this account.",
                                "_key": "email"
                              },
                              {
                                "type": "string",
                                "example": "IT",
                                "description": "Account end market.",
                                "_key": "end_market"
                              },
                              {
                                "type": "string",
                                "example": "1",
                                "description": "API resource entity version.",
                                "_key": "etag"
                              },
                              {
                                "type": "string",
                                "x-nullable": true,
                                "format": "date-time",
                                "description": "Expiration time of the account, as UTC time RFC3339.",
                                "_key": "expiration"
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 180,
                                "example": "180",
                                "x-nullable": true,
                                "description": "Indicates how many days (1-180) before account expiration a notification email is sent.",
                                "_key": "expiration_warning_threshold"
                              },
                              {
                                "type": "string",
                                "example": "01619571e2e90242ac12000600000000",
                                "description": "Account ID.",
                                "pattern": "[a-f0-9]{32}",
                                "_key": "id"
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 120,
                                "x-nullable": true,
                                "example": "30",
                                "description": "The reference token expiration time, in minutes, for this account.",
                                "_key": "idle_timeout"
                              },
                              {
                                "type": "array",
                                "description": "List of account limitation objects.",
                                "items": {
                                  "type": "object",
                                  "properties": [
                                    {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "Billing period of the account limitation.",
                                      "_key": "billing_period"
                                    },
                                    {
                                      "type": "string",
                                      "format": "date-time",
                                      "example": "2018-02-13T09:35:20Z",
                                      "description": "Creation UTC time RFC3339.",
                                      "_key": "created_at"
                                    },
                                    {
                                      "type": "string",
                                      "description": "Description of the account limitation.",
                                      "readOnly": true,
                                      "_key": "description"
                                    },
                                    {
                                      "type": "string",
                                      "example": "1",
                                      "description": "API resource entity version.",
                                      "_key": "etag"
                                    },
                                    {
                                      "type": "string",
                                      "example": "01619571d01d0242ac12000600000000",
                                      "description": "Entity ID.",
                                      "_key": "id"
                                    },
                                    {
                                      "type": "boolean",
                                      "description": "Flag indicating whether this limitation is inherited.",
                                      "readOnly": true,
                                      "_key": "inherited"
                                    },
                                    {
                                      "type": "string",
                                      "description": "Indicates where this limit is inherited from.",
                                      "readOnly": true,
                                      "_key": "inherited_from"
                                    },
                                    {
                                      "type": "string",
                                      "description": "Indicates the type of the entity where the limitation is inherited from.",
                                      "readOnly": true,
                                      "_key": "inherited_type"
                                    },
                                    {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "The value of the limit.",
                                      "_key": "limit"
                                    },
                                    {
                                      "type": "string",
                                      "description": "Name of the account limitation.",
                                      "_key": "name"
                                    },
                                    {
                                      "type": "string",
                                      "description": "Entity name: always 'limitation'",
                                      "enum": [
                                        "user",
                                        "api-key",
                                        "group",
                                        "account",
                                        "account_template",
                                        "trusted_cert",
                                        "list",
                                        "error",
                                        "agreement",
                                        "signed_agreement",
                                        "policy",
                                        "limitation",
                                        "identity_provider",
                                        "user_session",
                                        "user_invitation",
                                        "notification_entry",
                                        "branding_color",
                                        "branding_image"
                                      ],
                                      "_key": "object"
                                    },
                                    {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "Quota of the account limitation.",
                                      "_key": "quota"
                                    },
                                    {
                                      "type": "string",
                                      "format": "date-time",
                                      "example": "2018-02-14T15:24:14Z",
                                      "description": "Last update UTC time RFC3339.",
                                      "_key": "updated_at"
                                    }
                                  ],
                                  "description": "This object represents an account limitation."
                                },
                                "_key": "limitations"
                              },
                              {
                                "type": "object",
                                "x-nullable": true,
                                "x-deprecation": {
                                  "issued_at": "2019-08-27T12:03:58+00:00",
                                  "end_of_life_at": "2020-08-27T12:03:58+00:00",
                                  "comment": "Replaced by the limitations parameter."
                                },
                                "description": "DEPRECATED: Replaced by the limitations parameter.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "_key": "limits"
                              },
                              {
                                "type": "string",
                                "x-nullable": true,
                                "description": "The enforcement status of multi-factor authentication, either `enforced` or `optional`.",
                                "enum": [
                                  "enforced",
                                  "optional"
                                ],
                                "_key": "mfa_status"
                              },
                              {
                                "type": "array",
                                "x-nullable": true,
                                "description": "A list of notification email addresses.",
                                "items": {
                                  "pattern": "^(?=.{3,254}$).+\\@.+",
                                  "type": "string"
                                },
                                "_key": "notification_emails"
                              },
                              {
                                "type": "string",
                                "description": "Entity name: always `account`.",
                                "enum": [
                                  "account"
                                ],
                                "_key": "object"
                              },
                              {
                                "type": "object",
                                "properties": [
                                  {
                                    "pattern": "^(?=.{3,254}$).+\\@.+",
                                    "type": "string",
                                    "example": "info@arm.com",
                                    "description": "The email address of the admin user who is the contact person of the parent account.",
                                    "api_fieldname": "admin_email",
                                    "entity_fieldname": "admin_email",
                                    "_key": "admin_email"
                                  },
                                  {
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "J. Doe",
                                    "description": "The name of the admin user who is the contact person of the parent account.",
                                    "api_fieldname": "admin_name",
                                    "entity_fieldname": "admin_name",
                                    "_key": "admin_name"
                                  },
                                  {
                                    "type": "string",
                                    "example": "01619571dad80242ac12000600000000",
                                    "description": "The ID of the parent account.",
                                    "pattern": "[a-f0-9]{32}",
                                    "api_fieldname": "id",
                                    "entity_fieldname": "id",
                                    "_key": "id"
                                  }
                                ],
                                "description": "Represents parent account contact details in responses.",
                                "foreign_key": {
                                  "group": "Accounts",
                                  "entity": "parent_account"
                                },
                                "x-nullable": true,
                                "_key": "parent_account"
                              },
                              {
                                "type": "string",
                                "x-nullable": true,
                                "example": "01619571dad80242ac12000600000000",
                                "description": "The ID of the parent account, if any.",
                                "pattern": "[a-f0-9]{32}",
                                "_key": "parent_id"
                              },
                              {
                                "type": "object",
                                "required": [
                                  "minimum_length"
                                ],
                                "properties": [
                                  {
                                    "type": "integer",
                                    "minimum": 8,
                                    "maximum": 512,
                                    "example": "8",
                                    "description": "Minimum length for the password.",
                                    "api_fieldname": "minimum_length",
                                    "entity_fieldname": "minimum_length",
                                    "_key": "minimum_length"
                                  }
                                ],
                                "foreign_key": {
                                  "group": "Accounts",
                                  "entity": "password_policy"
                                },
                                "description": "The password policy for this account.",
                                "x-nullable": true,
                                "_key": "password_policy"
                              },
                              {
                                "type": "integer",
                                "format": "int32",
                                "minimum": 1,
                                "maximum": 45,
                                "description": "Indicates for how many minutes a password recovery email is valid.",
                                "_key": "password_recovery_expiration"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "+44 (1223) 400 400",
                                "description": "The phone number of a company representative.",
                                "_key": "phone_number"
                              },
                              {
                                "type": "array",
                                "x-nullable": true,
                                "description": "List of policies if requested.",
                                "items": {
                                  "type": "object",
                                  "properties": [
                                    {
                                      "type": "string",
                                      "example": "GET",
                                      "description": "Comma-separated list of actions, empty string represents all actions.",
                                      "api_fieldname": "action",
                                      "entity_fieldname": "action",
                                      "_key": "action"
                                    },
                                    {
                                      "type": "boolean",
                                      "example": true,
                                      "description": "True or false controlling whether an action is allowed or not.",
                                      "api_fieldname": "allow",
                                      "entity_fieldname": "allow",
                                      "_key": "allow"
                                    },
                                    {
                                      "type": "string",
                                      "example": "update-campaigns",
                                      "description": "Feature name corresponding to this policy.",
                                      "api_fieldname": "feature",
                                      "entity_fieldname": "feature",
                                      "_key": "feature"
                                    },
                                    {
                                      "type": "boolean",
                                      "example": false,
                                      "description": "Flag indicating whether this feature is inherited or overwritten specifically.",
                                      "readOnly": true,
                                      "api_fieldname": "inherited",
                                      "entity_fieldname": "inherited",
                                      "_key": "inherited"
                                    },
                                    {
                                      "type": "string",
                                      "example": "016ada3ec2d46665bf66e32e00000000",
                                      "description": "An ID indicating where this policy is inherited from.",
                                      "pattern": "[a-f0-9]{32}",
                                      "readOnly": true,
                                      "api_fieldname": "inherited_from",
                                      "entity_fieldname": "inherited_from",
                                      "_key": "inherited_from"
                                    },
                                    {
                                      "type": "string",
                                      "example": "account",
                                      "description": "Indicates the type of entity this policy is inherited from.",
                                      "readOnly": true,
                                      "enum": [
                                        "account",
                                        "template",
                                        "tier_template"
                                      ],
                                      "api_fieldname": "inherited_type",
                                      "entity_fieldname": "inherited_type",
                                      "_key": "inherited_type"
                                    },
                                    {
                                      "type": "string",
                                      "example": "/v3/update-campaign",
                                      "description": "Resource that is protected by this policy.",
                                      "api_fieldname": "resource",
                                      "entity_fieldname": "resource",
                                      "_key": "resource"
                                    }
                                  ],
                                  "description": "Represents a feature policy. Either the feature or the resource must be specified.",
                                  "foreign_key": {
                                    "group": "Accounts",
                                    "entity": "policy"
                                  }
                                },
                                "_key": "policies"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "CB1 9NJ",
                                "description": "The postal code part of the postal address.",
                                "_key": "postal_code"
                              },
                              {
                                "type": "string",
                                "x-nullable": true,
                                "example": "Subscription paid.",
                                "description": "A note with the reason for account status update.",
                                "_key": "reason"
                              },
                              {
                                "type": "string",
                                "x-nullable": true,
                                "example": "ARM-INT-0001",
                                "description": "A reference note for updating the status of the account.",
                                "_key": "reference_note"
                              },
                              {
                                "pattern": "^(?=.{3,254}$).+\\@.+",
                                "type": "string",
                                "example": "sales@arm.com",
                                "x-nullable": true,
                                "description": "Email address of the sales contact.",
                                "_key": "sales_contact"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": " ",
                                "description": "The state part of the postal address.",
                                "_key": "state"
                              },
                              {
                                "type": "string",
                                "example": "ACTIVE",
                                "description": "The status of the account.",
                                "enum": [
                                  "ENROLLING",
                                  "ACTIVE",
                                  "RESTRICTED",
                                  "SUSPENDED"
                                ],
                                "_key": "status"
                              },
                              {
                                "type": "array",
                                "x-nullable": true,
                                "description": "List of sub accounts. Not available for developer users.",
                                "items": [],
                                "_key": "sub_accounts"
                              },
                              {
                                "type": "string",
                                "x-nullable": true,
                                "example": "01619571e7160242ac12000600000000",
                                "description": "Account template ID.",
                                "pattern": "[a-f0-9]{32}",
                                "_key": "template_id"
                              },
                              {
                                "type": "string",
                                "example": "1",
                                "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                                "_key": "tier"
                              },
                              {
                                "type": "array",
                                "description": "Tier history for this account.",
                                "items": {
                                  "type": "object",
                                  "properties": [
                                    {
                                      "type": "string",
                                      "example": "1",
                                      "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                                      "_key": "tier"
                                    },
                                    {
                                      "type": "string",
                                      "format": "date-time",
                                      "example": "2018-02-14T15:24:14Z",
                                      "description": "Last update UTC time RFC3339.",
                                      "_key": "updatedAt"
                                    }
                                  ]
                                },
                                "_key": "tier_history"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updated_at"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Time when upgraded to commercial account in UTC format RFC3339.",
                                "_key": "upgraded_at"
                              }
                            ],
                            "description": "Represents an account in requests and responses."
                          },
                          "_key": "sub_accounts"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "01619571e7160242ac12000600000000",
                          "description": "Account template ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "template_id"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                          "_key": "tier"
                        },
                        {
                          "type": "array",
                          "description": "Tier history for this account.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "example": "1",
                                "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                                "_key": "tier"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updatedAt"
                              }
                            ]
                          },
                          "_key": "tier_history"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Time when upgraded to commercial account in UTC format RFC3339.",
                          "_key": "upgraded_at"
                        }
                      ],
                      "description": "Represents an account in requests and responses."
                    },
                    "api_fieldname": "sub_accounts",
                    "entity_fieldname": "sub_accounts",
                    "_key": "sub_accounts"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "01619571e7160242ac12000600000000",
                    "description": "Account template ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "template_id",
                    "entity_fieldname": "template_id",
                    "_key": "template_id"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                    "api_fieldname": "tier",
                    "entity_fieldname": "tier",
                    "_key": "tier"
                  },
                  {
                    "type": "array",
                    "description": "Tier history for this account.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "1",
                          "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                          "_key": "tier"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updatedAt"
                        }
                      ]
                    },
                    "api_fieldname": "tier_history",
                    "entity_fieldname": "tier_history",
                    "_key": "tier_history"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Time when upgraded to commercial account in UTC format RFC3339.",
                    "api_fieldname": "upgraded_at",
                    "entity_fieldname": "upgraded_at",
                    "_key": "upgraded_at"
                  }
                ],
                "description": "Represents an account in requests and responses.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "account"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data, for example, invalid username.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Account with the specified alias exists already.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/accounts",
          "summary": "Create a new account.",
          "return_type": "account",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "account"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "sub_accounts",
            "id",
            "created_at",
            "updated_at",
            "parent_id",
            "tier",
            "status",
            "upgraded_at",
            "limits",
            "policies",
            "template_id",
            "reason",
            "idle_timeout",
            "password_policy",
            "reference_note",
            "custom_fields",
            "mfa_status",
            "notification_emails",
            "sales_contact",
            "expiration_warning_threshold",
            "parent_account",
            "expiration",
            "admin_id",
            "admin_key",
            "limitations",
            "password_recovery_expiration",
            "business_model_history",
            "tier_history"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "account_id": "id"
          },
          "operation_id": "createAccount",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Retrieve dark theme branding colors for an account.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/dark \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "dark_theme_branding_colors",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "#f3f93e",
                          "description": "The color given as name (purple) or as a hex code.",
                          "x-nullable": true,
                          "_key": "color"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'branding_color'",
                          "readOnly": true,
                          "enum": [
                            "branding_color"
                          ],
                          "_key": "object"
                        },
                        {
                          "enum": [
                            "error_color",
                            "primary",
                            "secondary",
                            "success_color",
                            "warning_color",
                            "canvas_background",
                            "canvas_background_font_color",
                            "workspace_background",
                            "workspace_background_font_color",
                            "info_color",
                            "info_font_color",
                            "primary_font_color",
                            "secondary_font_color",
                            "error_font_color",
                            "success_font_color",
                            "warning_font_color"
                          ],
                          "type": "string",
                          "description": "Color name.",
                          "is_primary_key": true,
                          "_override": true,
                          "_key": "reference"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update time in UTC.",
                          "readOnly": true,
                          "_key": "updated_at"
                        }
                      ],
                      "foreign_key": {
                        "group": "Branding",
                        "entity": "dark_theme_color"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return, or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Branding",
                  "entity": "dark_theme_color"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-colors/dark",
          "summary": "Get dark theme branding colors.",
          "return_type": "paginated_response(subtenant_dark_theme_color)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "subtenant_dark_theme_color"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "sub_accounts",
            "limit",
            "after",
            "order",
            "total_count",
            "has_more",
            "data"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "account_id": "id"
          },
          "operation_id": "getAccountDarkColors",
          "notes": "This lists the dark theme banding colors of the subtenant account.",
          "foreign_key": {
            "entity": "subtenant_dark_theme_color"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "dark_theme_branding_colors"
        },
        {
          "description": "Retrieve the metadata of all dark theme branding images.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "dark_theme_branding_images",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Entity name: always 'branding_image'",
                          "readOnly": true,
                          "enum": [
                            "branding_image"
                          ],
                          "_key": "object"
                        },
                        {
                          "enum": [
                            "brand_logo_portrait",
                            "brand_logo_square",
                            "brand_logo_landscape",
                            "brand_logo_email",
                            "desktop_background_landscape",
                            "desktop_background_square",
                            "desktop_background_portrait",
                            "carousel_image_portrait_0",
                            "carousel_image_portrait_1",
                            "carousel_image_portrait_2",
                            "carousel_image_portrait_3",
                            "carousel_image_portrait_4",
                            "carousel_image_portrait_5",
                            "carousel_image_portrait_6",
                            "carousel_image_portrait_7",
                            "carousel_image_portrait_8",
                            "carousel_image_portrait_9",
                            "carousel_image_square_0",
                            "carousel_image_square_1",
                            "carousel_image_square_2",
                            "carousel_image_square_3",
                            "carousel_image_square_4",
                            "carousel_image_square_5",
                            "carousel_image_square_6",
                            "carousel_image_square_7",
                            "carousel_image_square_8",
                            "carousel_image_square_9",
                            "carousel_image_landscape_0",
                            "carousel_image_landscape_1",
                            "carousel_image_landscape_2",
                            "carousel_image_landscape_3",
                            "carousel_image_landscape_4",
                            "carousel_image_landscape_5",
                            "carousel_image_landscape_6",
                            "carousel_image_landscape_7",
                            "carousel_image_landscape_8",
                            "carousel_image_landscape_9"
                          ],
                          "type": "string",
                          "description": "Name of the image.",
                          "is_primary_key": true,
                          "_override": true,
                          "_key": "reference"
                        },
                        {
                          "type": "string",
                          "format": "uri",
                          "example": "https://static.mbed.com/123456789.jpg",
                          "description": "The static link to the image.",
                          "readOnly": true,
                          "_key": "static_uri"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update time in UTC.",
                          "readOnly": true,
                          "_key": "updated_at"
                        }
                      ],
                      "foreign_key": {
                        "group": "Branding",
                        "entity": "dark_theme_image"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return, or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Branding",
                  "entity": "dark_theme_image"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-images/dark",
          "summary": "Get metadata of all dark theme images.",
          "return_type": "paginated_response(subtenant_dark_theme_image)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "subtenant_dark_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "sub_accounts",
            "limit",
            "after",
            "order",
            "total_count",
            "has_more",
            "data"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "account_id": "id"
          },
          "operation_id": "getAllAccountDarkImageData",
          "notes": "This lists the dark theme banding images of the subtenant account.",
          "foreign_key": {
            "entity": "subtenant_dark_theme_image"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "dark_theme_branding_images"
        },
        {
          "description": "Retrieve light theme branding colors for an account.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/light \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "light_theme_branding_colors",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "#f3f93e",
                          "description": "The color given as name (purple) or as a hex code.",
                          "x-nullable": true,
                          "_key": "color"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'branding_color'",
                          "readOnly": true,
                          "enum": [
                            "branding_color"
                          ],
                          "_key": "object"
                        },
                        {
                          "enum": [
                            "error_color",
                            "primary",
                            "secondary",
                            "success_color",
                            "warning_color",
                            "canvas_background",
                            "canvas_background_font_color",
                            "workspace_background",
                            "workspace_background_font_color",
                            "info_color",
                            "info_font_color",
                            "primary_font_color",
                            "secondary_font_color",
                            "error_font_color",
                            "success_font_color",
                            "warning_font_color"
                          ],
                          "type": "string",
                          "description": "Color name.",
                          "is_primary_key": true,
                          "_override": true,
                          "_key": "reference"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update time in UTC.",
                          "readOnly": true,
                          "_key": "updated_at"
                        }
                      ],
                      "foreign_key": {
                        "group": "Branding",
                        "entity": "dark_theme_color"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return, or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Branding",
                  "entity": "dark_theme_color"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-colors/light",
          "summary": "Get light theme branding colors.",
          "return_type": "paginated_response(subtenant_light_theme_color)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "subtenant_light_theme_color"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "sub_accounts",
            "limit",
            "after",
            "order",
            "total_count",
            "has_more",
            "data"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "account_id": "id"
          },
          "operation_id": "getAccountLightColors",
          "notes": "This lists the light theme banding colors of the subtenant account.",
          "foreign_key": {
            "entity": "subtenant_light_theme_color"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "light_theme_branding_colors"
        },
        {
          "description": "Retrieve the metadata of all light theme branding images.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "light_theme_branding_images",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Entity name: always 'branding_image'",
                          "readOnly": true,
                          "enum": [
                            "branding_image"
                          ],
                          "_key": "object"
                        },
                        {
                          "enum": [
                            "brand_logo_portrait",
                            "brand_logo_square",
                            "brand_logo_landscape",
                            "brand_logo_email",
                            "desktop_background_landscape",
                            "desktop_background_square",
                            "desktop_background_portrait",
                            "carousel_image_portrait_0",
                            "carousel_image_portrait_1",
                            "carousel_image_portrait_2",
                            "carousel_image_portrait_3",
                            "carousel_image_portrait_4",
                            "carousel_image_portrait_5",
                            "carousel_image_portrait_6",
                            "carousel_image_portrait_7",
                            "carousel_image_portrait_8",
                            "carousel_image_portrait_9",
                            "carousel_image_square_0",
                            "carousel_image_square_1",
                            "carousel_image_square_2",
                            "carousel_image_square_3",
                            "carousel_image_square_4",
                            "carousel_image_square_5",
                            "carousel_image_square_6",
                            "carousel_image_square_7",
                            "carousel_image_square_8",
                            "carousel_image_square_9",
                            "carousel_image_landscape_0",
                            "carousel_image_landscape_1",
                            "carousel_image_landscape_2",
                            "carousel_image_landscape_3",
                            "carousel_image_landscape_4",
                            "carousel_image_landscape_5",
                            "carousel_image_landscape_6",
                            "carousel_image_landscape_7",
                            "carousel_image_landscape_8",
                            "carousel_image_landscape_9"
                          ],
                          "type": "string",
                          "description": "Name of the image.",
                          "is_primary_key": true,
                          "_override": true,
                          "_key": "reference"
                        },
                        {
                          "type": "string",
                          "format": "uri",
                          "example": "https://static.mbed.com/123456789.jpg",
                          "description": "The static link to the image.",
                          "readOnly": true,
                          "_key": "static_uri"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update time in UTC.",
                          "readOnly": true,
                          "_key": "updated_at"
                        }
                      ],
                      "foreign_key": {
                        "group": "Branding",
                        "entity": "dark_theme_image"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return, or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Branding",
                  "entity": "dark_theme_image"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-images/light",
          "summary": "Get metadata of all light theme images.",
          "return_type": "paginated_response(subtenant_light_theme_image)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "subtenant_light_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "sub_accounts",
            "limit",
            "after",
            "order",
            "total_count",
            "has_more",
            "data"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "account_id": "id"
          },
          "operation_id": "getAllAccountLightImageData",
          "notes": "This lists the light theme banding images of the subtenant account.",
          "foreign_key": {
            "entity": "subtenant_light_theme_image"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "light_theme_branding_images"
        },
        {
          "description": "Retrieve an array of tenant accounts, optionally filtered by status and tier level.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "format",
              "in": "query",
              "description": "Format information for the query response. Supported: format=breakdown.",
              "required": false,
              "type": "string",
              "entity_fieldname": "format",
              "api_fieldname": "format",
              "external_param": true,
              "parameter_fieldname": "format",
              "_key": "format"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: limits, policies, sub_accounts, history.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 1000.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 1000,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "account_order_enum",
              "_key": "order"
            },
            {
              "name": "properties",
              "in": "query",
              "description": "Property name returned from account-specific properties.",
              "required": false,
              "type": "string",
              "entity_fieldname": "properties",
              "api_fieldname": "properties",
              "external_param": true,
              "parameter_fieldname": "properties",
              "_key": "properties"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "end_market",
                        "etag",
                        "id",
                        "object",
                        "status",
                        "tier"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "110 Fulbourn Rd",
                          "description": "Postal address line 1.",
                          "_key": "address_line1"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": " ",
                          "description": "Postal address line 2.",
                          "_key": "address_line2"
                        },
                        {
                          "type": "array",
                          "maxItems": 10,
                          "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
                          "items": {
                            "type": "string",
                            "pattern": "[\\w\\-._]{8,100}"
                          },
                          "_key": "aliases"
                        },
                        {
                          "type": "string",
                          "default": "active_device_business_model",
                          "example": "api_calls_1_business_model",
                          "description": "Business model for this account. Manageable by the root admin only.",
                          "enum": [
                            "active_device_business_model",
                            "api_calls_1_business_model"
                          ],
                          "_key": "business_model"
                        },
                        {
                          "type": "array",
                          "description": "Business model history for this account.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "default": "active_device_business_model",
                                "example": "api_calls_1_business_model",
                                "description": "Business model for this account. Manageable by the root admin only.",
                                "enum": [
                                  "active_device_business_model",
                                  "api_calls_1_business_model"
                                ],
                                "_key": "business_model"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updated_at"
                              }
                            ]
                          },
                          "_key": "business_model_history"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "Cambridge",
                          "description": "The city part of the postal address.",
                          "_key": "city"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "ARM Holdings Plc",
                          "description": "The name of the company used in billing.",
                          "_key": "company"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "J. Doe",
                          "description": "The name of the contact person for this account.",
                          "_key": "contact"
                        },
                        {
                          "type": "string",
                          "example": "1NX25_0001",
                          "x-nullable": true,
                          "description": "Contract number of the customer.",
                          "_key": "contract_number"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "United Kingdom",
                          "description": "The country part of the postal address.",
                          "_key": "country"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "description": "Account's custom properties as key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "custom_fields"
                        },
                        {
                          "type": "string",
                          "example": "1NC25_0001",
                          "x-nullable": true,
                          "description": "Customer number of the customer.",
                          "_key": "customer_number"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "ARM",
                          "description": "The display name for the tenant account.",
                          "_key": "display_name"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "x-nullable": true,
                          "example": "info@arm.com",
                          "description": "The company email address for this account.",
                          "_key": "email"
                        },
                        {
                          "type": "string",
                          "example": "IT",
                          "description": "Account end market.",
                          "_key": "end_market"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "format": "date-time",
                          "description": "Expiration time of the account, as UTC time RFC3339.",
                          "_key": "expiration"
                        },
                        {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 180,
                          "example": "180",
                          "x-nullable": true,
                          "description": "Indicates how many days (1-180) before account expiration a notification email is sent.",
                          "_key": "expiration_warning_threshold"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "Account ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 120,
                          "x-nullable": true,
                          "example": "30",
                          "description": "The reference token expiration time, in minutes, for this account.",
                          "_key": "idle_timeout"
                        },
                        {
                          "type": "array",
                          "description": "List of account limitation objects.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "Billing period of the account limitation.",
                                "_key": "billing_period"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-13T09:35:20Z",
                                "description": "Creation UTC time RFC3339.",
                                "_key": "created_at"
                              },
                              {
                                "type": "string",
                                "description": "Description of the account limitation.",
                                "readOnly": true,
                                "_key": "description"
                              },
                              {
                                "type": "string",
                                "example": "1",
                                "description": "API resource entity version.",
                                "_key": "etag"
                              },
                              {
                                "type": "string",
                                "example": "01619571d01d0242ac12000600000000",
                                "description": "Entity ID.",
                                "_key": "id"
                              },
                              {
                                "type": "boolean",
                                "description": "Flag indicating whether this limitation is inherited.",
                                "readOnly": true,
                                "_key": "inherited"
                              },
                              {
                                "type": "string",
                                "description": "Indicates where this limit is inherited from.",
                                "readOnly": true,
                                "_key": "inherited_from"
                              },
                              {
                                "type": "string",
                                "description": "Indicates the type of the entity where the limitation is inherited from.",
                                "readOnly": true,
                                "_key": "inherited_type"
                              },
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value of the limit.",
                                "_key": "limit"
                              },
                              {
                                "type": "string",
                                "description": "Name of the account limitation.",
                                "_key": "name"
                              },
                              {
                                "type": "string",
                                "description": "Entity name: always 'limitation'",
                                "enum": [
                                  "user",
                                  "api-key",
                                  "group",
                                  "account",
                                  "account_template",
                                  "trusted_cert",
                                  "list",
                                  "error",
                                  "agreement",
                                  "signed_agreement",
                                  "policy",
                                  "limitation",
                                  "identity_provider",
                                  "user_session",
                                  "user_invitation",
                                  "notification_entry",
                                  "branding_color",
                                  "branding_image"
                                ],
                                "_key": "object"
                              },
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "Quota of the account limitation.",
                                "_key": "quota"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updated_at"
                              }
                            ],
                            "description": "This object represents an account limitation."
                          },
                          "_key": "limitations"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "x-deprecation": {
                            "issued_at": "2019-08-27T12:03:58+00:00",
                            "end_of_life_at": "2020-08-27T12:03:58+00:00",
                            "comment": "Replaced by the limitations parameter."
                          },
                          "description": "DEPRECATED: Replaced by the limitations parameter.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "limits"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "description": "The enforcement status of multi-factor authentication, either `enforced` or `optional`.",
                          "enum": [
                            "enforced",
                            "optional"
                          ],
                          "_key": "mfa_status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "A list of notification email addresses.",
                          "items": {
                            "pattern": "^(?=.{3,254}$).+\\@.+",
                            "type": "string"
                          },
                          "_key": "notification_emails"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `account`.",
                          "enum": [
                            "account"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "object",
                          "properties": [
                            {
                              "pattern": "^(?=.{3,254}$).+\\@.+",
                              "type": "string",
                              "example": "info@arm.com",
                              "description": "The email address of the admin user who is the contact person of the parent account.",
                              "api_fieldname": "admin_email",
                              "entity_fieldname": "admin_email",
                              "_key": "admin_email"
                            },
                            {
                              "type": "string",
                              "maxLength": 100,
                              "example": "J. Doe",
                              "description": "The name of the admin user who is the contact person of the parent account.",
                              "api_fieldname": "admin_name",
                              "entity_fieldname": "admin_name",
                              "_key": "admin_name"
                            },
                            {
                              "type": "string",
                              "example": "01619571dad80242ac12000600000000",
                              "description": "The ID of the parent account.",
                              "pattern": "[a-f0-9]{32}",
                              "api_fieldname": "id",
                              "entity_fieldname": "id",
                              "_key": "id"
                            }
                          ],
                          "description": "Represents parent account contact details in responses.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "parent_account"
                          },
                          "x-nullable": true,
                          "_key": "parent_account"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "01619571dad80242ac12000600000000",
                          "description": "The ID of the parent account, if any.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "parent_id"
                        },
                        {
                          "type": "object",
                          "required": [
                            "minimum_length"
                          ],
                          "properties": [
                            {
                              "type": "integer",
                              "minimum": 8,
                              "maximum": 512,
                              "example": "8",
                              "description": "Minimum length for the password.",
                              "api_fieldname": "minimum_length",
                              "entity_fieldname": "minimum_length",
                              "_key": "minimum_length"
                            }
                          ],
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "password_policy"
                          },
                          "description": "The password policy for this account.",
                          "x-nullable": true,
                          "_key": "password_policy"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "maximum": 45,
                          "description": "Indicates for how many minutes a password recovery email is valid.",
                          "_key": "password_recovery_expiration"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "+44 (1223) 400 400",
                          "description": "The phone number of a company representative.",
                          "_key": "phone_number"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "List of policies if requested.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "example": "GET",
                                "description": "Comma-separated list of actions, empty string represents all actions.",
                                "api_fieldname": "action",
                                "entity_fieldname": "action",
                                "_key": "action"
                              },
                              {
                                "type": "boolean",
                                "example": true,
                                "description": "True or false controlling whether an action is allowed or not.",
                                "api_fieldname": "allow",
                                "entity_fieldname": "allow",
                                "_key": "allow"
                              },
                              {
                                "type": "string",
                                "example": "update-campaigns",
                                "description": "Feature name corresponding to this policy.",
                                "api_fieldname": "feature",
                                "entity_fieldname": "feature",
                                "_key": "feature"
                              },
                              {
                                "type": "boolean",
                                "example": false,
                                "description": "Flag indicating whether this feature is inherited or overwritten specifically.",
                                "readOnly": true,
                                "api_fieldname": "inherited",
                                "entity_fieldname": "inherited",
                                "_key": "inherited"
                              },
                              {
                                "type": "string",
                                "example": "016ada3ec2d46665bf66e32e00000000",
                                "description": "An ID indicating where this policy is inherited from.",
                                "pattern": "[a-f0-9]{32}",
                                "readOnly": true,
                                "api_fieldname": "inherited_from",
                                "entity_fieldname": "inherited_from",
                                "_key": "inherited_from"
                              },
                              {
                                "type": "string",
                                "example": "account",
                                "description": "Indicates the type of entity this policy is inherited from.",
                                "readOnly": true,
                                "enum": [
                                  "account",
                                  "template",
                                  "tier_template"
                                ],
                                "api_fieldname": "inherited_type",
                                "entity_fieldname": "inherited_type",
                                "_key": "inherited_type"
                              },
                              {
                                "type": "string",
                                "example": "/v3/update-campaign",
                                "description": "Resource that is protected by this policy.",
                                "api_fieldname": "resource",
                                "entity_fieldname": "resource",
                                "_key": "resource"
                              }
                            ],
                            "description": "Represents a feature policy. Either the feature or the resource must be specified.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "policy"
                            }
                          },
                          "_key": "policies"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "CB1 9NJ",
                          "description": "The postal code part of the postal address.",
                          "_key": "postal_code"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "Subscription paid.",
                          "description": "A note with the reason for account status update.",
                          "_key": "reason"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "ARM-INT-0001",
                          "description": "A reference note for updating the status of the account.",
                          "_key": "reference_note"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "example": "sales@arm.com",
                          "x-nullable": true,
                          "description": "Email address of the sales contact.",
                          "_key": "sales_contact"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": " ",
                          "description": "The state part of the postal address.",
                          "_key": "state"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "The status of the account.",
                          "enum": [
                            "ENROLLING",
                            "ACTIVE",
                            "RESTRICTED",
                            "SUSPENDED"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "List of sub accounts. Not available for developer users.",
                          "items": {
                            "type": "object",
                            "required": [
                              "end_market",
                              "etag",
                              "id",
                              "object",
                              "status",
                              "tier"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "110 Fulbourn Rd",
                                "description": "Postal address line 1.",
                                "_key": "address_line1"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": " ",
                                "description": "Postal address line 2.",
                                "_key": "address_line2"
                              },
                              {
                                "type": "array",
                                "maxItems": 10,
                                "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
                                "items": {
                                  "type": "string",
                                  "pattern": "[\\w\\-._]{8,100}"
                                },
                                "_key": "aliases"
                              },
                              {
                                "type": "string",
                                "default": "active_device_business_model",
                                "example": "api_calls_1_business_model",
                                "description": "Business model for this account. Manageable by the root admin only.",
                                "enum": [
                                  "active_device_business_model",
                                  "api_calls_1_business_model"
                                ],
                                "_key": "business_model"
                              },
                              {
                                "type": "array",
                                "description": "Business model history for this account.",
                                "items": {
                                  "type": "object",
                                  "properties": [
                                    {
                                      "type": "string",
                                      "default": "active_device_business_model",
                                      "example": "api_calls_1_business_model",
                                      "description": "Business model for this account. Manageable by the root admin only.",
                                      "enum": [
                                        "active_device_business_model",
                                        "api_calls_1_business_model"
                                      ],
                                      "_key": "business_model"
                                    },
                                    {
                                      "type": "string",
                                      "format": "date-time",
                                      "example": "2018-02-14T15:24:14Z",
                                      "description": "Last update UTC time RFC3339.",
                                      "_key": "updated_at"
                                    }
                                  ]
                                },
                                "_key": "business_model_history"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "Cambridge",
                                "description": "The city part of the postal address.",
                                "_key": "city"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "ARM Holdings Plc",
                                "description": "The name of the company used in billing.",
                                "_key": "company"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "J. Doe",
                                "description": "The name of the contact person for this account.",
                                "_key": "contact"
                              },
                              {
                                "type": "string",
                                "example": "1NX25_0001",
                                "x-nullable": true,
                                "description": "Contract number of the customer.",
                                "_key": "contract_number"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "United Kingdom",
                                "description": "The country part of the postal address.",
                                "_key": "country"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-13T09:35:20Z",
                                "description": "Creation UTC time RFC3339.",
                                "_key": "created_at"
                              },
                              {
                                "type": "object",
                                "x-nullable": true,
                                "description": "Account's custom properties as key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "_key": "custom_fields"
                              },
                              {
                                "type": "string",
                                "example": "1NC25_0001",
                                "x-nullable": true,
                                "description": "Customer number of the customer.",
                                "_key": "customer_number"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "ARM",
                                "description": "The display name for the tenant account.",
                                "_key": "display_name"
                              },
                              {
                                "pattern": "^(?=.{3,254}$).+\\@.+",
                                "type": "string",
                                "x-nullable": true,
                                "example": "info@arm.com",
                                "description": "The company email address for this account.",
                                "_key": "email"
                              },
                              {
                                "type": "string",
                                "example": "IT",
                                "description": "Account end market.",
                                "_key": "end_market"
                              },
                              {
                                "type": "string",
                                "example": "1",
                                "description": "API resource entity version.",
                                "_key": "etag"
                              },
                              {
                                "type": "string",
                                "x-nullable": true,
                                "format": "date-time",
                                "description": "Expiration time of the account, as UTC time RFC3339.",
                                "_key": "expiration"
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 180,
                                "example": "180",
                                "x-nullable": true,
                                "description": "Indicates how many days (1-180) before account expiration a notification email is sent.",
                                "_key": "expiration_warning_threshold"
                              },
                              {
                                "type": "string",
                                "example": "01619571e2e90242ac12000600000000",
                                "description": "Account ID.",
                                "pattern": "[a-f0-9]{32}",
                                "_key": "id"
                              },
                              {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 120,
                                "x-nullable": true,
                                "example": "30",
                                "description": "The reference token expiration time, in minutes, for this account.",
                                "_key": "idle_timeout"
                              },
                              {
                                "type": "array",
                                "description": "List of account limitation objects.",
                                "items": {
                                  "type": "object",
                                  "properties": [
                                    {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "Billing period of the account limitation.",
                                      "_key": "billing_period"
                                    },
                                    {
                                      "type": "string",
                                      "format": "date-time",
                                      "example": "2018-02-13T09:35:20Z",
                                      "description": "Creation UTC time RFC3339.",
                                      "_key": "created_at"
                                    },
                                    {
                                      "type": "string",
                                      "description": "Description of the account limitation.",
                                      "readOnly": true,
                                      "_key": "description"
                                    },
                                    {
                                      "type": "string",
                                      "example": "1",
                                      "description": "API resource entity version.",
                                      "_key": "etag"
                                    },
                                    {
                                      "type": "string",
                                      "example": "01619571d01d0242ac12000600000000",
                                      "description": "Entity ID.",
                                      "_key": "id"
                                    },
                                    {
                                      "type": "boolean",
                                      "description": "Flag indicating whether this limitation is inherited.",
                                      "readOnly": true,
                                      "_key": "inherited"
                                    },
                                    {
                                      "type": "string",
                                      "description": "Indicates where this limit is inherited from.",
                                      "readOnly": true,
                                      "_key": "inherited_from"
                                    },
                                    {
                                      "type": "string",
                                      "description": "Indicates the type of the entity where the limitation is inherited from.",
                                      "readOnly": true,
                                      "_key": "inherited_type"
                                    },
                                    {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "The value of the limit.",
                                      "_key": "limit"
                                    },
                                    {
                                      "type": "string",
                                      "description": "Name of the account limitation.",
                                      "_key": "name"
                                    },
                                    {
                                      "type": "string",
                                      "description": "Entity name: always 'limitation'",
                                      "enum": [
                                        "user",
                                        "api-key",
                                        "group",
                                        "account",
                                        "account_template",
                                        "trusted_cert",
                                        "list",
                                        "error",
                                        "agreement",
                                        "signed_agreement",
                                        "policy",
                                        "limitation",
                                        "identity_provider",
                                        "user_session",
                                        "user_invitation",
                                        "notification_entry",
                                        "branding_color",
                                        "branding_image"
                                      ],
                                      "_key": "object"
                                    },
                                    {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "Quota of the account limitation.",
                                      "_key": "quota"
                                    },
                                    {
                                      "type": "string",
                                      "format": "date-time",
                                      "example": "2018-02-14T15:24:14Z",
                                      "description": "Last update UTC time RFC3339.",
                                      "_key": "updated_at"
                                    }
                                  ],
                                  "description": "This object represents an account limitation."
                                },
                                "_key": "limitations"
                              },
                              {
                                "type": "object",
                                "x-nullable": true,
                                "x-deprecation": {
                                  "issued_at": "2019-08-27T12:03:58+00:00",
                                  "end_of_life_at": "2020-08-27T12:03:58+00:00",
                                  "comment": "Replaced by the limitations parameter."
                                },
                                "description": "DEPRECATED: Replaced by the limitations parameter.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "_key": "limits"
                              },
                              {
                                "type": "string",
                                "x-nullable": true,
                                "description": "The enforcement status of multi-factor authentication, either `enforced` or `optional`.",
                                "enum": [
                                  "enforced",
                                  "optional"
                                ],
                                "_key": "mfa_status"
                              },
                              {
                                "type": "array",
                                "x-nullable": true,
                                "description": "A list of notification email addresses.",
                                "items": {
                                  "pattern": "^(?=.{3,254}$).+\\@.+",
                                  "type": "string"
                                },
                                "_key": "notification_emails"
                              },
                              {
                                "type": "string",
                                "description": "Entity name: always `account`.",
                                "enum": [
                                  "account"
                                ],
                                "_key": "object"
                              },
                              {
                                "type": "object",
                                "properties": [
                                  {
                                    "pattern": "^(?=.{3,254}$).+\\@.+",
                                    "type": "string",
                                    "example": "info@arm.com",
                                    "description": "The email address of the admin user who is the contact person of the parent account.",
                                    "api_fieldname": "admin_email",
                                    "entity_fieldname": "admin_email",
                                    "_key": "admin_email"
                                  },
                                  {
                                    "type": "string",
                                    "maxLength": 100,
                                    "example": "J. Doe",
                                    "description": "The name of the admin user who is the contact person of the parent account.",
                                    "api_fieldname": "admin_name",
                                    "entity_fieldname": "admin_name",
                                    "_key": "admin_name"
                                  },
                                  {
                                    "type": "string",
                                    "example": "01619571dad80242ac12000600000000",
                                    "description": "The ID of the parent account.",
                                    "pattern": "[a-f0-9]{32}",
                                    "api_fieldname": "id",
                                    "entity_fieldname": "id",
                                    "_key": "id"
                                  }
                                ],
                                "description": "Represents parent account contact details in responses.",
                                "foreign_key": {
                                  "group": "Accounts",
                                  "entity": "parent_account"
                                },
                                "x-nullable": true,
                                "_key": "parent_account"
                              },
                              {
                                "type": "string",
                                "x-nullable": true,
                                "example": "01619571dad80242ac12000600000000",
                                "description": "The ID of the parent account, if any.",
                                "pattern": "[a-f0-9]{32}",
                                "_key": "parent_id"
                              },
                              {
                                "type": "object",
                                "required": [
                                  "minimum_length"
                                ],
                                "properties": [
                                  {
                                    "type": "integer",
                                    "minimum": 8,
                                    "maximum": 512,
                                    "example": "8",
                                    "description": "Minimum length for the password.",
                                    "api_fieldname": "minimum_length",
                                    "entity_fieldname": "minimum_length",
                                    "_key": "minimum_length"
                                  }
                                ],
                                "foreign_key": {
                                  "group": "Accounts",
                                  "entity": "password_policy"
                                },
                                "description": "The password policy for this account.",
                                "x-nullable": true,
                                "_key": "password_policy"
                              },
                              {
                                "type": "integer",
                                "format": "int32",
                                "minimum": 1,
                                "maximum": 45,
                                "description": "Indicates for how many minutes a password recovery email is valid.",
                                "_key": "password_recovery_expiration"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "+44 (1223) 400 400",
                                "description": "The phone number of a company representative.",
                                "_key": "phone_number"
                              },
                              {
                                "type": "array",
                                "x-nullable": true,
                                "description": "List of policies if requested.",
                                "items": {
                                  "type": "object",
                                  "properties": [
                                    {
                                      "type": "string",
                                      "example": "GET",
                                      "description": "Comma-separated list of actions, empty string represents all actions.",
                                      "api_fieldname": "action",
                                      "entity_fieldname": "action",
                                      "_key": "action"
                                    },
                                    {
                                      "type": "boolean",
                                      "example": true,
                                      "description": "True or false controlling whether an action is allowed or not.",
                                      "api_fieldname": "allow",
                                      "entity_fieldname": "allow",
                                      "_key": "allow"
                                    },
                                    {
                                      "type": "string",
                                      "example": "update-campaigns",
                                      "description": "Feature name corresponding to this policy.",
                                      "api_fieldname": "feature",
                                      "entity_fieldname": "feature",
                                      "_key": "feature"
                                    },
                                    {
                                      "type": "boolean",
                                      "example": false,
                                      "description": "Flag indicating whether this feature is inherited or overwritten specifically.",
                                      "readOnly": true,
                                      "api_fieldname": "inherited",
                                      "entity_fieldname": "inherited",
                                      "_key": "inherited"
                                    },
                                    {
                                      "type": "string",
                                      "example": "016ada3ec2d46665bf66e32e00000000",
                                      "description": "An ID indicating where this policy is inherited from.",
                                      "pattern": "[a-f0-9]{32}",
                                      "readOnly": true,
                                      "api_fieldname": "inherited_from",
                                      "entity_fieldname": "inherited_from",
                                      "_key": "inherited_from"
                                    },
                                    {
                                      "type": "string",
                                      "example": "account",
                                      "description": "Indicates the type of entity this policy is inherited from.",
                                      "readOnly": true,
                                      "enum": [
                                        "account",
                                        "template",
                                        "tier_template"
                                      ],
                                      "api_fieldname": "inherited_type",
                                      "entity_fieldname": "inherited_type",
                                      "_key": "inherited_type"
                                    },
                                    {
                                      "type": "string",
                                      "example": "/v3/update-campaign",
                                      "description": "Resource that is protected by this policy.",
                                      "api_fieldname": "resource",
                                      "entity_fieldname": "resource",
                                      "_key": "resource"
                                    }
                                  ],
                                  "description": "Represents a feature policy. Either the feature or the resource must be specified.",
                                  "foreign_key": {
                                    "group": "Accounts",
                                    "entity": "policy"
                                  }
                                },
                                "_key": "policies"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": "CB1 9NJ",
                                "description": "The postal code part of the postal address.",
                                "_key": "postal_code"
                              },
                              {
                                "type": "string",
                                "x-nullable": true,
                                "example": "Subscription paid.",
                                "description": "A note with the reason for account status update.",
                                "_key": "reason"
                              },
                              {
                                "type": "string",
                                "x-nullable": true,
                                "example": "ARM-INT-0001",
                                "description": "A reference note for updating the status of the account.",
                                "_key": "reference_note"
                              },
                              {
                                "pattern": "^(?=.{3,254}$).+\\@.+",
                                "type": "string",
                                "example": "sales@arm.com",
                                "x-nullable": true,
                                "description": "Email address of the sales contact.",
                                "_key": "sales_contact"
                              },
                              {
                                "type": "string",
                                "maxLength": 100,
                                "x-nullable": true,
                                "example": " ",
                                "description": "The state part of the postal address.",
                                "_key": "state"
                              },
                              {
                                "type": "string",
                                "example": "ACTIVE",
                                "description": "The status of the account.",
                                "enum": [
                                  "ENROLLING",
                                  "ACTIVE",
                                  "RESTRICTED",
                                  "SUSPENDED"
                                ],
                                "_key": "status"
                              },
                              {
                                "type": "array",
                                "x-nullable": true,
                                "description": "List of sub accounts. Not available for developer users.",
                                "items": [],
                                "_key": "sub_accounts"
                              },
                              {
                                "type": "string",
                                "x-nullable": true,
                                "example": "01619571e7160242ac12000600000000",
                                "description": "Account template ID.",
                                "pattern": "[a-f0-9]{32}",
                                "_key": "template_id"
                              },
                              {
                                "type": "string",
                                "example": "1",
                                "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                                "_key": "tier"
                              },
                              {
                                "type": "array",
                                "description": "Tier history for this account.",
                                "items": {
                                  "type": "object",
                                  "properties": [
                                    {
                                      "type": "string",
                                      "example": "1",
                                      "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                                      "_key": "tier"
                                    },
                                    {
                                      "type": "string",
                                      "format": "date-time",
                                      "example": "2018-02-14T15:24:14Z",
                                      "description": "Last update UTC time RFC3339.",
                                      "_key": "updatedAt"
                                    }
                                  ]
                                },
                                "_key": "tier_history"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updated_at"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Time when upgraded to commercial account in UTC format RFC3339.",
                                "_key": "upgraded_at"
                              }
                            ],
                            "description": "Represents an account in requests and responses."
                          },
                          "_key": "sub_accounts"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "01619571e7160242ac12000600000000",
                          "description": "Account template ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "template_id"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                          "_key": "tier"
                        },
                        {
                          "type": "array",
                          "description": "Tier history for this account.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "example": "1",
                                "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                                "_key": "tier"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updatedAt"
                              }
                            ]
                          },
                          "_key": "tier_history"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Time when upgraded to commercial account in UTC format RFC3339.",
                          "_key": "upgraded_at"
                        }
                      ],
                      "description": "Represents an account in requests and responses."
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000), or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "account"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/accounts",
          "summary": "Get all accounts.",
          "return_type": "paginated_response(account)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "account"
          },
          "x_filter": {
            "status": [
              "eq",
              "in",
              "nin"
            ],
            "tier": [
              "eq"
            ],
            "parent": [
              "eq"
            ],
            "end_market": [
              "eq"
            ],
            "country": [
              "like"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "sub_accounts",
            "total_count",
            "has_more",
            "data",
            "status__eq",
            "status__in",
            "status__nin",
            "tier__eq",
            "parent__eq",
            "end_market__eq",
            "country__like"
          ],
          "foreign_key_priority": "self",
          "group_id": "Accounts",
          "parameter_map": {
            "account_id": "id"
          },
          "operation_id": "getAllAccounts",
          "pagination": true,
          "foreign_key": {
            "group": "Accounts",
            "entity": "account"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve information about the account.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/me?include=policies \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: limits, policies, sub_accounts.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "name": "properties",
              "in": "query",
              "description": "Property name to return from account-specific properties.",
              "required": false,
              "type": "string",
              "entity_fieldname": "properties",
              "api_fieldname": "properties",
              "external_param": true,
              "parameter_fieldname": "properties",
              "_key": "properties"
            }
          ],
          "method": "get",
          "mode": "me",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "end_market",
                  "etag",
                  "id",
                  "object",
                  "status",
                  "tier"
                ],
                "properties": [
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "110 Fulbourn Rd",
                    "description": "Postal address line 1.",
                    "api_fieldname": "address_line1",
                    "entity_fieldname": "address_line1",
                    "_key": "address_line1"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": " ",
                    "description": "Postal address line 2.",
                    "api_fieldname": "address_line2",
                    "entity_fieldname": "address_line2",
                    "_key": "address_line2"
                  },
                  {
                    "type": "array",
                    "maxItems": 10,
                    "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
                    "items": {
                      "type": "string",
                      "pattern": "[\\w\\-._]{8,100}"
                    },
                    "api_fieldname": "aliases",
                    "entity_fieldname": "aliases",
                    "_key": "aliases"
                  },
                  {
                    "type": "string",
                    "default": "active_device_business_model",
                    "example": "api_calls_1_business_model",
                    "description": "Business model for this account. Manageable by the root admin only.",
                    "enum": [
                      "active_device_business_model",
                      "api_calls_1_business_model"
                    ],
                    "api_fieldname": "business_model",
                    "entity_fieldname": "business_model",
                    "_key": "business_model"
                  },
                  {
                    "type": "array",
                    "description": "Business model history for this account.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "default": "active_device_business_model",
                          "example": "api_calls_1_business_model",
                          "description": "Business model for this account. Manageable by the root admin only.",
                          "enum": [
                            "active_device_business_model",
                            "api_calls_1_business_model"
                          ],
                          "_key": "business_model"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ]
                    },
                    "api_fieldname": "business_model_history",
                    "entity_fieldname": "business_model_history",
                    "_key": "business_model_history"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "Cambridge",
                    "description": "The city part of the postal address.",
                    "api_fieldname": "city",
                    "entity_fieldname": "city",
                    "_key": "city"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "ARM Holdings Plc",
                    "description": "The name of the company used in billing.",
                    "api_fieldname": "company",
                    "entity_fieldname": "company",
                    "_key": "company"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "J. Doe",
                    "description": "The name of the contact person for this account.",
                    "api_fieldname": "contact",
                    "entity_fieldname": "contact",
                    "_key": "contact"
                  },
                  {
                    "type": "string",
                    "example": "1NX25_0001",
                    "x-nullable": true,
                    "description": "Contract number of the customer.",
                    "api_fieldname": "contract_number",
                    "entity_fieldname": "contract_number",
                    "_key": "contract_number"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "United Kingdom",
                    "description": "The country part of the postal address.",
                    "api_fieldname": "country",
                    "entity_fieldname": "country",
                    "_key": "country"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "description": "Account's custom properties as key-value pairs.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "custom_fields",
                    "entity_fieldname": "custom_fields",
                    "_key": "custom_fields"
                  },
                  {
                    "type": "string",
                    "example": "1NC25_0001",
                    "x-nullable": true,
                    "description": "Customer number of the customer.",
                    "api_fieldname": "customer_number",
                    "entity_fieldname": "customer_number",
                    "_key": "customer_number"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "ARM",
                    "description": "The display name for the tenant account.",
                    "api_fieldname": "display_name",
                    "entity_fieldname": "display_name",
                    "_key": "display_name"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "x-nullable": true,
                    "example": "info@arm.com",
                    "description": "The company email address for this account.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "_key": "email"
                  },
                  {
                    "type": "string",
                    "example": "IT",
                    "description": "Account end market.",
                    "api_fieldname": "end_market",
                    "entity_fieldname": "end_market",
                    "_key": "end_market"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "format": "date-time",
                    "description": "Expiration time of the account, as UTC time RFC3339.",
                    "api_fieldname": "expiration",
                    "entity_fieldname": "expiration",
                    "_key": "expiration"
                  },
                  {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 180,
                    "example": "180",
                    "x-nullable": true,
                    "description": "Indicates how many days (1-180) before account expiration a notification email is sent.",
                    "api_fieldname": "expiration_warning_threshold",
                    "entity_fieldname": "expiration_warning_threshold",
                    "_key": "expiration_warning_threshold"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "Account ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 120,
                    "x-nullable": true,
                    "example": "30",
                    "description": "The reference token expiration time, in minutes, for this account.",
                    "api_fieldname": "idle_timeout",
                    "entity_fieldname": "idle_timeout",
                    "_key": "idle_timeout"
                  },
                  {
                    "type": "array",
                    "description": "List of account limitation objects.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "integer",
                          "format": "int32",
                          "description": "Billing period of the account limitation.",
                          "_key": "billing_period"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "description": "Description of the account limitation.",
                          "readOnly": true,
                          "_key": "description"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571d01d0242ac12000600000000",
                          "description": "Entity ID.",
                          "_key": "id"
                        },
                        {
                          "type": "boolean",
                          "description": "Flag indicating whether this limitation is inherited.",
                          "readOnly": true,
                          "_key": "inherited"
                        },
                        {
                          "type": "string",
                          "description": "Indicates where this limit is inherited from.",
                          "readOnly": true,
                          "_key": "inherited_from"
                        },
                        {
                          "type": "string",
                          "description": "Indicates the type of the entity where the limitation is inherited from.",
                          "readOnly": true,
                          "_key": "inherited_type"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "description": "The value of the limit.",
                          "_key": "limit"
                        },
                        {
                          "type": "string",
                          "description": "Name of the account limitation.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'limitation'",
                          "enum": [
                            "user",
                            "api-key",
                            "group",
                            "account",
                            "account_template",
                            "trusted_cert",
                            "list",
                            "error",
                            "agreement",
                            "signed_agreement",
                            "policy",
                            "limitation",
                            "identity_provider",
                            "user_session",
                            "user_invitation",
                            "notification_entry",
                            "branding_color",
                            "branding_image"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "description": "Quota of the account limitation.",
                          "_key": "quota"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ],
                      "description": "This object represents an account limitation."
                    },
                    "api_fieldname": "limitations",
                    "entity_fieldname": "limitations",
                    "_key": "limitations"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "x-deprecation": {
                      "issued_at": "2019-08-27T12:03:58+00:00",
                      "end_of_life_at": "2020-08-27T12:03:58+00:00",
                      "comment": "Replaced by the limitations parameter."
                    },
                    "description": "DEPRECATED: Replaced by the limitations parameter.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "limits",
                    "entity_fieldname": "limits",
                    "_key": "limits"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The enforcement status of multi-factor authentication, either `enforced` or `optional`.",
                    "enum": [
                      "enforced",
                      "optional"
                    ],
                    "api_fieldname": "mfa_status",
                    "entity_fieldname": "mfa_status",
                    "_key": "mfa_status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "A list of notification email addresses.",
                    "items": {
                      "pattern": "^(?=.{3,254}$).+\\@.+",
                      "type": "string"
                    },
                    "api_fieldname": "notification_emails",
                    "entity_fieldname": "notification_emails",
                    "_key": "notification_emails"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `account`.",
                    "enum": [
                      "account"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "pattern": "^(?=.{3,254}$).+\\@.+",
                        "type": "string",
                        "example": "info@arm.com",
                        "description": "The email address of the admin user who is the contact person of the parent account.",
                        "api_fieldname": "admin_email",
                        "entity_fieldname": "admin_email",
                        "_key": "admin_email"
                      },
                      {
                        "type": "string",
                        "maxLength": 100,
                        "example": "J. Doe",
                        "description": "The name of the admin user who is the contact person of the parent account.",
                        "api_fieldname": "admin_name",
                        "entity_fieldname": "admin_name",
                        "_key": "admin_name"
                      },
                      {
                        "type": "string",
                        "example": "01619571dad80242ac12000600000000",
                        "description": "The ID of the parent account.",
                        "pattern": "[a-f0-9]{32}",
                        "api_fieldname": "id",
                        "entity_fieldname": "id",
                        "_key": "id"
                      }
                    ],
                    "description": "Represents parent account contact details in responses.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "parent_account"
                    },
                    "x-nullable": true,
                    "api_fieldname": "parent_account",
                    "entity_fieldname": "parent_account",
                    "_key": "parent_account"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "01619571dad80242ac12000600000000",
                    "description": "The ID of the parent account, if any.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "parent_id",
                    "entity_fieldname": "parent_id",
                    "_key": "parent_id"
                  },
                  {
                    "type": "object",
                    "required": [
                      "minimum_length"
                    ],
                    "properties": [
                      {
                        "type": "integer",
                        "minimum": 8,
                        "maximum": 512,
                        "example": "8",
                        "description": "Minimum length for the password.",
                        "api_fieldname": "minimum_length",
                        "entity_fieldname": "minimum_length",
                        "_key": "minimum_length"
                      }
                    ],
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "password_policy"
                    },
                    "description": "The password policy for this account.",
                    "x-nullable": true,
                    "api_fieldname": "password_policy",
                    "entity_fieldname": "password_policy",
                    "_key": "password_policy"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 45,
                    "description": "Indicates for how many minutes a password recovery email is valid.",
                    "api_fieldname": "password_recovery_expiration",
                    "entity_fieldname": "password_recovery_expiration",
                    "_key": "password_recovery_expiration"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "+44 (1223) 400 400",
                    "description": "The phone number of a company representative.",
                    "api_fieldname": "phone_number",
                    "entity_fieldname": "phone_number",
                    "_key": "phone_number"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "List of policies if requested.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "GET",
                          "description": "Comma-separated list of actions, empty string represents all actions.",
                          "api_fieldname": "action",
                          "entity_fieldname": "action",
                          "_key": "action"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "True or false controlling whether an action is allowed or not.",
                          "api_fieldname": "allow",
                          "entity_fieldname": "allow",
                          "_key": "allow"
                        },
                        {
                          "type": "string",
                          "example": "update-campaigns",
                          "description": "Feature name corresponding to this policy.",
                          "api_fieldname": "feature",
                          "entity_fieldname": "feature",
                          "_key": "feature"
                        },
                        {
                          "type": "boolean",
                          "example": false,
                          "description": "Flag indicating whether this feature is inherited or overwritten specifically.",
                          "readOnly": true,
                          "api_fieldname": "inherited",
                          "entity_fieldname": "inherited",
                          "_key": "inherited"
                        },
                        {
                          "type": "string",
                          "example": "016ada3ec2d46665bf66e32e00000000",
                          "description": "An ID indicating where this policy is inherited from.",
                          "pattern": "[a-f0-9]{32}",
                          "readOnly": true,
                          "api_fieldname": "inherited_from",
                          "entity_fieldname": "inherited_from",
                          "_key": "inherited_from"
                        },
                        {
                          "type": "string",
                          "example": "account",
                          "description": "Indicates the type of entity this policy is inherited from.",
                          "readOnly": true,
                          "enum": [
                            "account",
                            "template",
                            "tier_template"
                          ],
                          "api_fieldname": "inherited_type",
                          "entity_fieldname": "inherited_type",
                          "_key": "inherited_type"
                        },
                        {
                          "type": "string",
                          "example": "/v3/update-campaign",
                          "description": "Resource that is protected by this policy.",
                          "api_fieldname": "resource",
                          "entity_fieldname": "resource",
                          "_key": "resource"
                        }
                      ],
                      "description": "Represents a feature policy. Either the feature or the resource must be specified.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "policy"
                      }
                    },
                    "api_fieldname": "policies",
                    "entity_fieldname": "policies",
                    "_key": "policies"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "CB1 9NJ",
                    "description": "The postal code part of the postal address.",
                    "api_fieldname": "postal_code",
                    "entity_fieldname": "postal_code",
                    "_key": "postal_code"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "Subscription paid.",
                    "description": "A note with the reason for account status update.",
                    "api_fieldname": "reason",
                    "entity_fieldname": "reason",
                    "_key": "reason"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "ARM-INT-0001",
                    "description": "A reference note for updating the status of the account.",
                    "api_fieldname": "reference_note",
                    "entity_fieldname": "reference_note",
                    "_key": "reference_note"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "sales@arm.com",
                    "x-nullable": true,
                    "description": "Email address of the sales contact.",
                    "api_fieldname": "sales_contact",
                    "entity_fieldname": "sales_contact",
                    "_key": "sales_contact"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": " ",
                    "description": "The state part of the postal address.",
                    "api_fieldname": "state",
                    "entity_fieldname": "state",
                    "_key": "state"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the account.",
                    "enum": [
                      "ENROLLING",
                      "ACTIVE",
                      "RESTRICTED",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "List of sub accounts. Not available for developer users.",
                    "items": {
                      "type": "object",
                      "required": [
                        "end_market",
                        "etag",
                        "id",
                        "object",
                        "status",
                        "tier"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "110 Fulbourn Rd",
                          "description": "Postal address line 1.",
                          "_key": "address_line1"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": " ",
                          "description": "Postal address line 2.",
                          "_key": "address_line2"
                        },
                        {
                          "type": "array",
                          "maxItems": 10,
                          "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
                          "items": {
                            "type": "string",
                            "pattern": "[\\w\\-._]{8,100}"
                          },
                          "_key": "aliases"
                        },
                        {
                          "type": "string",
                          "default": "active_device_business_model",
                          "example": "api_calls_1_business_model",
                          "description": "Business model for this account. Manageable by the root admin only.",
                          "enum": [
                            "active_device_business_model",
                            "api_calls_1_business_model"
                          ],
                          "_key": "business_model"
                        },
                        {
                          "type": "array",
                          "description": "Business model history for this account.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "default": "active_device_business_model",
                                "example": "api_calls_1_business_model",
                                "description": "Business model for this account. Manageable by the root admin only.",
                                "enum": [
                                  "active_device_business_model",
                                  "api_calls_1_business_model"
                                ],
                                "_key": "business_model"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updated_at"
                              }
                            ]
                          },
                          "_key": "business_model_history"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "Cambridge",
                          "description": "The city part of the postal address.",
                          "_key": "city"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "ARM Holdings Plc",
                          "description": "The name of the company used in billing.",
                          "_key": "company"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "J. Doe",
                          "description": "The name of the contact person for this account.",
                          "_key": "contact"
                        },
                        {
                          "type": "string",
                          "example": "1NX25_0001",
                          "x-nullable": true,
                          "description": "Contract number of the customer.",
                          "_key": "contract_number"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "United Kingdom",
                          "description": "The country part of the postal address.",
                          "_key": "country"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "description": "Account's custom properties as key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "custom_fields"
                        },
                        {
                          "type": "string",
                          "example": "1NC25_0001",
                          "x-nullable": true,
                          "description": "Customer number of the customer.",
                          "_key": "customer_number"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "ARM",
                          "description": "The display name for the tenant account.",
                          "_key": "display_name"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "x-nullable": true,
                          "example": "info@arm.com",
                          "description": "The company email address for this account.",
                          "_key": "email"
                        },
                        {
                          "type": "string",
                          "example": "IT",
                          "description": "Account end market.",
                          "_key": "end_market"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "format": "date-time",
                          "description": "Expiration time of the account, as UTC time RFC3339.",
                          "_key": "expiration"
                        },
                        {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 180,
                          "example": "180",
                          "x-nullable": true,
                          "description": "Indicates how many days (1-180) before account expiration a notification email is sent.",
                          "_key": "expiration_warning_threshold"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "Account ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 120,
                          "x-nullable": true,
                          "example": "30",
                          "description": "The reference token expiration time, in minutes, for this account.",
                          "_key": "idle_timeout"
                        },
                        {
                          "type": "array",
                          "description": "List of account limitation objects.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "Billing period of the account limitation.",
                                "_key": "billing_period"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-13T09:35:20Z",
                                "description": "Creation UTC time RFC3339.",
                                "_key": "created_at"
                              },
                              {
                                "type": "string",
                                "description": "Description of the account limitation.",
                                "readOnly": true,
                                "_key": "description"
                              },
                              {
                                "type": "string",
                                "example": "1",
                                "description": "API resource entity version.",
                                "_key": "etag"
                              },
                              {
                                "type": "string",
                                "example": "01619571d01d0242ac12000600000000",
                                "description": "Entity ID.",
                                "_key": "id"
                              },
                              {
                                "type": "boolean",
                                "description": "Flag indicating whether this limitation is inherited.",
                                "readOnly": true,
                                "_key": "inherited"
                              },
                              {
                                "type": "string",
                                "description": "Indicates where this limit is inherited from.",
                                "readOnly": true,
                                "_key": "inherited_from"
                              },
                              {
                                "type": "string",
                                "description": "Indicates the type of the entity where the limitation is inherited from.",
                                "readOnly": true,
                                "_key": "inherited_type"
                              },
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value of the limit.",
                                "_key": "limit"
                              },
                              {
                                "type": "string",
                                "description": "Name of the account limitation.",
                                "_key": "name"
                              },
                              {
                                "type": "string",
                                "description": "Entity name: always 'limitation'",
                                "enum": [
                                  "user",
                                  "api-key",
                                  "group",
                                  "account",
                                  "account_template",
                                  "trusted_cert",
                                  "list",
                                  "error",
                                  "agreement",
                                  "signed_agreement",
                                  "policy",
                                  "limitation",
                                  "identity_provider",
                                  "user_session",
                                  "user_invitation",
                                  "notification_entry",
                                  "branding_color",
                                  "branding_image"
                                ],
                                "_key": "object"
                              },
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "Quota of the account limitation.",
                                "_key": "quota"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updated_at"
                              }
                            ],
                            "description": "This object represents an account limitation."
                          },
                          "_key": "limitations"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "x-deprecation": {
                            "issued_at": "2019-08-27T12:03:58+00:00",
                            "end_of_life_at": "2020-08-27T12:03:58+00:00",
                            "comment": "Replaced by the limitations parameter."
                          },
                          "description": "DEPRECATED: Replaced by the limitations parameter.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "limits"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "description": "The enforcement status of multi-factor authentication, either `enforced` or `optional`.",
                          "enum": [
                            "enforced",
                            "optional"
                          ],
                          "_key": "mfa_status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "A list of notification email addresses.",
                          "items": {
                            "pattern": "^(?=.{3,254}$).+\\@.+",
                            "type": "string"
                          },
                          "_key": "notification_emails"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `account`.",
                          "enum": [
                            "account"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "object",
                          "properties": [
                            {
                              "pattern": "^(?=.{3,254}$).+\\@.+",
                              "type": "string",
                              "example": "info@arm.com",
                              "description": "The email address of the admin user who is the contact person of the parent account.",
                              "api_fieldname": "admin_email",
                              "entity_fieldname": "admin_email",
                              "_key": "admin_email"
                            },
                            {
                              "type": "string",
                              "maxLength": 100,
                              "example": "J. Doe",
                              "description": "The name of the admin user who is the contact person of the parent account.",
                              "api_fieldname": "admin_name",
                              "entity_fieldname": "admin_name",
                              "_key": "admin_name"
                            },
                            {
                              "type": "string",
                              "example": "01619571dad80242ac12000600000000",
                              "description": "The ID of the parent account.",
                              "pattern": "[a-f0-9]{32}",
                              "api_fieldname": "id",
                              "entity_fieldname": "id",
                              "_key": "id"
                            }
                          ],
                          "description": "Represents parent account contact details in responses.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "parent_account"
                          },
                          "x-nullable": true,
                          "_key": "parent_account"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "01619571dad80242ac12000600000000",
                          "description": "The ID of the parent account, if any.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "parent_id"
                        },
                        {
                          "type": "object",
                          "required": [
                            "minimum_length"
                          ],
                          "properties": [
                            {
                              "type": "integer",
                              "minimum": 8,
                              "maximum": 512,
                              "example": "8",
                              "description": "Minimum length for the password.",
                              "api_fieldname": "minimum_length",
                              "entity_fieldname": "minimum_length",
                              "_key": "minimum_length"
                            }
                          ],
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "password_policy"
                          },
                          "description": "The password policy for this account.",
                          "x-nullable": true,
                          "_key": "password_policy"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "maximum": 45,
                          "description": "Indicates for how many minutes a password recovery email is valid.",
                          "_key": "password_recovery_expiration"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "+44 (1223) 400 400",
                          "description": "The phone number of a company representative.",
                          "_key": "phone_number"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "List of policies if requested.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "example": "GET",
                                "description": "Comma-separated list of actions, empty string represents all actions.",
                                "api_fieldname": "action",
                                "entity_fieldname": "action",
                                "_key": "action"
                              },
                              {
                                "type": "boolean",
                                "example": true,
                                "description": "True or false controlling whether an action is allowed or not.",
                                "api_fieldname": "allow",
                                "entity_fieldname": "allow",
                                "_key": "allow"
                              },
                              {
                                "type": "string",
                                "example": "update-campaigns",
                                "description": "Feature name corresponding to this policy.",
                                "api_fieldname": "feature",
                                "entity_fieldname": "feature",
                                "_key": "feature"
                              },
                              {
                                "type": "boolean",
                                "example": false,
                                "description": "Flag indicating whether this feature is inherited or overwritten specifically.",
                                "readOnly": true,
                                "api_fieldname": "inherited",
                                "entity_fieldname": "inherited",
                                "_key": "inherited"
                              },
                              {
                                "type": "string",
                                "example": "016ada3ec2d46665bf66e32e00000000",
                                "description": "An ID indicating where this policy is inherited from.",
                                "pattern": "[a-f0-9]{32}",
                                "readOnly": true,
                                "api_fieldname": "inherited_from",
                                "entity_fieldname": "inherited_from",
                                "_key": "inherited_from"
                              },
                              {
                                "type": "string",
                                "example": "account",
                                "description": "Indicates the type of entity this policy is inherited from.",
                                "readOnly": true,
                                "enum": [
                                  "account",
                                  "template",
                                  "tier_template"
                                ],
                                "api_fieldname": "inherited_type",
                                "entity_fieldname": "inherited_type",
                                "_key": "inherited_type"
                              },
                              {
                                "type": "string",
                                "example": "/v3/update-campaign",
                                "description": "Resource that is protected by this policy.",
                                "api_fieldname": "resource",
                                "entity_fieldname": "resource",
                                "_key": "resource"
                              }
                            ],
                            "description": "Represents a feature policy. Either the feature or the resource must be specified.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "policy"
                            }
                          },
                          "_key": "policies"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "CB1 9NJ",
                          "description": "The postal code part of the postal address.",
                          "_key": "postal_code"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "Subscription paid.",
                          "description": "A note with the reason for account status update.",
                          "_key": "reason"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "ARM-INT-0001",
                          "description": "A reference note for updating the status of the account.",
                          "_key": "reference_note"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "example": "sales@arm.com",
                          "x-nullable": true,
                          "description": "Email address of the sales contact.",
                          "_key": "sales_contact"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": " ",
                          "description": "The state part of the postal address.",
                          "_key": "state"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "The status of the account.",
                          "enum": [
                            "ENROLLING",
                            "ACTIVE",
                            "RESTRICTED",
                            "SUSPENDED"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "List of sub accounts. Not available for developer users.",
                          "items": [],
                          "_key": "sub_accounts"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "01619571e7160242ac12000600000000",
                          "description": "Account template ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "template_id"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                          "_key": "tier"
                        },
                        {
                          "type": "array",
                          "description": "Tier history for this account.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "example": "1",
                                "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                                "_key": "tier"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updatedAt"
                              }
                            ]
                          },
                          "_key": "tier_history"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Time when upgraded to commercial account in UTC format RFC3339.",
                          "_key": "upgraded_at"
                        }
                      ],
                      "description": "Represents an account in requests and responses."
                    },
                    "api_fieldname": "sub_accounts",
                    "entity_fieldname": "sub_accounts",
                    "_key": "sub_accounts"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "01619571e7160242ac12000600000000",
                    "description": "Account template ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "template_id",
                    "entity_fieldname": "template_id",
                    "_key": "template_id"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                    "api_fieldname": "tier",
                    "entity_fieldname": "tier",
                    "_key": "tier"
                  },
                  {
                    "type": "array",
                    "description": "Tier history for this account.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "1",
                          "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                          "_key": "tier"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updatedAt"
                        }
                      ]
                    },
                    "api_fieldname": "tier_history",
                    "entity_fieldname": "tier_history",
                    "_key": "tier_history"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Time when upgraded to commercial account in UTC format RFC3339.",
                    "api_fieldname": "upgraded_at",
                    "entity_fieldname": "upgraded_at",
                    "_key": "upgraded_at"
                  }
                ],
                "description": "Represents an account in requests and responses."
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/accounts/me",
          "summary": "Get account information.",
          "return_type": "account",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "account"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "sub_accounts",
            "id",
            "created_at",
            "updated_at",
            "parent_id",
            "display_name",
            "company",
            "country",
            "address_line1",
            "address_line2",
            "city",
            "state",
            "postal_code",
            "contact",
            "email",
            "phone_number",
            "aliases",
            "tier",
            "status",
            "upgraded_at",
            "limits",
            "policies",
            "template_id",
            "reason",
            "end_market",
            "idle_timeout",
            "password_policy",
            "reference_note",
            "custom_fields",
            "mfa_status",
            "notification_emails",
            "sales_contact",
            "expiration_warning_threshold",
            "contract_number",
            "customer_number",
            "parent_account",
            "expiration",
            "limitations",
            "password_recovery_expiration",
            "business_model",
            "business_model_history",
            "tier_history"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "account_id": "id"
          },
          "operation_id": "getMyAccountInfo",
          "notes": "This is provided by the SDK to avoid listing to retrieve the user's own Account.",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "me"
        },
        {
          "description": "Retrieve detailed information about an account.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "Account ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: limits, policies, sub_accounts, history.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "name": "properties",
              "in": "query",
              "description": "Property name to return from account-specific properties.",
              "required": false,
              "type": "string",
              "entity_fieldname": "properties",
              "api_fieldname": "properties",
              "external_param": true,
              "parameter_fieldname": "properties",
              "_key": "properties"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "end_market",
                  "etag",
                  "id",
                  "object",
                  "status",
                  "tier"
                ],
                "properties": [
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "110 Fulbourn Rd",
                    "description": "Postal address line 1.",
                    "api_fieldname": "address_line1",
                    "entity_fieldname": "address_line1",
                    "_key": "address_line1"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": " ",
                    "description": "Postal address line 2.",
                    "api_fieldname": "address_line2",
                    "entity_fieldname": "address_line2",
                    "_key": "address_line2"
                  },
                  {
                    "type": "array",
                    "maxItems": 10,
                    "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
                    "items": {
                      "type": "string",
                      "pattern": "[\\w\\-._]{8,100}"
                    },
                    "api_fieldname": "aliases",
                    "entity_fieldname": "aliases",
                    "_key": "aliases"
                  },
                  {
                    "type": "string",
                    "default": "active_device_business_model",
                    "example": "api_calls_1_business_model",
                    "description": "Business model for this account. Manageable by the root admin only.",
                    "enum": [
                      "active_device_business_model",
                      "api_calls_1_business_model"
                    ],
                    "api_fieldname": "business_model",
                    "entity_fieldname": "business_model",
                    "_key": "business_model"
                  },
                  {
                    "type": "array",
                    "description": "Business model history for this account.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "default": "active_device_business_model",
                          "example": "api_calls_1_business_model",
                          "description": "Business model for this account. Manageable by the root admin only.",
                          "enum": [
                            "active_device_business_model",
                            "api_calls_1_business_model"
                          ],
                          "_key": "business_model"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ]
                    },
                    "api_fieldname": "business_model_history",
                    "entity_fieldname": "business_model_history",
                    "_key": "business_model_history"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "Cambridge",
                    "description": "The city part of the postal address.",
                    "api_fieldname": "city",
                    "entity_fieldname": "city",
                    "_key": "city"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "ARM Holdings Plc",
                    "description": "The name of the company used in billing.",
                    "api_fieldname": "company",
                    "entity_fieldname": "company",
                    "_key": "company"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "J. Doe",
                    "description": "The name of the contact person for this account.",
                    "api_fieldname": "contact",
                    "entity_fieldname": "contact",
                    "_key": "contact"
                  },
                  {
                    "type": "string",
                    "example": "1NX25_0001",
                    "x-nullable": true,
                    "description": "Contract number of the customer.",
                    "api_fieldname": "contract_number",
                    "entity_fieldname": "contract_number",
                    "_key": "contract_number"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "United Kingdom",
                    "description": "The country part of the postal address.",
                    "api_fieldname": "country",
                    "entity_fieldname": "country",
                    "_key": "country"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "description": "Account's custom properties as key-value pairs.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "custom_fields",
                    "entity_fieldname": "custom_fields",
                    "_key": "custom_fields"
                  },
                  {
                    "type": "string",
                    "example": "1NC25_0001",
                    "x-nullable": true,
                    "description": "Customer number of the customer.",
                    "api_fieldname": "customer_number",
                    "entity_fieldname": "customer_number",
                    "_key": "customer_number"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "ARM",
                    "description": "The display name for the tenant account.",
                    "api_fieldname": "display_name",
                    "entity_fieldname": "display_name",
                    "_key": "display_name"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "x-nullable": true,
                    "example": "info@arm.com",
                    "description": "The company email address for this account.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "_key": "email"
                  },
                  {
                    "type": "string",
                    "example": "IT",
                    "description": "Account end market.",
                    "api_fieldname": "end_market",
                    "entity_fieldname": "end_market",
                    "_key": "end_market"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "format": "date-time",
                    "description": "Expiration time of the account, as UTC time RFC3339.",
                    "api_fieldname": "expiration",
                    "entity_fieldname": "expiration",
                    "_key": "expiration"
                  },
                  {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 180,
                    "example": "180",
                    "x-nullable": true,
                    "description": "Indicates how many days (1-180) before account expiration a notification email is sent.",
                    "api_fieldname": "expiration_warning_threshold",
                    "entity_fieldname": "expiration_warning_threshold",
                    "_key": "expiration_warning_threshold"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "Account ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 120,
                    "x-nullable": true,
                    "example": "30",
                    "description": "The reference token expiration time, in minutes, for this account.",
                    "api_fieldname": "idle_timeout",
                    "entity_fieldname": "idle_timeout",
                    "_key": "idle_timeout"
                  },
                  {
                    "type": "array",
                    "description": "List of account limitation objects.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "integer",
                          "format": "int32",
                          "description": "Billing period of the account limitation.",
                          "_key": "billing_period"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "description": "Description of the account limitation.",
                          "readOnly": true,
                          "_key": "description"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571d01d0242ac12000600000000",
                          "description": "Entity ID.",
                          "_key": "id"
                        },
                        {
                          "type": "boolean",
                          "description": "Flag indicating whether this limitation is inherited.",
                          "readOnly": true,
                          "_key": "inherited"
                        },
                        {
                          "type": "string",
                          "description": "Indicates where this limit is inherited from.",
                          "readOnly": true,
                          "_key": "inherited_from"
                        },
                        {
                          "type": "string",
                          "description": "Indicates the type of the entity where the limitation is inherited from.",
                          "readOnly": true,
                          "_key": "inherited_type"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "description": "The value of the limit.",
                          "_key": "limit"
                        },
                        {
                          "type": "string",
                          "description": "Name of the account limitation.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'limitation'",
                          "enum": [
                            "user",
                            "api-key",
                            "group",
                            "account",
                            "account_template",
                            "trusted_cert",
                            "list",
                            "error",
                            "agreement",
                            "signed_agreement",
                            "policy",
                            "limitation",
                            "identity_provider",
                            "user_session",
                            "user_invitation",
                            "notification_entry",
                            "branding_color",
                            "branding_image"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "description": "Quota of the account limitation.",
                          "_key": "quota"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ],
                      "description": "This object represents an account limitation."
                    },
                    "api_fieldname": "limitations",
                    "entity_fieldname": "limitations",
                    "_key": "limitations"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "x-deprecation": {
                      "issued_at": "2019-08-27T12:03:58+00:00",
                      "end_of_life_at": "2020-08-27T12:03:58+00:00",
                      "comment": "Replaced by the limitations parameter."
                    },
                    "description": "DEPRECATED: Replaced by the limitations parameter.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "limits",
                    "entity_fieldname": "limits",
                    "_key": "limits"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The enforcement status of multi-factor authentication, either `enforced` or `optional`.",
                    "enum": [
                      "enforced",
                      "optional"
                    ],
                    "api_fieldname": "mfa_status",
                    "entity_fieldname": "mfa_status",
                    "_key": "mfa_status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "A list of notification email addresses.",
                    "items": {
                      "pattern": "^(?=.{3,254}$).+\\@.+",
                      "type": "string"
                    },
                    "api_fieldname": "notification_emails",
                    "entity_fieldname": "notification_emails",
                    "_key": "notification_emails"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `account`.",
                    "enum": [
                      "account"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "pattern": "^(?=.{3,254}$).+\\@.+",
                        "type": "string",
                        "example": "info@arm.com",
                        "description": "The email address of the admin user who is the contact person of the parent account.",
                        "api_fieldname": "admin_email",
                        "entity_fieldname": "admin_email",
                        "_key": "admin_email"
                      },
                      {
                        "type": "string",
                        "maxLength": 100,
                        "example": "J. Doe",
                        "description": "The name of the admin user who is the contact person of the parent account.",
                        "api_fieldname": "admin_name",
                        "entity_fieldname": "admin_name",
                        "_key": "admin_name"
                      },
                      {
                        "type": "string",
                        "example": "01619571dad80242ac12000600000000",
                        "description": "The ID of the parent account.",
                        "pattern": "[a-f0-9]{32}",
                        "api_fieldname": "id",
                        "entity_fieldname": "id",
                        "_key": "id"
                      }
                    ],
                    "description": "Represents parent account contact details in responses.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "parent_account"
                    },
                    "x-nullable": true,
                    "api_fieldname": "parent_account",
                    "entity_fieldname": "parent_account",
                    "_key": "parent_account"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "01619571dad80242ac12000600000000",
                    "description": "The ID of the parent account, if any.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "parent_id",
                    "entity_fieldname": "parent_id",
                    "_key": "parent_id"
                  },
                  {
                    "type": "object",
                    "required": [
                      "minimum_length"
                    ],
                    "properties": [
                      {
                        "type": "integer",
                        "minimum": 8,
                        "maximum": 512,
                        "example": "8",
                        "description": "Minimum length for the password.",
                        "api_fieldname": "minimum_length",
                        "entity_fieldname": "minimum_length",
                        "_key": "minimum_length"
                      }
                    ],
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "password_policy"
                    },
                    "description": "The password policy for this account.",
                    "x-nullable": true,
                    "api_fieldname": "password_policy",
                    "entity_fieldname": "password_policy",
                    "_key": "password_policy"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 45,
                    "description": "Indicates for how many minutes a password recovery email is valid.",
                    "api_fieldname": "password_recovery_expiration",
                    "entity_fieldname": "password_recovery_expiration",
                    "_key": "password_recovery_expiration"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "+44 (1223) 400 400",
                    "description": "The phone number of a company representative.",
                    "api_fieldname": "phone_number",
                    "entity_fieldname": "phone_number",
                    "_key": "phone_number"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "List of policies if requested.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "GET",
                          "description": "Comma-separated list of actions, empty string represents all actions.",
                          "api_fieldname": "action",
                          "entity_fieldname": "action",
                          "_key": "action"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "True or false controlling whether an action is allowed or not.",
                          "api_fieldname": "allow",
                          "entity_fieldname": "allow",
                          "_key": "allow"
                        },
                        {
                          "type": "string",
                          "example": "update-campaigns",
                          "description": "Feature name corresponding to this policy.",
                          "api_fieldname": "feature",
                          "entity_fieldname": "feature",
                          "_key": "feature"
                        },
                        {
                          "type": "boolean",
                          "example": false,
                          "description": "Flag indicating whether this feature is inherited or overwritten specifically.",
                          "readOnly": true,
                          "api_fieldname": "inherited",
                          "entity_fieldname": "inherited",
                          "_key": "inherited"
                        },
                        {
                          "type": "string",
                          "example": "016ada3ec2d46665bf66e32e00000000",
                          "description": "An ID indicating where this policy is inherited from.",
                          "pattern": "[a-f0-9]{32}",
                          "readOnly": true,
                          "api_fieldname": "inherited_from",
                          "entity_fieldname": "inherited_from",
                          "_key": "inherited_from"
                        },
                        {
                          "type": "string",
                          "example": "account",
                          "description": "Indicates the type of entity this policy is inherited from.",
                          "readOnly": true,
                          "enum": [
                            "account",
                            "template",
                            "tier_template"
                          ],
                          "api_fieldname": "inherited_type",
                          "entity_fieldname": "inherited_type",
                          "_key": "inherited_type"
                        },
                        {
                          "type": "string",
                          "example": "/v3/update-campaign",
                          "description": "Resource that is protected by this policy.",
                          "api_fieldname": "resource",
                          "entity_fieldname": "resource",
                          "_key": "resource"
                        }
                      ],
                      "description": "Represents a feature policy. Either the feature or the resource must be specified.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "policy"
                      }
                    },
                    "api_fieldname": "policies",
                    "entity_fieldname": "policies",
                    "_key": "policies"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "CB1 9NJ",
                    "description": "The postal code part of the postal address.",
                    "api_fieldname": "postal_code",
                    "entity_fieldname": "postal_code",
                    "_key": "postal_code"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "Subscription paid.",
                    "description": "A note with the reason for account status update.",
                    "api_fieldname": "reason",
                    "entity_fieldname": "reason",
                    "_key": "reason"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "ARM-INT-0001",
                    "description": "A reference note for updating the status of the account.",
                    "api_fieldname": "reference_note",
                    "entity_fieldname": "reference_note",
                    "_key": "reference_note"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "sales@arm.com",
                    "x-nullable": true,
                    "description": "Email address of the sales contact.",
                    "api_fieldname": "sales_contact",
                    "entity_fieldname": "sales_contact",
                    "_key": "sales_contact"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": " ",
                    "description": "The state part of the postal address.",
                    "api_fieldname": "state",
                    "entity_fieldname": "state",
                    "_key": "state"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the account.",
                    "enum": [
                      "ENROLLING",
                      "ACTIVE",
                      "RESTRICTED",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "List of sub accounts. Not available for developer users.",
                    "items": {
                      "type": "object",
                      "required": [
                        "end_market",
                        "etag",
                        "id",
                        "object",
                        "status",
                        "tier"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "110 Fulbourn Rd",
                          "description": "Postal address line 1.",
                          "_key": "address_line1"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": " ",
                          "description": "Postal address line 2.",
                          "_key": "address_line2"
                        },
                        {
                          "type": "array",
                          "maxItems": 10,
                          "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
                          "items": {
                            "type": "string",
                            "pattern": "[\\w\\-._]{8,100}"
                          },
                          "_key": "aliases"
                        },
                        {
                          "type": "string",
                          "default": "active_device_business_model",
                          "example": "api_calls_1_business_model",
                          "description": "Business model for this account. Manageable by the root admin only.",
                          "enum": [
                            "active_device_business_model",
                            "api_calls_1_business_model"
                          ],
                          "_key": "business_model"
                        },
                        {
                          "type": "array",
                          "description": "Business model history for this account.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "default": "active_device_business_model",
                                "example": "api_calls_1_business_model",
                                "description": "Business model for this account. Manageable by the root admin only.",
                                "enum": [
                                  "active_device_business_model",
                                  "api_calls_1_business_model"
                                ],
                                "_key": "business_model"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updated_at"
                              }
                            ]
                          },
                          "_key": "business_model_history"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "Cambridge",
                          "description": "The city part of the postal address.",
                          "_key": "city"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "ARM Holdings Plc",
                          "description": "The name of the company used in billing.",
                          "_key": "company"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "J. Doe",
                          "description": "The name of the contact person for this account.",
                          "_key": "contact"
                        },
                        {
                          "type": "string",
                          "example": "1NX25_0001",
                          "x-nullable": true,
                          "description": "Contract number of the customer.",
                          "_key": "contract_number"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "United Kingdom",
                          "description": "The country part of the postal address.",
                          "_key": "country"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "description": "Account's custom properties as key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "custom_fields"
                        },
                        {
                          "type": "string",
                          "example": "1NC25_0001",
                          "x-nullable": true,
                          "description": "Customer number of the customer.",
                          "_key": "customer_number"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "ARM",
                          "description": "The display name for the tenant account.",
                          "_key": "display_name"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "x-nullable": true,
                          "example": "info@arm.com",
                          "description": "The company email address for this account.",
                          "_key": "email"
                        },
                        {
                          "type": "string",
                          "example": "IT",
                          "description": "Account end market.",
                          "_key": "end_market"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "format": "date-time",
                          "description": "Expiration time of the account, as UTC time RFC3339.",
                          "_key": "expiration"
                        },
                        {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 180,
                          "example": "180",
                          "x-nullable": true,
                          "description": "Indicates how many days (1-180) before account expiration a notification email is sent.",
                          "_key": "expiration_warning_threshold"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "Account ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 120,
                          "x-nullable": true,
                          "example": "30",
                          "description": "The reference token expiration time, in minutes, for this account.",
                          "_key": "idle_timeout"
                        },
                        {
                          "type": "array",
                          "description": "List of account limitation objects.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "Billing period of the account limitation.",
                                "_key": "billing_period"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-13T09:35:20Z",
                                "description": "Creation UTC time RFC3339.",
                                "_key": "created_at"
                              },
                              {
                                "type": "string",
                                "description": "Description of the account limitation.",
                                "readOnly": true,
                                "_key": "description"
                              },
                              {
                                "type": "string",
                                "example": "1",
                                "description": "API resource entity version.",
                                "_key": "etag"
                              },
                              {
                                "type": "string",
                                "example": "01619571d01d0242ac12000600000000",
                                "description": "Entity ID.",
                                "_key": "id"
                              },
                              {
                                "type": "boolean",
                                "description": "Flag indicating whether this limitation is inherited.",
                                "readOnly": true,
                                "_key": "inherited"
                              },
                              {
                                "type": "string",
                                "description": "Indicates where this limit is inherited from.",
                                "readOnly": true,
                                "_key": "inherited_from"
                              },
                              {
                                "type": "string",
                                "description": "Indicates the type of the entity where the limitation is inherited from.",
                                "readOnly": true,
                                "_key": "inherited_type"
                              },
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value of the limit.",
                                "_key": "limit"
                              },
                              {
                                "type": "string",
                                "description": "Name of the account limitation.",
                                "_key": "name"
                              },
                              {
                                "type": "string",
                                "description": "Entity name: always 'limitation'",
                                "enum": [
                                  "user",
                                  "api-key",
                                  "group",
                                  "account",
                                  "account_template",
                                  "trusted_cert",
                                  "list",
                                  "error",
                                  "agreement",
                                  "signed_agreement",
                                  "policy",
                                  "limitation",
                                  "identity_provider",
                                  "user_session",
                                  "user_invitation",
                                  "notification_entry",
                                  "branding_color",
                                  "branding_image"
                                ],
                                "_key": "object"
                              },
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "Quota of the account limitation.",
                                "_key": "quota"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updated_at"
                              }
                            ],
                            "description": "This object represents an account limitation."
                          },
                          "_key": "limitations"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "x-deprecation": {
                            "issued_at": "2019-08-27T12:03:58+00:00",
                            "end_of_life_at": "2020-08-27T12:03:58+00:00",
                            "comment": "Replaced by the limitations parameter."
                          },
                          "description": "DEPRECATED: Replaced by the limitations parameter.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "limits"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "description": "The enforcement status of multi-factor authentication, either `enforced` or `optional`.",
                          "enum": [
                            "enforced",
                            "optional"
                          ],
                          "_key": "mfa_status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "A list of notification email addresses.",
                          "items": {
                            "pattern": "^(?=.{3,254}$).+\\@.+",
                            "type": "string"
                          },
                          "_key": "notification_emails"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `account`.",
                          "enum": [
                            "account"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "object",
                          "properties": [
                            {
                              "pattern": "^(?=.{3,254}$).+\\@.+",
                              "type": "string",
                              "example": "info@arm.com",
                              "description": "The email address of the admin user who is the contact person of the parent account.",
                              "api_fieldname": "admin_email",
                              "entity_fieldname": "admin_email",
                              "_key": "admin_email"
                            },
                            {
                              "type": "string",
                              "maxLength": 100,
                              "example": "J. Doe",
                              "description": "The name of the admin user who is the contact person of the parent account.",
                              "api_fieldname": "admin_name",
                              "entity_fieldname": "admin_name",
                              "_key": "admin_name"
                            },
                            {
                              "type": "string",
                              "example": "01619571dad80242ac12000600000000",
                              "description": "The ID of the parent account.",
                              "pattern": "[a-f0-9]{32}",
                              "api_fieldname": "id",
                              "entity_fieldname": "id",
                              "_key": "id"
                            }
                          ],
                          "description": "Represents parent account contact details in responses.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "parent_account"
                          },
                          "x-nullable": true,
                          "_key": "parent_account"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "01619571dad80242ac12000600000000",
                          "description": "The ID of the parent account, if any.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "parent_id"
                        },
                        {
                          "type": "object",
                          "required": [
                            "minimum_length"
                          ],
                          "properties": [
                            {
                              "type": "integer",
                              "minimum": 8,
                              "maximum": 512,
                              "example": "8",
                              "description": "Minimum length for the password.",
                              "api_fieldname": "minimum_length",
                              "entity_fieldname": "minimum_length",
                              "_key": "minimum_length"
                            }
                          ],
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "password_policy"
                          },
                          "description": "The password policy for this account.",
                          "x-nullable": true,
                          "_key": "password_policy"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "maximum": 45,
                          "description": "Indicates for how many minutes a password recovery email is valid.",
                          "_key": "password_recovery_expiration"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "+44 (1223) 400 400",
                          "description": "The phone number of a company representative.",
                          "_key": "phone_number"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "List of policies if requested.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "example": "GET",
                                "description": "Comma-separated list of actions, empty string represents all actions.",
                                "api_fieldname": "action",
                                "entity_fieldname": "action",
                                "_key": "action"
                              },
                              {
                                "type": "boolean",
                                "example": true,
                                "description": "True or false controlling whether an action is allowed or not.",
                                "api_fieldname": "allow",
                                "entity_fieldname": "allow",
                                "_key": "allow"
                              },
                              {
                                "type": "string",
                                "example": "update-campaigns",
                                "description": "Feature name corresponding to this policy.",
                                "api_fieldname": "feature",
                                "entity_fieldname": "feature",
                                "_key": "feature"
                              },
                              {
                                "type": "boolean",
                                "example": false,
                                "description": "Flag indicating whether this feature is inherited or overwritten specifically.",
                                "readOnly": true,
                                "api_fieldname": "inherited",
                                "entity_fieldname": "inherited",
                                "_key": "inherited"
                              },
                              {
                                "type": "string",
                                "example": "016ada3ec2d46665bf66e32e00000000",
                                "description": "An ID indicating where this policy is inherited from.",
                                "pattern": "[a-f0-9]{32}",
                                "readOnly": true,
                                "api_fieldname": "inherited_from",
                                "entity_fieldname": "inherited_from",
                                "_key": "inherited_from"
                              },
                              {
                                "type": "string",
                                "example": "account",
                                "description": "Indicates the type of entity this policy is inherited from.",
                                "readOnly": true,
                                "enum": [
                                  "account",
                                  "template",
                                  "tier_template"
                                ],
                                "api_fieldname": "inherited_type",
                                "entity_fieldname": "inherited_type",
                                "_key": "inherited_type"
                              },
                              {
                                "type": "string",
                                "example": "/v3/update-campaign",
                                "description": "Resource that is protected by this policy.",
                                "api_fieldname": "resource",
                                "entity_fieldname": "resource",
                                "_key": "resource"
                              }
                            ],
                            "description": "Represents a feature policy. Either the feature or the resource must be specified.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "policy"
                            }
                          },
                          "_key": "policies"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "CB1 9NJ",
                          "description": "The postal code part of the postal address.",
                          "_key": "postal_code"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "Subscription paid.",
                          "description": "A note with the reason for account status update.",
                          "_key": "reason"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "ARM-INT-0001",
                          "description": "A reference note for updating the status of the account.",
                          "_key": "reference_note"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "example": "sales@arm.com",
                          "x-nullable": true,
                          "description": "Email address of the sales contact.",
                          "_key": "sales_contact"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": " ",
                          "description": "The state part of the postal address.",
                          "_key": "state"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "The status of the account.",
                          "enum": [
                            "ENROLLING",
                            "ACTIVE",
                            "RESTRICTED",
                            "SUSPENDED"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "List of sub accounts. Not available for developer users.",
                          "items": [],
                          "_key": "sub_accounts"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "01619571e7160242ac12000600000000",
                          "description": "Account template ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "template_id"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                          "_key": "tier"
                        },
                        {
                          "type": "array",
                          "description": "Tier history for this account.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "example": "1",
                                "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                                "_key": "tier"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updatedAt"
                              }
                            ]
                          },
                          "_key": "tier_history"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Time when upgraded to commercial account in UTC format RFC3339.",
                          "_key": "upgraded_at"
                        }
                      ],
                      "description": "Represents an account in requests and responses."
                    },
                    "api_fieldname": "sub_accounts",
                    "entity_fieldname": "sub_accounts",
                    "_key": "sub_accounts"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "01619571e7160242ac12000600000000",
                    "description": "Account template ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "template_id",
                    "entity_fieldname": "template_id",
                    "_key": "template_id"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                    "api_fieldname": "tier",
                    "entity_fieldname": "tier",
                    "_key": "tier"
                  },
                  {
                    "type": "array",
                    "description": "Tier history for this account.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "1",
                          "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                          "_key": "tier"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updatedAt"
                        }
                      ]
                    },
                    "api_fieldname": "tier_history",
                    "entity_fieldname": "tier_history",
                    "_key": "tier_history"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Time when upgraded to commercial account in UTC format RFC3339.",
                    "api_fieldname": "upgraded_at",
                    "entity_fieldname": "upgraded_at",
                    "_key": "upgraded_at"
                  }
                ],
                "description": "Represents an account in requests and responses."
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Account with the given ID not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}",
          "summary": "Get account information.",
          "return_type": "account",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "account"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "sub_accounts",
            "created_at",
            "updated_at",
            "parent_id",
            "display_name",
            "company",
            "country",
            "address_line1",
            "address_line2",
            "city",
            "state",
            "postal_code",
            "contact",
            "email",
            "phone_number",
            "aliases",
            "tier",
            "status",
            "upgraded_at",
            "limits",
            "policies",
            "template_id",
            "reason",
            "end_market",
            "idle_timeout",
            "password_policy",
            "reference_note",
            "custom_fields",
            "mfa_status",
            "notification_emails",
            "sales_contact",
            "expiration_warning_threshold",
            "contract_number",
            "customer_number",
            "parent_account",
            "expiration",
            "limitations",
            "password_recovery_expiration",
            "business_model",
            "business_model_history",
            "tier_history"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "account_id": "id"
          },
          "operation_id": "getAccountInfo",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Retrieve an array of trusted certificates.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "id"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "account_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "trusted_certificates",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "certificate",
                        "certificate_fingerprint",
                        "etag",
                        "id",
                        "issuer",
                        "name",
                        "object",
                        "service",
                        "subject",
                        "validity"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
                          "description": "X509.v3 trusted certificate in PEM format.",
                          "_key": "certificate"
                        },
                        {
                          "type": "string",
                          "example": "a10fb2c8ba90e6de927bd0ae391dcc38f6115685de2d7024712af37ead0608f1",
                          "description": "A SHA-256 fingerprint of the certificate.",
                          "_key": "certificate_fingerprint"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "maxLength": 500,
                          "x-nullable": true,
                          "example": "Certificate created by me.",
                          "description": "Human readable description of this certificate.",
                          "_key": "description"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 1,
                          "description": "Device execution mode where 1 means a developer certificate.",
                          "_key": "device_execution_mode"
                        },
                        {
                          "type": "boolean",
                          "example": false,
                          "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
                          "x-deprecation": {
                            "issued_at": "2020-11-01T00:00:00+00:00",
                            "end_of_life_at": "2021-11-01T00:00:00+00:00",
                            "comment": "This field is deprecated, do not use it anymore.",
                            "links": []
                          },
                          "_key": "enrollment_mode"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571d01d0242ac12000600000000",
                          "description": "Entity ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "CN=issuer",
                          "description": "Issuer of the certificate.",
                          "_key": "issuer"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "My certificate",
                          "description": "Certificate name.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'trusted-cert'",
                          "enum": [
                            "trusted-cert"
                          ],
                          "_key": "object"
                        },
                        {
                          "x-nullable": true,
                          "type": "string",
                          "example": "01619571dad80242ac12000600000000",
                          "description": "The ID of the owner.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "owner_id"
                        },
                        {
                          "type": "string",
                          "description": "Service name where the certificate is used.",
                          "enum": [
                            "lwm2m",
                            "bootstrap"
                          ],
                          "_key": "service"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "Status of the certificate.",
                          "enum": [
                            "ACTIVE",
                            "INACTIVE"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "string",
                          "example": "CN=subject",
                          "description": "Subject of the certificate.",
                          "_key": "subject"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "This read-only flag indicates whether the certificate is valid or not.",
                          "readOnly": true,
                          "_key": "valid"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2038-02-14T15:24:14Z",
                          "description": "Expiration time in UTC formatted as RFC3339.",
                          "_key": "validity"
                        }
                      ],
                      "description": "Represents a trusted certificate in responses.",
                      "foreign_key": {
                        "group": "Security",
                        "entity": "trusted_certificate"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "trusted_certificate_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Security",
                  "entity": "trusted_certificate"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden, only available for administrators of commercial accounts.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account with the given ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/trusted-certificates",
          "summary": "Get trusted certificates.",
          "return_type": "paginated_response(subtenant_trusted_certificate)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "subtenant_trusted_certificate"
          },
          "x_filter": {
            "name": [
              "eq"
            ],
            "service": [
              "eq"
            ],
            "expire": [
              "eq"
            ],
            "device_execution_mode": [
              "eq",
              "neq"
            ],
            "owner": [
              "eq"
            ],
            "enrollment_mode": [
              "eq"
            ],
            "status": [
              "eq"
            ],
            "issuer": [
              "like"
            ],
            "subject": [
              "like"
            ],
            "certificate_fingerprint": [
              "eq"
            ],
            "valid": [
              "eq"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "sub_accounts",
            "total_count",
            "has_more",
            "data",
            "name__eq",
            "service__eq",
            "expire__eq",
            "device_execution_mode__eq",
            "device_execution_mode__neq",
            "owner__eq",
            "enrollment_mode__eq",
            "status__eq",
            "issuer__like",
            "subject__like",
            "certificate_fingerprint__eq",
            "valid__eq"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "account_id": "id"
          },
          "operation_id": "getAllAccountCertificates",
          "notes": "This lists the trusted certificates of the subtenant account.",
          "foreign_key": {
            "entity": "subtenant_trusted_certificate"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "trusted_certificates"
        },
        {
          "description": "Update an account.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id} \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{\"phone_number\": \"12345678\"}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "110 Fulbourn Rd",
              "description": "Postal address line 1.",
              "api_fieldname": "address_line1",
              "entity_fieldname": "address_line1",
              "parameter_fieldname": "address_line1",
              "in": "body",
              "required": false,
              "_key": "address_line1"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": " ",
              "description": "Postal address line 2.",
              "api_fieldname": "address_line2",
              "entity_fieldname": "address_line2",
              "parameter_fieldname": "address_line2",
              "in": "body",
              "required": false,
              "_key": "address_line2"
            },
            {
              "type": "array",
              "maxItems": 10,
              "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
              "items": {
                "type": "string",
                "pattern": "[\\w\\-._]{8,100}"
              },
              "api_fieldname": "aliases",
              "entity_fieldname": "aliases",
              "parameter_fieldname": "aliases",
              "in": "body",
              "required": false,
              "_key": "aliases"
            },
            {
              "type": "string",
              "default": "active_device_business_model",
              "example": "api_calls_1_business_model",
              "description": "Business model for this account. Manageable by the root admin only.",
              "enum": [
                "active_device_business_model",
                "api_calls_1_business_model"
              ],
              "api_fieldname": "business_model",
              "entity_fieldname": "business_model",
              "parameter_fieldname": "business_model",
              "in": "body",
              "required": false,
              "enum_reference": "account_business_model_enum",
              "_key": "business_model"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "Cambridge",
              "description": "The city part of the postal address.",
              "api_fieldname": "city",
              "entity_fieldname": "city",
              "parameter_fieldname": "city",
              "in": "body",
              "required": false,
              "_key": "city"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "ARM Holdings Plc",
              "description": "The name of the company used in billing.",
              "api_fieldname": "company",
              "entity_fieldname": "company",
              "parameter_fieldname": "company",
              "in": "body",
              "required": false,
              "_key": "company"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "J. Doe",
              "description": "The name of the contact person for this account.",
              "api_fieldname": "contact",
              "entity_fieldname": "contact",
              "parameter_fieldname": "contact",
              "in": "body",
              "required": false,
              "_key": "contact"
            },
            {
              "type": "string",
              "example": "1NX25_0001",
              "x-nullable": true,
              "description": "Contract number of the customer.",
              "api_fieldname": "contract_number",
              "entity_fieldname": "contract_number",
              "parameter_fieldname": "contract_number",
              "in": "body",
              "required": false,
              "_key": "contract_number"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "United Kingdom",
              "description": "The country part of the postal address.",
              "api_fieldname": "country",
              "entity_fieldname": "country",
              "parameter_fieldname": "country",
              "in": "body",
              "required": false,
              "_key": "country"
            },
            {
              "type": "object",
              "x-nullable": true,
              "description": "Account's custom properties as key-value pairs.",
              "additionalProperties": {
                "type": "string"
              },
              "api_fieldname": "custom_fields",
              "entity_fieldname": "custom_fields",
              "parameter_fieldname": "custom_fields",
              "in": "body",
              "required": false,
              "_key": "custom_fields"
            },
            {
              "type": "string",
              "example": "1NC25_0001",
              "x-nullable": true,
              "description": "Customer number of the customer.",
              "api_fieldname": "customer_number",
              "entity_fieldname": "customer_number",
              "parameter_fieldname": "customer_number",
              "in": "body",
              "required": false,
              "_key": "customer_number"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "ARM",
              "description": "The display name for the tenant account.",
              "api_fieldname": "display_name",
              "entity_fieldname": "display_name",
              "parameter_fieldname": "display_name",
              "in": "body",
              "required": false,
              "_key": "display_name"
            },
            {
              "pattern": "^(?=.{3,254}$).+\\@.+",
              "type": "string",
              "x-nullable": true,
              "example": "info@arm.com",
              "description": "The company email address for this account.",
              "api_fieldname": "email",
              "entity_fieldname": "email",
              "parameter_fieldname": "email",
              "in": "body",
              "required": false,
              "_key": "email"
            },
            {
              "type": "string",
              "example": "IT",
              "description": "Account end market.",
              "api_fieldname": "end_market",
              "entity_fieldname": "end_market",
              "parameter_fieldname": "end_market",
              "in": "body",
              "required": false,
              "_key": "end_market"
            },
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 180,
              "example": "180",
              "x-nullable": true,
              "description": "Indicates how many days (1-180) before account expiration a notification email is sent.",
              "api_fieldname": "expiration_warning_threshold",
              "entity_fieldname": "expiration_warning_threshold",
              "parameter_fieldname": "expiration_warning_threshold",
              "in": "body",
              "required": false,
              "_key": "expiration_warning_threshold"
            },
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "Account ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 120,
              "x-nullable": true,
              "example": "30",
              "description": "The reference token expiration time, in minutes, for this account.",
              "api_fieldname": "idle_timeout",
              "entity_fieldname": "idle_timeout",
              "parameter_fieldname": "idle_timeout",
              "in": "body",
              "required": false,
              "_key": "idle_timeout"
            },
            {
              "type": "string",
              "x-nullable": true,
              "description": "The enforcement status of multi-factor authentication, either `enforced` or `optional`.",
              "enum": [
                "enforced",
                "optional"
              ],
              "api_fieldname": "mfa_status",
              "entity_fieldname": "mfa_status",
              "parameter_fieldname": "mfa_status",
              "in": "body",
              "required": false,
              "enum_reference": "account_mfa_status_enum",
              "_key": "mfa_status"
            },
            {
              "type": "array",
              "x-nullable": true,
              "description": "A list of notification email addresses.",
              "items": {
                "pattern": "^(?=.{3,254}$).+\\@.+",
                "type": "string"
              },
              "api_fieldname": "notification_emails",
              "entity_fieldname": "notification_emails",
              "parameter_fieldname": "notification_emails",
              "in": "body",
              "required": false,
              "_key": "notification_emails"
            },
            {
              "type": "object",
              "required": false,
              "properties": [
                {
                  "type": "integer",
                  "minimum": 8,
                  "maximum": 512,
                  "example": "8",
                  "description": "Minimum length for the password.",
                  "api_fieldname": "minimum_length",
                  "entity_fieldname": "minimum_length",
                  "_key": "minimum_length"
                }
              ],
              "foreign_key": {
                "group": "Accounts",
                "entity": "password_policy"
              },
              "description": "The password policy for this account.",
              "x-nullable": true,
              "api_fieldname": "password_policy",
              "entity_fieldname": "password_policy",
              "parameter_fieldname": "password_policy",
              "in": "body",
              "_key": "password_policy"
            },
            {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 45,
              "description": "Indicates for how many minutes a password recovery email is valid.",
              "api_fieldname": "password_recovery_expiration",
              "entity_fieldname": "password_recovery_expiration",
              "parameter_fieldname": "password_recovery_expiration",
              "in": "body",
              "required": false,
              "_key": "password_recovery_expiration"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "+44 (1223) 400 400",
              "description": "The phone number of a company representative.",
              "api_fieldname": "phone_number",
              "entity_fieldname": "phone_number",
              "parameter_fieldname": "phone_number",
              "in": "body",
              "required": false,
              "_key": "phone_number"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": "CB1 9NJ",
              "description": "The postal code part of the postal address.",
              "api_fieldname": "postal_code",
              "entity_fieldname": "postal_code",
              "parameter_fieldname": "postal_code",
              "in": "body",
              "required": false,
              "_key": "postal_code"
            },
            {
              "pattern": "^(?=.{3,254}$).+\\@.+",
              "type": "string",
              "example": "sales@arm.com",
              "x-nullable": true,
              "description": "Email address of the sales contact.",
              "api_fieldname": "sales_contact",
              "entity_fieldname": "sales_contact",
              "parameter_fieldname": "sales_contact",
              "in": "body",
              "required": false,
              "_key": "sales_contact"
            },
            {
              "type": "string",
              "maxLength": 100,
              "x-nullable": true,
              "example": " ",
              "description": "The state part of the postal address.",
              "api_fieldname": "state",
              "entity_fieldname": "state",
              "parameter_fieldname": "state",
              "in": "body",
              "required": false,
              "_key": "state"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "end_market",
                  "etag",
                  "id",
                  "object",
                  "status",
                  "tier"
                ],
                "properties": [
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "110 Fulbourn Rd",
                    "description": "Postal address line 1.",
                    "api_fieldname": "address_line1",
                    "entity_fieldname": "address_line1",
                    "_key": "address_line1"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": " ",
                    "description": "Postal address line 2.",
                    "api_fieldname": "address_line2",
                    "entity_fieldname": "address_line2",
                    "_key": "address_line2"
                  },
                  {
                    "type": "array",
                    "maxItems": 10,
                    "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
                    "items": {
                      "type": "string",
                      "pattern": "[\\w\\-._]{8,100}"
                    },
                    "api_fieldname": "aliases",
                    "entity_fieldname": "aliases",
                    "_key": "aliases"
                  },
                  {
                    "type": "string",
                    "default": "active_device_business_model",
                    "example": "api_calls_1_business_model",
                    "description": "Business model for this account. Manageable by the root admin only.",
                    "enum": [
                      "active_device_business_model",
                      "api_calls_1_business_model"
                    ],
                    "api_fieldname": "business_model",
                    "entity_fieldname": "business_model",
                    "_key": "business_model"
                  },
                  {
                    "type": "array",
                    "description": "Business model history for this account.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "default": "active_device_business_model",
                          "example": "api_calls_1_business_model",
                          "description": "Business model for this account. Manageable by the root admin only.",
                          "enum": [
                            "active_device_business_model",
                            "api_calls_1_business_model"
                          ],
                          "_key": "business_model"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ]
                    },
                    "api_fieldname": "business_model_history",
                    "entity_fieldname": "business_model_history",
                    "_key": "business_model_history"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "Cambridge",
                    "description": "The city part of the postal address.",
                    "api_fieldname": "city",
                    "entity_fieldname": "city",
                    "_key": "city"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "ARM Holdings Plc",
                    "description": "The name of the company used in billing.",
                    "api_fieldname": "company",
                    "entity_fieldname": "company",
                    "_key": "company"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "J. Doe",
                    "description": "The name of the contact person for this account.",
                    "api_fieldname": "contact",
                    "entity_fieldname": "contact",
                    "_key": "contact"
                  },
                  {
                    "type": "string",
                    "example": "1NX25_0001",
                    "x-nullable": true,
                    "description": "Contract number of the customer.",
                    "api_fieldname": "contract_number",
                    "entity_fieldname": "contract_number",
                    "_key": "contract_number"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "United Kingdom",
                    "description": "The country part of the postal address.",
                    "api_fieldname": "country",
                    "entity_fieldname": "country",
                    "_key": "country"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "description": "Account's custom properties as key-value pairs.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "custom_fields",
                    "entity_fieldname": "custom_fields",
                    "_key": "custom_fields"
                  },
                  {
                    "type": "string",
                    "example": "1NC25_0001",
                    "x-nullable": true,
                    "description": "Customer number of the customer.",
                    "api_fieldname": "customer_number",
                    "entity_fieldname": "customer_number",
                    "_key": "customer_number"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "ARM",
                    "description": "The display name for the tenant account.",
                    "api_fieldname": "display_name",
                    "entity_fieldname": "display_name",
                    "_key": "display_name"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "x-nullable": true,
                    "example": "info@arm.com",
                    "description": "The company email address for this account.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "_key": "email"
                  },
                  {
                    "type": "string",
                    "example": "IT",
                    "description": "Account end market.",
                    "api_fieldname": "end_market",
                    "entity_fieldname": "end_market",
                    "_key": "end_market"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "format": "date-time",
                    "description": "Expiration time of the account, as UTC time RFC3339.",
                    "api_fieldname": "expiration",
                    "entity_fieldname": "expiration",
                    "_key": "expiration"
                  },
                  {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 180,
                    "example": "180",
                    "x-nullable": true,
                    "description": "Indicates how many days (1-180) before account expiration a notification email is sent.",
                    "api_fieldname": "expiration_warning_threshold",
                    "entity_fieldname": "expiration_warning_threshold",
                    "_key": "expiration_warning_threshold"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "Account ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 120,
                    "x-nullable": true,
                    "example": "30",
                    "description": "The reference token expiration time, in minutes, for this account.",
                    "api_fieldname": "idle_timeout",
                    "entity_fieldname": "idle_timeout",
                    "_key": "idle_timeout"
                  },
                  {
                    "type": "array",
                    "description": "List of account limitation objects.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "integer",
                          "format": "int32",
                          "description": "Billing period of the account limitation.",
                          "_key": "billing_period"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "description": "Description of the account limitation.",
                          "readOnly": true,
                          "_key": "description"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571d01d0242ac12000600000000",
                          "description": "Entity ID.",
                          "_key": "id"
                        },
                        {
                          "type": "boolean",
                          "description": "Flag indicating whether this limitation is inherited.",
                          "readOnly": true,
                          "_key": "inherited"
                        },
                        {
                          "type": "string",
                          "description": "Indicates where this limit is inherited from.",
                          "readOnly": true,
                          "_key": "inherited_from"
                        },
                        {
                          "type": "string",
                          "description": "Indicates the type of the entity where the limitation is inherited from.",
                          "readOnly": true,
                          "_key": "inherited_type"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "description": "The value of the limit.",
                          "_key": "limit"
                        },
                        {
                          "type": "string",
                          "description": "Name of the account limitation.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'limitation'",
                          "enum": [
                            "user",
                            "api-key",
                            "group",
                            "account",
                            "account_template",
                            "trusted_cert",
                            "list",
                            "error",
                            "agreement",
                            "signed_agreement",
                            "policy",
                            "limitation",
                            "identity_provider",
                            "user_session",
                            "user_invitation",
                            "notification_entry",
                            "branding_color",
                            "branding_image"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "description": "Quota of the account limitation.",
                          "_key": "quota"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ],
                      "description": "This object represents an account limitation."
                    },
                    "api_fieldname": "limitations",
                    "entity_fieldname": "limitations",
                    "_key": "limitations"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "x-deprecation": {
                      "issued_at": "2019-08-27T12:03:58+00:00",
                      "end_of_life_at": "2020-08-27T12:03:58+00:00",
                      "comment": "Replaced by the limitations parameter."
                    },
                    "description": "DEPRECATED: Replaced by the limitations parameter.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "limits",
                    "entity_fieldname": "limits",
                    "_key": "limits"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The enforcement status of multi-factor authentication, either `enforced` or `optional`.",
                    "enum": [
                      "enforced",
                      "optional"
                    ],
                    "api_fieldname": "mfa_status",
                    "entity_fieldname": "mfa_status",
                    "_key": "mfa_status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "A list of notification email addresses.",
                    "items": {
                      "pattern": "^(?=.{3,254}$).+\\@.+",
                      "type": "string"
                    },
                    "api_fieldname": "notification_emails",
                    "entity_fieldname": "notification_emails",
                    "_key": "notification_emails"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `account`.",
                    "enum": [
                      "account"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "pattern": "^(?=.{3,254}$).+\\@.+",
                        "type": "string",
                        "example": "info@arm.com",
                        "description": "The email address of the admin user who is the contact person of the parent account.",
                        "api_fieldname": "admin_email",
                        "entity_fieldname": "admin_email",
                        "_key": "admin_email"
                      },
                      {
                        "type": "string",
                        "maxLength": 100,
                        "example": "J. Doe",
                        "description": "The name of the admin user who is the contact person of the parent account.",
                        "api_fieldname": "admin_name",
                        "entity_fieldname": "admin_name",
                        "_key": "admin_name"
                      },
                      {
                        "type": "string",
                        "example": "01619571dad80242ac12000600000000",
                        "description": "The ID of the parent account.",
                        "pattern": "[a-f0-9]{32}",
                        "api_fieldname": "id",
                        "entity_fieldname": "id",
                        "_key": "id"
                      }
                    ],
                    "description": "Represents parent account contact details in responses.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "parent_account"
                    },
                    "x-nullable": true,
                    "api_fieldname": "parent_account",
                    "entity_fieldname": "parent_account",
                    "_key": "parent_account"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "01619571dad80242ac12000600000000",
                    "description": "The ID of the parent account, if any.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "parent_id",
                    "entity_fieldname": "parent_id",
                    "_key": "parent_id"
                  },
                  {
                    "type": "object",
                    "required": [
                      "minimum_length"
                    ],
                    "properties": [
                      {
                        "type": "integer",
                        "minimum": 8,
                        "maximum": 512,
                        "example": "8",
                        "description": "Minimum length for the password.",
                        "api_fieldname": "minimum_length",
                        "entity_fieldname": "minimum_length",
                        "_key": "minimum_length"
                      }
                    ],
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "password_policy"
                    },
                    "description": "The password policy for this account.",
                    "x-nullable": true,
                    "api_fieldname": "password_policy",
                    "entity_fieldname": "password_policy",
                    "_key": "password_policy"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 45,
                    "description": "Indicates for how many minutes a password recovery email is valid.",
                    "api_fieldname": "password_recovery_expiration",
                    "entity_fieldname": "password_recovery_expiration",
                    "_key": "password_recovery_expiration"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "+44 (1223) 400 400",
                    "description": "The phone number of a company representative.",
                    "api_fieldname": "phone_number",
                    "entity_fieldname": "phone_number",
                    "_key": "phone_number"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "List of policies if requested.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "GET",
                          "description": "Comma-separated list of actions, empty string represents all actions.",
                          "api_fieldname": "action",
                          "entity_fieldname": "action",
                          "_key": "action"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "True or false controlling whether an action is allowed or not.",
                          "api_fieldname": "allow",
                          "entity_fieldname": "allow",
                          "_key": "allow"
                        },
                        {
                          "type": "string",
                          "example": "update-campaigns",
                          "description": "Feature name corresponding to this policy.",
                          "api_fieldname": "feature",
                          "entity_fieldname": "feature",
                          "_key": "feature"
                        },
                        {
                          "type": "boolean",
                          "example": false,
                          "description": "Flag indicating whether this feature is inherited or overwritten specifically.",
                          "readOnly": true,
                          "api_fieldname": "inherited",
                          "entity_fieldname": "inherited",
                          "_key": "inherited"
                        },
                        {
                          "type": "string",
                          "example": "016ada3ec2d46665bf66e32e00000000",
                          "description": "An ID indicating where this policy is inherited from.",
                          "pattern": "[a-f0-9]{32}",
                          "readOnly": true,
                          "api_fieldname": "inherited_from",
                          "entity_fieldname": "inherited_from",
                          "_key": "inherited_from"
                        },
                        {
                          "type": "string",
                          "example": "account",
                          "description": "Indicates the type of entity this policy is inherited from.",
                          "readOnly": true,
                          "enum": [
                            "account",
                            "template",
                            "tier_template"
                          ],
                          "api_fieldname": "inherited_type",
                          "entity_fieldname": "inherited_type",
                          "_key": "inherited_type"
                        },
                        {
                          "type": "string",
                          "example": "/v3/update-campaign",
                          "description": "Resource that is protected by this policy.",
                          "api_fieldname": "resource",
                          "entity_fieldname": "resource",
                          "_key": "resource"
                        }
                      ],
                      "description": "Represents a feature policy. Either the feature or the resource must be specified.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "policy"
                      }
                    },
                    "api_fieldname": "policies",
                    "entity_fieldname": "policies",
                    "_key": "policies"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": "CB1 9NJ",
                    "description": "The postal code part of the postal address.",
                    "api_fieldname": "postal_code",
                    "entity_fieldname": "postal_code",
                    "_key": "postal_code"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "Subscription paid.",
                    "description": "A note with the reason for account status update.",
                    "api_fieldname": "reason",
                    "entity_fieldname": "reason",
                    "_key": "reason"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "ARM-INT-0001",
                    "description": "A reference note for updating the status of the account.",
                    "api_fieldname": "reference_note",
                    "entity_fieldname": "reference_note",
                    "_key": "reference_note"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "sales@arm.com",
                    "x-nullable": true,
                    "description": "Email address of the sales contact.",
                    "api_fieldname": "sales_contact",
                    "entity_fieldname": "sales_contact",
                    "_key": "sales_contact"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "x-nullable": true,
                    "example": " ",
                    "description": "The state part of the postal address.",
                    "api_fieldname": "state",
                    "entity_fieldname": "state",
                    "_key": "state"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the account.",
                    "enum": [
                      "ENROLLING",
                      "ACTIVE",
                      "RESTRICTED",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "List of sub accounts. Not available for developer users.",
                    "items": {
                      "type": "object",
                      "required": [
                        "end_market",
                        "etag",
                        "id",
                        "object",
                        "status",
                        "tier"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "110 Fulbourn Rd",
                          "description": "Postal address line 1.",
                          "_key": "address_line1"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": " ",
                          "description": "Postal address line 2.",
                          "_key": "address_line2"
                        },
                        {
                          "type": "array",
                          "maxItems": 10,
                          "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
                          "items": {
                            "type": "string",
                            "pattern": "[\\w\\-._]{8,100}"
                          },
                          "_key": "aliases"
                        },
                        {
                          "type": "string",
                          "default": "active_device_business_model",
                          "example": "api_calls_1_business_model",
                          "description": "Business model for this account. Manageable by the root admin only.",
                          "enum": [
                            "active_device_business_model",
                            "api_calls_1_business_model"
                          ],
                          "_key": "business_model"
                        },
                        {
                          "type": "array",
                          "description": "Business model history for this account.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "default": "active_device_business_model",
                                "example": "api_calls_1_business_model",
                                "description": "Business model for this account. Manageable by the root admin only.",
                                "enum": [
                                  "active_device_business_model",
                                  "api_calls_1_business_model"
                                ],
                                "_key": "business_model"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updated_at"
                              }
                            ]
                          },
                          "_key": "business_model_history"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "Cambridge",
                          "description": "The city part of the postal address.",
                          "_key": "city"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "ARM Holdings Plc",
                          "description": "The name of the company used in billing.",
                          "_key": "company"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "J. Doe",
                          "description": "The name of the contact person for this account.",
                          "_key": "contact"
                        },
                        {
                          "type": "string",
                          "example": "1NX25_0001",
                          "x-nullable": true,
                          "description": "Contract number of the customer.",
                          "_key": "contract_number"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "United Kingdom",
                          "description": "The country part of the postal address.",
                          "_key": "country"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "description": "Account's custom properties as key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "custom_fields"
                        },
                        {
                          "type": "string",
                          "example": "1NC25_0001",
                          "x-nullable": true,
                          "description": "Customer number of the customer.",
                          "_key": "customer_number"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "ARM",
                          "description": "The display name for the tenant account.",
                          "_key": "display_name"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "x-nullable": true,
                          "example": "info@arm.com",
                          "description": "The company email address for this account.",
                          "_key": "email"
                        },
                        {
                          "type": "string",
                          "example": "IT",
                          "description": "Account end market.",
                          "_key": "end_market"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "format": "date-time",
                          "description": "Expiration time of the account, as UTC time RFC3339.",
                          "_key": "expiration"
                        },
                        {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 180,
                          "example": "180",
                          "x-nullable": true,
                          "description": "Indicates how many days (1-180) before account expiration a notification email is sent.",
                          "_key": "expiration_warning_threshold"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "Account ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 120,
                          "x-nullable": true,
                          "example": "30",
                          "description": "The reference token expiration time, in minutes, for this account.",
                          "_key": "idle_timeout"
                        },
                        {
                          "type": "array",
                          "description": "List of account limitation objects.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "Billing period of the account limitation.",
                                "_key": "billing_period"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-13T09:35:20Z",
                                "description": "Creation UTC time RFC3339.",
                                "_key": "created_at"
                              },
                              {
                                "type": "string",
                                "description": "Description of the account limitation.",
                                "readOnly": true,
                                "_key": "description"
                              },
                              {
                                "type": "string",
                                "example": "1",
                                "description": "API resource entity version.",
                                "_key": "etag"
                              },
                              {
                                "type": "string",
                                "example": "01619571d01d0242ac12000600000000",
                                "description": "Entity ID.",
                                "_key": "id"
                              },
                              {
                                "type": "boolean",
                                "description": "Flag indicating whether this limitation is inherited.",
                                "readOnly": true,
                                "_key": "inherited"
                              },
                              {
                                "type": "string",
                                "description": "Indicates where this limit is inherited from.",
                                "readOnly": true,
                                "_key": "inherited_from"
                              },
                              {
                                "type": "string",
                                "description": "Indicates the type of the entity where the limitation is inherited from.",
                                "readOnly": true,
                                "_key": "inherited_type"
                              },
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value of the limit.",
                                "_key": "limit"
                              },
                              {
                                "type": "string",
                                "description": "Name of the account limitation.",
                                "_key": "name"
                              },
                              {
                                "type": "string",
                                "description": "Entity name: always 'limitation'",
                                "enum": [
                                  "user",
                                  "api-key",
                                  "group",
                                  "account",
                                  "account_template",
                                  "trusted_cert",
                                  "list",
                                  "error",
                                  "agreement",
                                  "signed_agreement",
                                  "policy",
                                  "limitation",
                                  "identity_provider",
                                  "user_session",
                                  "user_invitation",
                                  "notification_entry",
                                  "branding_color",
                                  "branding_image"
                                ],
                                "_key": "object"
                              },
                              {
                                "type": "integer",
                                "format": "int32",
                                "description": "Quota of the account limitation.",
                                "_key": "quota"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updated_at"
                              }
                            ],
                            "description": "This object represents an account limitation."
                          },
                          "_key": "limitations"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "x-deprecation": {
                            "issued_at": "2019-08-27T12:03:58+00:00",
                            "end_of_life_at": "2020-08-27T12:03:58+00:00",
                            "comment": "Replaced by the limitations parameter."
                          },
                          "description": "DEPRECATED: Replaced by the limitations parameter.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "limits"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "description": "The enforcement status of multi-factor authentication, either `enforced` or `optional`.",
                          "enum": [
                            "enforced",
                            "optional"
                          ],
                          "_key": "mfa_status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "A list of notification email addresses.",
                          "items": {
                            "pattern": "^(?=.{3,254}$).+\\@.+",
                            "type": "string"
                          },
                          "_key": "notification_emails"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `account`.",
                          "enum": [
                            "account"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "object",
                          "properties": [
                            {
                              "pattern": "^(?=.{3,254}$).+\\@.+",
                              "type": "string",
                              "example": "info@arm.com",
                              "description": "The email address of the admin user who is the contact person of the parent account.",
                              "api_fieldname": "admin_email",
                              "entity_fieldname": "admin_email",
                              "_key": "admin_email"
                            },
                            {
                              "type": "string",
                              "maxLength": 100,
                              "example": "J. Doe",
                              "description": "The name of the admin user who is the contact person of the parent account.",
                              "api_fieldname": "admin_name",
                              "entity_fieldname": "admin_name",
                              "_key": "admin_name"
                            },
                            {
                              "type": "string",
                              "example": "01619571dad80242ac12000600000000",
                              "description": "The ID of the parent account.",
                              "pattern": "[a-f0-9]{32}",
                              "api_fieldname": "id",
                              "entity_fieldname": "id",
                              "_key": "id"
                            }
                          ],
                          "description": "Represents parent account contact details in responses.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "parent_account"
                          },
                          "x-nullable": true,
                          "_key": "parent_account"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "01619571dad80242ac12000600000000",
                          "description": "The ID of the parent account, if any.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "parent_id"
                        },
                        {
                          "type": "object",
                          "required": [
                            "minimum_length"
                          ],
                          "properties": [
                            {
                              "type": "integer",
                              "minimum": 8,
                              "maximum": 512,
                              "example": "8",
                              "description": "Minimum length for the password.",
                              "api_fieldname": "minimum_length",
                              "entity_fieldname": "minimum_length",
                              "_key": "minimum_length"
                            }
                          ],
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "password_policy"
                          },
                          "description": "The password policy for this account.",
                          "x-nullable": true,
                          "_key": "password_policy"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "maximum": 45,
                          "description": "Indicates for how many minutes a password recovery email is valid.",
                          "_key": "password_recovery_expiration"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "+44 (1223) 400 400",
                          "description": "The phone number of a company representative.",
                          "_key": "phone_number"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "List of policies if requested.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "example": "GET",
                                "description": "Comma-separated list of actions, empty string represents all actions.",
                                "api_fieldname": "action",
                                "entity_fieldname": "action",
                                "_key": "action"
                              },
                              {
                                "type": "boolean",
                                "example": true,
                                "description": "True or false controlling whether an action is allowed or not.",
                                "api_fieldname": "allow",
                                "entity_fieldname": "allow",
                                "_key": "allow"
                              },
                              {
                                "type": "string",
                                "example": "update-campaigns",
                                "description": "Feature name corresponding to this policy.",
                                "api_fieldname": "feature",
                                "entity_fieldname": "feature",
                                "_key": "feature"
                              },
                              {
                                "type": "boolean",
                                "example": false,
                                "description": "Flag indicating whether this feature is inherited or overwritten specifically.",
                                "readOnly": true,
                                "api_fieldname": "inherited",
                                "entity_fieldname": "inherited",
                                "_key": "inherited"
                              },
                              {
                                "type": "string",
                                "example": "016ada3ec2d46665bf66e32e00000000",
                                "description": "An ID indicating where this policy is inherited from.",
                                "pattern": "[a-f0-9]{32}",
                                "readOnly": true,
                                "api_fieldname": "inherited_from",
                                "entity_fieldname": "inherited_from",
                                "_key": "inherited_from"
                              },
                              {
                                "type": "string",
                                "example": "account",
                                "description": "Indicates the type of entity this policy is inherited from.",
                                "readOnly": true,
                                "enum": [
                                  "account",
                                  "template",
                                  "tier_template"
                                ],
                                "api_fieldname": "inherited_type",
                                "entity_fieldname": "inherited_type",
                                "_key": "inherited_type"
                              },
                              {
                                "type": "string",
                                "example": "/v3/update-campaign",
                                "description": "Resource that is protected by this policy.",
                                "api_fieldname": "resource",
                                "entity_fieldname": "resource",
                                "_key": "resource"
                              }
                            ],
                            "description": "Represents a feature policy. Either the feature or the resource must be specified.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "policy"
                            }
                          },
                          "_key": "policies"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": "CB1 9NJ",
                          "description": "The postal code part of the postal address.",
                          "_key": "postal_code"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "Subscription paid.",
                          "description": "A note with the reason for account status update.",
                          "_key": "reason"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "ARM-INT-0001",
                          "description": "A reference note for updating the status of the account.",
                          "_key": "reference_note"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "example": "sales@arm.com",
                          "x-nullable": true,
                          "description": "Email address of the sales contact.",
                          "_key": "sales_contact"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "x-nullable": true,
                          "example": " ",
                          "description": "The state part of the postal address.",
                          "_key": "state"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "The status of the account.",
                          "enum": [
                            "ENROLLING",
                            "ACTIVE",
                            "RESTRICTED",
                            "SUSPENDED"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "List of sub accounts. Not available for developer users.",
                          "items": [],
                          "_key": "sub_accounts"
                        },
                        {
                          "type": "string",
                          "x-nullable": true,
                          "example": "01619571e7160242ac12000600000000",
                          "description": "Account template ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "template_id"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                          "_key": "tier"
                        },
                        {
                          "type": "array",
                          "description": "Tier history for this account.",
                          "items": {
                            "type": "object",
                            "properties": [
                              {
                                "type": "string",
                                "example": "1",
                                "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                                "_key": "tier"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T15:24:14Z",
                                "description": "Last update UTC time RFC3339.",
                                "_key": "updatedAt"
                              }
                            ]
                          },
                          "_key": "tier_history"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Time when upgraded to commercial account in UTC format RFC3339.",
                          "_key": "upgraded_at"
                        }
                      ],
                      "description": "Represents an account in requests and responses."
                    },
                    "api_fieldname": "sub_accounts",
                    "entity_fieldname": "sub_accounts",
                    "_key": "sub_accounts"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "example": "01619571e7160242ac12000600000000",
                    "description": "Account template ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "template_id",
                    "entity_fieldname": "template_id",
                    "_key": "template_id"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                    "api_fieldname": "tier",
                    "entity_fieldname": "tier",
                    "_key": "tier"
                  },
                  {
                    "type": "array",
                    "description": "Tier history for this account.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "1",
                          "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                          "_key": "tier"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updatedAt"
                        }
                      ]
                    },
                    "api_fieldname": "tier_history",
                    "entity_fieldname": "tier_history",
                    "_key": "tier_history"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Time when upgraded to commercial account in UTC format RFC3339.",
                    "api_fieldname": "upgraded_at",
                    "entity_fieldname": "upgraded_at",
                    "_key": "upgraded_at"
                  }
                ],
                "description": "Represents an account in requests and responses."
              },
              "_key": "200"
            },
            {
              "description": "Error in input data format.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Account with the given ID not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            },
            {
              "description": "Account with the specified new alias exists already.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/accounts/{account_id}",
          "summary": "Update attributes of an existing account.",
          "return_type": "account",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "account"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "sub_accounts",
            "created_at",
            "updated_at",
            "parent_id",
            "tier",
            "status",
            "upgraded_at",
            "limits",
            "policies",
            "template_id",
            "reason",
            "reference_note",
            "parent_account",
            "expiration",
            "limitations",
            "business_model_history",
            "tier_history"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "account_id": "id"
          },
          "operation_id": "updateAccount",
          "additional_operations": [
            {
              "operation_id": "updateMyAccount",
              "notes": "After retrieving the resource using the `me` method, it can modified using using this SDK method."
            }
          ],
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        },
        {
          "description": "Retrieve an array of active user invitations.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "id"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "account_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "user_invitations",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "email",
                        "etag",
                        "id",
                        "object",
                        "user_id"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account the user is invited to.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "example": "friend@arm.com",
                          "description": "Email address of the invited user.",
                          "_key": "email"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Invitation expiration as UTC time RFC3339.",
                          "_key": "expiration"
                        },
                        {
                          "type": "array",
                          "description": "A list of IDs of the groups the user is invited to.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "groups"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e89242ac12000600000000",
                          "description": "The ID of the invitation.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "array",
                          "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                          "x-nullable": true,
                          "items": {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "example": "fed/user_007",
                                "description": "The ID of the user in the identity provider's service.",
                                "readOnly": true,
                                "api_fieldname": "foreign_id",
                                "entity_fieldname": "foreign_id",
                                "_key": "foreign_id"
                              },
                              {
                                "type": "string",
                                "example": "01619571f3c00242ac12000600000000",
                                "description": "ID of the identity provider.",
                                "readOnly": false,
                                "_override": true,
                                "api_fieldname": "id",
                                "entity_fieldname": "id",
                                "_key": "id"
                              },
                              {
                                "type": "string",
                                "example": "Pelion",
                                "readOnly": false,
                                "description": "Name of the identity provider.",
                                "_override": true,
                                "api_fieldname": "name",
                                "entity_fieldname": "name",
                                "_key": "name"
                              },
                              {
                                "type": "string",
                                "description": "Identity provider type.",
                                "example": "NATIVE",
                                "readOnly": true,
                                "enum": [
                                  "NATIVE",
                                  "MBED",
                                  "SAML2",
                                  "OIDC"
                                ],
                                "api_fieldname": "type",
                                "entity_fieldname": "login_profile_type",
                                "_key": "type"
                              }
                            ],
                            "description": "Represents a user login profile in Device Management.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "login_profile"
                            }
                          },
                          "_key": "login_profiles"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'user-invitation'",
                          "enum": [
                            "user-invitation"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the invited user.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "user_id"
                        }
                      ],
                      "description": "Represents an user invitation in responses.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "user_invitation"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "user_invitation_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "user_invitation"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/user-invitations",
          "summary": "Get user invitations.",
          "return_type": "paginated_response(subtenant_user_invitation)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "subtenant_user_invitation"
          },
          "x_filter": {
            "login_profiles": [
              "eq"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "sub_accounts",
            "total_count",
            "has_more",
            "data",
            "login_profiles__eq"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "account_id": "id"
          },
          "operation_id": "getAllAccountInvitations",
          "notes": "This lists the user invitations of the subtenant account.",
          "foreign_key": {
            "entity": "subtenant_user_invitation"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "user_invitations"
        },
        {
          "description": "Retrieve an array of users.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "id"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "account_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "users",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "email",
                        "etag",
                        "id",
                        "object",
                        "status"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "array",
                          "description": "List of active user sessions.",
                          "items": {
                            "type": "object",
                            "required": [
                              "account_id",
                              "ip_address",
                              "login_time",
                              "object",
                              "reference_token",
                              "user_agent"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "example": "01619571e2e90242ac12000600000000",
                                "description": "The UUID of the account.",
                                "pattern": "[a-f0-9]{32}",
                                "api_fieldname": "account_id",
                                "entity_fieldname": "account_id",
                                "_key": "account_id"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-13T09:35:20Z",
                                "description": "Creation UTC time RFC3339.",
                                "api_fieldname": "created_at",
                                "entity_fieldname": "created_at",
                                "_key": "created_at"
                              },
                              {
                                "type": "string",
                                "example": "127.0.0.1",
                                "description": "IP address of the client.",
                                "api_fieldname": "ip_address",
                                "entity_fieldname": "ip_address",
                                "_key": "ip_address"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T17:52:07Z",
                                "description": "The login time of the user.",
                                "api_fieldname": "login_time",
                                "entity_fieldname": "login_time",
                                "_key": "login_time"
                              },
                              {
                                "type": "string",
                                "description": "Entity name: always 'user-session'",
                                "enum": [
                                  "user-session"
                                ],
                                "api_fieldname": "object",
                                "entity_fieldname": "object",
                                "_key": "object"
                              },
                              {
                                "type": "string",
                                "example": "rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk",
                                "description": "The reference token.",
                                "api_fieldname": "reference_token",
                                "entity_fieldname": "reference_token",
                                "_key": "reference_token"
                              },
                              {
                                "type": "string",
                                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                                "description": "User Agent header from the login request.",
                                "api_fieldname": "user_agent",
                                "entity_fieldname": "user_agent",
                                "_key": "user_agent"
                              }
                            ],
                            "description": "Represents an active user session.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "active_session"
                            }
                          },
                          "_key": "active_sessions"
                        },
                        {
                          "type": "string",
                          "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
                          "description": "Address.",
                          "x-nullable": true,
                          "_key": "address"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727683,
                          "description": "A timestamp of the user creation in the storage, in milliseconds.",
                          "_key": "creation_time"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "description": "User's account-specific custom properties. The value is a string.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "custom_fields"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "example": "user@arm.com",
                          "description": "The email address.",
                          "_key": "email"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating whether the user's email address has been verified or not.",
                          "_key": "email_verified"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "User Doe",
                          "x-nullable": true,
                          "description": "The full name of the user.",
                          "_key": "full_name"
                        },
                        {
                          "type": "array",
                          "description": "A list of IDs of the groups this user belongs to.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "groups"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e89242ac12000600000000",
                          "description": "The ID of the user.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating that the user has accepted General Terms and Conditions.",
                          "_key": "is_gtc_accepted"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating that the user has consented to receive marketing information.",
                          "_key": "is_marketing_accepted"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
                          "_key": "is_totp_enabled"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727688,
                          "description": "A timestamp of the latest login of the user, in milliseconds.",
                          "_key": "last_login_time"
                        },
                        {
                          "type": "array",
                          "maxItems": 5,
                          "description": "Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.",
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "ip_address",
                              "success",
                              "user_agent"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T17:52:07Z",
                                "description": "UTC time RFC3339 for this login attempt.",
                                "api_fieldname": "date",
                                "entity_fieldname": "date",
                                "_key": "date"
                              },
                              {
                                "type": "string",
                                "example": "127.0.0.1",
                                "description": "IP address of the client.",
                                "api_fieldname": "ip_address",
                                "entity_fieldname": "ip_address",
                                "_key": "ip_address"
                              },
                              {
                                "type": "boolean",
                                "example": true,
                                "description": "Flag indicating whether login attempt was successful or not.",
                                "api_fieldname": "success",
                                "entity_fieldname": "success",
                                "_key": "success"
                              },
                              {
                                "type": "string",
                                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                                "description": "User Agent header from the login request.",
                                "api_fieldname": "user_agent",
                                "entity_fieldname": "user_agent",
                                "_key": "user_agent"
                              }
                            ],
                            "description": "Represents an entry in login history.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "login_history"
                            }
                          },
                          "_key": "login_history"
                        },
                        {
                          "type": "array",
                          "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                          "x-nullable": true,
                          "items": {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "example": "fed/user_007",
                                "description": "The ID of the user in the identity provider's service.",
                                "readOnly": true,
                                "api_fieldname": "foreign_id",
                                "entity_fieldname": "foreign_id",
                                "_key": "foreign_id"
                              },
                              {
                                "type": "string",
                                "example": "01619571f3c00242ac12000600000000",
                                "description": "ID of the identity provider.",
                                "readOnly": false,
                                "_override": true,
                                "api_fieldname": "id",
                                "entity_fieldname": "id",
                                "_key": "id"
                              },
                              {
                                "type": "string",
                                "example": "Pelion",
                                "readOnly": false,
                                "description": "Name of the identity provider.",
                                "_override": true,
                                "api_fieldname": "name",
                                "entity_fieldname": "name",
                                "_key": "name"
                              },
                              {
                                "type": "string",
                                "description": "Identity provider type.",
                                "example": "NATIVE",
                                "readOnly": true,
                                "enum": [
                                  "NATIVE",
                                  "MBED",
                                  "SAML2",
                                  "OIDC"
                                ],
                                "api_fieldname": "type",
                                "entity_fieldname": "login_profile_type",
                                "_key": "type"
                              }
                            ],
                            "description": "Represents a user login profile in Device Management.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "login_profile"
                            }
                          },
                          "_key": "login_profiles"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `user`.",
                          "enum": [
                            "user"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "PZf9eEUH43DAPE9ULINFeuj",
                          "description": "The password when creating a new user. It will be generated when not present in the request.",
                          "x-nullable": true,
                          "_key": "password"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727688,
                          "description": "A timestamp of the latest change of the user password, in milliseconds.",
                          "_key": "password_changed_time"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "+44 (1223) 400 400",
                          "description": "Phone number.",
                          "x-nullable": true,
                          "_key": "phone_number"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "The status of the user. ENROLLING state indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately. INACTIVE users are locked out and not permitted to use the system.",
                          "enum": [
                            "ENROLLING",
                            "INVITED",
                            "ACTIVE",
                            "RESET",
                            "INACTIVE"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "A list of scratch codes for the two-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "totp_scratch_codes"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "pattern": "[\\w\\-,._@+=]{4,30}",
                          "type": "string",
                          "example": "admin",
                          "description": "A username.",
                          "x-nullable": true,
                          "_key": "username"
                        }
                      ],
                      "description": "Represents a user in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "user"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "user_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "user"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account with the given ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/users",
          "summary": "Get users.",
          "return_type": "paginated_response(subtenant_user)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "subtenant_user"
          },
          "x_filter": {
            "email": [
              "eq"
            ],
            "status": [
              "eq",
              "in",
              "nin"
            ],
            "login_profiles": [
              "eq"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "sub_accounts",
            "total_count",
            "has_more",
            "data",
            "email__eq",
            "status__eq",
            "status__in",
            "status__nin",
            "login_profiles__eq"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "account_id": "id"
          },
          "operation_id": "getAllAccountUsers",
          "notes": "This lists the users of the subtenant account.",
          "foreign_key": {
            "entity": "subtenant_user"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "users"
        }
      ],
      "fields": [
        {
          "type": "string",
          "maxLength": 100,
          "x-nullable": true,
          "example": "110 Fulbourn Rd",
          "description": "Postal address line 1.",
          "api_fieldname": "address_line1",
          "readOnly": false,
          "required": false,
          "_key": "address_line1"
        },
        {
          "type": "string",
          "maxLength": 100,
          "x-nullable": true,
          "example": " ",
          "description": "Postal address line 2.",
          "api_fieldname": "address_line2",
          "readOnly": false,
          "required": false,
          "_key": "address_line2"
        },
        {
          "pattern": "^(?=.{3,254}$).+\\@.+",
          "type": "string",
          "x-nullable": true,
          "example": "admin@arm.com",
          "description": "The email address of the admin user created for this account. Present only in the response for account creation.",
          "api_fieldname": "admin_email",
          "readOnly": false,
          "required": false,
          "_key": "admin_email"
        },
        {
          "type": "string",
          "maxLength": 100,
          "x-nullable": true,
          "example": "Admin Doe",
          "description": "The full name of the admin user created for this account. Present only in the response for account creation.",
          "api_fieldname": "admin_full_name",
          "readOnly": false,
          "required": false,
          "_key": "admin_full_name"
        },
        {
          "type": "string",
          "x-nullable": true,
          "example": "01619571e2e89242ac12000600000000",
          "description": "The ID of the admin user created for this account. Present only in the response for the account creation.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "admin_id",
          "readOnly": true,
          "required": false,
          "_key": "admin_id"
        },
        {
          "type": "string",
          "x-nullable": true,
          "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000B40IkJADMANmAscAj0Ot0n2yeQnyt9tT",
          "description": "The admin API key created for this account. Present only in the response for account creation.",
          "readOnly": true,
          "x-deprecation": {
            "issued_at": "2020-09-01T00:00:00+00:00",
            "end_of_life_at": "2021-09-01T00:00:00+00:00",
            "comment": "This field is deprecated, do not use it anymore.",
            "links": []
          },
          "api_fieldname": "admin_key",
          "required": false,
          "_key": "admin_key"
        },
        {
          "type": "string",
          "maxLength": 100,
          "x-nullable": true,
          "example": "admin",
          "description": "The username of the admin user created for this account. Present only in the response for account creation.",
          "api_fieldname": "admin_name",
          "readOnly": false,
          "required": false,
          "_key": "admin_name"
        },
        {
          "type": "string",
          "x-nullable": true,
          "example": "PZf9eEUH43DAPE9ULINFeuj",
          "description": "The password of the admin user created for this account. Present only in the response for account creation.",
          "api_fieldname": "admin_password",
          "readOnly": false,
          "required": false,
          "_key": "admin_password"
        },
        {
          "type": "array",
          "maxItems": 10,
          "description": "An array of aliases for the tenant account ID. The aliases must be globally unique.",
          "items": {
            "type": "string",
            "pattern": "[\\w\\-._]{8,100}"
          },
          "api_fieldname": "aliases",
          "readOnly": false,
          "required": false,
          "_key": "aliases"
        },
        {
          "type": "string",
          "default": "active_device_business_model",
          "example": "api_calls_1_business_model",
          "description": "Business model for this account. Manageable by the root admin only.",
          "enum": [
            "active_device_business_model",
            "api_calls_1_business_model"
          ],
          "api_fieldname": "business_model",
          "readOnly": false,
          "required": false,
          "enum_reference": "account_business_model_enum",
          "_key": "business_model"
        },
        {
          "type": "array",
          "description": "Business model history for this account.",
          "items": {
            "type": "object",
            "properties": [
              {
                "type": "string",
                "default": "active_device_business_model",
                "example": "api_calls_1_business_model",
                "description": "Business model for this account. Manageable by the root admin only.",
                "enum": [
                  "active_device_business_model",
                  "api_calls_1_business_model"
                ],
                "_key": "business_model"
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-14T15:24:14Z",
                "description": "Last update UTC time RFC3339.",
                "_key": "updated_at"
              }
            ]
          },
          "api_fieldname": "business_model_history",
          "readOnly": true,
          "required": false,
          "_key": "business_model_history"
        },
        {
          "type": "string",
          "maxLength": 100,
          "x-nullable": true,
          "example": "Cambridge",
          "description": "The city part of the postal address.",
          "api_fieldname": "city",
          "readOnly": false,
          "required": false,
          "_key": "city"
        },
        {
          "type": "string",
          "maxLength": 100,
          "x-nullable": true,
          "example": "ARM Holdings Plc",
          "description": "The name of the company used in billing.",
          "api_fieldname": "company",
          "readOnly": false,
          "required": false,
          "_key": "company"
        },
        {
          "type": "string",
          "maxLength": 100,
          "x-nullable": true,
          "example": "J. Doe",
          "description": "The name of the contact person for this account.",
          "api_fieldname": "contact",
          "readOnly": false,
          "required": false,
          "_key": "contact"
        },
        {
          "type": "string",
          "example": "1NX25_0001",
          "x-nullable": true,
          "description": "Contract number of the customer.",
          "api_fieldname": "contract_number",
          "readOnly": false,
          "required": false,
          "_key": "contract_number"
        },
        {
          "type": "string",
          "maxLength": 100,
          "x-nullable": true,
          "example": "United Kingdom",
          "description": "The country part of the postal address.",
          "api_fieldname": "country",
          "readOnly": false,
          "required": false,
          "_key": "country"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "object",
          "x-nullable": true,
          "description": "Account's custom properties as key-value pairs.",
          "additionalProperties": {
            "type": "string"
          },
          "api_fieldname": "custom_fields",
          "readOnly": false,
          "required": false,
          "_key": "custom_fields"
        },
        {
          "type": "string",
          "example": "1NC25_0001",
          "x-nullable": true,
          "description": "Customer number of the customer.",
          "api_fieldname": "customer_number",
          "readOnly": false,
          "required": false,
          "_key": "customer_number"
        },
        {
          "type": "string",
          "maxLength": 100,
          "x-nullable": true,
          "example": "ARM",
          "description": "The display name for the tenant account.",
          "api_fieldname": "display_name",
          "readOnly": false,
          "required": false,
          "_key": "display_name"
        },
        {
          "pattern": "^(?=.{3,254}$).+\\@.+",
          "type": "string",
          "x-nullable": true,
          "example": "info@arm.com",
          "description": "The company email address for this account.",
          "api_fieldname": "email",
          "readOnly": false,
          "required": false,
          "_key": "email"
        },
        {
          "type": "string",
          "example": "IT",
          "description": "Account end market.",
          "api_fieldname": "end_market",
          "readOnly": false,
          "required": true,
          "_key": "end_market"
        },
        {
          "type": "string",
          "x-nullable": true,
          "format": "date-time",
          "description": "Expiration time of the account, as UTC time RFC3339.",
          "api_fieldname": "expiration",
          "readOnly": true,
          "required": false,
          "_key": "expiration"
        },
        {
          "type": "integer",
          "minimum": 1,
          "maximum": 180,
          "example": "180",
          "x-nullable": true,
          "description": "Indicates how many days (1-180) before account expiration a notification email is sent.",
          "api_fieldname": "expiration_warning_threshold",
          "readOnly": false,
          "required": false,
          "_key": "expiration_warning_threshold"
        },
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "Account ID.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "integer",
          "minimum": 1,
          "maximum": 120,
          "x-nullable": true,
          "example": "30",
          "description": "The reference token expiration time, in minutes, for this account.",
          "api_fieldname": "idle_timeout",
          "readOnly": false,
          "required": false,
          "_key": "idle_timeout"
        },
        {
          "type": "array",
          "description": "List of account limitation objects.",
          "items": {
            "type": "object",
            "properties": [
              {
                "type": "integer",
                "format": "int32",
                "description": "Billing period of the account limitation.",
                "_key": "billing_period"
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-13T09:35:20Z",
                "description": "Creation UTC time RFC3339.",
                "_key": "created_at"
              },
              {
                "type": "string",
                "description": "Description of the account limitation.",
                "readOnly": true,
                "_key": "description"
              },
              {
                "type": "string",
                "example": "1",
                "description": "API resource entity version.",
                "_key": "etag"
              },
              {
                "type": "string",
                "example": "01619571d01d0242ac12000600000000",
                "description": "Entity ID.",
                "_key": "id"
              },
              {
                "type": "boolean",
                "description": "Flag indicating whether this limitation is inherited.",
                "readOnly": true,
                "_key": "inherited"
              },
              {
                "type": "string",
                "description": "Indicates where this limit is inherited from.",
                "readOnly": true,
                "_key": "inherited_from"
              },
              {
                "type": "string",
                "description": "Indicates the type of the entity where the limitation is inherited from.",
                "readOnly": true,
                "_key": "inherited_type"
              },
              {
                "type": "integer",
                "format": "int32",
                "description": "The value of the limit.",
                "_key": "limit"
              },
              {
                "type": "string",
                "description": "Name of the account limitation.",
                "_key": "name"
              },
              {
                "type": "string",
                "description": "Entity name: always 'limitation'",
                "enum": [
                  "user",
                  "api-key",
                  "group",
                  "account",
                  "account_template",
                  "trusted_cert",
                  "list",
                  "error",
                  "agreement",
                  "signed_agreement",
                  "policy",
                  "limitation",
                  "identity_provider",
                  "user_session",
                  "user_invitation",
                  "notification_entry",
                  "branding_color",
                  "branding_image"
                ],
                "_key": "object"
              },
              {
                "type": "integer",
                "format": "int32",
                "description": "Quota of the account limitation.",
                "_key": "quota"
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-14T15:24:14Z",
                "description": "Last update UTC time RFC3339.",
                "_key": "updated_at"
              }
            ],
            "description": "This object represents an account limitation."
          },
          "api_fieldname": "limitations",
          "readOnly": true,
          "required": false,
          "_key": "limitations"
        },
        {
          "type": "object",
          "x-nullable": true,
          "x-deprecation": {
            "issued_at": "2019-08-27T12:03:58+00:00",
            "end_of_life_at": "2020-08-27T12:03:58+00:00",
            "comment": "Replaced by the limitations parameter."
          },
          "description": "DEPRECATED: Replaced by the limitations parameter.",
          "additionalProperties": {
            "type": "string"
          },
          "api_fieldname": "limits",
          "readOnly": true,
          "required": false,
          "_key": "limits"
        },
        {
          "type": "string",
          "x-nullable": true,
          "description": "The enforcement status of multi-factor authentication, either `enforced` or `optional`.",
          "enum": [
            "enforced",
            "optional"
          ],
          "api_fieldname": "mfa_status",
          "readOnly": false,
          "required": false,
          "enum_reference": "account_mfa_status_enum",
          "_key": "mfa_status"
        },
        {
          "type": "array",
          "x-nullable": true,
          "description": "A list of notification email addresses.",
          "items": {
            "pattern": "^(?=.{3,254}$).+\\@.+",
            "type": "string"
          },
          "api_fieldname": "notification_emails",
          "readOnly": false,
          "required": false,
          "_key": "notification_emails"
        },
        {
          "type": "object",
          "properties": [
            {
              "pattern": "^(?=.{3,254}$).+\\@.+",
              "type": "string",
              "example": "info@arm.com",
              "description": "The email address of the admin user who is the contact person of the parent account.",
              "api_fieldname": "admin_email",
              "entity_fieldname": "admin_email",
              "_key": "admin_email"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "J. Doe",
              "description": "The name of the admin user who is the contact person of the parent account.",
              "api_fieldname": "admin_name",
              "entity_fieldname": "admin_name",
              "_key": "admin_name"
            },
            {
              "type": "string",
              "example": "01619571dad80242ac12000600000000",
              "description": "The ID of the parent account.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "_key": "id"
            }
          ],
          "description": "Represents parent account contact details in responses.",
          "foreign_key": {
            "group": "Accounts",
            "entity": "parent_account"
          },
          "x-nullable": true,
          "api_fieldname": "parent_account",
          "readOnly": true,
          "required": false,
          "_key": "parent_account"
        },
        {
          "type": "string",
          "x-nullable": true,
          "example": "01619571dad80242ac12000600000000",
          "description": "The ID of the parent account, if any.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "parent_id",
          "readOnly": true,
          "required": false,
          "_key": "parent_id"
        },
        {
          "type": "object",
          "required": false,
          "properties": [
            {
              "type": "integer",
              "minimum": 8,
              "maximum": 512,
              "example": "8",
              "description": "Minimum length for the password.",
              "api_fieldname": "minimum_length",
              "entity_fieldname": "minimum_length",
              "_key": "minimum_length"
            }
          ],
          "foreign_key": {
            "group": "Accounts",
            "entity": "password_policy"
          },
          "description": "The password policy for this account.",
          "x-nullable": true,
          "api_fieldname": "password_policy",
          "readOnly": false,
          "_key": "password_policy"
        },
        {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 45,
          "description": "Indicates for how many minutes a password recovery email is valid.",
          "api_fieldname": "password_recovery_expiration",
          "readOnly": false,
          "required": false,
          "_key": "password_recovery_expiration"
        },
        {
          "type": "string",
          "maxLength": 100,
          "x-nullable": true,
          "example": "+44 (1223) 400 400",
          "description": "The phone number of a company representative.",
          "api_fieldname": "phone_number",
          "readOnly": false,
          "required": false,
          "_key": "phone_number"
        },
        {
          "type": "array",
          "x-nullable": true,
          "description": "List of policies if requested.",
          "items": {
            "type": "object",
            "properties": [
              {
                "type": "string",
                "example": "GET",
                "description": "Comma-separated list of actions, empty string represents all actions.",
                "api_fieldname": "action",
                "entity_fieldname": "action",
                "_key": "action"
              },
              {
                "type": "boolean",
                "example": true,
                "description": "True or false controlling whether an action is allowed or not.",
                "api_fieldname": "allow",
                "entity_fieldname": "allow",
                "_key": "allow"
              },
              {
                "type": "string",
                "example": "update-campaigns",
                "description": "Feature name corresponding to this policy.",
                "api_fieldname": "feature",
                "entity_fieldname": "feature",
                "_key": "feature"
              },
              {
                "type": "boolean",
                "example": false,
                "description": "Flag indicating whether this feature is inherited or overwritten specifically.",
                "readOnly": true,
                "api_fieldname": "inherited",
                "entity_fieldname": "inherited",
                "_key": "inherited"
              },
              {
                "type": "string",
                "example": "016ada3ec2d46665bf66e32e00000000",
                "description": "An ID indicating where this policy is inherited from.",
                "pattern": "[a-f0-9]{32}",
                "readOnly": true,
                "api_fieldname": "inherited_from",
                "entity_fieldname": "inherited_from",
                "_key": "inherited_from"
              },
              {
                "type": "string",
                "example": "account",
                "description": "Indicates the type of entity this policy is inherited from.",
                "readOnly": true,
                "enum": [
                  "account",
                  "template",
                  "tier_template"
                ],
                "api_fieldname": "inherited_type",
                "entity_fieldname": "inherited_type",
                "_key": "inherited_type"
              },
              {
                "type": "string",
                "example": "/v3/update-campaign",
                "description": "Resource that is protected by this policy.",
                "api_fieldname": "resource",
                "entity_fieldname": "resource",
                "_key": "resource"
              }
            ],
            "description": "Represents a feature policy. Either the feature or the resource must be specified.",
            "foreign_key": {
              "group": "Accounts",
              "entity": "policy"
            }
          },
          "api_fieldname": "policies",
          "readOnly": true,
          "required": false,
          "_key": "policies"
        },
        {
          "type": "string",
          "maxLength": 100,
          "x-nullable": true,
          "example": "CB1 9NJ",
          "description": "The postal code part of the postal address.",
          "api_fieldname": "postal_code",
          "readOnly": false,
          "required": false,
          "_key": "postal_code"
        },
        {
          "type": "string",
          "x-nullable": true,
          "example": "Subscription paid.",
          "description": "A note with the reason for account status update.",
          "api_fieldname": "reason",
          "readOnly": true,
          "required": false,
          "_key": "reason"
        },
        {
          "type": "string",
          "x-nullable": true,
          "example": "ARM-INT-0001",
          "description": "A reference note for updating the status of the account.",
          "api_fieldname": "reference_note",
          "readOnly": true,
          "required": false,
          "_key": "reference_note"
        },
        {
          "pattern": "^(?=.{3,254}$).+\\@.+",
          "type": "string",
          "example": "sales@arm.com",
          "x-nullable": true,
          "description": "Email address of the sales contact.",
          "api_fieldname": "sales_contact",
          "readOnly": false,
          "required": false,
          "_key": "sales_contact"
        },
        {
          "type": "string",
          "maxLength": 100,
          "x-nullable": true,
          "example": " ",
          "description": "The state part of the postal address.",
          "api_fieldname": "state",
          "readOnly": false,
          "required": false,
          "_key": "state"
        },
        {
          "type": "string",
          "example": "ACTIVE",
          "description": "The status of the account.",
          "enum": [
            "ENROLLING",
            "ACTIVE",
            "RESTRICTED",
            "SUSPENDED"
          ],
          "api_fieldname": "status",
          "readOnly": true,
          "required": false,
          "enum_reference": "account_status_enum",
          "_key": "status"
        },
        {
          "type": "string",
          "x-nullable": true,
          "example": "01619571e7160242ac12000600000000",
          "description": "Account template ID.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "template_id",
          "readOnly": true,
          "required": false,
          "_key": "template_id"
        },
        {
          "type": "string",
          "example": "1",
          "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
          "api_fieldname": "tier",
          "readOnly": true,
          "required": false,
          "_key": "tier"
        },
        {
          "type": "array",
          "description": "Tier history for this account.",
          "items": {
            "type": "object",
            "properties": [
              {
                "type": "string",
                "example": "1",
                "description": "The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.",
                "_key": "tier"
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-14T15:24:14Z",
                "description": "Last update UTC time RFC3339.",
                "_key": "updatedAt"
              }
            ]
          },
          "api_fieldname": "tier_history",
          "readOnly": true,
          "required": false,
          "_key": "tier_history"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update UTC time RFC3339.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Time when upgraded to commercial account in UTC format RFC3339.",
          "api_fieldname": "upgraded_at",
          "readOnly": true,
          "required": false,
          "_key": "upgraded_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "Account - profile",
        "Tenant accounts - accounts",
        "Tenant accounts - API keys",
        "Tenant accounts - users",
        "Tenant accounts - user invitations",
        "Tenant security and identity - certificates",
        "Tenant user interface configuration - colors",
        "Tenant user interface configuration - images"
      ],
      "group_id": "Accounts",
      "_key": "account"
    },
    {
      "swagger_models": [
        "ActiveSession"
      ],
      "primary_key_field": null,
      "methods": [],
      "fields": [
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The UUID of the account.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "account_id",
          "readOnly": true,
          "required": false,
          "_key": "account_id"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "example": "127.0.0.1",
          "description": "IP address of the client.",
          "api_fieldname": "ip_address",
          "readOnly": true,
          "required": false,
          "_key": "ip_address"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T17:52:07Z",
          "description": "The login time of the user.",
          "api_fieldname": "login_time",
          "readOnly": true,
          "required": false,
          "_key": "login_time"
        },
        {
          "type": "string",
          "example": "rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk",
          "description": "The reference token.",
          "api_fieldname": "reference_token",
          "readOnly": true,
          "required": false,
          "_key": "reference_token"
        },
        {
          "type": "string",
          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
          "description": "User Agent header from the login request.",
          "api_fieldname": "user_agent",
          "readOnly": true,
          "required": false,
          "_key": "user_agent"
        }
      ],
      "field_renames": [],
      "tags": [],
      "group_id": "Accounts",
      "_key": "active_session"
    },
    {
      "swagger_models": [
        "ApiKeyInfoReq",
        "ApiKeyInfoResp",
        "ApiKeyInfoRespList",
        "ApiKeyUpdateReq",
        "GroupSummaryList"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Create a new API key.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d '{\"name\": \"MyKey1\"}' \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "array",
              "description": "A list of group IDs this API key belongs to.",
              "items": {
                "type": "string"
              },
              "api_fieldname": "groups",
              "entity_fieldname": "groups",
              "parameter_fieldname": "groups",
              "in": "body",
              "required": false,
              "_key": "groups"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "API key gorgon",
              "description": "The display name for the API key.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            },
            {
              "type": "string",
              "example": "01619571e2e89242ac12000600000000",
              "description": "The owner of this API key, who is the creator by default.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "owner",
              "entity_fieldname": "owner",
              "parameter_fieldname": "owner",
              "in": "body",
              "required": false,
              "_key": "owner"
            },
            {
              "type": "string",
              "example": "ACTIVE",
              "description": "The status of the API key.",
              "enum": [
                "ACTIVE",
                "INACTIVE"
              ],
              "api_fieldname": "status",
              "entity_fieldname": "status",
              "parameter_fieldname": "status",
              "in": "body",
              "required": false,
              "enum_reference": "api_key_status_enum",
              "_key": "status"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "New entity created.",
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "key",
                  "name",
                  "object"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727683,
                    "description": "The timestamp of the API key creation in the storage, in milliseconds.",
                    "api_fieldname": "creation_time",
                    "entity_fieldname": "creation_time",
                    "_key": "creation_time"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "array",
                    "description": "A list of group IDs this API key belongs to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571f7020242ac12000600000000",
                    "description": "The ID of the API key.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
                    "description": "The API key.",
                    "api_fieldname": "key",
                    "entity_fieldname": "key",
                    "_key": "key"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "The timestamp of the latest API key usage, in milliseconds.",
                    "api_fieldname": "last_login_time",
                    "entity_fieldname": "last_login_time",
                    "_key": "last_login_time"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "API key gorgon",
                    "description": "The display name for the API key.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'api-key'",
                    "enum": [
                      "api-key"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The owner of this API key, who is the creator by default.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner",
                    "entity_fieldname": "owner",
                    "_key": "owner"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the API key.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "description": "Represents an API key in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_api_key"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data, for example, missing API key name.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/api-keys",
          "summary": "Create a new API key.",
          "return_type": "api_key",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "api_key"
          },
          "x_filter": {},
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "updated_at",
            "key",
            "creation_time",
            "last_login_time",
            "account_id"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "apikey_id": "id"
          },
          "operation_id": "createApiKey",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete the API key.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "apikey_id",
              "in": "path",
              "description": "The ID of the API key to delete.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "apikey_id",
              "external_param": false,
              "parameter_fieldname": "apikey_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden. Only the owner of the API key or an administrator can delete an API key.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An API key with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/api-keys/{apikey_id}",
          "summary": "Delete API key.",
          "return_type": "api_key",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "api_key"
          },
          "x_filter": {},
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated. Use DELETE https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys/{access_key_id}",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "apikey_id": "id"
          },
          "operation_id": "deleteApiKey",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve an array of API keys, optionally filtered by the owner.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/api-keys \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "api_key_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "etag",
                        "id",
                        "key",
                        "name",
                        "object"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727683,
                          "description": "The timestamp of the API key creation in the storage, in milliseconds.",
                          "_key": "creation_time"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "array",
                          "description": "A list of group IDs this API key belongs to.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "groups"
                        },
                        {
                          "type": "string",
                          "example": "01619571f7020242ac12000600000000",
                          "description": "The ID of the API key.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
                          "description": "The API key.",
                          "_key": "key"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727688,
                          "description": "The timestamp of the latest API key usage, in milliseconds.",
                          "_key": "last_login_time"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "API key gorgon",
                          "description": "The display name for the API key.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'api-key'",
                          "enum": [
                            "api-key"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e89242ac12000600000000",
                          "description": "The owner of this API key, who is the creator by default.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "owner"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "The status of the API key.",
                          "enum": [
                            "ACTIVE",
                            "INACTIVE"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ],
                      "description": "Represents an API key in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "api_key"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return, or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "api_key"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/api-keys",
          "summary": "Get all API keys.",
          "return_type": "paginated_response(api_key)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "api_key"
          },
          "x_filter": {
            "key": [
              "eq"
            ],
            "owner": [
              "eq"
            ]
          },
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data",
            "key__eq",
            "owner__eq"
          ],
          "foreign_key_priority": "self",
          "group_id": "Accounts",
          "parameter_map": {
            "apikey_id": "id"
          },
          "operation_id": "getAllApiKeys",
          "pagination": true,
          "foreign_key": {
            "group": "Accounts",
            "entity": "api_key"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve details of current API key.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/api-keys/me \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [],
          "method": "get",
          "mode": "me",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "key",
                  "name",
                  "object"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727683,
                    "description": "The timestamp of the API key creation in the storage, in milliseconds.",
                    "api_fieldname": "creation_time",
                    "entity_fieldname": "creation_time",
                    "_key": "creation_time"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "array",
                    "description": "A list of group IDs this API key belongs to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571f7020242ac12000600000000",
                    "description": "The ID of the API key.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
                    "description": "The API key.",
                    "api_fieldname": "key",
                    "entity_fieldname": "key",
                    "_key": "key"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "The timestamp of the latest API key usage, in milliseconds.",
                    "api_fieldname": "last_login_time",
                    "entity_fieldname": "last_login_time",
                    "_key": "last_login_time"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "API key gorgon",
                    "description": "The display name for the API key.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'api-key'",
                    "enum": [
                      "api-key"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The owner of this API key, who is the creator by default.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner",
                    "entity_fieldname": "owner",
                    "_key": "owner"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the API key.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "description": "Represents an API key in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_api_key"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/api-keys/me",
          "summary": "Get current API key.",
          "return_type": "api_key",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "api_key"
          },
          "x_filter": {},
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated.",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "updated_at",
            "key",
            "name",
            "groups",
            "owner",
            "status",
            "creation_time",
            "last_login_time",
            "account_id"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "apikey_id": "id"
          },
          "operation_id": "getMyApiKey",
          "notes": "This is provided by the SDK to avoid listing to retrieve the user's own API Key.",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "me"
        },
        {
          "description": "Retrieve an array of policy groups associated with an API key.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id}/groups \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "apikey_id",
              "in": "path",
              "description": "The ID of the API key.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "apikey_id",
              "external_param": false,
              "parameter_fieldname": "apikey_id",
              "_key": "id"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "api_key_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "policy_groups",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "apikey_count",
                        "etag",
                        "id",
                        "name",
                        "object",
                        "user_count"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account this group belongs to.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 0,
                          "description": "The number of API keys in this group.",
                          "x-deprecation": {
                            "issued_at": "2020-08-01T00:00:00+00:00",
                            "end_of_life_at": "2021-08-01T00:00:00+00:00",
                            "comment": "This property is deprecated. See 'application_count' property.",
                            "links": []
                          },
                          "_key": "apikey_count"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 0,
                          "description": "The number of applications in this group.",
                          "_key": "application_count"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571dec00242ac12000600000000",
                          "description": "The ID of the group.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "Administrators",
                          "description": "The name of the group.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `group`.",
                          "enum": [
                            "group"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 1,
                          "description": "The number of users in this group.",
                          "_key": "user_count"
                        }
                      ],
                      "description": "This object contains basic information about groups.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "subtenant_policy_group"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "subtenant_user_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_policy_group"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An API key with the given ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/api-keys/{apikey_id}/groups",
          "summary": "Get policy groups of an API key.",
          "return_type": "paginated_response(policy_group)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "policy_group"
          },
          "x_filter": {},
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/groups",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "apikey_id": "id"
          },
          "operation_id": "getGroupsOfApikey",
          "foreign_key": {
            "entity": "policy_group"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "policy_groups"
        },
        {
          "description": "Retrieve details of an API key.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f7020242ac12000600000000",
              "description": "The ID of the API key.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "apikey_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "key",
                  "name",
                  "object"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727683,
                    "description": "The timestamp of the API key creation in the storage, in milliseconds.",
                    "api_fieldname": "creation_time",
                    "entity_fieldname": "creation_time",
                    "_key": "creation_time"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "array",
                    "description": "A list of group IDs this API key belongs to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571f7020242ac12000600000000",
                    "description": "The ID of the API key.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
                    "description": "The API key.",
                    "api_fieldname": "key",
                    "entity_fieldname": "key",
                    "_key": "key"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "The timestamp of the latest API key usage, in milliseconds.",
                    "api_fieldname": "last_login_time",
                    "entity_fieldname": "last_login_time",
                    "_key": "last_login_time"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "API key gorgon",
                    "description": "The display name for the API key.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'api-key'",
                    "enum": [
                      "api-key"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The owner of this API key, who is the creator by default.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner",
                    "entity_fieldname": "owner",
                    "_key": "owner"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the API key.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "description": "Represents an API key in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_api_key"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An API key with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/api-keys/{apikey_id}",
          "summary": "Get API key.",
          "return_type": "api_key",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "api_key"
          },
          "x_filter": {},
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys/{access_key_id}",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "key",
            "name",
            "groups",
            "owner",
            "status",
            "creation_time",
            "last_login_time",
            "account_id"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "apikey_id": "id"
          },
          "operation_id": "getApiKey",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update API key details.\n\n**Example:**\n`curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{\"name\": \"TestApiKey25\"}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "array",
              "description": "A list of group IDs this API key belongs to.",
              "items": {
                "type": "string"
              },
              "api_fieldname": "groups",
              "entity_fieldname": "groups",
              "parameter_fieldname": "groups",
              "in": "body",
              "required": false,
              "_key": "groups"
            },
            {
              "type": "string",
              "example": "01619571f7020242ac12000600000000",
              "description": "The ID of the API key.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "apikey_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "API key gorgon",
              "description": "The display name for the API key.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            },
            {
              "type": "string",
              "example": "01619571e2e89242ac12000600000000",
              "description": "The owner of this API key, who is the creator by default.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "owner",
              "entity_fieldname": "owner",
              "parameter_fieldname": "owner",
              "in": "body",
              "required": false,
              "_key": "owner"
            },
            {
              "type": "string",
              "example": "ACTIVE",
              "description": "The status of the API key.",
              "enum": [
                "ACTIVE",
                "INACTIVE"
              ],
              "api_fieldname": "status",
              "entity_fieldname": "status",
              "parameter_fieldname": "status",
              "in": "body",
              "required": false,
              "enum_reference": "api_key_status_enum",
              "_key": "status"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "key",
                  "name",
                  "object"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727683,
                    "description": "The timestamp of the API key creation in the storage, in milliseconds.",
                    "api_fieldname": "creation_time",
                    "entity_fieldname": "creation_time",
                    "_key": "creation_time"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "array",
                    "description": "A list of group IDs this API key belongs to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571f7020242ac12000600000000",
                    "description": "The ID of the API key.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
                    "description": "The API key.",
                    "api_fieldname": "key",
                    "entity_fieldname": "key",
                    "_key": "key"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "The timestamp of the latest API key usage, in milliseconds.",
                    "api_fieldname": "last_login_time",
                    "entity_fieldname": "last_login_time",
                    "_key": "last_login_time"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "API key gorgon",
                    "description": "The display name for the API key.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'api-key'",
                    "enum": [
                      "api-key"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The owner of this API key, who is the creator by default.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner",
                    "entity_fieldname": "owner",
                    "_key": "owner"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the API key.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "description": "Represents an API key in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_api_key"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data, for example, invalid API key name.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden. Only the owner of the API key or an administrator can update an API key.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An API key with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/api-keys/{apikey_id}",
          "summary": "Update API key details.",
          "return_type": "api_key",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "api_key"
          },
          "x_filter": {},
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated. Use PUT https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys/{access_key_id}",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "key",
            "creation_time",
            "last_login_time",
            "account_id"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "apikey_id": "id"
          },
          "operation_id": "updateApiKey",
          "additional_operations": [
            {
              "operation_id": "updateMyApiKey",
              "notes": "After retrieving the resource using the `me` method, it can modified using using this SDK method."
            }
          ],
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the account.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "account_id",
          "readOnly": true,
          "required": false,
          "_key": "account_id"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "integer",
          "format": "int64",
          "example": 1518630727683,
          "description": "The timestamp of the API key creation in the storage, in milliseconds.",
          "api_fieldname": "creation_time",
          "readOnly": true,
          "required": false,
          "_key": "creation_time"
        },
        {
          "type": "array",
          "description": "A list of group IDs this API key belongs to.",
          "items": {
            "type": "string"
          },
          "api_fieldname": "groups",
          "readOnly": false,
          "required": false,
          "_key": "groups"
        },
        {
          "type": "string",
          "example": "01619571f7020242ac12000600000000",
          "description": "The ID of the API key.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "string",
          "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
          "description": "The API key.",
          "api_fieldname": "key",
          "readOnly": true,
          "required": false,
          "_key": "key"
        },
        {
          "type": "integer",
          "format": "int64",
          "example": 1518630727688,
          "description": "The timestamp of the latest API key usage, in milliseconds.",
          "api_fieldname": "last_login_time",
          "readOnly": true,
          "required": false,
          "_key": "last_login_time"
        },
        {
          "type": "string",
          "maxLength": 100,
          "example": "API key gorgon",
          "description": "The display name for the API key.",
          "api_fieldname": "name",
          "readOnly": false,
          "required": true,
          "_key": "name"
        },
        {
          "type": "string",
          "example": "01619571e2e89242ac12000600000000",
          "description": "The owner of this API key, who is the creator by default.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "owner",
          "readOnly": false,
          "required": false,
          "_key": "owner"
        },
        {
          "type": "string",
          "example": "ACTIVE",
          "description": "The status of the API key.",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "api_fieldname": "status",
          "readOnly": false,
          "required": false,
          "enum_reference": "api_key_status_enum",
          "_key": "status"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update UTC time RFC3339.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "Account - API keys"
      ],
      "group_id": "Accounts",
      "_key": "api_key"
    },
    {
      "swagger_models": [
        "CampaignDeviceMetadata"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Get update campaign metadata for a specific device.\n<br>\n**Usage example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/update-campaigns/5d645eaec2315a89900000655cd94fa8/campaign-device-metadata/016e83ddc645000000000001001000f6 \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [
            {
              "api_fieldname": "campaign",
              "_key": "campaign_id"
            }
          ],
          "fields": [
            {
              "type": "string",
              "description": "The device's campaign ID.",
              "example": "015bf72fccda00000000000100100280",
              "api_fieldname": "campaign",
              "entity_fieldname": "campaign_id",
              "parameter_fieldname": "campaign_id",
              "in": "path",
              "required": true,
              "_key": "campaign_id"
            },
            {
              "type": "string",
              "description": "The metadata record ID.",
              "pattern": "[A-Fa-f0-9]{32}",
              "example": "015c3029f6f7000000000001001000c3",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "campaign_device_metadata_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Request successful.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "The device's campaign ID.",
                    "example": "015bf72fccda00000000000100100280",
                    "api_fieldname": "campaign",
                    "entity_fieldname": "campaign_id",
                    "_key": "campaign"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was created.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "description": "The state of the update campaign on the device.",
                    "enum": [
                      "pending",
                      "updated_connector_channel",
                      "failed_connector_channel_update",
                      "deployed",
                      "manifestremoved",
                      "deregistered"
                    ],
                    "type": "string",
                    "api_fieldname": "deployment_state",
                    "entity_fieldname": "deployment_state",
                    "_key": "deployment_state"
                  },
                  {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "Description.",
                    "example": "a description",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "description": "The device ID.",
                    "example": "015c2fec9bba0000000000010010036f",
                    "api_fieldname": "device_id",
                    "entity_fieldname": "device_id",
                    "_key": "device_id"
                  },
                  {
                    "type": "string",
                    "description": "API resource entity version.",
                    "example": "2017-05-22T12:37:58.753425Z",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "The metadata record ID.",
                    "pattern": "[A-Fa-f0-9]{32}",
                    "example": "015c3029f6f7000000000001001000c3",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "description": "How the firmware is delivered (connector or direct).",
                    "example": "connector",
                    "api_fieldname": "mechanism",
                    "entity_fieldname": "mechanism",
                    "_key": "mechanism"
                  },
                  {
                    "type": "string",
                    "description": "The Device Management Connect URL.",
                    "api_fieldname": "mechanism_url",
                    "entity_fieldname": "mechanism_url",
                    "_key": "mechanism_url"
                  },
                  {
                    "type": "string",
                    "maxLength": 128,
                    "description": "The record name.",
                    "default": "default_object_name",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "The entity name: always 'update-campaign-device-metadata'.",
                    "example": "update-campaign-device-metadata",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was updated.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Device_Update",
                  "entity": "campaign_device_metadata"
                }
              },
              "_key": "200"
            },
            {
              "description": "Unauthorized.",
              "_key": "401"
            },
            {
              "description": "Not Found.",
              "_key": "404"
            }
          ],
          "path": "/v3/update-campaigns/{campaign_id}/campaign-device-metadata/{campaign_device_metadata_id}",
          "summary": "Get a campaign device metadata",
          "return_type": "campaign_device_metadata",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "campaign_device_metadata"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "deployment_state",
            "description",
            "device_id",
            "mechanism",
            "mechanism_url",
            "name"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "campaign_device_metadata_id": "id"
          },
          "operation_id": "Update_Campaign_Metadata_retrieve",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "string",
          "description": "The device's campaign ID.",
          "example": "015bf72fccda00000000000100100280",
          "api_fieldname": "campaign",
          "readOnly": false,
          "required": true,
          "_key": "campaign_id"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "The time the entity was created.",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "description": "The state of the update campaign on the device.",
          "enum": [
            "pending",
            "updated_connector_channel",
            "failed_connector_channel_update",
            "deployed",
            "manifestremoved",
            "deregistered"
          ],
          "type": "string",
          "api_fieldname": "deployment_state",
          "readOnly": true,
          "required": false,
          "enum_reference": "campaign_device_metadata_deployment_state_enum",
          "_key": "deployment_state"
        },
        {
          "type": "string",
          "maxLength": 2000,
          "description": "Description.",
          "example": "a description",
          "api_fieldname": "description",
          "readOnly": true,
          "required": false,
          "_key": "description"
        },
        {
          "type": "string",
          "description": "The device ID.",
          "example": "015c2fec9bba0000000000010010036f",
          "api_fieldname": "device_id",
          "readOnly": true,
          "required": false,
          "_key": "device_id"
        },
        {
          "type": "string",
          "description": "The metadata record ID.",
          "pattern": "[A-Fa-f0-9]{32}",
          "example": "015c3029f6f7000000000001001000c3",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "string",
          "description": "How the firmware is delivered (connector or direct).",
          "example": "connector",
          "api_fieldname": "mechanism",
          "readOnly": true,
          "required": false,
          "_key": "mechanism"
        },
        {
          "type": "string",
          "description": "The Device Management Connect URL.",
          "api_fieldname": "mechanism_url",
          "readOnly": true,
          "required": false,
          "_key": "mechanism_url"
        },
        {
          "type": "string",
          "maxLength": 128,
          "description": "The record name.",
          "default": "default_object_name",
          "api_fieldname": "name",
          "readOnly": true,
          "required": false,
          "_key": "name"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "The time the entity was updated.",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [
        {
          "api_fieldname": "campaign",
          "_key": "campaign_id"
        }
      ],
      "tags": [
        "Device update - campaigns"
      ],
      "group_id": "Device_Update",
      "_key": "campaign_device_metadata"
    },
    {
      "swagger_models": [
        "EventTypeList",
        "EventTypeSummary",
        "EventTypeSummaryList"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Get a list of events grouped by summary.\n<br>\n**Usage example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/update-campaigns/12345678901234567890123456789012/statistics/skipped/event_types \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [],
          "fields": [
            {
              "description": "The campaign ID.",
              "in": "path",
              "name": "campaign_id",
              "required": true,
              "type": "string",
              "pattern": "[A-Fa-f0-9]{32}",
              "entity_fieldname": "campaign_id",
              "api_fieldname": "campaign_id",
              "external_param": false,
              "parameter_fieldname": "campaign_id",
              "_key": "campaign_id"
            },
            {
              "description": "The summary status. For example, fail.",
              "in": "path",
              "name": "summary_status_id",
              "required": true,
              "type": "string",
              "enum": [
                "fail",
                "success",
                "info",
                "skipped"
              ],
              "entity_fieldname": "id",
              "api_fieldname": "summary_status_id",
              "external_param": false,
              "parameter_fieldname": "summary_status_id",
              "enum_reference": "campaign_statistics_id_enum",
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "events",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "The entity ID to fetch after the given one.",
                    "example": "null",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "016e652be671000000000001001001e5",
                          "description": "ID of the associated campaign.",
                          "_key": "campaign_id"
                        },
                        {
                          "type": "integer",
                          "example": 10,
                          "_key": "count"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "example": "Update error, nonspecific network error",
                          "_key": "description"
                        },
                        {
                          "type": "string",
                          "example": "UPD4_FAIL_101",
                          "_key": "event_type"
                        },
                        {
                          "type": "string",
                          "example": "upd_fail_101",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'event-type'.",
                          "example": "event-type",
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "FAIL",
                          "_key": "summary_status"
                        },
                        {
                          "type": "string",
                          "example": "fail",
                          "_key": "summary_status_id"
                        }
                      ],
                      "foreign_key": {
                        "group": "Device_Update",
                        "entity": "campaign_statistics_events"
                      }
                    },
                    "enum": [
                      "fail",
                      "skipped",
                      "info",
                      "success"
                    ],
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "description": "A flag indicating whether there are more results.",
                    "example": "false",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "description": "The number of results to return, (range: 2-1000), or equals to total_count.",
                    "example": "50",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "The entity name: always 'list'.",
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "description": "The order of the records to return. Acceptable values: ASC, DESC. Default: ASC.",
                    "example": "ASC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "description": "The total number or records, if requested. It may be returned also for small lists.",
                    "example": "1",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Device_Update",
                  "entity": "campaign_statistics_events"
                }
              },
              "_key": "200"
            },
            {
              "description": "Not Authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not Found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/update-campaigns/{campaign_id}/statistics/{summary_status_id}/event_types",
          "summary": "Get a list of events grouped by summary",
          "return_type": "paginated_response(campaign_statistics_events)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "campaign_statistics_events"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "order",
            "limit",
            "after",
            "has_more",
            "total_count",
            "data"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "summary_status_id": "id"
          },
          "operation_id": "Update_Campaign_event_types_list",
          "pagination": true,
          "foreign_key": {
            "group": "Device_Update",
            "entity": "campaign_statistics_events"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "events"
        },
        {
          "description": "Get a list of statistics for a campaign, including the number of devices reporting specific event codes.\n<br>\n**Usage example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/update-campaigns/11234567f9012ab56780120000789012/statistics \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [],
          "fields": [
            {
              "description": "The campaign ID.",
              "in": "path",
              "name": "campaign_id",
              "required": true,
              "type": "string",
              "pattern": "[A-Fa-f0-9]{32}",
              "entity_fieldname": "campaign_id",
              "api_fieldname": "campaign_id",
              "external_param": false,
              "parameter_fieldname": "campaign_id",
              "_key": "campaign_id"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "The entity ID to fetch after the given one.",
                    "example": "null",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "016e652be6710000000000010010013d",
                          "description": "ID of the associated campaign.",
                          "_key": "campaign_id"
                        },
                        {
                          "type": "integer",
                          "example": 10,
                          "_key": "count"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "fail",
                            "success",
                            "info",
                            "skipped"
                          ],
                          "example": "fail",
                          "description": "ID of the event type description.",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'summary_status'.",
                          "example": "summary_status",
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "FAIL",
                            "SUCCESS",
                            "INFO",
                            "SKIPPED"
                          ],
                          "example": "FAIL",
                          "description": "The event type description.",
                          "_key": "summary_status"
                        }
                      ],
                      "foreign_key": {
                        "group": "Device_Update",
                        "entity": "campaign_statistics"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "description": "A flag indicating whether there are more results.",
                    "example": "false",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "description": "The number of results to return, (range: 2-1000), or equals to total_count.",
                    "example": "50",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "The entity name: always 'list'.",
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "description": "The order of the records to return. Acceptable values: ASC, DESC. Default: ASC.",
                    "example": "ASC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "description": "The total number or records, if requested. It may be returned also for small lists.",
                    "example": "1",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Device_Update",
                  "entity": "campaign_statistics"
                }
              },
              "_key": "200"
            },
            {
              "description": "Not Authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not Found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/update-campaigns/{campaign_id}/statistics",
          "summary": "Get statistics for a campaign",
          "return_type": "paginated_response(campaign_statistics)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "campaign_statistics"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "order",
            "limit",
            "after",
            "has_more",
            "total_count",
            "data"
          ],
          "foreign_key_priority": "self",
          "group_id": "Device_Update",
          "parameter_map": {
            "summary_status_id": "id"
          },
          "operation_id": "Update_Campaign_statistics_list",
          "pagination": true,
          "foreign_key": {
            "group": "Device_Update",
            "entity": "campaign_statistics"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Get the count of successfully updated, skipped, and failed devices.\n<br>\n**Usage example:**\n```\ncurl https://api.us-east-1.mbedcloud.com/v3/update-campaigns/12345678901234567890123456789012/statistics/fail \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "016e652be6710000000000010010013d",
              "description": "ID of the associated campaign.",
              "api_fieldname": "campaign_id",
              "entity_fieldname": "campaign_id",
              "parameter_fieldname": "campaign_id",
              "in": "path",
              "required": true,
              "_key": "campaign_id"
            },
            {
              "type": "string",
              "enum": [
                "fail",
                "success",
                "info",
                "skipped"
              ],
              "example": "fail",
              "description": "ID of the event type description.",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "summary_status_id",
              "in": "path",
              "required": true,
              "enum_reference": "campaign_statistics_id_enum",
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "example": "016e652be6710000000000010010013d",
                    "description": "ID of the associated campaign.",
                    "api_fieldname": "campaign_id",
                    "entity_fieldname": "campaign_id",
                    "_key": "campaign_id"
                  },
                  {
                    "type": "integer",
                    "example": 10,
                    "api_fieldname": "count",
                    "entity_fieldname": "count",
                    "_key": "count"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "fail",
                      "success",
                      "info",
                      "skipped"
                    ],
                    "example": "fail",
                    "description": "ID of the event type description.",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'summary_status'.",
                    "example": "summary_status",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "FAIL",
                      "SUCCESS",
                      "INFO",
                      "SKIPPED"
                    ],
                    "example": "FAIL",
                    "description": "The event type description.",
                    "api_fieldname": "summary_status",
                    "entity_fieldname": "summary_status",
                    "_key": "summary_status"
                  }
                ],
                "foreign_key": {
                  "group": "Device_Update",
                  "entity": "campaign_statistics"
                }
              },
              "_key": "200"
            },
            {
              "description": "Not Authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not Found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/update-campaigns/{campaign_id}/statistics/{summary_status_id}",
          "summary": "Get a status summary",
          "return_type": "campaign_statistics",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "campaign_statistics"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "summary_status",
            "count",
            "created_at"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "summary_status_id": "id"
          },
          "operation_id": "Update_Campaign_statistics_retrieve",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "016e652be6710000000000010010013d",
          "description": "ID of the associated campaign.",
          "api_fieldname": "campaign_id",
          "readOnly": false,
          "required": true,
          "_key": "campaign_id"
        },
        {
          "type": "integer",
          "example": 10,
          "api_fieldname": "count",
          "readOnly": true,
          "required": false,
          "_key": "count"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "enum": [
            "fail",
            "success",
            "info",
            "skipped"
          ],
          "example": "fail",
          "description": "ID of the event type description.",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "enum_reference": "campaign_statistics_id_enum",
          "_key": "id"
        },
        {
          "type": "string",
          "enum": [
            "FAIL",
            "SUCCESS",
            "INFO",
            "SKIPPED"
          ],
          "example": "FAIL",
          "description": "The event type description.",
          "api_fieldname": "summary_status",
          "readOnly": true,
          "required": false,
          "enum_reference": "campaign_statistics_summary_status_enum",
          "_key": "summary_status"
        }
      ],
      "field_renames": [],
      "tags": [
        "Device update - campaigns"
      ],
      "group_id": "Device_Update",
      "_key": "campaign_statistics"
    },
    {
      "swagger_models": [
        "EventType"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Get the count for a specific event type, for example, succeeded, failed or skipped.\n<br>\n**Usage example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/update-campaigns/12345678901234567890123456789012/statistics/success/event_types/sys_112 \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "016e652be671000000000001001001e5",
              "description": "ID of the associated campaign.",
              "api_fieldname": "campaign_id",
              "entity_fieldname": "campaign_id",
              "parameter_fieldname": "campaign_id",
              "in": "path",
              "required": true,
              "_key": "campaign_id"
            },
            {
              "type": "string",
              "example": "upd_fail_101",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "event_type_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "string",
              "example": "fail",
              "api_fieldname": "summary_status_id",
              "entity_fieldname": "summary_status_id",
              "parameter_fieldname": "summary_status_id",
              "in": "path",
              "required": true,
              "_key": "summary_status_id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "example": "016e652be671000000000001001001e5",
                    "description": "ID of the associated campaign.",
                    "api_fieldname": "campaign_id",
                    "entity_fieldname": "campaign_id",
                    "_key": "campaign_id"
                  },
                  {
                    "type": "integer",
                    "example": 10,
                    "api_fieldname": "count",
                    "entity_fieldname": "count",
                    "_key": "count"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "example": "Update error, nonspecific network error",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "UPD4_FAIL_101",
                    "api_fieldname": "event_type",
                    "entity_fieldname": "event_type",
                    "_key": "event_type"
                  },
                  {
                    "type": "string",
                    "example": "upd_fail_101",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'event-type'.",
                    "example": "event-type",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "FAIL",
                    "api_fieldname": "summary_status",
                    "entity_fieldname": "summary_status",
                    "_key": "summary_status"
                  },
                  {
                    "type": "string",
                    "example": "fail",
                    "api_fieldname": "summary_status_id",
                    "entity_fieldname": "summary_status_id",
                    "_key": "summary_status_id"
                  }
                ],
                "foreign_key": {
                  "group": "Device_Update",
                  "entity": "campaign_statistics_events"
                }
              },
              "_key": "200"
            },
            {
              "description": "Not Authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not Found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/update-campaigns/{campaign_id}/statistics/{summary_status_id}/event_types/{event_type_id}",
          "summary": "Get an event type for a campaign",
          "return_type": "campaign_statistics_events",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "campaign_statistics_events"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "event_type",
            "description",
            "summary_status",
            "count"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "event_type_id": "id"
          },
          "operation_id": "Update_Campaign_event_types_retrieve",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "016e652be671000000000001001001e5",
          "description": "ID of the associated campaign.",
          "api_fieldname": "campaign_id",
          "readOnly": false,
          "required": true,
          "_key": "campaign_id"
        },
        {
          "type": "integer",
          "example": 10,
          "api_fieldname": "count",
          "readOnly": true,
          "required": false,
          "_key": "count"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "example": "Update error, nonspecific network error",
          "api_fieldname": "description",
          "readOnly": true,
          "required": false,
          "_key": "description"
        },
        {
          "type": "string",
          "example": "UPD4_FAIL_101",
          "api_fieldname": "event_type",
          "readOnly": true,
          "required": false,
          "_key": "event_type"
        },
        {
          "type": "string",
          "example": "upd_fail_101",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "string",
          "example": "FAIL",
          "api_fieldname": "summary_status",
          "readOnly": true,
          "required": false,
          "_key": "summary_status"
        },
        {
          "type": "string",
          "example": "fail",
          "api_fieldname": "summary_status_id",
          "readOnly": false,
          "required": true,
          "_key": "summary_status_id"
        }
      ],
      "field_renames": [],
      "tags": [
        "Device update - campaigns"
      ],
      "group_id": "Device_Update",
      "_key": "campaign_statistics_events"
    },
    {
      "swagger_models": [
        "CertificateEnrollment",
        "CertificateEnrollmentListResponse"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Get certificate enrollments list, optionally filtered.\n\n**Examples:**\n\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/certificate-enrollments \\\n-H 'Authorization: Bearer <access_key>'\n```\n\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/certificate-enrollments?device_id__eq=01612df56f3b0a580a010fc700000000 \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "The ID of the item after which to retrieve the next page.",
              "example": "01625daa23230a580a0100bd00000000",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "pattern": "[0-9a-fA-F]{32}",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "include",
              "in": "query",
              "description": "a comma-separated list of data fields to return.",
              "required": false,
              "type": "string",
              "enum": [
                "total_count"
              ],
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "enum_reference": "certificate_enrollment_include_enum",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "description": "The number of results to return (2-1000).",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "The order of results.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "certificate_enrollment_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "The entity ID to fetch after the given one.",
                    "example": "01625daa23230a580a0100bd00000000",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "maxLength": 50,
                          "description": "The certificate name.",
                          "example": "customer.dlms",
                          "api_fieldname": "certificate-name",
                          "entity_fieldname": "certificate_name",
                          "in": "path",
                          "name": "certificate-name",
                          "required": true,
                          "pattern": "[\\w\\-]{1,10}\\.[\\w\\-.]{1,10}",
                          "external_param": true,
                          "parameter_fieldname": "certificate-name",
                          "_key": "certificate_name"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "description": "Creation UTC time RFC3339.",
                          "example": "2017-01-01T00:00:00Z",
                          "api_fieldname": "created_at",
                          "entity_fieldname": "created_at",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "description": "The device ID.",
                          "example": "01625daa23230a580a0100bd00000000",
                          "api_fieldname": "device_id",
                          "entity_fieldname": "device_id",
                          "_key": "device_id"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "success",
                            "failure"
                          ],
                          "description": "The result of certificate enrollment request.",
                          "example": "success",
                          "api_fieldname": "enroll_result",
                          "entity_fieldname": "enroll_result",
                          "_key": "enroll_result"
                        },
                        {
                          "type": "string",
                          "description": "Additional information in case of failure.",
                          "example": "The device is currently processing too many certificate renewals.",
                          "api_fieldname": "enroll_result_detail",
                          "entity_fieldname": "enroll_result_detail",
                          "_key": "enroll_result_detail"
                        },
                        {
                          "type": "string",
                          "description": "The status of certificate enrollment request.",
                          "enum": [
                            "new",
                            "completed"
                          ],
                          "api_fieldname": "enroll_status",
                          "entity_fieldname": "enroll_status",
                          "_key": "enroll_status"
                        },
                        {
                          "type": "string",
                          "description": "Entity instance signature.",
                          "example": "1",
                          "api_fieldname": "etag",
                          "entity_fieldname": "etag",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "description": "The certificate enrollment ID.",
                          "example": "01612df56f3b0a580a010fc700000000",
                          "api_fieldname": "id",
                          "entity_fieldname": "id",
                          "parameter_fieldname": "device-id",
                          "in": "path",
                          "required": true,
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "certificate-enrollment"
                          ],
                          "api_fieldname": "object",
                          "entity_fieldname": "object",
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "description": "Update UTC time RFC3339.",
                          "example": "2017-01-01T00:00:00Z",
                          "api_fieldname": "updated_at",
                          "entity_fieldname": "updated_at",
                          "_key": "updated_at"
                        }
                      ],
                      "required": [
                        "created_at",
                        "etag",
                        "id",
                        "device_id",
                        "certificate_name"
                      ],
                      "foreign_key": {
                        "group": "Security",
                        "entity": "certificate_enrollment"
                      }
                    },
                    "description": "List of certificate enrollments.",
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of results to return.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "list"
                    ],
                    "description": "Describes the type of objects in the list.",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation time. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of records.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Security",
                  "entity": "certificate_enrollment"
                }
              },
              "_key": "200"
            },
            {
              "description": "Validation error.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/certificate-enrollments",
          "summary": "Get certificate enrollments list.",
          "return_type": "paginated_response(certificate_enrollment)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "certificate_enrollment"
          },
          "x_filter": {
            "device_id": [
              "eq"
            ],
            "certificate_name": [
              "eq"
            ],
            "enroll_status": [
              "neq",
              "eq"
            ],
            "enroll_result": [
              "neq",
              "eq"
            ],
            "created_at": [
              "lte",
              "gte"
            ],
            "updated_at": [
              "lte",
              "gte"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data",
            "device_id__eq",
            "certificate_name__eq",
            "enroll_status__neq",
            "enroll_status__eq",
            "enroll_result__neq",
            "enroll_result__eq",
            "created_at__lte",
            "created_at__gte",
            "updated_at__lte",
            "updated_at__gte"
          ],
          "foreign_key_priority": "self",
          "group_id": "Security",
          "parameter_map": {
            "certificate-enrollment-id": "id"
          },
          "operation_id": "getCertificateEnrollments",
          "pagination": true,
          "foreign_key": {
            "group": "Security",
            "entity": "certificate_enrollment"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Get a certificate enrollment by ID.\n\n**Example:**\n\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/certificate-enrollments/01612df56f3b0a580a010fc700000000 \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "The certificate enrollment ID.",
              "example": "01612df56f3b0a580a010fc700000000",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "certificate-enrollment-id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "maxLength": 50,
                    "description": "The certificate name.",
                    "example": "customer.dlms",
                    "api_fieldname": "certificate_name",
                    "entity_fieldname": "certificate_name",
                    "in": "path",
                    "name": "certificate-name",
                    "required": true,
                    "pattern": "[\\w\\-]{1,10}\\.[\\w\\-.]{1,10}",
                    "external_param": true,
                    "parameter_fieldname": "certificate-name",
                    "_key": "certificate_name"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation UTC time RFC3339.",
                    "example": "2017-01-01T00:00:00Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "The device ID.",
                    "example": "01625daa23230a580a0100bd00000000",
                    "api_fieldname": "device_id",
                    "entity_fieldname": "device_id",
                    "_key": "device_id"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "success",
                      "failure"
                    ],
                    "description": "The result of certificate enrollment request.",
                    "example": "success",
                    "api_fieldname": "enroll_result",
                    "entity_fieldname": "enroll_result",
                    "_key": "enroll_result"
                  },
                  {
                    "type": "string",
                    "description": "Additional information in case of failure.",
                    "example": "The device is currently processing too many certificate renewals.",
                    "api_fieldname": "enroll_result_detail",
                    "entity_fieldname": "enroll_result_detail",
                    "_key": "enroll_result_detail"
                  },
                  {
                    "type": "string",
                    "description": "The status of certificate enrollment request.",
                    "enum": [
                      "new",
                      "completed"
                    ],
                    "api_fieldname": "enroll_status",
                    "entity_fieldname": "enroll_status",
                    "_key": "enroll_status"
                  },
                  {
                    "type": "string",
                    "description": "Entity instance signature.",
                    "example": "1",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "The certificate enrollment ID.",
                    "example": "01612df56f3b0a580a010fc700000000",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "device-id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "certificate-enrollment"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Update UTC time RFC3339.",
                    "example": "2017-01-01T00:00:00Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "required": [
                  "created_at",
                  "etag",
                  "id",
                  "device_id",
                  "certificate_name"
                ],
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device"
                }
              },
              "_key": "200"
            },
            {
              "description": "Validation error.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/certificate-enrollments/{certificate-enrollment-id}",
          "summary": "Get a certificate enrollment by ID.",
          "return_type": "certificate_enrollment",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "certificate_enrollment"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "device_id",
            "certificate_name",
            "enroll_status",
            "enroll_result",
            "enroll_result_detail",
            "updated_at"
          ],
          "group_id": "Security",
          "parameter_map": {
            "certificate-enrollment-id": "id"
          },
          "operation_id": "getCertificateEnrollment",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "string",
          "maxLength": 50,
          "description": "The certificate name.",
          "example": "customer.dlms",
          "api_fieldname": "certificate_name",
          "in": "path",
          "name": "certificate-name",
          "required": false,
          "pattern": "[\\w\\-]{1,10}\\.[\\w\\-.]{1,10}",
          "external_param": true,
          "parameter_fieldname": "certificate-name",
          "readOnly": true,
          "_key": "certificate_name"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Creation UTC time RFC3339.",
          "example": "2017-01-01T00:00:00Z",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "description": "The device ID.",
          "example": "01625daa23230a580a0100bd00000000",
          "api_fieldname": "device_id",
          "readOnly": true,
          "required": false,
          "_key": "device_id"
        },
        {
          "type": "string",
          "enum": [
            "success",
            "failure"
          ],
          "description": "The result of certificate enrollment request.",
          "example": "success",
          "api_fieldname": "enroll_result",
          "readOnly": true,
          "required": false,
          "enum_reference": "certificate_enrollment_enroll_result_enum",
          "_key": "enroll_result"
        },
        {
          "type": "string",
          "description": "Additional information in case of failure.",
          "example": "The device is currently processing too many certificate renewals.",
          "api_fieldname": "enroll_result_detail",
          "readOnly": true,
          "required": false,
          "_key": "enroll_result_detail"
        },
        {
          "type": "string",
          "description": "The status of certificate enrollment request.",
          "enum": [
            "new",
            "completed"
          ],
          "api_fieldname": "enroll_status",
          "readOnly": true,
          "required": false,
          "enum_reference": "certificate_enrollment_enroll_status_enum",
          "_key": "enroll_status"
        },
        {
          "type": "string",
          "description": "The certificate enrollment ID.",
          "example": "01612df56f3b0a580a010fc700000000",
          "api_fieldname": "id",
          "parameter_fieldname": "device-id",
          "in": "path",
          "required": true,
          "readOnly": false,
          "_key": "id"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Update UTC time RFC3339.",
          "example": "2017-01-01T00:00:00Z",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "Device security - device certificate renewals"
      ],
      "group_id": "Security",
      "_key": "certificate_enrollment"
    },
    {
      "swagger_models": [
        "CertificateIssuerInfo",
        "CertificateIssuerInfoListResponse",
        "CertificateIssuerRequest",
        "CertificateIssuerUpdateRequest",
        "CertificateIssuerVerifyResponse"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Create a certificate issuer.\n<br>\nThe maximum number of issuers is limited to 20 per account.\n<br>\nYou can create multiple certificate issuers of the same type, provided they have different names. This allows verification of the certificate issuer configuration before activation.\n<br>\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/certificate-issuers \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json;charset=UTF-8' \\\n-d '{\n  \"issuer_type\": \"GLOBAL_SIGN\",\n  \"name\": \"GS Issuer\",\n  \"description\": \"Sample GlobalSign certificate issuer\",\n  \"issuer_attributes\": null,\n  \"issuer_credentials\": {\n      \"api_key\": \"e510e289e6cd8947\",\n      \"api_secret\": \"a477a8393d17a55ecb2ba6a61f58feb84770b621\",\n      \"client_certificate\": \"-----BEGIN CERTIFICATE-----MIIC7zCCAdegAwIBAgIJANTlU4x5S74VMA0GCSqGSIb3DQEBCwUAMA4xDDAKBgNVBAoMA0FybTAeFw0xODAzMTExMzE5MTFaFw0xOTAzMTExMzE5MTFaMA4xDDAKBgNVBAoMA0FybTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJWLStsVMJULZtxdieK9qocM4ymDXMaAusmd9TZLzBgznKQe/CW2yxyA8C8K5e6MmvMYGeKDd4Lkw/ezOj2OsUj2xzNIltUxpGi/GhsNYiN/khNJa/Y1SllLoihJAPm/xbMywOBRu/dM88PiJsNZccOk0I8DYvvyAs9wCTkbKLnfHygl98DCRqXw7nBCplU6F03qpUd/4BUtMtugyqt7yboGH+4YewnUh4Yh4QNOJIvE93Ob++eKjO3pIOYEhQmUxzOLaLNuWXlv2l1WuN281hUP4XBcV8mCzRQfTBBDYTWt+5BEWoLOUkXjW0Um6EAaN3usph1IKDEH6Ia5VHP4Pj0CAwEAAaNQME4wHQYDVR0OBBYEFLsfYZxFcQTjPJKYMjHI2In316fmMB8GA1UdIwQYMBaAFLsfYZxFcQTjPJKYMjHI2In316fmMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFl08GFsIkkUs6M7QgCWmsnwP6PtD8V87wM1GAqQQlOOeztaeRR2TEOeYiKRZQugYszJ/FVfVp4ggqzepJMn6UZ42j5nmSJs+6t79i23QAzX1zNQ354lr/t7kt3fMdhuL3AP0oZGzdy+EnXXiWeAD22UwzvVmLt38ypJIl+pmTsx9jJy4PN7yoRgtP9k+50m3X6oDxVruehC/JPSeTvEhqyLW3fLcG6IoJMX3vIwfO9uXbFJumTowQeViNJJ9duWvD2KBXn/muOOBe97TPuvAms1gOtMmmPT9/jpo9b4+NsfFiAN6bMici81aIKZzLC+lLGOUmR2fFJyM5OsVLxKsko=-----END CERTIFICATE-----\",\n        \"private_key\":\"-----BEGIN RSA PRIVATE KEY-----\\nProc-Type: 4,ENCRYPTED\\nDEK-Info: DES-EDE3-CBC,CCAC26A4133947CB\\n\\np3KJ4FI3wcz3I0MtiLkrznkjWFvprVmoNywySUGb5IqZViJZqCMEsyU9a9iDsSfP\\nZ07cg9GviV21WYIPSxZOQrpy1g1VWILzFnH+J6z8dSH4mxXh0PwdOzYgAeqkrIVM\\nJ7KRm6t222dZFjjXK3eEcLmBLGo29XwVJxKHx+l4++gU1LZmeHZR5M8fJ4jejUly\\n7sqzPlmRF0N3I4lwKVj+PfQTVz43QoCnpxOjuSEL4liBrc2agY2xH1O0PFyHimz9\\n3XM9HR/iuPHW0N2D+NPjXlWKacerupH9d4i9IYIagzB+HTgej8limdo03GmmxcZ6\\nYNa58n5yQSaqu0TPRU9DsrKeGjadHTlZQGdzfq1SWsROCnHLrXFKE2ozIG3+hxA5\\nujBF/QWpX5+inXUwDJhBxp8isHbPEnBEUUd6ZRzCTjvN0jaUti5B9yFhO2G6mbE8\\nCvhyzQK8oJqsjZXnlcpPf95LP+9XbcCDjLSIaWJstzXO9tPiv6+x1MVWmivtRHcC\\nSTzpx8jAGCiG6ejLqWB87ZXiZm7ujlCBheHSf5RHwNHhUvoP2JEYalDDRxjcDMSx\\n4uV42Np4yJlIQEDlGHcBlXoL7vEukFpuWgkYdpcZy/Ou9qz8mXrpLcu8C8MhLmSC\\nixGoR5iRhV7cxoHLyuCzj87eYEA73Xu238DQorSEEuiVFnLzQ2+PJMs4qoI14q/L\\notlBDz+Ko6DrU/EZROYmiqMkLKXR2sx9zNAJwPYRs6nSH08tZ3dwqzZbgtP3Wazi\\nhLWHt5/En7wQRA5a+/dDEHXSoLvvSQ9jvhclhWf+eCYuq2eH+g54oyJGRSY+8GV7\\nujhLxkzl/3OZdhZPWoz4U13KpbSTcNWu5Y7oGDoabw19UbvqmLf1PJkpDH/tQgzB\\nxYtsLBRUcofpYoeIiIxfAA4do5WilJc8xqrGhkE4WcHfY24HXAiOvsjbxV+BRprX\\n1jtgJpV/9nJESMap+8PxipGUFRGjB83/uwJaa6mLftEKflX8i4MZ+HnqraXERsqA\\nWRUcDHIWmFfpzIB3iNuxawVvPH8NdCSPmQ9qTb8Cozl0AuOK2E9S+ke8oiYQScWR\\nLdu+zhej7GjuQ9R+Ub+wPWqvOA5qLXejqnCexVScDUuN+z9JWM3N2FG1MwxhAzhP\\ndEfoQHoBn6uyOmrVGP6fosV3chqhPoec42KeOAm1xDvx692isaIy1jPgIyPxeqhm\\n2Tw4E+02R7dlP8Ljf7JzfLm4oKpWHWlcHeqg24x6lY/wXU1RBcWaTa0AQUwoGm2m\\nIQCPfIqOEv/QC2HpO7SVCYkl65KwR0oTd1AzYxdxEq3xHQbh69EL0FGZPVxVCPI+\\nhEAyifKy1/tm3l91Rf/kGpHY7nIQKCXH49tmFwix8gke2nZJmRgX7/zAdMOAKeKH\\nAaIl4nQtv14EbaasMgnn9qgaDYnWzaReEob2QlQ/WYlTor61+KFpGtcf9jAkgudT\\n2op+4CF7wT2+aTXdtkVWfmv++iB8GnlqZdxLvyG1cTYjjYHVFbMSWQnxzQqiE2ms\\nQgp+byjWCumpsWTMdTO+d9NkDOo80vDpaRxEgebmhJ0MbX+eFjBgVg==\\n-----END RSA PRIVATE KEY-----\",\n      \"passphrase\": \"helloworld\"\n  }\n}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "maxLength": 100,
              "description": "General description for the certificate issuer.",
              "example": "GlobalSign sample issuer",
              "x-nullable": true,
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "General attributes for connecting the certificate issuer.\nWhen the issuer_type is GLOBAL_SIGN, the value is empty.\nWhen the issuer_type is CFSSL_AUTH, see definition of CfsslAttributes.",
              "example": [],
              "api_fieldname": "issuer_attributes",
              "entity_fieldname": "issuer_attributes",
              "parameter_fieldname": "issuer_attributes",
              "in": "body",
              "required": false,
              "_key": "issuer_attributes"
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "The credentials required to connect to the certificate issuer.\nWhen the issuer_type is GLOBAL_SIGN, see definition of GlobalSignCredentials.\nWhen the issuer_type is CFSSL_AUTH, see definition of CfsslAuthCredentials.",
              "example": [],
              "name": "issuer_credentials",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "issuer_credentials",
              "api_fieldname": "issuer_credentials",
              "external_param": true,
              "parameter_fieldname": "issuer_credentials",
              "required": true,
              "_key": "issuer_credentials"
            },
            {
              "type": "string",
              "enum": [
                "GLOBAL_SIGN",
                "CFSSL_AUTH"
              ],
              "description": "Certificate issuer type.\n- GLOBAL_SIGN:\n  Certificates are issued by GlobalSign service. You must provide your own GlobalSign account credentials.\n- CFSSL_AUTH:\n  Certificates are issued by CFSSL authenticated signing service.\n  You must provide your own CFSSL host_url and credentials.",
              "example": "GLOBAL_SIGN",
              "api_fieldname": "issuer_type",
              "entity_fieldname": "issuer_type",
              "parameter_fieldname": "issuer_type",
              "in": "body",
              "required": true,
              "enum_reference": "certificate_issuer_type_enum",
              "_key": "issuer_type"
            },
            {
              "type": "string",
              "maxLength": 50,
              "description": "Certificate issuer name, unique per account.",
              "example": "GS Issuer",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "Created.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation UTC time RFC3339.",
                    "example": "2017-01-01T00:00:00Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "General description for the certificate issuer.",
                    "example": "GlobalSign sample issuer",
                    "x-nullable": true,
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "description": "Entity instance signature.",
                    "example": "1",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "Certificate issuer ID.",
                    "example": "01234567890ABCDEF01234567890ABCDEF",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "General attributes for connecting the certificate issuer.\nWhen the issuer_type is GLOBAL_SIGN, the value is empty.\nWhen the issuer_type is CFSSL_AUTH, see definition of CfsslAttributes.",
                    "example": [],
                    "api_fieldname": "issuer_attributes",
                    "entity_fieldname": "issuer_attributes",
                    "_key": "issuer_attributes"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "GLOBAL_SIGN",
                      "CFSSL_AUTH"
                    ],
                    "description": "Certificate issuer type.\n- GLOBAL_SIGN:\n  Certificates are issued by GlobalSign service. You must provide your own GlobalSign account credentials.\n- CFSSL_AUTH:\n  Certificates are issued by CFSSL authenticated signing service.\n  You must provide your own CFSSL host_url and credentials.",
                    "example": "GLOBAL_SIGN",
                    "api_fieldname": "issuer_type",
                    "entity_fieldname": "issuer_type",
                    "_key": "issuer_type"
                  },
                  {
                    "type": "string",
                    "maxLength": 50,
                    "description": "Certificate issuer name, unique per account.",
                    "example": "GS Issuer",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "certificate-issuer"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  }
                ],
                "required": [
                  "issuer_type"
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "certificate_issuer"
                }
              },
              "_key": "201"
            },
            {
              "description": "Validation error: The data used to create the certificate issuer failed validation.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "You are not authorized to view the resource.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Conflict. A certificate issuer with this name already exists.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            },
            {
              "description": "The request failed due to customer configured external service.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "424"
            }
          ],
          "path": "/v3/certificate-issuers",
          "summary": "Create certificate issuer.",
          "return_type": "certificate_issuer",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "certificate_issuer"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "id"
          ],
          "group_id": "Security",
          "parameter_map": {
            "certificate-issuer-id": "id"
          },
          "operation_id": "createCertificateIssuer",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete a certificate issuer by ID.\n<br>\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/0162155dc77d507b9d48a91b00000000 \\\n-H 'Authorization: Bearer <access_key>' \\\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "certificate-issuer-id",
              "in": "path",
              "description": "Certificate issuer ID.\nAn active certificate issuer cannot be deleted.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "certificate-issuer-id",
              "external_param": false,
              "parameter_fieldname": "certificate-issuer-id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Certificate issuer deleted.",
              "_key": "204"
            },
            {
              "description": "Validation error: An active certificate issuer cannot be deleted.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/certificate-issuers/{certificate-issuer-id}",
          "summary": "Delete certificate issuer.",
          "return_type": "certificate_issuer",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "certificate_issuer"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Security",
          "parameter_map": {
            "certificate-issuer-id": "id"
          },
          "operation_id": "deleteCertificateIssuer",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "**Note:** This endpoint does not use pagination, and therefore ignores list control parameters such as `limit` or `after`.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "The ID of the item after which to retrieve the next page.",
              "example": "01631667477600000000000100100374",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "in": "query",
              "name": "after",
              "external_param": true,
              "parameter_fieldname": "after",
              "required": false,
              "_key": "after"
            },
            {
              "description": "Comma-separated list of data fields to return. Currently supported: `total_count`.",
              "in": "query",
              "name": "include",
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "required": false,
              "_key": "include"
            },
            {
              "type": "integer",
              "description": "The number of results to return (2-1000). Values outside of this range are set to the closest limit.",
              "example": 50,
              "minimum": 2,
              "maximum": 1000,
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "in": "query",
              "name": "limit",
              "external_param": true,
              "parameter_fieldname": "limit",
              "required": false,
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order. Acceptable values: ASC, DESC. Default: ASC.",
              "example": "DESC",
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "in": "query",
              "name": "order",
              "external_param": true,
              "parameter_fieldname": "order",
              "required": false,
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "The ID of the item after which to retrieve the next page.",
                    "example": "01631667477600000000000100100374",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "in": "query",
                    "name": "after",
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "required": false,
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "format": "date-time",
                          "description": "Creation UTC time RFC3339.",
                          "example": "2017-01-01T00:00:00Z",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "description": "General description for the certificate issuer.",
                          "example": "GlobalSign sample issuer",
                          "x-nullable": true,
                          "_key": "description"
                        },
                        {
                          "type": "string",
                          "description": "Entity instance signature.",
                          "example": "1",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "description": "Certificate issuer ID.",
                          "example": "01234567890ABCDEF01234567890ABCDEF",
                          "_key": "id"
                        },
                        {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "General attributes for connecting the certificate issuer.\nWhen the issuer_type is GLOBAL_SIGN, the value is empty.\nWhen the issuer_type is CFSSL_AUTH, see definition of CfsslAttributes.",
                          "example": [],
                          "_key": "issuer_attributes"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "GLOBAL_SIGN",
                            "CFSSL_AUTH"
                          ],
                          "description": "Certificate issuer type.\n- GLOBAL_SIGN:\n  Certificates are issued by GlobalSign service. You must provide your own GlobalSign account credentials.\n- CFSSL_AUTH:\n  Certificates are issued by CFSSL authenticated signing service.\n  You must provide your own CFSSL host_url and credentials.",
                          "example": "GLOBAL_SIGN",
                          "_key": "issuer_type"
                        },
                        {
                          "type": "string",
                          "maxLength": 50,
                          "description": "Certificate issuer name, unique per account.",
                          "example": "GS Issuer",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "certificate-issuer"
                          ],
                          "_key": "object"
                        }
                      ],
                      "required": [
                        "issuer_type"
                      ],
                      "foreign_key": {
                        "group": "Security",
                        "entity": "certificate_issuer"
                      }
                    },
                    "description": "List of certificate issuers.",
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "description": "More results are available.",
                    "example": false,
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "description": "The number of results to return (2-1000). Values outside of this range are set to the closest limit.",
                    "example": 50,
                    "minimum": 2,
                    "maximum": 1000,
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "in": "query",
                    "name": "limit",
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "required": false,
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "The type of this API object is `list`.",
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order. Acceptable values: ASC, DESC. Default: ASC.",
                    "example": "DESC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "in": "query",
                    "name": "order",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "required": false,
                    "_key": "order"
                  },
                  {
                    "format": "integer",
                    "type": "integer",
                    "example": 1,
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Security",
                  "entity": "certificate_issuer"
                }
              },
              "_key": "200"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/certificate-issuers",
          "summary": "Get certificate issuers list.",
          "return_type": "paginated_response(certificate_issuer)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "certificate_issuer"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "has_more",
            "total_count",
            "data"
          ],
          "foreign_key_priority": "self",
          "group_id": "Security",
          "parameter_map": {
            "certificate-issuer-id": "id"
          },
          "operation_id": "getCertificateIssuers",
          "pagination": true,
          "foreign_key": {
            "group": "Security",
            "entity": "certificate_issuer"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "(No description provided)",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "Certificate issuer ID.",
              "example": "01234567890ABCDEF01234567890ABCDEF",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "certificate-issuer-id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation UTC time RFC3339.",
                    "example": "2017-01-01T00:00:00Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "General description for the certificate issuer.",
                    "example": "GlobalSign sample issuer",
                    "x-nullable": true,
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "description": "Entity instance signature.",
                    "example": "1",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "Certificate issuer ID.",
                    "example": "01234567890ABCDEF01234567890ABCDEF",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "General attributes for connecting the certificate issuer.\nWhen the issuer_type is GLOBAL_SIGN, the value is empty.\nWhen the issuer_type is CFSSL_AUTH, see definition of CfsslAttributes.",
                    "example": [],
                    "api_fieldname": "issuer_attributes",
                    "entity_fieldname": "issuer_attributes",
                    "_key": "issuer_attributes"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "GLOBAL_SIGN",
                      "CFSSL_AUTH"
                    ],
                    "description": "Certificate issuer type.\n- GLOBAL_SIGN:\n  Certificates are issued by GlobalSign service. You must provide your own GlobalSign account credentials.\n- CFSSL_AUTH:\n  Certificates are issued by CFSSL authenticated signing service.\n  You must provide your own CFSSL host_url and credentials.",
                    "example": "GLOBAL_SIGN",
                    "api_fieldname": "issuer_type",
                    "entity_fieldname": "issuer_type",
                    "_key": "issuer_type"
                  },
                  {
                    "type": "string",
                    "maxLength": 50,
                    "description": "Certificate issuer name, unique per account.",
                    "example": "GS Issuer",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "certificate-issuer"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  }
                ],
                "required": [
                  "issuer_type"
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "certificate_issuer"
                }
              },
              "_key": "200"
            },
            {
              "description": "Validation error: The data used to get the certificate issuer failed validation.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/certificate-issuers/{certificate-issuer-id}",
          "summary": "Get certificate issuer by ID.",
          "return_type": "certificate_issuer",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "certificate_issuer"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "issuer_type",
            "name",
            "description",
            "issuer_attributes"
          ],
          "group_id": "Security",
          "parameter_map": {
            "certificate-issuer-id": "id"
          },
          "operation_id": "getCertificateIssuer",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update a certificate issuer.\n<br>\n**Example:**\n\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621560be51507b9d48a91b00000000 \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json;charset=UTF-8' \\\n-d '{\n  \"description\": \"Sample GlobalSign certificate issuer - updated.\",\n  \"name\": \"GlobalSign Issuer\"\n}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "maxLength": 100,
              "description": "General description for the certificate issuer.",
              "example": "GlobalSign sample issuer",
              "x-nullable": true,
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "type": "string",
              "description": "Certificate issuer ID.",
              "example": "01234567890ABCDEF01234567890ABCDEF",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "certificate-issuer-id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "General attributes for connecting the certificate issuer.\nWhen the issuer_type is GLOBAL_SIGN, the value is empty.\nWhen the issuer_type is CFSSL_AUTH, see definition of CfsslAttributes.",
              "example": [],
              "api_fieldname": "issuer_attributes",
              "entity_fieldname": "issuer_attributes",
              "parameter_fieldname": "issuer_attributes",
              "in": "body",
              "required": false,
              "_key": "issuer_attributes"
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "The credentials required to connect to the certificate issuer.\nWhen the issuer_type is GLOBAL_SIGN, see definition of GlobalSignCredentials.\nWhen the issuer_type is CFSSL_AUTH, see definition of CfsslAuthCredentials.",
              "example": [],
              "name": "issuer_credentials",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "issuer_credentials",
              "api_fieldname": "issuer_credentials",
              "external_param": true,
              "parameter_fieldname": "issuer_credentials",
              "required": false,
              "_key": "issuer_credentials"
            },
            {
              "type": "string",
              "maxLength": 50,
              "description": "Certificate issuer name, unique per account.",
              "example": "GS Issuer",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation UTC time RFC3339.",
                    "example": "2017-01-01T00:00:00Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "General description for the certificate issuer.",
                    "example": "GlobalSign sample issuer",
                    "x-nullable": true,
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "description": "Entity instance signature.",
                    "example": "1",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "Certificate issuer ID.",
                    "example": "01234567890ABCDEF01234567890ABCDEF",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "General attributes for connecting the certificate issuer.\nWhen the issuer_type is GLOBAL_SIGN, the value is empty.\nWhen the issuer_type is CFSSL_AUTH, see definition of CfsslAttributes.",
                    "example": [],
                    "api_fieldname": "issuer_attributes",
                    "entity_fieldname": "issuer_attributes",
                    "_key": "issuer_attributes"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "GLOBAL_SIGN",
                      "CFSSL_AUTH"
                    ],
                    "description": "Certificate issuer type.\n- GLOBAL_SIGN:\n  Certificates are issued by GlobalSign service. You must provide your own GlobalSign account credentials.\n- CFSSL_AUTH:\n  Certificates are issued by CFSSL authenticated signing service.\n  You must provide your own CFSSL host_url and credentials.",
                    "example": "GLOBAL_SIGN",
                    "api_fieldname": "issuer_type",
                    "entity_fieldname": "issuer_type",
                    "_key": "issuer_type"
                  },
                  {
                    "type": "string",
                    "maxLength": 50,
                    "description": "Certificate issuer name, unique per account.",
                    "example": "GS Issuer",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "certificate-issuer"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  }
                ],
                "required": [
                  "issuer_type"
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "certificate_issuer"
                }
              },
              "_key": "200"
            },
            {
              "description": "Validation error: The data used to update the certificate issuer failed validation.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            },
            {
              "description": "Conflict. A certificate issuer with this name already exists.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            },
            {
              "description": "The request failed due to customer-configured external service.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "424"
            }
          ],
          "path": "/v3/certificate-issuers/{certificate-issuer-id}",
          "summary": "Update certificate issuer.",
          "return_type": "certificate_issuer",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "certificate_issuer"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "issuer_type"
          ],
          "group_id": "Security",
          "parameter_map": {
            "certificate-issuer-id": "id"
          },
          "operation_id": "updateCertificateIssuer",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        },
        {
          "description": "Validates the certificate issuer by sending a signing request for a test certificate. This should be done before the configuration is made active.\n<br>\n**Note:**\nThe API requests the 3rd party CA to sign a test certificate.\nFor some 3rd party CAs, this operation may use the account quota.\n<br>\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621a36719d507b9d48a91b00000000/verify \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json;charset=UTF-8' \\\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "certificate-issuer-id",
              "in": "path",
              "description": "Certificate issuer ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "certificate-issuer-id",
              "external_param": false,
              "parameter_fieldname": "certificate-issuer-id",
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "verify",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "Provides details in case of failure.",
                    "example": "Message describing the verification failure",
                    "api_fieldname": "message",
                    "entity_fieldname": "message",
                    "_key": "message"
                  },
                  {
                    "type": "boolean",
                    "description": "Indicates whether the certificate issuer was verified successfully.",
                    "example": false,
                    "api_fieldname": "successful",
                    "entity_fieldname": "successful",
                    "_key": "successful"
                  }
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "verification_response"
                }
              },
              "_key": "200"
            },
            {
              "description": "Validation error",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            },
            {
              "description": "The request failed due to customer configured external service.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "424"
            }
          ],
          "path": "/v3/certificate-issuers/{certificate-issuer-id}/verify",
          "summary": "Verify certificate issuer.",
          "return_type": "verification_response",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "verification_response"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "successful",
            "message"
          ],
          "group_id": "Security",
          "parameter_map": {
            "certificate-issuer-id": "id"
          },
          "unaggregated": true,
          "operation_id": "verifyCertificateIssuer",
          "foreign_key": {
            "entity": "verification_response",
            "group": "Security"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "verify"
        }
      ],
      "fields": [
        {
          "type": "string",
          "format": "date-time",
          "description": "Creation UTC time RFC3339.",
          "example": "2017-01-01T00:00:00Z",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "maxLength": 100,
          "description": "General description for the certificate issuer.",
          "example": "GlobalSign sample issuer",
          "x-nullable": true,
          "api_fieldname": "description",
          "readOnly": false,
          "required": false,
          "_key": "description"
        },
        {
          "type": "string",
          "description": "Certificate issuer ID.",
          "example": "01234567890ABCDEF01234567890ABCDEF",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "General attributes for connecting the certificate issuer.\nWhen the issuer_type is GLOBAL_SIGN, the value is empty.\nWhen the issuer_type is CFSSL_AUTH, see definition of CfsslAttributes.",
          "example": [],
          "api_fieldname": "issuer_attributes",
          "readOnly": false,
          "required": false,
          "_key": "issuer_attributes"
        },
        {
          "type": "string",
          "enum": [
            "GLOBAL_SIGN",
            "CFSSL_AUTH"
          ],
          "description": "Certificate issuer type.\n- GLOBAL_SIGN:\n  Certificates are issued by GlobalSign service. You must provide your own GlobalSign account credentials.\n- CFSSL_AUTH:\n  Certificates are issued by CFSSL authenticated signing service.\n  You must provide your own CFSSL host_url and credentials.",
          "example": "GLOBAL_SIGN",
          "api_fieldname": "issuer_type",
          "readOnly": false,
          "required": true,
          "enum_reference": "certificate_issuer_type_enum",
          "_key": "issuer_type"
        },
        {
          "type": "string",
          "maxLength": 50,
          "description": "Certificate issuer name, unique per account.",
          "example": "GS Issuer",
          "api_fieldname": "name",
          "readOnly": false,
          "required": true,
          "_key": "name"
        }
      ],
      "field_renames": [],
      "tags": [
        "Security and identity - certificate issuers"
      ],
      "group_id": "Security",
      "_key": "certificate_issuer"
    },
    {
      "swagger_models": [
        "CertificateIssuerConfigListResponse",
        "CertificateIssuerConfigRequest",
        "CertificateIssuerConfigResponse",
        "CreateCertificateIssuerConfig"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Configure the certificate issuer to use when creating device custom certificates.\n<br>\n**Example:**\n\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json;charset=UTF-8' \\\n-d '{\n  \"reference\": \"customer.dlms\",\n  \"certificate_issuer_id\": \"01621a36719d507b9d48a91b00000000\"\n}'\n```",
          "field_renames": [],
          "fields": [
            {
              "x-nullable": true,
              "type": "string",
              "description": "Certificate issuer ID.\nNull if Device Management internal HSM is used.",
              "example": "01648415a2a30242ac18000500000000",
              "api_fieldname": "certificate_issuer_id",
              "entity_fieldname": "certificate_issuer_id",
              "parameter_fieldname": "certificate_issuer_id",
              "in": "body",
              "required": false,
              "_key": "certificate_issuer_id"
            },
            {
              "type": "string",
              "description": "The certificate name to which the certificate issuer configuration applies.",
              "example": "customer.dlms",
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "parameter_fieldname": "reference",
              "in": "body",
              "required": true,
              "_key": "reference"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "x-nullable": true,
                    "type": "string",
                    "description": "Certificate issuer ID.\nNull if Device Management internal HSM is used.",
                    "example": "01648415a2a30242ac18000500000000",
                    "api_fieldname": "certificate_issuer_id",
                    "entity_fieldname": "certificate_issuer_id",
                    "_key": "certificate_issuer_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Created UTC time RFC3339.",
                    "example": "2017-01-01T00:00:00Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "Entity instance signature.",
                    "example": "1",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "Certificate issuer ID. configuration.",
                    "example": "01648415a2a30242ac18000500000000",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "api_fieldname": "is_custom",
                    "entity_fieldname": "is_custom",
                    "_key": "is_custom"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "certificate-issuer-configuration"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The certificate name to which the certificate issuer configuration applies.",
                    "example": "customer.dlms",
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Updated UTC time RFC3339.",
                    "example": "2017-02-01T00:00:00Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "certificate_issuer_config"
                }
              },
              "_key": "201"
            },
            {
              "description": "Validation error.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A certificate issuer configuration with this reference already exists.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/certificate-issuer-configurations",
          "summary": "Create certificate issuer configuration.",
          "return_type": "certificate_issuer_config",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "certificate_issuer_config"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "is_custom",
            "id",
            "created_at",
            "updated_at"
          ],
          "group_id": "Security",
          "parameter_map": {
            "certificate-issuer-configuration-id": "id"
          },
          "operation_id": "createCertificateIssuerConfig",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete certificate issuer configuration.\nYou can only delete custom certificate configurations.",
          "field_renames": [],
          "fields": [
            {
              "name": "certificate-issuer-configuration-id",
              "in": "path",
              "description": "Certificate issuer ID configuration.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "certificate-issuer-configuration-id",
              "external_param": false,
              "parameter_fieldname": "certificate-issuer-configuration-id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "No content.",
              "_key": "204"
            },
            {
              "description": "Validation error.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/certificate-issuer-configurations/{certificate-issuer-configuration-id}",
          "summary": "Delete certificate issuer configuration.",
          "return_type": "certificate_issuer_config",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "certificate_issuer_config"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "is_custom"
          ],
          "group_id": "Security",
          "parameter_map": {
            "certificate-issuer-configuration-id": "id"
          },
          "operation_id": "deleteCertificateIssuerConfigByID",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Provides the configured certificate issuer used when creating device\ncertificates for LwM2M.",
          "field_renames": [],
          "fields": [],
          "method": "get",
          "mode": "get_default",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "x-nullable": true,
                    "type": "string",
                    "description": "Certificate issuer ID.\nNull if Device Management internal HSM is used.",
                    "example": "01648415a2a30242ac18000500000000",
                    "api_fieldname": "certificate_issuer_id",
                    "entity_fieldname": "certificate_issuer_id",
                    "_key": "certificate_issuer_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Created UTC time RFC3339.",
                    "example": "2017-01-01T00:00:00Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "Entity instance signature.",
                    "example": "1",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "Certificate issuer ID. configuration.",
                    "example": "01648415a2a30242ac18000500000000",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "api_fieldname": "is_custom",
                    "entity_fieldname": "is_custom",
                    "_key": "is_custom"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "certificate-issuer-configuration"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The certificate name to which the certificate issuer configuration applies.",
                    "example": "customer.dlms",
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Updated UTC time RFC3339.",
                    "example": "2017-02-01T00:00:00Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "certificate_issuer_config"
                }
              },
              "_key": "200"
            },
            {
              "description": "Validation error.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/certificate-issuer-configurations/lwm2m",
          "summary": "Get certificate issuer configuration.",
          "return_type": "certificate_issuer_config",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "certificate_issuer_config"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "is_custom",
            "id",
            "certificate_issuer_id",
            "reference",
            "created_at",
            "updated_at"
          ],
          "group_id": "Security",
          "parameter_map": {
            "certificate-issuer-configuration-id": "id"
          },
          "operation_id": "getCertificateIssuerConfig",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "get_default"
        },
        {
          "description": "Get certificate issuer configurations, optionally filtered by reference.\n<br>\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json;charset=UTF-8' \\\n```\n<br>\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations?reference__eq=dlms \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json;charset=UTF-8' \\\n```\n**Note:** This endpoint does not implement pagination, and therefore ignores list control parameters such as `limit` or `after`.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "The ID of the item after which to retrieve the next page.",
              "example": "01631667477600000000000100100374",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "in": "query",
              "name": "after",
              "external_param": true,
              "parameter_fieldname": "after",
              "required": false,
              "_key": "after"
            },
            {
              "description": "Comma-separated list of data fields to return. Currently supported: `total_count`.",
              "in": "query",
              "name": "include",
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "required": false,
              "_key": "include"
            },
            {
              "type": "integer",
              "description": "The number of results to return (2-1000). Values outside of this range are set to the closest limit.",
              "example": 50,
              "minimum": 2,
              "maximum": 1000,
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "in": "query",
              "name": "limit",
              "external_param": true,
              "parameter_fieldname": "limit",
              "required": false,
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order. Acceptable values: ASC, DESC. Default: ASC.",
              "example": "DESC",
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "in": "query",
              "name": "order",
              "external_param": true,
              "parameter_fieldname": "order",
              "required": false,
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "An offset token for current page.",
                    "example": "01631667477600000000000100100374",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "x-nullable": true,
                          "type": "string",
                          "description": "Certificate issuer ID.\nNull if Device Management internal HSM is used.",
                          "example": "01648415a2a30242ac18000500000000",
                          "_key": "certificate_issuer_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "description": "Created UTC time RFC3339.",
                          "example": "2017-01-01T00:00:00Z",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "description": "Entity instance signature.",
                          "example": "1",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "description": "Certificate issuer ID. configuration.",
                          "example": "01648415a2a30242ac18000500000000",
                          "_key": "id"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "_key": "is_custom"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "certificate-issuer-configuration"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "description": "The certificate name to which the certificate issuer configuration applies.",
                          "example": "customer.dlms",
                          "_key": "reference"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "description": "Updated UTC time RFC3339.",
                          "example": "2017-02-01T00:00:00Z",
                          "_key": "updated_at"
                        }
                      ],
                      "foreign_key": {
                        "group": "Security",
                        "entity": "certificate_issuer_config"
                      }
                    },
                    "description": "List of certificate issuers.",
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "description": "More results are available.",
                    "example": false,
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "description": "The number of results to return (2-1000). Values outside of this range are set to the closest limit.",
                    "example": 50,
                    "minimum": 2,
                    "maximum": 1000,
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "The type of this API object is `list`.",
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation time.",
                    "example": "DESC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "format": "integer",
                    "type": "integer",
                    "example": 1,
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Security",
                  "entity": "certificate_issuer_config"
                }
              },
              "_key": "200"
            },
            {
              "description": "Validation error.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/certificate-issuer-configurations",
          "summary": "Get certificate issuer configurations.",
          "return_type": "paginated_response(certificate_issuer_config)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "certificate_issuer_config"
          },
          "x_filter": {
            "reference": [
              "eq"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "is_custom",
            "has_more",
            "total_count",
            "data",
            "reference__eq"
          ],
          "foreign_key_priority": "self",
          "group_id": "Security",
          "parameter_map": {
            "certificate-issuer-configuration-id": "id"
          },
          "operation_id": "getCertificateIssuerConfigs",
          "pagination": true,
          "foreign_key": {
            "group": "Security",
            "entity": "certificate_issuer_config"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Provides the configured certificate issuer.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "Certificate issuer ID. configuration.",
              "example": "01648415a2a30242ac18000500000000",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "certificate-issuer-configuration-id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "x-nullable": true,
                    "type": "string",
                    "description": "Certificate issuer ID.\nNull if Device Management internal HSM is used.",
                    "example": "01648415a2a30242ac18000500000000",
                    "api_fieldname": "certificate_issuer_id",
                    "entity_fieldname": "certificate_issuer_id",
                    "_key": "certificate_issuer_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Created UTC time RFC3339.",
                    "example": "2017-01-01T00:00:00Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "Entity instance signature.",
                    "example": "1",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "Certificate issuer ID. configuration.",
                    "example": "01648415a2a30242ac18000500000000",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "api_fieldname": "is_custom",
                    "entity_fieldname": "is_custom",
                    "_key": "is_custom"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "certificate-issuer-configuration"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The certificate name to which the certificate issuer configuration applies.",
                    "example": "customer.dlms",
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Updated UTC time RFC3339.",
                    "example": "2017-02-01T00:00:00Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "certificate_issuer_config"
                }
              },
              "_key": "200"
            },
            {
              "description": "Validation error.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/certificate-issuer-configurations/{certificate-issuer-configuration-id}",
          "summary": "Get certificate issuer configuration.",
          "return_type": "certificate_issuer_config",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "certificate_issuer_config"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "is_custom",
            "certificate_issuer_id",
            "reference",
            "created_at",
            "updated_at"
          ],
          "group_id": "Security",
          "parameter_map": {
            "certificate-issuer-configuration-id": "id"
          },
          "operation_id": "getCertificateIssuerConfigByID",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update certificate issuer configuration.",
          "field_renames": [],
          "fields": [
            {
              "x-nullable": true,
              "type": "string",
              "description": "Certificate issuer ID.\nNull if Device Management internal HSM is used.",
              "example": "01648415a2a30242ac18000500000000",
              "api_fieldname": "certificate_issuer_id",
              "entity_fieldname": "certificate_issuer_id",
              "parameter_fieldname": "certificate_issuer_id",
              "in": "body",
              "required": false,
              "_key": "certificate_issuer_id"
            },
            {
              "type": "string",
              "description": "Certificate issuer ID. configuration.",
              "example": "01648415a2a30242ac18000500000000",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "certificate-issuer-configuration-id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "x-nullable": true,
                    "type": "string",
                    "description": "Certificate issuer ID.\nNull if Device Management internal HSM is used.",
                    "example": "01648415a2a30242ac18000500000000",
                    "api_fieldname": "certificate_issuer_id",
                    "entity_fieldname": "certificate_issuer_id",
                    "_key": "certificate_issuer_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Created UTC time RFC3339.",
                    "example": "2017-01-01T00:00:00Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "Entity instance signature.",
                    "example": "1",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "Certificate issuer ID. configuration.",
                    "example": "01648415a2a30242ac18000500000000",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "api_fieldname": "is_custom",
                    "entity_fieldname": "is_custom",
                    "_key": "is_custom"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "certificate-issuer-configuration"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The certificate name to which the certificate issuer configuration applies.",
                    "example": "customer.dlms",
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Updated UTC time RFC3339.",
                    "example": "2017-02-01T00:00:00Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "certificate_issuer_config"
                }
              },
              "_key": "200"
            },
            {
              "description": "Validation error.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/certificate-issuer-configurations/{certificate-issuer-configuration-id}",
          "summary": "Update certificate issuer configuration.",
          "return_type": "certificate_issuer_config",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "certificate_issuer_config"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "is_custom",
            "reference",
            "created_at",
            "updated_at"
          ],
          "group_id": "Security",
          "parameter_map": {
            "certificate-issuer-configuration-id": "id"
          },
          "operation_id": "updateCertificateIssuerConfigByID",
          "additional_operations": [
            {
              "operation_id": "updateCertificateIssuerConfig",
              "notes": "After retrieving the resource using the `lwm2m` method, it can modified using using this SDK method."
            }
          ],
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "x-nullable": true,
          "type": "string",
          "description": "Certificate issuer ID.\nNull if Device Management internal HSM is used.",
          "example": "01648415a2a30242ac18000500000000",
          "api_fieldname": "certificate_issuer_id",
          "readOnly": false,
          "required": true,
          "_key": "certificate_issuer_id"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Created UTC time RFC3339.",
          "example": "2017-01-01T00:00:00Z",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "description": "Certificate issuer ID. configuration.",
          "example": "01648415a2a30242ac18000500000000",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "string",
          "description": "The certificate name to which the certificate issuer configuration applies.",
          "example": "customer.dlms",
          "api_fieldname": "reference",
          "readOnly": false,
          "required": true,
          "_key": "reference"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Updated UTC time RFC3339.",
          "example": "2017-02-01T00:00:00Z",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "Security and identity - certificate issuer configurations"
      ],
      "group_id": "Security",
      "_key": "certificate_issuer_config"
    },
    {
      "swagger_models": [
        "BrandingColor",
        "BrandingColorList"
      ],
      "primary_key_field": "reference",
      "methods": [
        {
          "description": "Resets the branding color to its dark theme default.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/{reference} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "is_primary_key": true,
              "_override": true,
              "type": "string",
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "enum": [
                "error_color",
                "primary",
                "secondary",
                "success_color",
                "warning_color",
                "canvas_background",
                "canvas_background_font_color",
                "workspace_background",
                "workspace_background_font_color",
                "info_color",
                "info_font_color",
                "primary_font_color",
                "secondary_font_color",
                "error_font_color",
                "success_font_color",
                "warning_font_color"
              ],
              "name": "reference",
              "in": "path",
              "description": "The name of the branding color.",
              "required": true,
              "enum_reference": "dark_theme_color_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Color not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/branding-colors/dark/{reference}",
          "summary": "Reset branding color to default.",
          "return_type": "void",
          "return_info": {
            "self": false,
            "custom": true,
            "type": "void"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Branding",
          "operation_id": "resetDarkColor",
          "spec": {
            "return_type": "void"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve the dark theme branding colors.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "is_primary_key": true,
              "_override": true,
              "type": "string",
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "_key": "reference"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "#f3f93e",
                          "description": "The color given as name (purple) or as a hex code.",
                          "x-nullable": true,
                          "_key": "color"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'branding_color'",
                          "readOnly": true,
                          "enum": [
                            "branding_color"
                          ],
                          "_key": "object"
                        },
                        {
                          "enum": [
                            "error_color",
                            "primary",
                            "secondary",
                            "success_color",
                            "warning_color",
                            "canvas_background",
                            "canvas_background_font_color",
                            "workspace_background",
                            "workspace_background_font_color",
                            "info_color",
                            "info_font_color",
                            "primary_font_color",
                            "secondary_font_color",
                            "error_font_color",
                            "success_font_color",
                            "warning_font_color"
                          ],
                          "type": "string",
                          "description": "Color name.",
                          "is_primary_key": true,
                          "_override": true,
                          "_key": "reference"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update time in UTC.",
                          "readOnly": true,
                          "_key": "updated_at"
                        }
                      ],
                      "foreign_key": {
                        "group": "Branding",
                        "entity": "dark_theme_color"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return, or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Branding",
                  "entity": "dark_theme_color"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/branding-colors/dark",
          "summary": "Get dark theme branding colors.",
          "return_type": "paginated_response(dark_theme_color)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "dark_theme_color"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "limit",
            "after",
            "order",
            "total_count",
            "has_more",
            "data"
          ],
          "foreign_key_priority": "self",
          "group_id": "Branding",
          "operation_id": "getDarkColors",
          "pagination": true,
          "foreign_key": {
            "group": "Branding",
            "entity": "dark_theme_color"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve the requested dark theme branding color.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark/{reference} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "enum": [
                "error_color",
                "primary",
                "secondary",
                "success_color",
                "warning_color",
                "canvas_background",
                "canvas_background_font_color",
                "workspace_background",
                "workspace_background_font_color",
                "info_color",
                "info_font_color",
                "primary_font_color",
                "secondary_font_color",
                "error_font_color",
                "success_font_color",
                "warning_font_color"
              ],
              "type": "string",
              "description": "Color name.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "dark_theme_color_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "example": "#f3f93e",
                    "description": "The color given as name (purple) or as a hex code.",
                    "x-nullable": true,
                    "api_fieldname": "color",
                    "entity_fieldname": "color",
                    "_key": "color"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_color'",
                    "readOnly": true,
                    "enum": [
                      "branding_color"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "error_color",
                      "primary",
                      "secondary",
                      "success_color",
                      "warning_color",
                      "canvas_background",
                      "canvas_background_font_color",
                      "workspace_background",
                      "workspace_background_font_color",
                      "info_color",
                      "info_font_color",
                      "primary_font_color",
                      "secondary_font_color",
                      "error_font_color",
                      "success_font_color",
                      "warning_font_color"
                    ],
                    "type": "string",
                    "description": "Color name.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_light_theme_color"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Color not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/branding-colors/dark/{reference}",
          "summary": "Get dark theme branding color.",
          "return_type": "dark_theme_color",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "dark_theme_color"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "color",
            "updated_at"
          ],
          "group_id": "Branding",
          "operation_id": "getDarkColor",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update a dark theme branding color.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark/primary \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{ \"color\": \"#f3f93e\" }'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "#f3f93e",
              "description": "The color given as name (purple) or as a hex code.",
              "x-nullable": true,
              "api_fieldname": "color",
              "entity_fieldname": "color",
              "parameter_fieldname": "color",
              "in": "body",
              "required": false,
              "_key": "color"
            },
            {
              "enum": [
                "error_color",
                "primary",
                "secondary",
                "success_color",
                "warning_color",
                "canvas_background",
                "canvas_background_font_color",
                "workspace_background",
                "workspace_background_font_color",
                "info_color",
                "info_font_color",
                "primary_font_color",
                "secondary_font_color",
                "error_font_color",
                "success_font_color",
                "warning_font_color"
              ],
              "type": "string",
              "description": "Color name.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "dark_theme_color_reference_enum",
              "_key": "reference"
            },
            {
              "type": "string",
              "format": "date-time",
              "example": "2018-02-14T15:24:14Z",
              "description": "Last update time in UTC.",
              "readOnly": true,
              "api_fieldname": "updated_at",
              "entity_fieldname": "updated_at",
              "parameter_fieldname": "updated_at",
              "in": "body",
              "required": false,
              "_key": "updated_at"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Color has been set successfully.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "example": "#f3f93e",
                    "description": "The color given as name (purple) or as a hex code.",
                    "x-nullable": true,
                    "api_fieldname": "color",
                    "entity_fieldname": "color",
                    "_key": "color"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_color'",
                    "readOnly": true,
                    "enum": [
                      "branding_color"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "error_color",
                      "primary",
                      "secondary",
                      "success_color",
                      "warning_color",
                      "canvas_background",
                      "canvas_background_font_color",
                      "workspace_background",
                      "workspace_background_font_color",
                      "info_color",
                      "info_font_color",
                      "primary_font_color",
                      "secondary_font_color",
                      "error_font_color",
                      "success_font_color",
                      "warning_font_color"
                    ],
                    "type": "string",
                    "description": "Color name.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_light_theme_color"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data format.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Color not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/branding-colors/dark/{reference}",
          "summary": "Updates a dark theme branding color.",
          "return_type": "dark_theme_color",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "dark_theme_color"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Branding",
          "operation_id": "setDarkColor",
          "additional_operations": [
            {
              "operation_id": "bulkSetDarkColors",
              "notes": "Bulk operation is not appriate for SDK's entity model, this functionality is covered by the update method."
            }
          ],
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "#f3f93e",
          "description": "The color given as name (purple) or as a hex code.",
          "x-nullable": true,
          "api_fieldname": "color",
          "readOnly": false,
          "required": false,
          "_key": "color"
        },
        {
          "enum": [
            "error_color",
            "primary",
            "secondary",
            "success_color",
            "warning_color",
            "canvas_background",
            "canvas_background_font_color",
            "workspace_background",
            "workspace_background_font_color",
            "info_color",
            "info_font_color",
            "primary_font_color",
            "secondary_font_color",
            "error_font_color",
            "success_font_color",
            "warning_font_color"
          ],
          "type": "string",
          "description": "Color name.",
          "is_primary_key": true,
          "_override": true,
          "api_fieldname": "reference",
          "readOnly": false,
          "required": false,
          "enum_reference": "dark_theme_color_reference_enum",
          "_key": "reference"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update time in UTC.",
          "readOnly": true,
          "api_fieldname": "updated_at",
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "User interface configuration - colors"
      ],
      "group_id": "Branding",
      "_key": "dark_theme_color"
    },
    {
      "swagger_models": [
        "BrandingImage",
        "BrandingImageList"
      ],
      "primary_key_field": "reference",
      "methods": [
        {
          "description": "Revert an account branding image to dark theme default.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/branding-images/dark/{reference}/clear \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "is_primary_key": true,
              "_override": true,
              "type": "string",
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "enum": [
                "brand_logo_portrait",
                "brand_logo_square",
                "brand_logo_landscape",
                "brand_logo_email",
                "desktop_background_landscape",
                "desktop_background_square",
                "desktop_background_portrait",
                "carousel_image_portrait_0",
                "carousel_image_portrait_1",
                "carousel_image_portrait_2",
                "carousel_image_portrait_3",
                "carousel_image_portrait_4",
                "carousel_image_portrait_5",
                "carousel_image_portrait_6",
                "carousel_image_portrait_7",
                "carousel_image_portrait_8",
                "carousel_image_portrait_9",
                "carousel_image_square_0",
                "carousel_image_square_1",
                "carousel_image_square_2",
                "carousel_image_square_3",
                "carousel_image_square_4",
                "carousel_image_square_5",
                "carousel_image_square_6",
                "carousel_image_square_7",
                "carousel_image_square_8",
                "carousel_image_square_9",
                "carousel_image_landscape_0",
                "carousel_image_landscape_1",
                "carousel_image_landscape_2",
                "carousel_image_landscape_3",
                "carousel_image_landscape_4",
                "carousel_image_landscape_5",
                "carousel_image_landscape_6",
                "carousel_image_landscape_7",
                "carousel_image_landscape_8",
                "carousel_image_landscape_9"
              ],
              "name": "reference",
              "in": "path",
              "description": "Name of the branding images (icon or picture).",
              "required": true,
              "enum_reference": "dark_theme_image_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "post",
          "mode": "delete",
          "responses": [
            {
              "description": "Image reverted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Unknown image reference.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/branding-images/dark/{reference}/clear",
          "summary": "Revert an image to dark theme default.",
          "return_type": "dark_theme_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "dark_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Branding",
          "operation_id": "clearDarkImage",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve metadata for all dark theme branding images.\n\n**Example:**\n`curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-images/dark \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "is_primary_key": true,
              "_override": true,
              "type": "string",
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "_key": "reference"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Entity name: always 'branding_image'",
                          "readOnly": true,
                          "enum": [
                            "branding_image"
                          ],
                          "_key": "object"
                        },
                        {
                          "enum": [
                            "brand_logo_portrait",
                            "brand_logo_square",
                            "brand_logo_landscape",
                            "brand_logo_email",
                            "desktop_background_landscape",
                            "desktop_background_square",
                            "desktop_background_portrait",
                            "carousel_image_portrait_0",
                            "carousel_image_portrait_1",
                            "carousel_image_portrait_2",
                            "carousel_image_portrait_3",
                            "carousel_image_portrait_4",
                            "carousel_image_portrait_5",
                            "carousel_image_portrait_6",
                            "carousel_image_portrait_7",
                            "carousel_image_portrait_8",
                            "carousel_image_portrait_9",
                            "carousel_image_square_0",
                            "carousel_image_square_1",
                            "carousel_image_square_2",
                            "carousel_image_square_3",
                            "carousel_image_square_4",
                            "carousel_image_square_5",
                            "carousel_image_square_6",
                            "carousel_image_square_7",
                            "carousel_image_square_8",
                            "carousel_image_square_9",
                            "carousel_image_landscape_0",
                            "carousel_image_landscape_1",
                            "carousel_image_landscape_2",
                            "carousel_image_landscape_3",
                            "carousel_image_landscape_4",
                            "carousel_image_landscape_5",
                            "carousel_image_landscape_6",
                            "carousel_image_landscape_7",
                            "carousel_image_landscape_8",
                            "carousel_image_landscape_9"
                          ],
                          "type": "string",
                          "description": "Name of the image.",
                          "is_primary_key": true,
                          "_override": true,
                          "_key": "reference"
                        },
                        {
                          "type": "string",
                          "format": "uri",
                          "example": "https://static.mbed.com/123456789.jpg",
                          "description": "The static link to the image.",
                          "readOnly": true,
                          "_key": "static_uri"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update time in UTC.",
                          "readOnly": true,
                          "_key": "updated_at"
                        }
                      ],
                      "foreign_key": {
                        "group": "Branding",
                        "entity": "dark_theme_image"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return, or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Branding",
                  "entity": "dark_theme_image"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/branding-images/dark",
          "summary": "Get metadata of all dark theme images.",
          "return_type": "paginated_response(dark_theme_image)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "dark_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "limit",
            "after",
            "order",
            "total_count",
            "has_more",
            "data"
          ],
          "foreign_key_priority": "self",
          "group_id": "Branding",
          "operation_id": "getAllDarkImageData",
          "pagination": true,
          "foreign_key": {
            "group": "Branding",
            "entity": "dark_theme_image"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve metadata for one account dark theme branding image.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-images/dark/{reference} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "enum": [
                "brand_logo_portrait",
                "brand_logo_square",
                "brand_logo_landscape",
                "brand_logo_email",
                "desktop_background_landscape",
                "desktop_background_square",
                "desktop_background_portrait",
                "carousel_image_portrait_0",
                "carousel_image_portrait_1",
                "carousel_image_portrait_2",
                "carousel_image_portrait_3",
                "carousel_image_portrait_4",
                "carousel_image_portrait_5",
                "carousel_image_portrait_6",
                "carousel_image_portrait_7",
                "carousel_image_portrait_8",
                "carousel_image_portrait_9",
                "carousel_image_square_0",
                "carousel_image_square_1",
                "carousel_image_square_2",
                "carousel_image_square_3",
                "carousel_image_square_4",
                "carousel_image_square_5",
                "carousel_image_square_6",
                "carousel_image_square_7",
                "carousel_image_square_8",
                "carousel_image_square_9",
                "carousel_image_landscape_0",
                "carousel_image_landscape_1",
                "carousel_image_landscape_2",
                "carousel_image_landscape_3",
                "carousel_image_landscape_4",
                "carousel_image_landscape_5",
                "carousel_image_landscape_6",
                "carousel_image_landscape_7",
                "carousel_image_landscape_8",
                "carousel_image_landscape_9"
              ],
              "type": "string",
              "description": "Name of the image.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "dark_theme_image_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_image'",
                    "readOnly": true,
                    "enum": [
                      "branding_image"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "brand_logo_portrait",
                      "brand_logo_square",
                      "brand_logo_landscape",
                      "brand_logo_email",
                      "desktop_background_landscape",
                      "desktop_background_square",
                      "desktop_background_portrait",
                      "carousel_image_portrait_0",
                      "carousel_image_portrait_1",
                      "carousel_image_portrait_2",
                      "carousel_image_portrait_3",
                      "carousel_image_portrait_4",
                      "carousel_image_portrait_5",
                      "carousel_image_portrait_6",
                      "carousel_image_portrait_7",
                      "carousel_image_portrait_8",
                      "carousel_image_portrait_9",
                      "carousel_image_square_0",
                      "carousel_image_square_1",
                      "carousel_image_square_2",
                      "carousel_image_square_3",
                      "carousel_image_square_4",
                      "carousel_image_square_5",
                      "carousel_image_square_6",
                      "carousel_image_square_7",
                      "carousel_image_square_8",
                      "carousel_image_square_9",
                      "carousel_image_landscape_0",
                      "carousel_image_landscape_1",
                      "carousel_image_landscape_2",
                      "carousel_image_landscape_3",
                      "carousel_image_landscape_4",
                      "carousel_image_landscape_5",
                      "carousel_image_landscape_6",
                      "carousel_image_landscape_7",
                      "carousel_image_landscape_8",
                      "carousel_image_landscape_9"
                    ],
                    "type": "string",
                    "description": "Name of the image.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "uri",
                    "example": "https://static.mbed.com/123456789.jpg",
                    "description": "The static link to the image.",
                    "readOnly": true,
                    "api_fieldname": "static_uri",
                    "entity_fieldname": "static_uri",
                    "_key": "static_uri"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_light_theme_image"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Unknown image reference.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/branding-images/dark/{reference}",
          "summary": "Get metadata of a dark theme image.",
          "return_type": "dark_theme_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "dark_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "static_uri",
            "updated_at"
          ],
          "group_id": "Branding",
          "operation_id": "getDarkImageData",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Upload a new account branding image as form data in the dark theme in PNG or JPEG format.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [],
          "fields": [
            {
              "in": "stream",
              "name": "image",
              "description": "The image in PNG or JPEG format as multipart form data.",
              "required": true,
              "type": "file",
              "entity_fieldname": "image",
              "api_fieldname": "image",
              "external_param": true,
              "parameter_fieldname": "image",
              "_key": "image"
            },
            {
              "enum": [
                "brand_logo_portrait",
                "brand_logo_square",
                "brand_logo_landscape",
                "brand_logo_email",
                "desktop_background_landscape",
                "desktop_background_square",
                "desktop_background_portrait",
                "carousel_image_portrait_0",
                "carousel_image_portrait_1",
                "carousel_image_portrait_2",
                "carousel_image_portrait_3",
                "carousel_image_portrait_4",
                "carousel_image_portrait_5",
                "carousel_image_portrait_6",
                "carousel_image_portrait_7",
                "carousel_image_portrait_8",
                "carousel_image_portrait_9",
                "carousel_image_square_0",
                "carousel_image_square_1",
                "carousel_image_square_2",
                "carousel_image_square_3",
                "carousel_image_square_4",
                "carousel_image_square_5",
                "carousel_image_square_6",
                "carousel_image_square_7",
                "carousel_image_square_8",
                "carousel_image_square_9",
                "carousel_image_landscape_0",
                "carousel_image_landscape_1",
                "carousel_image_landscape_2",
                "carousel_image_landscape_3",
                "carousel_image_landscape_4",
                "carousel_image_landscape_5",
                "carousel_image_landscape_6",
                "carousel_image_landscape_7",
                "carousel_image_landscape_8",
                "carousel_image_landscape_9"
              ],
              "type": "string",
              "description": "Name of the image.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "dark_theme_image_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "post",
          "mode": "update",
          "responses": [
            {
              "description": "Image uploaded successfully.",
              "headers": [
                {
                  "type": "string",
                  "description": "Location of the image metadata.",
                  "_key": "Content-Location"
                },
                {
                  "type": "string",
                  "description": "Location of the image binary.",
                  "_key": "Location"
                }
              ],
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_image'",
                    "readOnly": true,
                    "enum": [
                      "branding_image"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "brand_logo_portrait",
                      "brand_logo_square",
                      "brand_logo_landscape",
                      "brand_logo_email",
                      "desktop_background_landscape",
                      "desktop_background_square",
                      "desktop_background_portrait",
                      "carousel_image_portrait_0",
                      "carousel_image_portrait_1",
                      "carousel_image_portrait_2",
                      "carousel_image_portrait_3",
                      "carousel_image_portrait_4",
                      "carousel_image_portrait_5",
                      "carousel_image_portrait_6",
                      "carousel_image_portrait_7",
                      "carousel_image_portrait_8",
                      "carousel_image_portrait_9",
                      "carousel_image_square_0",
                      "carousel_image_square_1",
                      "carousel_image_square_2",
                      "carousel_image_square_3",
                      "carousel_image_square_4",
                      "carousel_image_square_5",
                      "carousel_image_square_6",
                      "carousel_image_square_7",
                      "carousel_image_square_8",
                      "carousel_image_square_9",
                      "carousel_image_landscape_0",
                      "carousel_image_landscape_1",
                      "carousel_image_landscape_2",
                      "carousel_image_landscape_3",
                      "carousel_image_landscape_4",
                      "carousel_image_landscape_5",
                      "carousel_image_landscape_6",
                      "carousel_image_landscape_7",
                      "carousel_image_landscape_8",
                      "carousel_image_landscape_9"
                    ],
                    "type": "string",
                    "description": "Name of the image.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "uri",
                    "example": "https://static.mbed.com/123456789.jpg",
                    "description": "The static link to the image.",
                    "readOnly": true,
                    "api_fieldname": "static_uri",
                    "entity_fieldname": "static_uri",
                    "_key": "static_uri"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_light_theme_image"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data format, for example, image is too large.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Unknown image reference.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/branding-images/dark/{reference}/upload-multipart",
          "summary": "Upload a dark theme image.",
          "return_type": "dark_theme_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "dark_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "static_uri",
            "updated_at"
          ],
          "group_id": "Branding",
          "operation_id": "uploadDarkImageMultipart",
          "additional_operations": [
            {
              "operation_id": "uploadDarkImage",
              "notes": "The multipart endpoint is used by the SDKs as it offers the same functionality as the standard upload endpoint."
            }
          ],
          "pagination": false,
          "request_content_type": "multipart/form-data",
          "request_body": "file",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "enum": [
            "brand_logo_portrait",
            "brand_logo_square",
            "brand_logo_landscape",
            "brand_logo_email",
            "desktop_background_landscape",
            "desktop_background_square",
            "desktop_background_portrait",
            "carousel_image_portrait_0",
            "carousel_image_portrait_1",
            "carousel_image_portrait_2",
            "carousel_image_portrait_3",
            "carousel_image_portrait_4",
            "carousel_image_portrait_5",
            "carousel_image_portrait_6",
            "carousel_image_portrait_7",
            "carousel_image_portrait_8",
            "carousel_image_portrait_9",
            "carousel_image_square_0",
            "carousel_image_square_1",
            "carousel_image_square_2",
            "carousel_image_square_3",
            "carousel_image_square_4",
            "carousel_image_square_5",
            "carousel_image_square_6",
            "carousel_image_square_7",
            "carousel_image_square_8",
            "carousel_image_square_9",
            "carousel_image_landscape_0",
            "carousel_image_landscape_1",
            "carousel_image_landscape_2",
            "carousel_image_landscape_3",
            "carousel_image_landscape_4",
            "carousel_image_landscape_5",
            "carousel_image_landscape_6",
            "carousel_image_landscape_7",
            "carousel_image_landscape_8",
            "carousel_image_landscape_9"
          ],
          "type": "string",
          "description": "Name of the image.",
          "is_primary_key": true,
          "_override": true,
          "api_fieldname": "reference",
          "readOnly": false,
          "required": false,
          "enum_reference": "dark_theme_image_reference_enum",
          "_key": "reference"
        },
        {
          "type": "string",
          "format": "uri",
          "example": "https://static.mbed.com/123456789.jpg",
          "description": "The static link to the image.",
          "readOnly": true,
          "api_fieldname": "static_uri",
          "required": false,
          "_key": "static_uri"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update time in UTC.",
          "readOnly": true,
          "api_fieldname": "updated_at",
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "User interface configuration - images"
      ],
      "group_id": "Branding",
      "_key": "dark_theme_image"
    },
    {
      "swagger_models": [
        "DeveloperCertificateRequestData",
        "DeveloperCertificateResponseData",
        "TrustedCertificateResp"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Create a developer certificate (a certificate that can be flashed to multiple devices to connect to the bootstrap server).\n\n**Note:** The number of developer certificates allowed per account is limited. Please see [Setting up a Certificate Authority](https://www.pelion.com/docs/device-management/current/provisioning-process/integrating-with-a-third-party-ca.html).\n\n**Example:**\n```\ncurl -X POST http://api.us-east-1.mbedcloud.com/v3/developer-certificates \\\n-H \"Authorization: Bearer <access_key>\" \\\n-H \"content-type: application/json\" \\\n-d { \"name\": \"<certificate_name>\", \"description\": \"<certificate_description>\" }\n```",
          "field_renames": [
            {
              "api_fieldname": "developer_certificate",
              "_key": "certificate"
            }
          ],
          "fields": [
            {
              "type": "string",
              "description": "Description for the developer certificate.",
              "x-nullable": true,
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "type": "string",
              "description": "Name of the developer certificate.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": true,
              "_key": "name"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "Developer certificate created successfully.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "Account to which the developer certificate belongs.",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "Description for the developer certificate.",
                    "x-nullable": true,
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "description": "PEM-format X.509 developer certificate.",
                    "api_fieldname": "developer_certificate",
                    "entity_fieldname": "certificate",
                    "_key": "developer_certificate"
                  },
                  {
                    "type": "string",
                    "description": "PEM-format developer private key associated with the certificate.",
                    "api_fieldname": "developer_private_key",
                    "entity_fieldname": "developer_private_key",
                    "_key": "developer_private_key"
                  },
                  {
                    "type": "string",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "ID that uniquely identifies the developer certificate.",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "developerCertificateId",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "description": "Name of the developer certificate.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `trusted-cert`.",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Content of the `security.c` file flashed to the device to provide security credentials.",
                    "api_fieldname": "security_file_content",
                    "entity_fieldname": "security_file_content",
                    "_key": "security_file_content"
                  }
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "subtenant_trusted_certificate"
                }
              },
              "examples": [
                {
                  "object": "trusted-cert",
                  "id": "015fee4431fd38c98640fbfb00000000",
                  "etag": "1",
                  "created_at": "2017-12-11T14:22:20.009Z",
                  "account_id": "015fee5d9b3538c98640fbfb00000000",
                  "name": "DeveloperCertificate",
                  "description": "This certificate will be used with multiple developer devices.",
                  "developer_certificate": "-----BEGIN CERTIFICATE-----\\nMIICcDCCAhWgAwIBAgIRAPSBbBtLUE/ekQcWE4GzPJEwCgYIKoZIzj0EAwIwgaIx\\nCzAJBgNVBAYTAkdCMRcwFQYDVQQIDA5DYW1icmlkZ2VzaGlyZTESMBAGA1UEBwwJ\\nQ2FtYnJpZGdlMRAwDgYDVQQKDAdBUk0gTHRkMSkwJwYDVQQLDCAwMTU4NDNlMzJl\\nYzkwMjQyMGEwMTVlMDcwMDAwMDAwMDEpMCcGA1UEAwwgMDE2MWRiYmNkZDY2MGE1\\nODBhMDEwYzM0MDNjMDAwMDAwHhcNMTgwMjI4MDkyNzIzWhcNMjgwMjI4MDkyNzIz\\nWjCBojELMAkGA1UEBhMCR0IxFzAVBgNVBAgMDkNhbWJyaWRnZXNoaXJlMRIwEAYD\\nVQQHDAlDYW1icmlkZ2UxEDAOBgNVBAoMB0FSTSBMdGQxKTAnBgNVBAsMIDAxNTg0\\nM2UzMmVjOTAyNDIwYTAxNWUwNzAwMDAwMDAwMSkwJwYDVQQDDCAwMTYxZGJiY2Rk\\nNjYwYTU4MGEwMTBjMzQwM2MwMDAwMDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\\nBEScLDbOXvOb903AYlI9ow8E4hbLSHJPt5E2BO4Q4bHOpuWH2Oh6P+CDPte9pAv3\\nE6g90Xk/ZcZpQ+xBO6qci/ajKjAoMBIGCSsGAQQBoCCBSQQFAgNAAJEwEgYDVR0T\\nAQH/BAgwBgEB/wIBADAKBggqhkjOPQQDAgNJADBGAiEAsi9zSK8Njl22GoEHrsg8\\nQlwFnrkkP9d6FyLFtmqndt4CIQCmVHwisYNcCkqD2SWctG1xQHo0HZePAQW8PstM\\nzhNupQ==\\n-----END CERTIFICATE-----\\n",
                  "developer_private_key": "-----BEGIN PRIVATE KEY-----\\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgeKc97aC1Z4aniXVG\\njNSvvXw2hl6zwACYIs88OKQx61GgCgYIKoZIzj0DAQehRANCAAREnCw2zl7zm/dN\\nwGJSPaMPBOIWy0hyT7eRNgTuEOGxzqblh9joej/ggz7XvaQL9xOoPdF5P2XGaUPs\\nQTuqnIv2\\n-----END PRIVATE KEY-----\\n",
                  "security_file_content": "/*\\n * Copyright (c) 2017 ARM Limited. All rights reserved.\\n * SPDX-License-Identifier: Apache-2.0\\n * Licensed under the Apache License, Version 2.0 (the License); you may\\n * not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an AS IS BASIS, WITHOUT\\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n#ifndef __MBED_CLOUD_DEV_CREDENTIALS_H__\\n#define __MBED_CLOUD_DEV_CREDENTIALS_H__\\n\\n#include <inttypes.h>\\n\\nconst char MBED_CLOUD_DEV_BOOTSTRAP_ENDPOINT_NAME[] = \\\"0161dbbcdd660a580a010c3403c00000\\\";\\nconst char MBED_CLOUD_DEV_ACCOUNT_ID[] = \\\"015843e32ec902420a015e0700000000\\\";\\nconst char MBED_CLOUD_DEV_BOOTSTRAP_SERVER_URI[] = \\\"coaps://coap-integration-lab.dev.mbed.com:5684?aid=015843e32ec902420a015e0700000000\\\";\\n\\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE[] = \\n{ 0x30, 0x82, 0x02, 0x70, 0x30, 0x82, 0x02, 0x15,\\n 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x11, 0x00,\\n 0xf4, 0x81, 0x6c, 0x1b, 0x4b, 0x50, 0x4f, 0xde,\\n 0x91, 0x07, 0x16, 0x13, 0x81, 0xb3, 0x3c, 0x91,\\n 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,\\n 0x3d, 0x04, 0x03, 0x02, 0x30, 0x81, 0xa2, 0x31,\\n 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,\\n 0x13, 0x02, 0x47, 0x42, 0x31, 0x17, 0x30, 0x15,\\n 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0e, 0x43,\\n 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,\\n 0x73, 0x68, 0x69, 0x72, 0x65, 0x31, 0x12, 0x30,\\n 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09,\\n 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67,\\n 0x65, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55,\\n 0x04, 0x0a, 0x0c, 0x07, 0x41, 0x52, 0x4d, 0x20,\\n 0x4c, 0x74, 0x64, 0x31, 0x29, 0x30, 0x27, 0x06,\\n 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x20, 0x30, 0x31,\\n 0x35, 0x38, 0x34, 0x33, 0x65, 0x33, 0x32, 0x65,\\n 0x63, 0x39, 0x30, 0x32, 0x34, 0x32, 0x30, 0x61,\\n 0x30, 0x31, 0x35, 0x65, 0x30, 0x37, 0x30, 0x30,\\n 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x29,\\n 0x30, 0x27, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c,\\n 0x20, 0x30, 0x31, 0x36, 0x31, 0x64, 0x62, 0x62,\\n 0x63, 0x64, 0x64, 0x36, 0x36, 0x30, 0x61, 0x35,\\n 0x38, 0x30, 0x61, 0x30, 0x31, 0x30, 0x63, 0x33,\\n 0x34, 0x30, 0x33, 0x63, 0x30, 0x30, 0x30, 0x30,\\n 0x30, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x30,\\n 0x32, 0x32, 0x38, 0x30, 0x39, 0x32, 0x37, 0x32,\\n 0x33, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x30, 0x32,\\n 0x32, 0x38, 0x30, 0x39, 0x32, 0x37, 0x32, 0x33,\\n 0x5a, 0x30, 0x81, 0xa2, 0x31, 0x0b, 0x30, 0x09,\\n 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x47,\\n 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55,\\n 0x04, 0x08, 0x0c, 0x0e, 0x43, 0x61, 0x6d, 0x62,\\n 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x68, 0x69,\\n 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03,\\n 0x55, 0x04, 0x07, 0x0c, 0x09, 0x43, 0x61, 0x6d,\\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x31, 0x10,\\n 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c,\\n 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74, 0x64,\\n 0x31, 0x29, 0x30, 0x27, 0x06, 0x03, 0x55, 0x04,\\n 0x0b, 0x0c, 0x20, 0x30, 0x31, 0x35, 0x38, 0x34,\\n 0x33, 0x65, 0x33, 0x32, 0x65, 0x63, 0x39, 0x30,\\n 0x32, 0x34, 0x32, 0x30, 0x61, 0x30, 0x31, 0x35,\\n 0x65, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30,\\n 0x30, 0x30, 0x30, 0x31, 0x29, 0x30, 0x27, 0x06,\\n 0x03, 0x55, 0x04, 0x03, 0x0c, 0x20, 0x30, 0x31,\\n 0x36, 0x31, 0x64, 0x62, 0x62, 0x63, 0x64, 0x64,\\n 0x36, 0x36, 0x30, 0x61, 0x35, 0x38, 0x30, 0x61,\\n 0x30, 0x31, 0x30, 0x63, 0x33, 0x34, 0x30, 0x33,\\n 0x63, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x59,\\n 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,\\n 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48,\\n 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00,\\n 0x04, 0x44, 0x9c, 0x2c, 0x36, 0xce, 0x5e, 0xf3,\\n 0x9b, 0xf7, 0x4d, 0xc0, 0x62, 0x52, 0x3d, 0xa3,\\n 0x0f, 0x04, 0xe2, 0x16, 0xcb, 0x48, 0x72, 0x4f,\\n 0xb7, 0x91, 0x36, 0x04, 0xee, 0x10, 0xe1, 0xb1,\\n 0xce, 0xa6, 0xe5, 0x87, 0xd8, 0xe8, 0x7a, 0x3f,\\n 0xe0, 0x83, 0x3e, 0xd7, 0xbd, 0xa4, 0x0b, 0xf7,\\n 0x13, 0xa8, 0x3d, 0xd1, 0x79, 0x3f, 0x65, 0xc6,\\n 0x69, 0x43, 0xec, 0x41, 0x3b, 0xaa, 0x9c, 0x8b,\\n 0xf6, 0xa3, 0x2a, 0x30, 0x28, 0x30, 0x12, 0x06,\\n 0x09, 0x2b, 0x06, 0x01, 0x04, 0x01, 0xa0, 0x20,\\n 0x81, 0x49, 0x04, 0x05, 0x02, 0x03, 0x40, 0x00,\\n 0x91, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13,\\n 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01,\\n 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x0a, 0x06,\\n 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,\\n 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,\\n 0x00, 0xb2, 0x2f, 0x73, 0x48, 0xaf, 0x0d, 0x8e,\\n 0x5d, 0xb6, 0x1a, 0x81, 0x07, 0xae, 0xc8, 0x3c,\\n 0x42, 0x5c, 0x05, 0x9e, 0xb9, 0x24, 0x3f, 0xd7,\\n 0x7a, 0x17, 0x22, 0xc5, 0xb6, 0x6a, 0xa7, 0x76,\\n 0xde, 0x02, 0x21, 0x00, 0xa6, 0x54, 0x7c, 0x22,\\n 0xb1, 0x83, 0x5c, 0x0a, 0x4a, 0x83, 0xd9, 0x25,\\n 0x9c, 0xb4, 0x6d, 0x71, 0x40, 0x7a, 0x34, 0x1d,\\n 0x97, 0x8f, 0x01, 0x05, 0xbc, 0x3e, 0xcb, 0x4c,\\n 0xce, 0x13, 0x6e, 0xa5 };\\n\\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE[] = \\n{ 0x30, 0x82, 0x02, 0x35, 0x30, 0x82, 0x01, 0xdb,\\n 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x5c,\\n 0x27, 0xa5, 0x76, 0x7d, 0x58, 0x85, 0x8a, 0x43,\\n 0x91, 0xa0, 0x61, 0xab, 0xcf, 0xa6, 0x59, 0x30,\\n 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x04, 0x03, 0x02, 0x30, 0x72, 0x31, 0x0b, 0x30,\\n 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02,\\n 0x47, 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,\\n 0x55, 0x04, 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d,\\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x68,\\n 0x69, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06,\\n 0x03, 0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x61,\\n 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x31,\\n 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a,\\n 0x13, 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74,\\n 0x64, 0x31, 0x24, 0x30, 0x22, 0x06, 0x03, 0x55,\\n 0x04, 0x03, 0x13, 0x1b, 0x41, 0x52, 0x4d, 0x20,\\n 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,\\n 0x69, 0x6f, 0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x74,\\n 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x41, 0x30,\\n 0x20, 0x17, 0x0d, 0x31, 0x37, 0x30, 0x35, 0x31,\\n 0x35, 0x31, 0x39, 0x34, 0x39, 0x31, 0x31, 0x5a,\\n 0x18, 0x0f, 0x32, 0x30, 0x35, 0x32, 0x30, 0x35,\\n 0x31, 0x35, 0x31, 0x39, 0x35, 0x39, 0x31, 0x30,\\n 0x5a, 0x30, 0x72, 0x31, 0x0b, 0x30, 0x09, 0x06,\\n 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x47, 0x42,\\n 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04,\\n 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d, 0x62, 0x72,\\n 0x69, 0x64, 0x67, 0x65, 0x73, 0x68, 0x69, 0x72,\\n 0x65, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55,\\n 0x04, 0x07, 0x13, 0x09, 0x43, 0x61, 0x6d, 0x62,\\n 0x72, 0x69, 0x64, 0x67, 0x65, 0x31, 0x10, 0x30,\\n 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x07,\\n 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74, 0x64, 0x31,\\n 0x24, 0x30, 0x22, 0x06, 0x03, 0x55, 0x04, 0x03,\\n 0x13, 0x1b, 0x41, 0x52, 0x4d, 0x20, 0x49, 0x6e,\\n 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,\\n 0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,\\n 0x72, 0x61, 0x70, 0x43, 0x41, 0x30, 0x59, 0x30,\\n 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,\\n 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04,\\n 0x8b, 0x7c, 0x86, 0xc3, 0x88, 0x54, 0xe6, 0x5f,\\n 0xe0, 0x57, 0x4e, 0x1b, 0xac, 0x29, 0x82, 0xea,\\n 0x7d, 0x91, 0x00, 0x63, 0xa7, 0x4a, 0x05, 0xbc,\\n 0x54, 0xc5, 0x71, 0x27, 0x33, 0x19, 0x1b, 0x2e,\\n 0xfa, 0x41, 0xf8, 0x7a, 0x9a, 0x0c, 0x5d, 0xfc,\\n 0xb3, 0x37, 0x01, 0x99, 0xc5, 0xc9, 0xbe, 0x78,\\n 0x5b, 0x1d, 0xec, 0xb0, 0x1a, 0x1d, 0xdc, 0xe4,\\n 0x6f, 0x57, 0x04, 0xf4, 0x3a, 0xca, 0xa8, 0xd2,\\n 0xa3, 0x51, 0x30, 0x4f, 0x30, 0x0b, 0x06, 0x03,\\n 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x01,\\n 0x86, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13,\\n 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01,\\n 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,\\n 0x0e, 0x04, 0x16, 0x04, 0x14, 0x13, 0xef, 0x69,\\n 0xfa, 0x62, 0x3f, 0x00, 0x86, 0xf4, 0x05, 0xb8,\\n 0xb6, 0xe6, 0xb2, 0xf1, 0xdb, 0x69, 0x10, 0xb4,\\n 0x39, 0x30, 0x10, 0x06, 0x09, 0x2b, 0x06, 0x01,\\n 0x04, 0x01, 0x82, 0x37, 0x15, 0x01, 0x04, 0x03,\\n 0x02, 0x01, 0x00, 0x30, 0x0a, 0x06, 0x08, 0x2a,\\n 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03,\\n 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xa2,\\n 0x50, 0x88, 0x0f, 0x55, 0xe8, 0x26, 0x49, 0xe6,\\n 0xf5, 0x71, 0x86, 0x33, 0x29, 0x05, 0x4c, 0xf9,\\n 0xfd, 0x1f, 0x14, 0x98, 0x92, 0x85, 0xd9, 0x5c,\\n 0x48, 0x02, 0x9e, 0xc2, 0x79, 0xa8, 0x59, 0x02,\\n 0x20, 0x3e, 0xfe, 0x3c, 0xa0, 0xbf, 0xd3, 0x0f,\\n 0x15, 0x83, 0x56, 0xbc, 0xf2, 0xfa, 0x16, 0x26,\\n 0x7a, 0xc1, 0x68, 0xaa, 0xbc, 0x91, 0x3c, 0x69,\\n 0x44, 0x36, 0xf9, 0x74, 0xa1, 0x82, 0x76, 0x7a,\\n 0x6e };\\n\\nconst uint8_t MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE[] = \\n{ 0x30, 0x82, 0x02, 0x30, 0x30, 0x82, 0x01, 0xd5,\\n 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x26,\\n 0xf9, 0x08, 0xfc, 0xf1, 0xc0, 0x46, 0xa4, 0x4a,\\n 0x4d, 0x2c, 0xf1, 0x94, 0x27, 0xf9, 0x1f, 0x30,\\n 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x04, 0x03, 0x02, 0x30, 0x6f, 0x31, 0x0b, 0x30,\\n 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02,\\n 0x47, 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,\\n 0x55, 0x04, 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d,\\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x68,\\n 0x69, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06,\\n 0x03, 0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x61,\\n 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x31,\\n 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a,\\n 0x13, 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74,\\n 0x64, 0x31, 0x21, 0x30, 0x1f, 0x06, 0x03, 0x55,\\n 0x04, 0x03, 0x13, 0x18, 0x41, 0x52, 0x4d, 0x20,\\n 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,\\n 0x69, 0x6f, 0x6e, 0x20, 0x4c, 0x57, 0x4d, 0x32,\\n 0x4d, 0x20, 0x43, 0x41, 0x30, 0x20, 0x17, 0x0d,\\n 0x31, 0x37, 0x30, 0x32, 0x31, 0x32, 0x31, 0x30,\\n 0x33, 0x37, 0x35, 0x32, 0x5a, 0x18, 0x0f, 0x32,\\n 0x30, 0x35, 0x32, 0x30, 0x32, 0x31, 0x32, 0x31,\\n 0x30, 0x34, 0x37, 0x35, 0x32, 0x5a, 0x30, 0x6f,\\n 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,\\n 0x06, 0x13, 0x02, 0x47, 0x42, 0x31, 0x17, 0x30,\\n 0x15, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0e,\\n 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67,\\n 0x65, 0x73, 0x68, 0x69, 0x72, 0x65, 0x31, 0x12,\\n 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13,\\n 0x09, 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64,\\n 0x67, 0x65, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03,\\n 0x55, 0x04, 0x0a, 0x13, 0x07, 0x41, 0x52, 0x4d,\\n 0x20, 0x4c, 0x74, 0x64, 0x31, 0x21, 0x30, 0x1f,\\n 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x18, 0x41,\\n 0x52, 0x4d, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67,\\n 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4c,\\n 0x57, 0x4d, 0x32, 0x4d, 0x20, 0x43, 0x41, 0x30,\\n 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48,\\n 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86,\\n 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42,\\n 0x00, 0x04, 0xba, 0xea, 0x80, 0x01, 0x2d, 0xf0,\\n 0xe1, 0xb6, 0xc5, 0x5f, 0xf9, 0x76, 0x84, 0x31,\\n 0xa9, 0x29, 0xa1, 0xc7, 0xa8, 0xfd, 0xa0, 0xad,\\n 0xd9, 0x94, 0xe7, 0xec, 0x5a, 0x33, 0xa1, 0x2c,\\n 0x8e, 0x36, 0x43, 0x9b, 0x18, 0xdf, 0xce, 0x71,\\n 0x14, 0x24, 0xb1, 0xfb, 0x16, 0x34, 0x0e, 0x43,\\n 0xfc, 0x23, 0x77, 0xd4, 0x13, 0xd7, 0x11, 0xaa,\\n 0x39, 0x60, 0xab, 0xa2, 0xdf, 0x24, 0xb3, 0xeb,\\n 0xa0, 0xc5, 0xa3, 0x51, 0x30, 0x4f, 0x30, 0x0b,\\n 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03,\\n 0x02, 0x01, 0x86, 0x30, 0x0f, 0x06, 0x03, 0x55,\\n 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,\\n 0x03, 0x01, 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03,\\n 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x7b,\\n 0xa1, 0xa5, 0x94, 0xa5, 0xe5, 0x8f, 0x95, 0x5d,\\n 0xd4, 0xce, 0xdc, 0x0f, 0x8a, 0xbe, 0xad, 0x9a,\\n 0x6b, 0x66, 0x3e, 0x30, 0x10, 0x06, 0x09, 0x2b,\\n 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x01,\\n 0x04, 0x03, 0x02, 0x01, 0x00, 0x30, 0x0a, 0x06,\\n 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,\\n 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,\\n 0x00, 0xd2, 0x06, 0x28, 0xc5, 0x31, 0x3a, 0x11,\\n 0x8d, 0xb6, 0xcb, 0x2b, 0x3f, 0xdd, 0x2a, 0x9a,\\n 0x13, 0x30, 0x52, 0x77, 0xaa, 0xda, 0xda, 0xcb,\\n 0xce, 0xb9, 0x5c, 0xe4, 0x32, 0x1c, 0x02, 0xfa,\\n 0x30, 0x02, 0x21, 0x00, 0xb3, 0x82, 0x24, 0xa2,\\n 0xb1, 0x67, 0x6b, 0x69, 0x07, 0x0e, 0xcd, 0x77,\\n 0x74, 0x99, 0x06, 0x9c, 0x59, 0xb2, 0x00, 0xc0,\\n 0xb3, 0xbb, 0x37, 0x5b, 0xc0, 0x1b, 0xfb, 0xd9,\\n 0x70, 0x98, 0xb9, 0x1e };\\n\\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY[] = \\n{ 0x30, 0x81, 0x93, 0x02, 0x01, 0x00, 0x30, 0x13,\\n 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,\\n 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x03, 0x01, 0x07, 0x04, 0x79, 0x30, 0x77, 0x02,\\n 0x01, 0x01, 0x04, 0x20, 0x78, 0xa7, 0x3d, 0xed,\\n 0xa0, 0xb5, 0x67, 0x86, 0xa7, 0x89, 0x75, 0x46,\\n 0x8c, 0xd4, 0xaf, 0xbd, 0x7c, 0x36, 0x86, 0x5e,\\n 0xb3, 0xc0, 0x00, 0x98, 0x22, 0xcf, 0x3c, 0x38,\\n 0xa4, 0x31, 0xeb, 0x51, 0xa0, 0x0a, 0x06, 0x08,\\n 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07,\\n 0xa1, 0x44, 0x03, 0x42, 0x00, 0x04, 0x44, 0x9c,\\n 0x2c, 0x36, 0xce, 0x5e, 0xf3, 0x9b, 0xf7, 0x4d,\\n 0xc0, 0x62, 0x52, 0x3d, 0xa3, 0x0f, 0x04, 0xe2,\\n 0x16, 0xcb, 0x48, 0x72, 0x4f, 0xb7, 0x91, 0x36,\\n 0x04, 0xee, 0x10, 0xe1, 0xb1, 0xce, 0xa6, 0xe5,\\n 0x87, 0xd8, 0xe8, 0x7a, 0x3f, 0xe0, 0x83, 0x3e,\\n 0xd7, 0xbd, 0xa4, 0x0b, 0xf7, 0x13, 0xa8, 0x3d,\\n 0xd1, 0x79, 0x3f, 0x65, 0xc6, 0x69, 0x43, 0xec,\\n 0x41, 0x3b, 0xaa, 0x9c, 0x8b, 0xf6 };\\n\\nconst char MBED_CLOUD_DEV_MANUFACTURER[] = \\\"dev_manufacturer\\\";\\n\\nconst char MBED_CLOUD_DEV_MODEL_NUMBER[] = \\\"dev_model_num\\\";\\n\\nconst char MBED_CLOUD_DEV_SERIAL_NUMBER[] = \\\"0\\\";\\n\\nconst char MBED_CLOUD_DEV_DEVICE_TYPE[] = \\\"dev_device_type\\\";\\n\\nconst char MBED_CLOUD_DEV_HARDWARE_VERSION[] = \\\"dev_hardware_version\\\";\\n\\nconst uint32_t MBED_CLOUD_DEV_MEMORY_TOTAL_KB = 0;\\n\\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE);\\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE);\\nconst uint32_t MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE);\\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY);\\n\\n#endif //__MBED_CLOUD_DEV_CREDENTIALS_H__\\n",
                  "_key": "Success"
                }
              ],
              "_key": "201"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "examples": [
                {
                  "object": "error",
                  "code": 400,
                  "type": "validation_error",
                  "message": "Bad Request. Missing certificate name.",
                  "request_id": "015fee4431fd38c98640fbfb00000000",
                  "fields": {
                    "name": "name",
                    "message": "Missing certificate name."
                  },
                  "_key": "Bad Request Error"
                }
              ],
              "_key": "400"
            },
            {
              "description": "Invalid access token.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "examples": [
                {
                  "object": "error",
                  "code": 401,
                  "type": "invalid_auth",
                  "message": "Invalid access token.",
                  "request_id": "015fee4431fd38c98640fbfb00000000",
                  "_key": "Authentication Error"
                }
              ],
              "_key": "401"
            },
            {
              "description": "The maximum number of developer certificates for the given account has already been reached.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "examples": [
                {
                  "object": "error",
                  "code": 403,
                  "type": "account_limit_exceeded",
                  "message": "Forbidden. Limit for the number of certificates exceeded.",
                  "request_id": "015fee4431fd38c98640fbfb00000000",
                  "fields": {
                    "name": "cert-count",
                    "message": "10"
                  },
                  "_key": "Account Limit Exceeded Error"
                }
              ],
              "_key": "403"
            },
            {
              "description": "Certificate with the given name already exists.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "examples": [
                {
                  "object": "error",
                  "code": 409,
                  "type": "duplicate",
                  "message": "Conflict. Certificate already exists.",
                  "request_id": "015fee4431fd38c98640fbfb00000000",
                  "fields": {
                    "name": "certificate",
                    "message": "Certificate already exists."
                  },
                  "_key": "Duplicate Error"
                }
              ],
              "_key": "409"
            }
          ],
          "path": "/v3/developer-certificates",
          "summary": "Create a new developer certificate to connect to the bootstrap server.",
          "return_type": "developer_certificate",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "developer_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "account_id",
            "developer_private_key",
            "security_file_content",
            "certificate"
          ],
          "group_id": "Security",
          "parameter_map": {
            "developerCertificateId": "id"
          },
          "operation_id": "createDeveloperCertificate",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete a trusted certificate.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [
            {
              "api_fieldname": "developer_certificate",
              "_key": "certificate"
            }
          ],
          "fields": [
            {
              "name": "cert_id",
              "in": "path",
              "description": "The ID of the trusted certificate to delete.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "cert_id",
              "external_param": false,
              "parameter_fieldname": "cert_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A certificate not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/trusted-certificates/{cert_id}",
          "summary": "Delete a trusted certificate by ID.",
          "return_type": "developer_certificate",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "developer_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Security",
          "parameter_map": {
            "developerCertificateId": "id",
            "cert_id": "id"
          },
          "operation_id": "deleteCertificate",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve a trusted certificate.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [
            {
              "api_fieldname": "developer_certificate",
              "_key": "certificate"
            }
          ],
          "fields": [
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "cert_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "get_trusted_certificate_info",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "certificate",
                  "certificate_fingerprint",
                  "etag",
                  "id",
                  "issuer",
                  "name",
                  "object",
                  "service",
                  "subject",
                  "validity"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
                    "description": "X509.v3 trusted certificate in PEM format.",
                    "api_fieldname": "certificate",
                    "entity_fieldname": "certificate",
                    "_key": "certificate"
                  },
                  {
                    "type": "string",
                    "example": "a10fb2c8ba90e6de927bd0ae391dcc38f6115685de2d7024712af37ead0608f1",
                    "description": "A SHA-256 fingerprint of the certificate.",
                    "api_fieldname": "certificate_fingerprint",
                    "entity_fieldname": "certificate_fingerprint",
                    "_key": "certificate_fingerprint"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "x-nullable": true,
                    "example": "Certificate created by me.",
                    "description": "Human readable description of this certificate.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "Device execution mode where 1 means a developer certificate.",
                    "api_fieldname": "device_execution_mode",
                    "entity_fieldname": "device_execution_mode",
                    "_key": "device_execution_mode"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
                    "x-deprecation": {
                      "issued_at": "2020-11-01T00:00:00+00:00",
                      "end_of_life_at": "2021-11-01T00:00:00+00:00",
                      "comment": "This field is deprecated, do not use it anymore.",
                      "links": []
                    },
                    "api_fieldname": "enrollment_mode",
                    "entity_fieldname": "enrollment_mode",
                    "_key": "enrollment_mode"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "CN=issuer",
                    "description": "Issuer of the certificate.",
                    "api_fieldname": "issuer",
                    "entity_fieldname": "issuer",
                    "_key": "issuer"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "My certificate",
                    "description": "Certificate name.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'trusted-cert'",
                    "enum": [
                      "trusted-cert"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "x-nullable": true,
                    "type": "string",
                    "example": "01619571dad80242ac12000600000000",
                    "description": "The ID of the owner.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner_id",
                    "entity_fieldname": "owner_id",
                    "_key": "owner_id"
                  },
                  {
                    "type": "string",
                    "description": "Service name where the certificate is used.",
                    "enum": [
                      "lwm2m",
                      "bootstrap"
                    ],
                    "api_fieldname": "service",
                    "entity_fieldname": "service",
                    "_key": "service"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "Status of the certificate.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "example": "CN=subject",
                    "description": "Subject of the certificate.",
                    "api_fieldname": "subject",
                    "entity_fieldname": "subject",
                    "_key": "subject"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "This read-only flag indicates whether the certificate is valid or not.",
                    "readOnly": true,
                    "api_fieldname": "valid",
                    "entity_fieldname": "valid",
                    "_key": "valid"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2038-02-14T15:24:14Z",
                    "description": "Expiration time in UTC formatted as RFC3339.",
                    "api_fieldname": "validity",
                    "entity_fieldname": "validity",
                    "_key": "validity"
                  }
                ],
                "description": "Represents a trusted certificate in responses.",
                "foreign_key": {
                  "group": "Security",
                  "entity": "developer_certificate"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A certificate not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/trusted-certificates/{cert_id}",
          "summary": "Get a trusted certificate.",
          "return_type": "trusted_certificate",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "trusted_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "name",
            "description",
            "account_id",
            "owner_id",
            "certificate",
            "service",
            "issuer",
            "subject",
            "validity",
            "status",
            "device_execution_mode",
            "enrollment_mode",
            "certificate_fingerprint",
            "valid"
          ],
          "group_id": "Security",
          "parameter_map": {
            "developerCertificateId": "id",
            "cert_id": "id"
          },
          "operation_id": "getCertificate",
          "unaggregated": true,
          "foreign_key": {
            "entity": "trusted_certificate",
            "group": "Security"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "get_trusted_certificate_info"
        },
        {
          "description": "Return an existing developer certificate (a certificate that can be flashed to multiple devices to connect to bootstrap server).\n\n**Example:**\n```\ncurl -X GET http://api.us-east-1.mbedcloud.com/v3/developer-certificates/THE_CERTIFICATE_ID \\\n-H \"Authorization: Bearer <access_key>\"\n```",
          "field_renames": [
            {
              "api_fieldname": "developer_certificate",
              "_key": "certificate"
            }
          ],
          "fields": [
            {
              "type": "string",
              "description": "ID that uniquely identifies the developer certificate.",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "developerCertificateId",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Developer certificate returned successfully.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "Account to which the developer certificate belongs.",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "Description for the developer certificate.",
                    "x-nullable": true,
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "description": "PEM-format X.509 developer certificate.",
                    "api_fieldname": "developer_certificate",
                    "entity_fieldname": "developer_certificate",
                    "_key": "developer_certificate"
                  },
                  {
                    "type": "string",
                    "description": "PEM-format developer private key associated with the certificate.",
                    "api_fieldname": "developer_private_key",
                    "entity_fieldname": "developer_private_key",
                    "_key": "developer_private_key"
                  },
                  {
                    "type": "string",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "ID that uniquely identifies the developer certificate.",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "description": "Name of the developer certificate.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `trusted-cert`.",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Content of the `security.c` file flashed to the device to provide security credentials.",
                    "api_fieldname": "security_file_content",
                    "entity_fieldname": "security_file_content",
                    "_key": "security_file_content"
                  }
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "developer_certificate"
                }
              },
              "examples": [
                {
                  "object": "trusted-cert",
                  "id": "015fee4431fd38c98640fbfb00000000",
                  "etag": "1",
                  "created_at": "2017-12-11T14:22:20.009Z",
                  "account_id": "015fee5d9b3538c98640fbfb00000000",
                  "name": "DeveloperCertificate",
                  "description": "This certificate applies to multiple developer devices.",
                  "developer_certificate": "-----BEGIN CERTIFICATE-----\\nMIICcDCCAhWgAwIBAgIRAPSBbBtLUE/ekQcWE4GzPJEwCgYIKoZIzj0EAwIwgaIx\\nCzAJBgNVBAYTAkdCMRcwFQYDVQQIDA5DYW1icmlkZ2VzaGlyZTESMBAGA1UEBwwJ\\nQ2FtYnJpZGdlMRAwDgYDVQQKDAdBUk0gTHRkMSkwJwYDVQQLDCAwMTU4NDNlMzJl\\nYzkwMjQyMGEwMTVlMDcwMDAwMDAwMDEpMCcGA1UEAwwgMDE2MWRiYmNkZDY2MGE1\\nODBhMDEwYzM0MDNjMDAwMDAwHhcNMTgwMjI4MDkyNzIzWhcNMjgwMjI4MDkyNzIz\\nWjCBojELMAkGA1UEBhMCR0IxFzAVBgNVBAgMDkNhbWJyaWRnZXNoaXJlMRIwEAYD\\nVQQHDAlDYW1icmlkZ2UxEDAOBgNVBAoMB0FSTSBMdGQxKTAnBgNVBAsMIDAxNTg0\\nM2UzMmVjOTAyNDIwYTAxNWUwNzAwMDAwMDAwMSkwJwYDVQQDDCAwMTYxZGJiY2Rk\\nNjYwYTU4MGEwMTBjMzQwM2MwMDAwMDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\\nBEScLDbOXvOb903AYlI9ow8E4hbLSHJPt5E2BO4Q4bHOpuWH2Oh6P+CDPte9pAv3\\nE6g90Xk/ZcZpQ+xBO6qci/ajKjAoMBIGCSsGAQQBoCCBSQQFAgNAAJEwEgYDVR0T\\nAQH/BAgwBgEB/wIBADAKBggqhkjOPQQDAgNJADBGAiEAsi9zSK8Njl22GoEHrsg8\\nQlwFnrkkP9d6FyLFtmqndt4CIQCmVHwisYNcCkqD2SWctG1xQHo0HZePAQW8PstM\\nzhNupQ==\\n-----END CERTIFICATE-----\\n",
                  "developer_private_key": "-----BEGIN PRIVATE KEY-----\\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgeKc97aC1Z4aniXVG\\njNSvvXw2hl6zwACYIs88OKQx61GgCgYIKoZIzj0DAQehRANCAAREnCw2zl7zm/dN\\nwGJSPaMPBOIWy0hyT7eRNgTuEOGxzqblh9joej/ggz7XvaQL9xOoPdF5P2XGaUPs\\nQTuqnIv2\\n-----END PRIVATE KEY-----\\n",
                  "security_file_content": "/*\\n * Copyright (c) 2017 ARM Limited. All rights reserved.\\n * SPDX-License-Identifier: Apache-2.0\\n * Licensed under the Apache License, Version 2.0 (the License); you may\\n * not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an AS IS BASIS, WITHOUT\\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n#ifndef __MBED_CLOUD_DEV_CREDENTIALS_H__\\n#define __MBED_CLOUD_DEV_CREDENTIALS_H__\\n\\n#include <inttypes.h>\\n\\nconst char MBED_CLOUD_DEV_BOOTSTRAP_ENDPOINT_NAME[] = \\\"0161dbbcdd660a580a010c3403c00000\\\";\\nconst char MBED_CLOUD_DEV_ACCOUNT_ID[] = \\\"015843e32ec902420a015e0700000000\\\";\\nconst char MBED_CLOUD_DEV_BOOTSTRAP_SERVER_URI[] = \\\"coaps://coap.us-east-1.mbedcloud.com:5684?aid=015843e32ec902420a015e0700000000\\\";\\n\\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE[] = \\n{ 0x30, 0x82, 0x02, 0x70, 0x30, 0x82, 0x02, 0x15,\\n 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x11, 0x00,\\n 0xf4, 0x81, 0x6c, 0x1b, 0x4b, 0x50, 0x4f, 0xde,\\n 0x91, 0x07, 0x16, 0x13, 0x81, 0xb3, 0x3c, 0x91,\\n 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,\\n 0x3d, 0x04, 0x03, 0x02, 0x30, 0x81, 0xa2, 0x31,\\n 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,\\n 0x13, 0x02, 0x47, 0x42, 0x31, 0x17, 0x30, 0x15,\\n 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0e, 0x43,\\n 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,\\n 0x73, 0x68, 0x69, 0x72, 0x65, 0x31, 0x12, 0x30,\\n 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09,\\n 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67,\\n 0x65, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55,\\n 0x04, 0x0a, 0x0c, 0x07, 0x41, 0x52, 0x4d, 0x20,\\n 0x4c, 0x74, 0x64, 0x31, 0x29, 0x30, 0x27, 0x06,\\n 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x20, 0x30, 0x31,\\n 0x35, 0x38, 0x34, 0x33, 0x65, 0x33, 0x32, 0x65,\\n 0x63, 0x39, 0x30, 0x32, 0x34, 0x32, 0x30, 0x61,\\n 0x30, 0x31, 0x35, 0x65, 0x30, 0x37, 0x30, 0x30,\\n 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x29,\\n 0x30, 0x27, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c,\\n 0x20, 0x30, 0x31, 0x36, 0x31, 0x64, 0x62, 0x62,\\n 0x63, 0x64, 0x64, 0x36, 0x36, 0x30, 0x61, 0x35,\\n 0x38, 0x30, 0x61, 0x30, 0x31, 0x30, 0x63, 0x33,\\n 0x34, 0x30, 0x33, 0x63, 0x30, 0x30, 0x30, 0x30,\\n 0x30, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x30,\\n 0x32, 0x32, 0x38, 0x30, 0x39, 0x32, 0x37, 0x32,\\n 0x33, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x30, 0x32,\\n 0x32, 0x38, 0x30, 0x39, 0x32, 0x37, 0x32, 0x33,\\n 0x5a, 0x30, 0x81, 0xa2, 0x31, 0x0b, 0x30, 0x09,\\n 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x47,\\n 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55,\\n 0x04, 0x08, 0x0c, 0x0e, 0x43, 0x61, 0x6d, 0x62,\\n 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x68, 0x69,\\n 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03,\\n 0x55, 0x04, 0x07, 0x0c, 0x09, 0x43, 0x61, 0x6d,\\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x31, 0x10,\\n 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c,\\n 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74, 0x64,\\n 0x31, 0x29, 0x30, 0x27, 0x06, 0x03, 0x55, 0x04,\\n 0x0b, 0x0c, 0x20, 0x30, 0x31, 0x35, 0x38, 0x34,\\n 0x33, 0x65, 0x33, 0x32, 0x65, 0x63, 0x39, 0x30,\\n 0x32, 0x34, 0x32, 0x30, 0x61, 0x30, 0x31, 0x35,\\n 0x65, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30,\\n 0x30, 0x30, 0x30, 0x31, 0x29, 0x30, 0x27, 0x06,\\n 0x03, 0x55, 0x04, 0x03, 0x0c, 0x20, 0x30, 0x31,\\n 0x36, 0x31, 0x64, 0x62, 0x62, 0x63, 0x64, 0x64,\\n 0x36, 0x36, 0x30, 0x61, 0x35, 0x38, 0x30, 0x61,\\n 0x30, 0x31, 0x30, 0x63, 0x33, 0x34, 0x30, 0x33,\\n 0x63, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x59,\\n 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,\\n 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48,\\n 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00,\\n 0x04, 0x44, 0x9c, 0x2c, 0x36, 0xce, 0x5e, 0xf3,\\n 0x9b, 0xf7, 0x4d, 0xc0, 0x62, 0x52, 0x3d, 0xa3,\\n 0x0f, 0x04, 0xe2, 0x16, 0xcb, 0x48, 0x72, 0x4f,\\n 0xb7, 0x91, 0x36, 0x04, 0xee, 0x10, 0xe1, 0xb1,\\n 0xce, 0xa6, 0xe5, 0x87, 0xd8, 0xe8, 0x7a, 0x3f,\\n 0xe0, 0x83, 0x3e, 0xd7, 0xbd, 0xa4, 0x0b, 0xf7,\\n 0x13, 0xa8, 0x3d, 0xd1, 0x79, 0x3f, 0x65, 0xc6,\\n 0x69, 0x43, 0xec, 0x41, 0x3b, 0xaa, 0x9c, 0x8b,\\n 0xf6, 0xa3, 0x2a, 0x30, 0x28, 0x30, 0x12, 0x06,\\n 0x09, 0x2b, 0x06, 0x01, 0x04, 0x01, 0xa0, 0x20,\\n 0x81, 0x49, 0x04, 0x05, 0x02, 0x03, 0x40, 0x00,\\n 0x91, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13,\\n 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01,\\n 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x0a, 0x06,\\n 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,\\n 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,\\n 0x00, 0xb2, 0x2f, 0x73, 0x48, 0xaf, 0x0d, 0x8e,\\n 0x5d, 0xb6, 0x1a, 0x81, 0x07, 0xae, 0xc8, 0x3c,\\n 0x42, 0x5c, 0x05, 0x9e, 0xb9, 0x24, 0x3f, 0xd7,\\n 0x7a, 0x17, 0x22, 0xc5, 0xb6, 0x6a, 0xa7, 0x76,\\n 0xde, 0x02, 0x21, 0x00, 0xa6, 0x54, 0x7c, 0x22,\\n 0xb1, 0x83, 0x5c, 0x0a, 0x4a, 0x83, 0xd9, 0x25,\\n 0x9c, 0xb4, 0x6d, 0x71, 0x40, 0x7a, 0x34, 0x1d,\\n 0x97, 0x8f, 0x01, 0x05, 0xbc, 0x3e, 0xcb, 0x4c,\\n 0xce, 0x13, 0x6e, 0xa5 };\\n\\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE[] = \\n{ 0x30, 0x82, 0x02, 0x35, 0x30, 0x82, 0x01, 0xdb,\\n 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x5c,\\n 0x27, 0xa5, 0x76, 0x7d, 0x58, 0x85, 0x8a, 0x43,\\n 0x91, 0xa0, 0x61, 0xab, 0xcf, 0xa6, 0x59, 0x30,\\n 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x04, 0x03, 0x02, 0x30, 0x72, 0x31, 0x0b, 0x30,\\n 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02,\\n 0x47, 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,\\n 0x55, 0x04, 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d,\\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x68,\\n 0x69, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06,\\n 0x03, 0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x61,\\n 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x31,\\n 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a,\\n 0x13, 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74,\\n 0x64, 0x31, 0x24, 0x30, 0x22, 0x06, 0x03, 0x55,\\n 0x04, 0x03, 0x13, 0x1b, 0x41, 0x52, 0x4d, 0x20,\\n 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,\\n 0x69, 0x6f, 0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x74,\\n 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x41, 0x30,\\n 0x20, 0x17, 0x0d, 0x31, 0x37, 0x30, 0x35, 0x31,\\n 0x35, 0x31, 0x39, 0x34, 0x39, 0x31, 0x31, 0x5a,\\n 0x18, 0x0f, 0x32, 0x30, 0x35, 0x32, 0x30, 0x35,\\n 0x31, 0x35, 0x31, 0x39, 0x35, 0x39, 0x31, 0x30,\\n 0x5a, 0x30, 0x72, 0x31, 0x0b, 0x30, 0x09, 0x06,\\n 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x47, 0x42,\\n 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04,\\n 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d, 0x62, 0x72,\\n 0x69, 0x64, 0x67, 0x65, 0x73, 0x68, 0x69, 0x72,\\n 0x65, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55,\\n 0x04, 0x07, 0x13, 0x09, 0x43, 0x61, 0x6d, 0x62,\\n 0x72, 0x69, 0x64, 0x67, 0x65, 0x31, 0x10, 0x30,\\n 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x07,\\n 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74, 0x64, 0x31,\\n 0x24, 0x30, 0x22, 0x06, 0x03, 0x55, 0x04, 0x03,\\n 0x13, 0x1b, 0x41, 0x52, 0x4d, 0x20, 0x49, 0x6e,\\n 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,\\n 0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,\\n 0x72, 0x61, 0x70, 0x43, 0x41, 0x30, 0x59, 0x30,\\n 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,\\n 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04,\\n 0x8b, 0x7c, 0x86, 0xc3, 0x88, 0x54, 0xe6, 0x5f,\\n 0xe0, 0x57, 0x4e, 0x1b, 0xac, 0x29, 0x82, 0xea,\\n 0x7d, 0x91, 0x00, 0x63, 0xa7, 0x4a, 0x05, 0xbc,\\n 0x54, 0xc5, 0x71, 0x27, 0x33, 0x19, 0x1b, 0x2e,\\n 0xfa, 0x41, 0xf8, 0x7a, 0x9a, 0x0c, 0x5d, 0xfc,\\n 0xb3, 0x37, 0x01, 0x99, 0xc5, 0xc9, 0xbe, 0x78,\\n 0x5b, 0x1d, 0xec, 0xb0, 0x1a, 0x1d, 0xdc, 0xe4,\\n 0x6f, 0x57, 0x04, 0xf4, 0x3a, 0xca, 0xa8, 0xd2,\\n 0xa3, 0x51, 0x30, 0x4f, 0x30, 0x0b, 0x06, 0x03,\\n 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x01,\\n 0x86, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13,\\n 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01,\\n 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,\\n 0x0e, 0x04, 0x16, 0x04, 0x14, 0x13, 0xef, 0x69,\\n 0xfa, 0x62, 0x3f, 0x00, 0x86, 0xf4, 0x05, 0xb8,\\n 0xb6, 0xe6, 0xb2, 0xf1, 0xdb, 0x69, 0x10, 0xb4,\\n 0x39, 0x30, 0x10, 0x06, 0x09, 0x2b, 0x06, 0x01,\\n 0x04, 0x01, 0x82, 0x37, 0x15, 0x01, 0x04, 0x03,\\n 0x02, 0x01, 0x00, 0x30, 0x0a, 0x06, 0x08, 0x2a,\\n 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03,\\n 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xa2,\\n 0x50, 0x88, 0x0f, 0x55, 0xe8, 0x26, 0x49, 0xe6,\\n 0xf5, 0x71, 0x86, 0x33, 0x29, 0x05, 0x4c, 0xf9,\\n 0xfd, 0x1f, 0x14, 0x98, 0x92, 0x85, 0xd9, 0x5c,\\n 0x48, 0x02, 0x9e, 0xc2, 0x79, 0xa8, 0x59, 0x02,\\n 0x20, 0x3e, 0xfe, 0x3c, 0xa0, 0xbf, 0xd3, 0x0f,\\n 0x15, 0x83, 0x56, 0xbc, 0xf2, 0xfa, 0x16, 0x26,\\n 0x7a, 0xc1, 0x68, 0xaa, 0xbc, 0x91, 0x3c, 0x69,\\n 0x44, 0x36, 0xf9, 0x74, 0xa1, 0x82, 0x76, 0x7a,\\n 0x6e };\\n\\nconst uint8_t MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE[] = \\n{ 0x30, 0x82, 0x02, 0x30, 0x30, 0x82, 0x01, 0xd5,\\n 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x26,\\n 0xf9, 0x08, 0xfc, 0xf1, 0xc0, 0x46, 0xa4, 0x4a,\\n 0x4d, 0x2c, 0xf1, 0x94, 0x27, 0xf9, 0x1f, 0x30,\\n 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x04, 0x03, 0x02, 0x30, 0x6f, 0x31, 0x0b, 0x30,\\n 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02,\\n 0x47, 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,\\n 0x55, 0x04, 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d,\\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x68,\\n 0x69, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06,\\n 0x03, 0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x61,\\n 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x31,\\n 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a,\\n 0x13, 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74,\\n 0x64, 0x31, 0x21, 0x30, 0x1f, 0x06, 0x03, 0x55,\\n 0x04, 0x03, 0x13, 0x18, 0x41, 0x52, 0x4d, 0x20,\\n 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,\\n 0x69, 0x6f, 0x6e, 0x20, 0x4c, 0x57, 0x4d, 0x32,\\n 0x4d, 0x20, 0x43, 0x41, 0x30, 0x20, 0x17, 0x0d,\\n 0x31, 0x37, 0x30, 0x32, 0x31, 0x32, 0x31, 0x30,\\n 0x33, 0x37, 0x35, 0x32, 0x5a, 0x18, 0x0f, 0x32,\\n 0x30, 0x35, 0x32, 0x30, 0x32, 0x31, 0x32, 0x31,\\n 0x30, 0x34, 0x37, 0x35, 0x32, 0x5a, 0x30, 0x6f,\\n 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,\\n 0x06, 0x13, 0x02, 0x47, 0x42, 0x31, 0x17, 0x30,\\n 0x15, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0e,\\n 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67,\\n 0x65, 0x73, 0x68, 0x69, 0x72, 0x65, 0x31, 0x12,\\n 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13,\\n 0x09, 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64,\\n 0x67, 0x65, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03,\\n 0x55, 0x04, 0x0a, 0x13, 0x07, 0x41, 0x52, 0x4d,\\n 0x20, 0x4c, 0x74, 0x64, 0x31, 0x21, 0x30, 0x1f,\\n 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x18, 0x41,\\n 0x52, 0x4d, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67,\\n 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4c,\\n 0x57, 0x4d, 0x32, 0x4d, 0x20, 0x43, 0x41, 0x30,\\n 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48,\\n 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86,\\n 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42,\\n 0x00, 0x04, 0xba, 0xea, 0x80, 0x01, 0x2d, 0xf0,\\n 0xe1, 0xb6, 0xc5, 0x5f, 0xf9, 0x76, 0x84, 0x31,\\n 0xa9, 0x29, 0xa1, 0xc7, 0xa8, 0xfd, 0xa0, 0xad,\\n 0xd9, 0x94, 0xe7, 0xec, 0x5a, 0x33, 0xa1, 0x2c,\\n 0x8e, 0x36, 0x43, 0x9b, 0x18, 0xdf, 0xce, 0x71,\\n 0x14, 0x24, 0xb1, 0xfb, 0x16, 0x34, 0x0e, 0x43,\\n 0xfc, 0x23, 0x77, 0xd4, 0x13, 0xd7, 0x11, 0xaa,\\n 0x39, 0x60, 0xab, 0xa2, 0xdf, 0x24, 0xb3, 0xeb,\\n 0xa0, 0xc5, 0xa3, 0x51, 0x30, 0x4f, 0x30, 0x0b,\\n 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03,\\n 0x02, 0x01, 0x86, 0x30, 0x0f, 0x06, 0x03, 0x55,\\n 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,\\n 0x03, 0x01, 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03,\\n 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x7b,\\n 0xa1, 0xa5, 0x94, 0xa5, 0xe5, 0x8f, 0x95, 0x5d,\\n 0xd4, 0xce, 0xdc, 0x0f, 0x8a, 0xbe, 0xad, 0x9a,\\n 0x6b, 0x66, 0x3e, 0x30, 0x10, 0x06, 0x09, 0x2b,\\n 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x01,\\n 0x04, 0x03, 0x02, 0x01, 0x00, 0x30, 0x0a, 0x06,\\n 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,\\n 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,\\n 0x00, 0xd2, 0x06, 0x28, 0xc5, 0x31, 0x3a, 0x11,\\n 0x8d, 0xb6, 0xcb, 0x2b, 0x3f, 0xdd, 0x2a, 0x9a,\\n 0x13, 0x30, 0x52, 0x77, 0xaa, 0xda, 0xda, 0xcb,\\n 0xce, 0xb9, 0x5c, 0xe4, 0x32, 0x1c, 0x02, 0xfa,\\n 0x30, 0x02, 0x21, 0x00, 0xb3, 0x82, 0x24, 0xa2,\\n 0xb1, 0x67, 0x6b, 0x69, 0x07, 0x0e, 0xcd, 0x77,\\n 0x74, 0x99, 0x06, 0x9c, 0x59, 0xb2, 0x00, 0xc0,\\n 0xb3, 0xbb, 0x37, 0x5b, 0xc0, 0x1b, 0xfb, 0xd9,\\n 0x70, 0x98, 0xb9, 0x1e };\\n\\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY[] = \\n{ 0x30, 0x81, 0x93, 0x02, 0x01, 0x00, 0x30, 0x13,\\n 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,\\n 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x03, 0x01, 0x07, 0x04, 0x79, 0x30, 0x77, 0x02,\\n 0x01, 0x01, 0x04, 0x20, 0x78, 0xa7, 0x3d, 0xed,\\n 0xa0, 0xb5, 0x67, 0x86, 0xa7, 0x89, 0x75, 0x46,\\n 0x8c, 0xd4, 0xaf, 0xbd, 0x7c, 0x36, 0x86, 0x5e,\\n 0xb3, 0xc0, 0x00, 0x98, 0x22, 0xcf, 0x3c, 0x38,\\n 0xa4, 0x31, 0xeb, 0x51, 0xa0, 0x0a, 0x06, 0x08,\\n 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07,\\n 0xa1, 0x44, 0x03, 0x42, 0x00, 0x04, 0x44, 0x9c,\\n 0x2c, 0x36, 0xce, 0x5e, 0xf3, 0x9b, 0xf7, 0x4d,\\n 0xc0, 0x62, 0x52, 0x3d, 0xa3, 0x0f, 0x04, 0xe2,\\n 0x16, 0xcb, 0x48, 0x72, 0x4f, 0xb7, 0x91, 0x36,\\n 0x04, 0xee, 0x10, 0xe1, 0xb1, 0xce, 0xa6, 0xe5,\\n 0x87, 0xd8, 0xe8, 0x7a, 0x3f, 0xe0, 0x83, 0x3e,\\n 0xd7, 0xbd, 0xa4, 0x0b, 0xf7, 0x13, 0xa8, 0x3d,\\n 0xd1, 0x79, 0x3f, 0x65, 0xc6, 0x69, 0x43, 0xec,\\n 0x41, 0x3b, 0xaa, 0x9c, 0x8b, 0xf6 };\\n\\nconst char MBED_CLOUD_DEV_MANUFACTURER[] = \\\"dev_manufacturer\\\";\\n\\nconst char MBED_CLOUD_DEV_MODEL_NUMBER[] = \\\"dev_model_num\\\";\\n\\nconst char MBED_CLOUD_DEV_SERIAL_NUMBER[] = \\\"0\\\";\\n\\nconst char MBED_CLOUD_DEV_DEVICE_TYPE[] = \\\"dev_device_type\\\";\\n\\nconst char MBED_CLOUD_DEV_HARDWARE_VERSION[] = \\\"dev_hardware_version\\\";\\n\\nconst uint32_t MBED_CLOUD_DEV_MEMORY_TOTAL_KB = 0;\\n\\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE);\\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE);\\nconst uint32_t MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE);\\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY);\\n\\n#endif //__MBED_CLOUD_DEV_CREDENTIALS_H__\\n",
                  "_key": "Success"
                }
              ],
              "_key": "200"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Invalid access token.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "examples": [
                {
                  "object": "error",
                  "code": 401,
                  "type": "invalid_auth",
                  "message": "Invalid access token.",
                  "request_id": "015fee4431fd38c98640fbfb00000000",
                  "_key": "Authentication Error"
                }
              ],
              "_key": "401"
            },
            {
              "description": "Developer certificate not found with given ID.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "examples": [
                {
                  "object": "error",
                  "code": 404,
                  "type": "not_found",
                  "message": "Not Found. Not found: 016006724ff53ade90ed948d03c00001",
                  "request_id": "015fee4431fd38c98640fbfb00000000",
                  "_key": "Authentication Error"
                }
              ],
              "_key": "404"
            }
          ],
          "path": "/v3/developer-certificates/{developerCertificateId}",
          "summary": "Fetch an existing developer certificate to connect to the bootstrap server.",
          "return_type": "developer_certificate",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "developer_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "account_id",
            "name",
            "description",
            "developer_private_key",
            "security_file_content",
            "certificate"
          ],
          "group_id": "Security",
          "parameter_map": {
            "developerCertificateId": "id"
          },
          "operation_id": "getDeveloperCertificate",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "string",
          "description": "Account to which the developer certificate belongs.",
          "api_fieldname": "account_id",
          "readOnly": true,
          "required": false,
          "_key": "account_id"
        },
        {
          "type": "string",
          "description": "PEM-format X.509 developer certificate.",
          "api_fieldname": "developer_certificate",
          "readOnly": true,
          "required": false,
          "_key": "certificate"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "description": "Description for the developer certificate.",
          "x-nullable": true,
          "api_fieldname": "description",
          "readOnly": false,
          "required": false,
          "_key": "description"
        },
        {
          "type": "string",
          "description": "PEM-format developer private key associated with the certificate.",
          "api_fieldname": "developer_private_key",
          "readOnly": true,
          "required": false,
          "_key": "developer_private_key"
        },
        {
          "type": "string",
          "description": "ID that uniquely identifies the developer certificate.",
          "api_fieldname": "id",
          "parameter_fieldname": "developerCertificateId",
          "in": "path",
          "required": true,
          "readOnly": false,
          "_key": "id"
        },
        {
          "type": "string",
          "description": "Name of the developer certificate.",
          "api_fieldname": "name",
          "readOnly": false,
          "required": true,
          "_key": "name"
        },
        {
          "type": "string",
          "description": "Content of the `security.c` file flashed to the device to provide security credentials.",
          "api_fieldname": "security_file_content",
          "readOnly": true,
          "required": false,
          "_key": "security_file_content"
        }
      ],
      "field_renames": [
        {
          "api_fieldname": "developer_certificate",
          "_key": "certificate"
        }
      ],
      "tags": [
        "Security and identity - developer class certificates",
        "Security and identity - certificates"
      ],
      "group_id": "Security",
      "_key": "developer_certificate"
    },
    {
      "swagger_models": [
        "CertificateEnrollment",
        "DeviceData",
        "DeviceDataPostRequest",
        "DeviceDataPutRequest",
        "DeviceGroupManipulation",
        "DevicePage"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Add one device to a group. A device can be in multiple groups.",
          "field_renames": [],
          "fields": [
            {
              "in": "path",
              "description": "The ID of the group.",
              "name": "device-group-id",
              "required": true,
              "type": "string",
              "entity_fieldname": "device-group-id",
              "api_fieldname": "device-group-id",
              "external_param": true,
              "parameter_fieldname": "device-group-id",
              "_key": "device-group-id"
            },
            {
              "type": "string",
              "example": "00000000000000000000000000000000",
              "name": "device_id",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "id",
              "api_fieldname": "device_id",
              "external_param": false,
              "parameter_fieldname": "device_id",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "add_to_group",
          "responses": [
            {
              "description": "Success - device added.",
              "_key": "204"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/device-groups/{device-group-id}/devices/add/",
          "summary": "Add a device to a group.",
          "return_type": "void",
          "return_info": {
            "self": false,
            "custom": true,
            "type": "void"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Devices",
          "operation_id": "Group_members_add",
          "parameter_map": {
            "device_id": "id"
          },
          "spec": {
            "return_type": "void"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "add_to_group"
        },
        {
          "description": "Create a new device in Device Management. Usually you do not need to create a device this way, as it is automatically created when it bootstraps or connects to Device Management.",
          "field_renames": [],
          "fields": [
            {
              "type": "boolean",
              "description": "DEPRECATED: Mark this device for automatic firmware update.",
              "api_fieldname": "auto_update",
              "entity_fieldname": "auto_update",
              "parameter_fieldname": "auto_update",
              "in": "body",
              "required": false,
              "_key": "auto_update"
            },
            {
              "format": "date",
              "type": "string",
              "x-nullable": true,
              "description": "The expiration date of the certificate used to connect to bootstrap server.",
              "api_fieldname": "bootstrap_expiration_date",
              "entity_fieldname": "bootstrap_expiration_date",
              "parameter_fieldname": "bootstrap_expiration_date",
              "in": "body",
              "required": false,
              "_key": "bootstrap_expiration_date"
            },
            {
              "type": "string",
              "maxLength": 500,
              "description": "The certificate issuer's ID.",
              "example": "00000000000000000000000000000000",
              "api_fieldname": "ca_id",
              "entity_fieldname": "ca_id",
              "parameter_fieldname": "ca_id",
              "in": "body",
              "required": false,
              "_key": "ca_id"
            },
            {
              "format": "date",
              "type": "string",
              "x-nullable": true,
              "description": "The expiration date of the certificate used to connect to LwM2M server.",
              "api_fieldname": "connector_expiration_date",
              "entity_fieldname": "connector_expiration_date",
              "parameter_fieldname": "connector_expiration_date",
              "in": "body",
              "required": false,
              "_key": "connector_expiration_date"
            },
            {
              "type": "object",
              "maxProperties": 5,
              "additionalProperties": {
                "type": "string",
                "maxLength": 128,
                "pattern": "^[A-Za-z].*"
              },
              "description": "Up to five custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
              "example": {
                "key": "value"
              },
              "api_fieldname": "custom_attributes",
              "entity_fieldname": "custom_attributes",
              "parameter_fieldname": "custom_attributes",
              "in": "body",
              "required": false,
              "_key": "custom_attributes"
            },
            {
              "type": "string",
              "description": "DEPRECATED: The last deployment used on the device.",
              "example": "",
              "api_fieldname": "deployment",
              "entity_fieldname": "deployment",
              "parameter_fieldname": "deployment",
              "in": "body",
              "required": false,
              "_key": "deployment"
            },
            {
              "type": "string",
              "maxLength": 2000,
              "description": "The description of the device.",
              "example": "Temperature measuring device",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "type": "string",
              "maxLength": 32,
              "description": "An ID representing the model and hardware revision of the device.",
              "example": "",
              "api_fieldname": "device_class",
              "entity_fieldname": "device_class",
              "parameter_fieldname": "device_class",
              "in": "body",
              "required": false,
              "_key": "device_class"
            },
            {
              "enum": [
                0,
                1,
                5
              ],
              "type": "integer",
              "description": "The execution mode from the certificate of the device. Defaults to inheriting from host_gateway device.\nPermitted values:\n  - 0 - Unspecified execution mode (default if host_gateway invalid or not set). The device firmware uses a certificate that is not identified as a developer or production certificate.\n  - 1 - Development device. The device firmware uses a developer certificate to communicate with Device Management.\n  - 5 - Production device. The device firmware uses a factory-generated certificate to communicate with Device Management.",
              "example": 0,
              "default": 0,
              "api_fieldname": "device_execution_mode",
              "entity_fieldname": "device_execution_mode",
              "parameter_fieldname": "device_execution_mode",
              "in": "body",
              "required": false,
              "_key": "device_execution_mode"
            },
            {
              "type": "string",
              "maxLength": 512,
              "description": "The fingerprint of the device certificate.",
              "example": "00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00",
              "api_fieldname": "device_key",
              "entity_fieldname": "device_key",
              "parameter_fieldname": "device_key",
              "in": "body",
              "required": false,
              "_key": "device_key"
            },
            {
              "type": "string",
              "description": "The endpoint name given to the device. The endpoint_name is from the device certificate and is set by factory tool.",
              "example": "00000000-0000-0000-0000-000000000000",
              "readOnly": true,
              "api_fieldname": "endpoint_name",
              "entity_fieldname": "endpoint_name",
              "parameter_fieldname": "endpoint_name",
              "in": "body",
              "required": false,
              "_key": "endpoint_name"
            },
            {
              "type": "string",
              "description": "The endpoint type of the device. For example, the device is a gateway.",
              "maxLength": 64,
              "example": "",
              "api_fieldname": "endpoint_type",
              "entity_fieldname": "endpoint_type",
              "parameter_fieldname": "endpoint_type",
              "in": "body",
              "required": false,
              "_key": "endpoint_type"
            },
            {
              "type": "string",
              "description": "The ID of the host gateway, if appropriate. A device behind Edge has this host_gateway set.",
              "example": "",
              "api_fieldname": "host_gateway",
              "entity_fieldname": "host_gateway",
              "parameter_fieldname": "host_gateway",
              "in": "body",
              "required": false,
              "_key": "host_gateway"
            },
            {
              "type": "string",
              "pattern": "[A-Fa-f0-9]{64}",
              "x-nullable": true,
              "description": "SHA256 fingerprint of the certificate used to validate the signature of the device certificate.",
              "example": "C42EDEFC75871E4CE2146FCDA67D03DDA05CC26FDF93B17B55F42C1EADFDC322",
              "api_fieldname": "issuer_fingerprint",
              "entity_fieldname": "issuer_fingerprint",
              "parameter_fieldname": "issuer_fingerprint",
              "in": "body",
              "required": false,
              "_key": "issuer_fingerprint"
            },
            {
              "type": "string",
              "description": "DEPRECATED: The URL for the current device manifest.",
              "example": "",
              "api_fieldname": "manifest",
              "entity_fieldname": "manifest",
              "parameter_fieldname": "manifest",
              "in": "body",
              "required": false,
              "_key": "manifest"
            },
            {
              "enum": [
                "connector",
                "direct"
              ],
              "type": "string",
              "description": "NOT USED: The ID of the channel used to communicate with the device.",
              "api_fieldname": "mechanism",
              "entity_fieldname": "mechanism",
              "parameter_fieldname": "mechanism",
              "in": "body",
              "required": false,
              "enum_reference": "device_mechanism_enum",
              "_key": "mechanism"
            },
            {
              "type": "string",
              "description": "NOT USED: The address of the connector to use.",
              "example": "",
              "api_fieldname": "mechanism_url",
              "entity_fieldname": "mechanism_url",
              "parameter_fieldname": "mechanism_url",
              "in": "body",
              "required": false,
              "_key": "mechanism_url"
            },
            {
              "type": "string",
              "maxLength": 128,
              "description": "The name given by the web application for the device. Device itself provides only the endpoint_name.",
              "example": "00000000-0000-0000-0000-000000000000",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            },
            {
              "type": "string",
              "description": "The [serial number](https://www.pelion.com/docs/device-management-provision/latest/provisioning-info/lwm2m-device-object.html#serial-number) of the device. The serial number is injected by the factory tool during manufacturing.",
              "example": "00000000-0000-0000-0000-000000000000",
              "api_fieldname": "serial_number",
              "entity_fieldname": "serial_number",
              "parameter_fieldname": "serial_number",
              "in": "body",
              "required": false,
              "_key": "serial_number"
            },
            {
              "enum": [
                "unenrolled",
                "cloud_enrolling",
                "bootstrapped",
                "registered",
                "deregistered"
              ],
              "type": "string",
              "description": "The current state of the device.\n* Unenrolled: The device has been created, but has not yet bootstrapped or connected to Device Management.\n* Cloud_enrolling: The device is bootstrapping for the first time. This state is set only while bootstrapping is in progress. For example, an external CA gives an error, and the device tries to bootstrap again after few seconds.\n* Bootstrapped: The device has bootstrapped, and has credentials to connect to Device Management.\n* Registered: The device has registered with Pelion Device Management. [Device commands](https://www.pelion.com/docs/device-management-api/connect/) can be queued. The device sends events for [subscribed](https://www.pelion.com/docs/device-management/current/resources/handle-resource-webapp.html) resources.\n* Deregistered: The device has requested deregistration, or its registration has expired.",
              "api_fieldname": "state",
              "entity_fieldname": "state",
              "parameter_fieldname": "state",
              "in": "body",
              "required": false,
              "enum_reference": "device_state_enum",
              "_key": "state"
            },
            {
              "type": "string",
              "description": "The device vendor ID.",
              "example": "00000000-0000-0000-0000-000000000000",
              "api_fieldname": "vendor_id",
              "entity_fieldname": "vendor_id",
              "parameter_fieldname": "vendor_id",
              "in": "body",
              "required": false,
              "_key": "vendor_id"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "Device created.",
              "schema": [
                {
                  "group": "Devices",
                  "entity": "device",
                  "_key": "foreign_key"
                },
                {
                  "device_execution_mode": {
                    "enum": [
                      0,
                      1,
                      5
                    ],
                    "type": "integer",
                    "description": "The execution mode from the certificate of the device. Defaults to inheriting from host_gateway device.\nPermitted values:\n  - 0 - Unspecified execution mode (default if host_gateway invalid or not set). The device firmware uses a certificate that is not identified as a developer or production certificate.\n  - 1 - Development device. The device firmware uses a developer certificate to communicate with Device Management.\n  - 5 - Production device. The device firmware uses a factory-generated certificate to communicate with Device Management.",
                    "example": 0,
                    "default": 0,
                    "api_fieldname": "device_execution_mode",
                    "entity_fieldname": "device_execution_mode"
                  },
                  "groups": {
                    "description": "An array containing an ID of each group this device belongs to.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "00000000000000000000000000000000"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups"
                  },
                  "issuer_fingerprint": {
                    "type": "string",
                    "pattern": "[A-Fa-f0-9]{64}",
                    "x-nullable": true,
                    "description": "SHA256 fingerprint of the certificate used to validate the signature of the device certificate.",
                    "example": "C42EDEFC75871E4CE2146FCDA67D03DDA05CC26FDF93B17B55F42C1EADFDC322",
                    "api_fieldname": "issuer_fingerprint",
                    "entity_fieldname": "issuer_fingerprint"
                  },
                  "operator_suspended": {
                    "type": "boolean",
                    "description": "Device has been suspended by operator.",
                    "api_fieldname": "operator_suspended",
                    "entity_fieldname": "operator_suspended"
                  },
                  "last_operator_suspended_category": {
                    "type": "string",
                    "description": "The reference of the block category.",
                    "pattern": "[a-f0-9_]{32}",
                    "example": "maintenance",
                    "api_fieldname": "last_operator_suspended_category",
                    "entity_fieldname": "last_operator_suspended_category"
                  },
                  "last_operator_suspended_description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "The most recent description why the device was suspended or returned to service.",
                    "example": "Suspended for maintenance.",
                    "api_fieldname": "last_operator_suspended_description",
                    "entity_fieldname": "last_operator_suspended_description"
                  },
                  "last_operator_suspended_updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of the most recent suspension activity.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "last_operator_suspended_updated_at",
                    "entity_fieldname": "last_operator_suspended_updated_at"
                  },
                  "system_suspended": {
                    "type": "boolean",
                    "description": "Is the device suspended by the system?",
                    "api_fieldname": "system_suspended",
                    "entity_fieldname": "system_suspended"
                  },
                  "last_system_suspended_category": {
                    "type": "string",
                    "description": "The reference of the block category.",
                    "pattern": "[a-f0-9_]{32}",
                    "example": "maintenance",
                    "api_fieldname": "last_system_suspended_category",
                    "entity_fieldname": "last_system_suspended_category"
                  },
                  "last_system_suspended_description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "The most recent description of why the device was blocked or unblocked by the system.",
                    "example": "A certificate in the device's certificate chain was blacklisted by the system.",
                    "api_fieldname": "last_system_suspended_description",
                    "entity_fieldname": "last_system_suspended_description"
                  },
                  "last_system_suspended_updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of the most recent system block activity.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "last_system_suspended_updated_at",
                    "entity_fieldname": "last_system_suspended_updated_at"
                  },
                  "lifecycle_status": {
                    "type": "string",
                    "enum": [
                      "enabled",
                      "blocked"
                    ],
                    "description": "The lifecycle status of the device.\n* Enabled: The device is allowed to connect to Pelion Device Management.\n* Blocked: The device is prevented from connecting to Pelion Device Management. Device can be, for example, 'suspended'.",
                    "example": "enabled",
                    "api_fieldname": "lifecycle_status",
                    "entity_fieldname": "lifecycle_status"
                  },
                  "account_id": {
                    "type": "string",
                    "description": "The ID of the associated account.",
                    "example": "00000000000000000000000000000000",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id"
                  },
                  "auto_update": {
                    "type": "boolean",
                    "description": "DEPRECATED: Mark this device for automatic firmware update.",
                    "api_fieldname": "auto_update",
                    "entity_fieldname": "auto_update"
                  },
                  "bootstrap_expiration_date": {
                    "format": "date",
                    "type": "string",
                    "x-nullable": true,
                    "description": "The expiration date of the certificate used to connect to bootstrap server.",
                    "api_fieldname": "bootstrap_expiration_date",
                    "entity_fieldname": "bootstrap_expiration_date"
                  },
                  "bootstrapped_timestamp": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The timestamp of the device's most recent bootstrap process.",
                    "api_fieldname": "bootstrapped_timestamp",
                    "entity_fieldname": "bootstrapped_timestamp"
                  },
                  "ca_id": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "The certificate issuer's ID.",
                    "example": "00000000000000000000000000000000",
                    "api_fieldname": "ca_id",
                    "entity_fieldname": "ca_id"
                  },
                  "component_attributes": {
                    "type": "object",
                    "maxProperties": 10,
                    "additionalProperties": {
                      "type": "string",
                      "maxLength": 128
                    },
                    "description": "Up to ten custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
                    "example": {
                      "key": "value"
                    },
                    "api_fieldname": "component_attributes",
                    "entity_fieldname": "component_attributes"
                  },
                  "connector_expiration_date": {
                    "format": "date",
                    "type": "string",
                    "x-nullable": true,
                    "description": "The expiration date of the certificate used to connect to LwM2M server.",
                    "api_fieldname": "connector_expiration_date",
                    "entity_fieldname": "connector_expiration_date"
                  },
                  "created_at": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The timestamp of when the device was created in the device directory.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at"
                  },
                  "custom_attributes": {
                    "type": "object",
                    "maxProperties": 5,
                    "additionalProperties": {
                      "type": "string",
                      "maxLength": 128,
                      "pattern": "^[A-Za-z].*"
                    },
                    "description": "Up to five custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
                    "example": {
                      "key": "value"
                    },
                    "api_fieldname": "custom_attributes",
                    "entity_fieldname": "custom_attributes"
                  },
                  "deployed_state": {
                    "enum": [
                      "development",
                      "production"
                    ],
                    "type": "string",
                    "description": "DEPRECATED: The state of the device's deployment.",
                    "api_fieldname": "deployed_state",
                    "entity_fieldname": "deployed_state"
                  },
                  "deployment": {
                    "type": "string",
                    "description": "DEPRECATED: The last deployment used on the device.",
                    "example": "",
                    "api_fieldname": "deployment",
                    "entity_fieldname": "deployment"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "The description of the device.",
                    "example": "Temperature measuring device",
                    "api_fieldname": "description",
                    "entity_fieldname": "description"
                  },
                  "device_class": {
                    "type": "string",
                    "maxLength": 32,
                    "description": "An ID representing the model and hardware revision of the device.",
                    "example": "",
                    "api_fieldname": "device_class",
                    "entity_fieldname": "device_class"
                  },
                  "id": {
                    "type": "string",
                    "description": "The ID of the device. The device ID is used across all Device Management APIs.",
                    "example": "00000000000000000000000000000000",
                    "api_fieldname": "id",
                    "entity_fieldname": "id"
                  },
                  "device_key": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "The fingerprint of the device certificate.",
                    "example": "00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00",
                    "api_fieldname": "device_key",
                    "entity_fieldname": "device_key"
                  },
                  "endpoint_name": {
                    "type": "string",
                    "description": "The endpoint name given to the device. The endpoint_name is from the device certificate and is set by factory tool.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "readOnly": true,
                    "api_fieldname": "endpoint_name",
                    "entity_fieldname": "endpoint_name"
                  },
                  "endpoint_type": {
                    "type": "string",
                    "description": "The endpoint type of the device. For example, the device is a gateway.",
                    "maxLength": 64,
                    "example": "",
                    "api_fieldname": "endpoint_type",
                    "entity_fieldname": "endpoint_type"
                  },
                  "etag": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The entity instance signature.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag"
                  },
                  "firmware_checksum": {
                    "type": "string",
                    "description": "The SHA256 checksum of the current firmware image.",
                    "example": "0000000000000000000000000000000000000000000000000000000000000000",
                    "api_fieldname": "firmware_checksum",
                    "entity_fieldname": "firmware_checksum"
                  },
                  "host_gateway": {
                    "type": "string",
                    "description": "The ID of the host gateway, if appropriate. A device behind Edge has this host_gateway set.",
                    "example": "",
                    "api_fieldname": "host_gateway",
                    "entity_fieldname": "host_gateway"
                  },
                  "manifest": {
                    "type": "string",
                    "description": "DEPRECATED: The URL for the current device manifest.",
                    "example": "",
                    "api_fieldname": "manifest",
                    "entity_fieldname": "manifest"
                  },
                  "manifest_timestamp": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The timestamp of the current manifest version.",
                    "api_fieldname": "manifest_timestamp",
                    "entity_fieldname": "manifest_timestamp"
                  },
                  "mechanism": {
                    "enum": [
                      "connector",
                      "direct"
                    ],
                    "type": "string",
                    "description": "NOT USED: The ID of the channel used to communicate with the device.",
                    "api_fieldname": "mechanism",
                    "entity_fieldname": "mechanism"
                  },
                  "mechanism_url": {
                    "type": "string",
                    "description": "NOT USED: The address of the connector to use.",
                    "example": "",
                    "api_fieldname": "mechanism_url",
                    "entity_fieldname": "mechanism_url"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 128,
                    "description": "The name given by the web application for the device. Device itself provides only the endpoint_name.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "api_fieldname": "name",
                    "entity_fieldname": "name"
                  },
                  "net_id": {
                    "type": "string",
                    "default": "",
                    "maxLength": 40,
                    "description": "Private network identifier. Used to group nodes connected to a specific border router.",
                    "example": "0000:0000:0000:0000:0000:0000:0000:0000",
                    "api_fieldname": "net_id",
                    "entity_fieldname": "net_id"
                  },
                  "object": {
                    "type": "string",
                    "description": "The API resource entity.",
                    "example": "device",
                    "api_fieldname": "object",
                    "entity_fieldname": "object"
                  },
                  "serial_number": {
                    "type": "string",
                    "description": "The [serial number](https://www.pelion.com/docs/device-management-provision/latest/provisioning-info/lwm2m-device-object.html#serial-number) of the device. The serial number is injected by the factory tool during manufacturing.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "api_fieldname": "serial_number",
                    "entity_fieldname": "serial_number"
                  },
                  "state": {
                    "enum": [
                      "unenrolled",
                      "cloud_enrolling",
                      "bootstrapped",
                      "registered",
                      "deregistered"
                    ],
                    "type": "string",
                    "description": "The current state of the device.\n* Unenrolled: The device has been created, but has not yet bootstrapped or connected to Device Management.\n* Cloud_enrolling: The device is bootstrapping for the first time. This state is set only while bootstrapping is in progress. For example, an external CA gives an error, and the device tries to bootstrap again after few seconds.\n* Bootstrapped: The device has bootstrapped, and has credentials to connect to Device Management.\n* Registered: The device has registered with Pelion Device Management. [Device commands](https://www.pelion.com/docs/device-management-api/connect/) can be queued. The device sends events for [subscribed](https://www.pelion.com/docs/device-management/current/resources/handle-resource-webapp.html) resources.\n* Deregistered: The device has requested deregistration, or its registration has expired.",
                    "api_fieldname": "state",
                    "entity_fieldname": "state"
                  },
                  "updated_at": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The time this data object was updated.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at"
                  },
                  "vendor_id": {
                    "type": "string",
                    "description": "The device vendor ID.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "api_fieldname": "vendor_id",
                    "entity_fieldname": "vendor_id"
                  },
                  "enrolment_list_timestamp": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The claim date/time.",
                    "api_fieldname": "enrolment_list_timestamp",
                    "entity_fieldname": "enrolment_list_timestamp"
                  },
                  "_key": "properties"
                }
              ],
              "_key": "201"
            },
            {
              "description": "Validation error: The data used to create the device did not validate.",
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "_key": "401"
            },
            {
              "description": "Account limit reached. Could not create device.",
              "_key": "403"
            },
            {
              "description": "Unique-constrained fields are used by other resources.",
              "_key": "409"
            }
          ],
          "path": "/v3/devices/",
          "summary": "Create a device.",
          "return_type": "device",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "groups",
            "operator_suspended",
            "last_operator_suspended_category",
            "last_operator_suspended_description",
            "last_operator_suspended_updated_at",
            "system_suspended",
            "last_system_suspended_category",
            "last_system_suspended_description",
            "last_system_suspended_updated_at",
            "lifecycle_status",
            "account_id",
            "bootstrapped_timestamp",
            "component_attributes",
            "created_at",
            "deployed_state",
            "id",
            "firmware_checksum",
            "manifest_timestamp",
            "net_id",
            "updated_at",
            "enrolment_list_timestamp"
          ],
          "group_id": "Devices",
          "operation_id": "Device_create",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete device. Only available for devices with a developer certificate. Attempting to delete a device with a production certificate returns a 400 response.",
          "field_renames": [],
          "fields": [
            {
              "description": "The [Device ID](https://www.pelion.com/docs/device-management/current/connecting/device-identity.html) created by Device Management.",
              "in": "path",
              "name": "id",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "id",
              "external_param": false,
              "parameter_fieldname": "id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Device deleted.",
              "_key": "204"
            },
            {
              "description": "Bad request.",
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "_key": "401"
            },
            {
              "description": "Unable to delete device because it can't be found.",
              "_key": "404"
            }
          ],
          "path": "/v3/devices/{id}/",
          "summary": "Delete a device.",
          "return_type": "device",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Devices",
          "operation_id": "Device_destroy",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "List all devices enrolled to Device Management for the account.\n\n**Example:**\nFollowing example filters devices according to state field and returns only devices in 'registered' state:\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/devices?filter=state%3Dregistered \\\n-H 'Authorization: Bearer <API key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "The ID of the item after which to retrieve the next page.",
              "example": "01631667477600000000000100100374",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "in": "query",
              "name": "after",
              "external_param": true,
              "parameter_fieldname": "after",
              "required": false,
              "_key": "after"
            },
            {
              "description": "Comma-separated list of data fields to return. Currently supported: `total_count`.",
              "in": "query",
              "name": "include",
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "required": false,
              "_key": "include"
            },
            {
              "type": "integer",
              "description": "How many objects to retrieve in the page (2-1000). Limit values outside of this range are set to the closest limit.",
              "example": 50,
              "minimum": 2,
              "maximum": 1000,
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "in": "query",
              "name": "limit",
              "external_param": true,
              "parameter_fieldname": "limit",
              "required": false,
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order. Acceptable values: ASC, DESC. Default: ASC.",
              "example": "DESC",
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "in": "query",
              "name": "order",
              "external_param": true,
              "parameter_fieldname": "order",
              "required": false,
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Request successful.",
              "schema": {
                "properties": [
                  {
                    "type": "string",
                    "description": "An offset token for current page.",
                    "example": "01631667477600000000000100100374",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "items": [
                      {
                        "group": "Devices",
                        "entity": "device",
                        "_key": "foreign_key"
                      },
                      {
                        "device_execution_mode": {
                          "enum": [
                            0,
                            1,
                            5
                          ],
                          "type": "integer",
                          "description": "The execution mode from the certificate of the device. Defaults to inheriting from host_gateway device.\nPermitted values:\n  - 0 - Unspecified execution mode (default if host_gateway invalid or not set). The device firmware uses a certificate that is not identified as a developer or production certificate.\n  - 1 - Development device. The device firmware uses a developer certificate to communicate with Device Management.\n  - 5 - Production device. The device firmware uses a factory-generated certificate to communicate with Device Management.",
                          "example": 0,
                          "default": 0
                        },
                        "groups": {
                          "description": "An array containing an ID of each group this device belongs to.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "00000000000000000000000000000000"
                          }
                        },
                        "issuer_fingerprint": {
                          "type": "string",
                          "pattern": "[A-Fa-f0-9]{64}",
                          "x-nullable": true,
                          "description": "SHA256 fingerprint of the certificate used to validate the signature of the device certificate.",
                          "example": "C42EDEFC75871E4CE2146FCDA67D03DDA05CC26FDF93B17B55F42C1EADFDC322"
                        },
                        "operator_suspended": {
                          "type": "boolean",
                          "description": "Device has been suspended by operator."
                        },
                        "last_operator_suspended_category": {
                          "type": "string",
                          "description": "The reference of the block category.",
                          "pattern": "[a-f0-9_]{32}",
                          "example": "maintenance"
                        },
                        "last_operator_suspended_description": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "The most recent description why the device was suspended or returned to service.",
                          "example": "Suspended for maintenance."
                        },
                        "last_operator_suspended_updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The timestamp of the most recent suspension activity.",
                          "example": "2017-05-22T12:37:55.576563Z"
                        },
                        "system_suspended": {
                          "type": "boolean",
                          "description": "Is the device suspended by the system?"
                        },
                        "last_system_suspended_category": {
                          "type": "string",
                          "description": "The reference of the block category.",
                          "pattern": "[a-f0-9_]{32}",
                          "example": "maintenance"
                        },
                        "last_system_suspended_description": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "The most recent description of why the device was blocked or unblocked by the system.",
                          "example": "A certificate in the device's certificate chain was blacklisted by the system."
                        },
                        "last_system_suspended_updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The timestamp of the most recent system block activity.",
                          "example": "2017-05-22T12:37:55.576563Z"
                        },
                        "lifecycle_status": {
                          "type": "string",
                          "enum": [
                            "enabled",
                            "blocked"
                          ],
                          "description": "The lifecycle status of the device.\n* Enabled: The device is allowed to connect to Pelion Device Management.\n* Blocked: The device is prevented from connecting to Pelion Device Management. Device can be, for example, 'suspended'.",
                          "example": "enabled"
                        },
                        "account_id": {
                          "type": "string",
                          "description": "The ID of the associated account.",
                          "example": "00000000000000000000000000000000"
                        },
                        "auto_update": {
                          "type": "boolean",
                          "description": "DEPRECATED: Mark this device for automatic firmware update."
                        },
                        "bootstrap_expiration_date": {
                          "format": "date",
                          "type": "string",
                          "x-nullable": true,
                          "description": "The expiration date of the certificate used to connect to bootstrap server."
                        },
                        "bootstrapped_timestamp": {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "description": "The timestamp of the device's most recent bootstrap process."
                        },
                        "ca_id": {
                          "type": "string",
                          "maxLength": 500,
                          "description": "The certificate issuer's ID.",
                          "example": "00000000000000000000000000000000"
                        },
                        "component_attributes": {
                          "type": "object",
                          "maxProperties": 10,
                          "additionalProperties": {
                            "type": "string",
                            "maxLength": 128
                          },
                          "description": "Up to ten custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
                          "example": {
                            "key": "value"
                          }
                        },
                        "connector_expiration_date": {
                          "format": "date",
                          "type": "string",
                          "x-nullable": true,
                          "description": "The expiration date of the certificate used to connect to LwM2M server."
                        },
                        "created_at": {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "description": "The timestamp of when the device was created in the device directory."
                        },
                        "custom_attributes": {
                          "type": "object",
                          "maxProperties": 5,
                          "additionalProperties": {
                            "type": "string",
                            "maxLength": 128,
                            "pattern": "^[A-Za-z].*"
                          },
                          "description": "Up to five custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
                          "example": {
                            "key": "value"
                          }
                        },
                        "deployed_state": {
                          "enum": [
                            "development",
                            "production"
                          ],
                          "type": "string",
                          "description": "DEPRECATED: The state of the device's deployment."
                        },
                        "deployment": {
                          "type": "string",
                          "description": "DEPRECATED: The last deployment used on the device.",
                          "example": ""
                        },
                        "description": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "The description of the device.",
                          "example": "Temperature measuring device"
                        },
                        "device_class": {
                          "type": "string",
                          "maxLength": 32,
                          "description": "An ID representing the model and hardware revision of the device.",
                          "example": ""
                        },
                        "id": {
                          "type": "string",
                          "description": "The ID of the device. The device ID is used across all Device Management APIs.",
                          "example": "00000000000000000000000000000000"
                        },
                        "device_key": {
                          "type": "string",
                          "maxLength": 512,
                          "description": "The fingerprint of the device certificate.",
                          "example": "00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00"
                        },
                        "endpoint_name": {
                          "type": "string",
                          "description": "The endpoint name given to the device. The endpoint_name is from the device certificate and is set by factory tool.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "readOnly": true
                        },
                        "endpoint_type": {
                          "type": "string",
                          "description": "The endpoint type of the device. For example, the device is a gateway.",
                          "maxLength": 64,
                          "example": ""
                        },
                        "etag": {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "description": "The entity instance signature."
                        },
                        "firmware_checksum": {
                          "type": "string",
                          "description": "The SHA256 checksum of the current firmware image.",
                          "example": "0000000000000000000000000000000000000000000000000000000000000000"
                        },
                        "host_gateway": {
                          "type": "string",
                          "description": "The ID of the host gateway, if appropriate. A device behind Edge has this host_gateway set.",
                          "example": ""
                        },
                        "manifest": {
                          "type": "string",
                          "description": "DEPRECATED: The URL for the current device manifest.",
                          "example": ""
                        },
                        "manifest_timestamp": {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "description": "The timestamp of the current manifest version."
                        },
                        "mechanism": {
                          "enum": [
                            "connector",
                            "direct"
                          ],
                          "type": "string",
                          "description": "NOT USED: The ID of the channel used to communicate with the device."
                        },
                        "mechanism_url": {
                          "type": "string",
                          "description": "NOT USED: The address of the connector to use.",
                          "example": ""
                        },
                        "name": {
                          "type": "string",
                          "maxLength": 128,
                          "description": "The name given by the web application for the device. Device itself provides only the endpoint_name.",
                          "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "net_id": {
                          "type": "string",
                          "default": "",
                          "maxLength": 40,
                          "description": "Private network identifier. Used to group nodes connected to a specific border router.",
                          "example": "0000:0000:0000:0000:0000:0000:0000:0000"
                        },
                        "object": {
                          "type": "string",
                          "description": "The API resource entity.",
                          "example": "device"
                        },
                        "serial_number": {
                          "type": "string",
                          "description": "The [serial number](https://www.pelion.com/docs/device-management-provision/latest/provisioning-info/lwm2m-device-object.html#serial-number) of the device. The serial number is injected by the factory tool during manufacturing.",
                          "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "state": {
                          "enum": [
                            "unenrolled",
                            "cloud_enrolling",
                            "bootstrapped",
                            "registered",
                            "deregistered"
                          ],
                          "type": "string",
                          "description": "The current state of the device.\n* Unenrolled: The device has been created, but has not yet bootstrapped or connected to Device Management.\n* Cloud_enrolling: The device is bootstrapping for the first time. This state is set only while bootstrapping is in progress. For example, an external CA gives an error, and the device tries to bootstrap again after few seconds.\n* Bootstrapped: The device has bootstrapped, and has credentials to connect to Device Management.\n* Registered: The device has registered with Pelion Device Management. [Device commands](https://www.pelion.com/docs/device-management-api/connect/) can be queued. The device sends events for [subscribed](https://www.pelion.com/docs/device-management/current/resources/handle-resource-webapp.html) resources.\n* Deregistered: The device has requested deregistration, or its registration has expired."
                        },
                        "updated_at": {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "description": "The time this data object was updated."
                        },
                        "vendor_id": {
                          "type": "string",
                          "description": "The device vendor ID.",
                          "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "enrolment_list_timestamp": {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "description": "The claim date/time."
                        },
                        "_key": "properties"
                      }
                    ],
                    "type": "array",
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "description": "Are there more results available.",
                    "example": false,
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "description": "How many objects to retrieve in the page. The minimum limit is 2 and the maximum is 1000. Limit values outside of this range are set to the closest limit.",
                    "example": 50,
                    "minimum": 2,
                    "maximum": 1000,
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "The type of this API object is a \"list\".",
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records based on creation time, `ASC` or `DESC`; by default `ASC`.",
                    "example": "DESC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "format": "integer",
                    "type": "integer",
                    "example": 1,
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad request.",
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "_key": "401"
            },
            {
              "description": "Unable to find page.",
              "_key": "404"
            }
          ],
          "path": "/v3/devices/",
          "summary": "List all devices.",
          "return_type": "paginated_response(device)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device"
          },
          "x_filter": {
            "lifecycle_status": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "operator_suspended": [
              "eq",
              "neq"
            ],
            "last_operator_suspended_category": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "last_operator_suspended_updated_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "system_suspended": [
              "eq",
              "neq"
            ],
            "last_system_suspended_category": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "last_system_suspended_updated_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "account_id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "auto_update": [
              "eq",
              "neq"
            ],
            "bootstrap_expiration_date": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "bootstrapped_timestamp": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "ca_id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "connector_expiration_date": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "created_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "deployed_state": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "deployment": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "description": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "device_class": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "device_execution_mode": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "device_key": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "endpoint_name": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "endpoint_type": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "enrolment_list_timestamp": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "firmware_checksum": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "host_gateway": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "manifest": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "manifest_timestamp": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "mechanism": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "mechanism_url": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "name": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "net_id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "serial_number": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "state": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "updated_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "vendor_id": [
              "eq",
              "neq",
              "in",
              "nin"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "data",
            "has_more",
            "total_count",
            "lifecycle_status__eq",
            "lifecycle_status__neq",
            "lifecycle_status__in",
            "lifecycle_status__nin",
            "operator_suspended__eq",
            "operator_suspended__neq",
            "last_operator_suspended_category__eq",
            "last_operator_suspended_category__neq",
            "last_operator_suspended_category__in",
            "last_operator_suspended_category__nin",
            "last_operator_suspended_updated_at__in",
            "last_operator_suspended_updated_at__nin",
            "last_operator_suspended_updated_at__lte",
            "last_operator_suspended_updated_at__gte",
            "system_suspended__eq",
            "system_suspended__neq",
            "last_system_suspended_category__eq",
            "last_system_suspended_category__neq",
            "last_system_suspended_category__in",
            "last_system_suspended_category__nin",
            "last_system_suspended_updated_at__in",
            "last_system_suspended_updated_at__nin",
            "last_system_suspended_updated_at__lte",
            "last_system_suspended_updated_at__gte",
            "account_id__eq",
            "account_id__neq",
            "account_id__in",
            "account_id__nin",
            "auto_update__eq",
            "auto_update__neq",
            "bootstrap_expiration_date__in",
            "bootstrap_expiration_date__nin",
            "bootstrap_expiration_date__lte",
            "bootstrap_expiration_date__gte",
            "bootstrapped_timestamp__in",
            "bootstrapped_timestamp__nin",
            "bootstrapped_timestamp__lte",
            "bootstrapped_timestamp__gte",
            "ca_id__eq",
            "ca_id__neq",
            "ca_id__in",
            "ca_id__nin",
            "connector_expiration_date__in",
            "connector_expiration_date__nin",
            "connector_expiration_date__lte",
            "connector_expiration_date__gte",
            "created_at__in",
            "created_at__nin",
            "created_at__lte",
            "created_at__gte",
            "deployed_state__eq",
            "deployed_state__neq",
            "deployed_state__in",
            "deployed_state__nin",
            "deployment__eq",
            "deployment__neq",
            "deployment__in",
            "deployment__nin",
            "description__eq",
            "description__neq",
            "description__in",
            "description__nin",
            "device_class__eq",
            "device_class__neq",
            "device_class__in",
            "device_class__nin",
            "device_execution_mode__eq",
            "device_execution_mode__neq",
            "device_execution_mode__in",
            "device_execution_mode__nin",
            "device_key__eq",
            "device_key__neq",
            "device_key__in",
            "device_key__nin",
            "endpoint_name__eq",
            "endpoint_name__neq",
            "endpoint_name__in",
            "endpoint_name__nin",
            "endpoint_type__eq",
            "endpoint_type__neq",
            "endpoint_type__in",
            "endpoint_type__nin",
            "enrolment_list_timestamp__in",
            "enrolment_list_timestamp__nin",
            "enrolment_list_timestamp__lte",
            "enrolment_list_timestamp__gte",
            "firmware_checksum__eq",
            "firmware_checksum__neq",
            "firmware_checksum__in",
            "firmware_checksum__nin",
            "host_gateway__eq",
            "host_gateway__neq",
            "host_gateway__in",
            "host_gateway__nin",
            "id__eq",
            "id__neq",
            "id__in",
            "id__nin",
            "manifest__eq",
            "manifest__neq",
            "manifest__in",
            "manifest__nin",
            "manifest_timestamp__in",
            "manifest_timestamp__nin",
            "manifest_timestamp__lte",
            "manifest_timestamp__gte",
            "mechanism__eq",
            "mechanism__neq",
            "mechanism__in",
            "mechanism__nin",
            "mechanism_url__eq",
            "mechanism_url__neq",
            "mechanism_url__in",
            "mechanism_url__nin",
            "name__eq",
            "name__neq",
            "name__in",
            "name__nin",
            "net_id__eq",
            "net_id__neq",
            "net_id__in",
            "net_id__nin",
            "serial_number__eq",
            "serial_number__neq",
            "serial_number__in",
            "serial_number__nin",
            "state__eq",
            "state__neq",
            "state__in",
            "state__nin",
            "updated_at__in",
            "updated_at__nin",
            "updated_at__lte",
            "updated_at__gte",
            "vendor_id__eq",
            "vendor_id__neq",
            "vendor_id__in",
            "vendor_id__nin"
          ],
          "foreign_key_priority": "self",
          "group_id": "Devices",
          "operation_id": "Device_list",
          "pagination": true,
          "foreign_key": {
            "group": "Devices",
            "entity": "device"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve information about a specific device. This API returns [DeviceData](https://www.pelion.com/docs/device-management-api/device-directory/). If you want to see the structure of resources in the device or the actual resource values, use the [Connect API](https://www.pelion.com/docs/device-management-api/connect/).\n\n**Example:**\nFollowing example must be updated with the device's ID to the URL. The id is from of \"01667c6e992c00000000000100100370\"\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/devices/<device_ID> \\\n-H 'Authorization: Bearer <API key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "The ID of the device. The device ID is used across all Device Management APIs.",
              "example": "00000000000000000000000000000000",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Retrieved result successfully.",
              "schema": [
                {
                  "group": "Devices",
                  "entity": "device",
                  "_key": "foreign_key"
                },
                {
                  "device_execution_mode": {
                    "enum": [
                      0,
                      1,
                      5
                    ],
                    "type": "integer",
                    "description": "The execution mode from the certificate of the device. Defaults to inheriting from host_gateway device.\nPermitted values:\n  - 0 - Unspecified execution mode (default if host_gateway invalid or not set). The device firmware uses a certificate that is not identified as a developer or production certificate.\n  - 1 - Development device. The device firmware uses a developer certificate to communicate with Device Management.\n  - 5 - Production device. The device firmware uses a factory-generated certificate to communicate with Device Management.",
                    "example": 0,
                    "default": 0,
                    "api_fieldname": "device_execution_mode",
                    "entity_fieldname": "device_execution_mode"
                  },
                  "groups": {
                    "description": "An array containing an ID of each group this device belongs to.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "00000000000000000000000000000000"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups"
                  },
                  "issuer_fingerprint": {
                    "type": "string",
                    "pattern": "[A-Fa-f0-9]{64}",
                    "x-nullable": true,
                    "description": "SHA256 fingerprint of the certificate used to validate the signature of the device certificate.",
                    "example": "C42EDEFC75871E4CE2146FCDA67D03DDA05CC26FDF93B17B55F42C1EADFDC322",
                    "api_fieldname": "issuer_fingerprint",
                    "entity_fieldname": "issuer_fingerprint"
                  },
                  "operator_suspended": {
                    "type": "boolean",
                    "description": "Device has been suspended by operator.",
                    "api_fieldname": "operator_suspended",
                    "entity_fieldname": "operator_suspended"
                  },
                  "last_operator_suspended_category": {
                    "type": "string",
                    "description": "The reference of the block category.",
                    "pattern": "[a-f0-9_]{32}",
                    "example": "maintenance",
                    "api_fieldname": "last_operator_suspended_category",
                    "entity_fieldname": "last_operator_suspended_category"
                  },
                  "last_operator_suspended_description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "The most recent description why the device was suspended or returned to service.",
                    "example": "Suspended for maintenance.",
                    "api_fieldname": "last_operator_suspended_description",
                    "entity_fieldname": "last_operator_suspended_description"
                  },
                  "last_operator_suspended_updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of the most recent suspension activity.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "last_operator_suspended_updated_at",
                    "entity_fieldname": "last_operator_suspended_updated_at"
                  },
                  "system_suspended": {
                    "type": "boolean",
                    "description": "Is the device suspended by the system?",
                    "api_fieldname": "system_suspended",
                    "entity_fieldname": "system_suspended"
                  },
                  "last_system_suspended_category": {
                    "type": "string",
                    "description": "The reference of the block category.",
                    "pattern": "[a-f0-9_]{32}",
                    "example": "maintenance",
                    "api_fieldname": "last_system_suspended_category",
                    "entity_fieldname": "last_system_suspended_category"
                  },
                  "last_system_suspended_description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "The most recent description of why the device was blocked or unblocked by the system.",
                    "example": "A certificate in the device's certificate chain was blacklisted by the system.",
                    "api_fieldname": "last_system_suspended_description",
                    "entity_fieldname": "last_system_suspended_description"
                  },
                  "last_system_suspended_updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of the most recent system block activity.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "last_system_suspended_updated_at",
                    "entity_fieldname": "last_system_suspended_updated_at"
                  },
                  "lifecycle_status": {
                    "type": "string",
                    "enum": [
                      "enabled",
                      "blocked"
                    ],
                    "description": "The lifecycle status of the device.\n* Enabled: The device is allowed to connect to Pelion Device Management.\n* Blocked: The device is prevented from connecting to Pelion Device Management. Device can be, for example, 'suspended'.",
                    "example": "enabled",
                    "api_fieldname": "lifecycle_status",
                    "entity_fieldname": "lifecycle_status"
                  },
                  "account_id": {
                    "type": "string",
                    "description": "The ID of the associated account.",
                    "example": "00000000000000000000000000000000",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id"
                  },
                  "auto_update": {
                    "type": "boolean",
                    "description": "DEPRECATED: Mark this device for automatic firmware update.",
                    "api_fieldname": "auto_update",
                    "entity_fieldname": "auto_update"
                  },
                  "bootstrap_expiration_date": {
                    "format": "date",
                    "type": "string",
                    "x-nullable": true,
                    "description": "The expiration date of the certificate used to connect to bootstrap server.",
                    "api_fieldname": "bootstrap_expiration_date",
                    "entity_fieldname": "bootstrap_expiration_date"
                  },
                  "bootstrapped_timestamp": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The timestamp of the device's most recent bootstrap process.",
                    "api_fieldname": "bootstrapped_timestamp",
                    "entity_fieldname": "bootstrapped_timestamp"
                  },
                  "ca_id": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "The certificate issuer's ID.",
                    "example": "00000000000000000000000000000000",
                    "api_fieldname": "ca_id",
                    "entity_fieldname": "ca_id"
                  },
                  "component_attributes": {
                    "type": "object",
                    "maxProperties": 10,
                    "additionalProperties": {
                      "type": "string",
                      "maxLength": 128
                    },
                    "description": "Up to ten custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
                    "example": {
                      "key": "value"
                    },
                    "api_fieldname": "component_attributes",
                    "entity_fieldname": "component_attributes"
                  },
                  "connector_expiration_date": {
                    "format": "date",
                    "type": "string",
                    "x-nullable": true,
                    "description": "The expiration date of the certificate used to connect to LwM2M server.",
                    "api_fieldname": "connector_expiration_date",
                    "entity_fieldname": "connector_expiration_date"
                  },
                  "created_at": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The timestamp of when the device was created in the device directory.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at"
                  },
                  "custom_attributes": {
                    "type": "object",
                    "maxProperties": 5,
                    "additionalProperties": {
                      "type": "string",
                      "maxLength": 128,
                      "pattern": "^[A-Za-z].*"
                    },
                    "description": "Up to five custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
                    "example": {
                      "key": "value"
                    },
                    "api_fieldname": "custom_attributes",
                    "entity_fieldname": "custom_attributes"
                  },
                  "deployed_state": {
                    "enum": [
                      "development",
                      "production"
                    ],
                    "type": "string",
                    "description": "DEPRECATED: The state of the device's deployment.",
                    "api_fieldname": "deployed_state",
                    "entity_fieldname": "deployed_state"
                  },
                  "deployment": {
                    "type": "string",
                    "description": "DEPRECATED: The last deployment used on the device.",
                    "example": "",
                    "api_fieldname": "deployment",
                    "entity_fieldname": "deployment"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "The description of the device.",
                    "example": "Temperature measuring device",
                    "api_fieldname": "description",
                    "entity_fieldname": "description"
                  },
                  "device_class": {
                    "type": "string",
                    "maxLength": 32,
                    "description": "An ID representing the model and hardware revision of the device.",
                    "example": "",
                    "api_fieldname": "device_class",
                    "entity_fieldname": "device_class"
                  },
                  "id": {
                    "type": "string",
                    "description": "The ID of the device. The device ID is used across all Device Management APIs.",
                    "example": "00000000000000000000000000000000",
                    "api_fieldname": "id",
                    "entity_fieldname": "id"
                  },
                  "device_key": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "The fingerprint of the device certificate.",
                    "example": "00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00",
                    "api_fieldname": "device_key",
                    "entity_fieldname": "device_key"
                  },
                  "endpoint_name": {
                    "type": "string",
                    "description": "The endpoint name given to the device. The endpoint_name is from the device certificate and is set by factory tool.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "readOnly": true,
                    "api_fieldname": "endpoint_name",
                    "entity_fieldname": "endpoint_name"
                  },
                  "endpoint_type": {
                    "type": "string",
                    "description": "The endpoint type of the device. For example, the device is a gateway.",
                    "maxLength": 64,
                    "example": "",
                    "api_fieldname": "endpoint_type",
                    "entity_fieldname": "endpoint_type"
                  },
                  "etag": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The entity instance signature.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag"
                  },
                  "firmware_checksum": {
                    "type": "string",
                    "description": "The SHA256 checksum of the current firmware image.",
                    "example": "0000000000000000000000000000000000000000000000000000000000000000",
                    "api_fieldname": "firmware_checksum",
                    "entity_fieldname": "firmware_checksum"
                  },
                  "host_gateway": {
                    "type": "string",
                    "description": "The ID of the host gateway, if appropriate. A device behind Edge has this host_gateway set.",
                    "example": "",
                    "api_fieldname": "host_gateway",
                    "entity_fieldname": "host_gateway"
                  },
                  "manifest": {
                    "type": "string",
                    "description": "DEPRECATED: The URL for the current device manifest.",
                    "example": "",
                    "api_fieldname": "manifest",
                    "entity_fieldname": "manifest"
                  },
                  "manifest_timestamp": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The timestamp of the current manifest version.",
                    "api_fieldname": "manifest_timestamp",
                    "entity_fieldname": "manifest_timestamp"
                  },
                  "mechanism": {
                    "enum": [
                      "connector",
                      "direct"
                    ],
                    "type": "string",
                    "description": "NOT USED: The ID of the channel used to communicate with the device.",
                    "api_fieldname": "mechanism",
                    "entity_fieldname": "mechanism"
                  },
                  "mechanism_url": {
                    "type": "string",
                    "description": "NOT USED: The address of the connector to use.",
                    "example": "",
                    "api_fieldname": "mechanism_url",
                    "entity_fieldname": "mechanism_url"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 128,
                    "description": "The name given by the web application for the device. Device itself provides only the endpoint_name.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "api_fieldname": "name",
                    "entity_fieldname": "name"
                  },
                  "net_id": {
                    "type": "string",
                    "default": "",
                    "maxLength": 40,
                    "description": "Private network identifier. Used to group nodes connected to a specific border router.",
                    "example": "0000:0000:0000:0000:0000:0000:0000:0000",
                    "api_fieldname": "net_id",
                    "entity_fieldname": "net_id"
                  },
                  "object": {
                    "type": "string",
                    "description": "The API resource entity.",
                    "example": "device",
                    "api_fieldname": "object",
                    "entity_fieldname": "object"
                  },
                  "serial_number": {
                    "type": "string",
                    "description": "The [serial number](https://www.pelion.com/docs/device-management-provision/latest/provisioning-info/lwm2m-device-object.html#serial-number) of the device. The serial number is injected by the factory tool during manufacturing.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "api_fieldname": "serial_number",
                    "entity_fieldname": "serial_number"
                  },
                  "state": {
                    "enum": [
                      "unenrolled",
                      "cloud_enrolling",
                      "bootstrapped",
                      "registered",
                      "deregistered"
                    ],
                    "type": "string",
                    "description": "The current state of the device.\n* Unenrolled: The device has been created, but has not yet bootstrapped or connected to Device Management.\n* Cloud_enrolling: The device is bootstrapping for the first time. This state is set only while bootstrapping is in progress. For example, an external CA gives an error, and the device tries to bootstrap again after few seconds.\n* Bootstrapped: The device has bootstrapped, and has credentials to connect to Device Management.\n* Registered: The device has registered with Pelion Device Management. [Device commands](https://www.pelion.com/docs/device-management-api/connect/) can be queued. The device sends events for [subscribed](https://www.pelion.com/docs/device-management/current/resources/handle-resource-webapp.html) resources.\n* Deregistered: The device has requested deregistration, or its registration has expired.",
                    "api_fieldname": "state",
                    "entity_fieldname": "state"
                  },
                  "updated_at": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The time this data object was updated.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at"
                  },
                  "vendor_id": {
                    "type": "string",
                    "description": "The device vendor ID.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "api_fieldname": "vendor_id",
                    "entity_fieldname": "vendor_id"
                  },
                  "enrolment_list_timestamp": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The claim date/time.",
                    "api_fieldname": "enrolment_list_timestamp",
                    "entity_fieldname": "enrolment_list_timestamp"
                  },
                  "_key": "properties"
                }
              ],
              "_key": "200"
            },
            {
              "description": "Bad request.",
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "_key": "401"
            },
            {
              "description": "Unable to find device.",
              "_key": "404"
            }
          ],
          "path": "/v3/devices/{id}/",
          "summary": "Get a device.",
          "return_type": "device",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "device_execution_mode",
            "groups",
            "issuer_fingerprint",
            "operator_suspended",
            "last_operator_suspended_category",
            "last_operator_suspended_description",
            "last_operator_suspended_updated_at",
            "system_suspended",
            "last_system_suspended_category",
            "last_system_suspended_description",
            "last_system_suspended_updated_at",
            "lifecycle_status",
            "account_id",
            "auto_update",
            "bootstrap_expiration_date",
            "bootstrapped_timestamp",
            "ca_id",
            "component_attributes",
            "connector_expiration_date",
            "created_at",
            "custom_attributes",
            "deployed_state",
            "deployment",
            "description",
            "device_class",
            "device_key",
            "endpoint_name",
            "endpoint_type",
            "firmware_checksum",
            "host_gateway",
            "manifest",
            "manifest_timestamp",
            "mechanism",
            "mechanism_url",
            "name",
            "net_id",
            "serial_number",
            "state",
            "updated_at",
            "vendor_id",
            "enrolment_list_timestamp"
          ],
          "group_id": "Devices",
          "operation_id": "Device_retrieve",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Remove one device from a group.",
          "field_renames": [],
          "fields": [
            {
              "in": "path",
              "description": "The ID of the group.",
              "name": "device-group-id",
              "required": true,
              "type": "string",
              "entity_fieldname": "device-group-id",
              "api_fieldname": "device-group-id",
              "external_param": true,
              "parameter_fieldname": "device-group-id",
              "_key": "device-group-id"
            },
            {
              "type": "string",
              "example": "00000000000000000000000000000000",
              "name": "device_id",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "id",
              "api_fieldname": "device_id",
              "external_param": false,
              "parameter_fieldname": "device_id",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "remove_from_group",
          "responses": [
            {
              "description": "Success - device removed.",
              "_key": "204"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/device-groups/{device-group-id}/devices/remove/",
          "summary": "Remove a device from a group.",
          "return_type": "void",
          "return_info": {
            "self": false,
            "custom": true,
            "type": "void"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Devices",
          "operation_id": "Group_members_remove",
          "parameter_map": {
            "device_id": "id"
          },
          "spec": {
            "return_type": "void"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "remove_from_group"
        },
        {
          "description": "Request a certificate renewal.\n\n**Example:**\n\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/devices/01612df56f3b0a580a010fc700000000/certificates/customer.dlms/renew \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-length: 0'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "maxLength": 50,
              "description": "The certificate name.",
              "example": "customer.dlms",
              "api_fieldname": "certificate-name",
              "entity_fieldname": "certificate_name",
              "in": "path",
              "name": "certificate-name",
              "required": true,
              "pattern": "[\\w\\-]{1,10}\\.[\\w\\-.]{1,10}",
              "external_param": true,
              "parameter_fieldname": "certificate-name",
              "_key": "certificate_name"
            },
            {
              "type": "string",
              "description": "The certificate enrollment ID.",
              "example": "01612df56f3b0a580a010fc700000000",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "device-id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "renew_certificate",
          "responses": [
            {
              "description": "Created.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "maxLength": 50,
                    "description": "The certificate name.",
                    "example": "customer.dlms",
                    "api_fieldname": "certificate_name",
                    "entity_fieldname": "certificate_name",
                    "_key": "certificate_name"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation UTC time RFC3339.",
                    "example": "2017-01-01T00:00:00Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "The device ID.",
                    "example": "01625daa23230a580a0100bd00000000",
                    "api_fieldname": "device_id",
                    "entity_fieldname": "device_id",
                    "_key": "device_id"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "success",
                      "failure"
                    ],
                    "description": "The result of certificate enrollment request.",
                    "example": "success",
                    "api_fieldname": "enroll_result",
                    "entity_fieldname": "enroll_result",
                    "_key": "enroll_result"
                  },
                  {
                    "type": "string",
                    "description": "Additional information in case of failure.",
                    "example": "The device is currently processing too many certificate renewals.",
                    "api_fieldname": "enroll_result_detail",
                    "entity_fieldname": "enroll_result_detail",
                    "_key": "enroll_result_detail"
                  },
                  {
                    "type": "string",
                    "description": "The status of certificate enrollment request.",
                    "enum": [
                      "new",
                      "completed"
                    ],
                    "api_fieldname": "enroll_status",
                    "entity_fieldname": "enroll_status",
                    "_key": "enroll_status"
                  },
                  {
                    "type": "string",
                    "description": "Entity instance signature.",
                    "example": "1",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "The certificate enrollment ID.",
                    "example": "01612df56f3b0a580a010fc700000000",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "certificate-enrollment"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Update UTC time RFC3339.",
                    "example": "2017-01-01T00:00:00Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "required": [
                  "created_at",
                  "etag",
                  "id",
                  "device_id",
                  "certificate_name"
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "certificate_enrollment"
                }
              },
              "_key": "201"
            },
            {
              "description": "Validation error: There is no certificate issuer configured for this certificate.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "You are not authorized to perform the action.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "The device ID or certificate name is not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            },
            {
              "description": "Conflict. A renewal request for this certificate is in progress.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            },
            {
              "description": "Either:\n- Operation not supported for this device.\n- The device is not connected.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "fields",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code. Correlates with response status code.",
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "A list of request fields that failed validation.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Field name.",
                          "_key": "field"
                        },
                        {
                          "type": "string",
                          "description": "Error message related to the field.",
                          "_key": "message"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "Error message.",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: `error`.",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Request ID from JWT.",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type.",
                    "_key": "type"
                  }
                ]
              },
              "_key": "423"
            }
          ],
          "path": "/v3/devices/{device-id}/certificates/{certificate-name}/renew",
          "summary": "Request certificate renewal.",
          "return_type": "certificate_enrollment",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "certificate_enrollment"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "device_id",
            "enroll_status",
            "enroll_result",
            "enroll_result_detail",
            "updated_at"
          ],
          "group_id": "Devices",
          "operation_id": "RequestCertificateRenewal",
          "unaggregated": true,
          "parameter_map": {
            "device-id": "id",
            "certificate-name": "certificate_name"
          },
          "foreign_key": {
            "entity": "certificate_enrollment",
            "group": "Security"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "renew_certificate"
        },
        {
          "description": "Update a specific device.\n\n**Example:**\nFollowing example will update the specific devices description field to contain \"Testing description field\".\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/devices/<device_ID> \\\n-H 'Authorization: Bearer <API key>' \\\n-H 'content-type: application/json' \\\n-d '{\"description\": \"Testing description field\"}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "boolean",
              "description": "DEPRECATED: Mark this device for automatic firmware update.",
              "api_fieldname": "auto_update",
              "entity_fieldname": "auto_update",
              "parameter_fieldname": "auto_update",
              "in": "body",
              "required": false,
              "_key": "auto_update"
            },
            {
              "type": "string",
              "maxLength": 500,
              "description": "The certificate issuer's ID.",
              "example": "00000000000000000000000000000000",
              "api_fieldname": "ca_id",
              "entity_fieldname": "ca_id",
              "parameter_fieldname": "ca_id",
              "in": "body",
              "required": false,
              "_key": "ca_id"
            },
            {
              "type": "object",
              "maxProperties": 5,
              "additionalProperties": {
                "type": "string",
                "maxLength": 128,
                "pattern": "^[A-Za-z].*"
              },
              "description": "Up to five custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
              "example": {
                "key": "value"
              },
              "api_fieldname": "custom_attributes",
              "entity_fieldname": "custom_attributes",
              "parameter_fieldname": "custom_attributes",
              "in": "body",
              "required": false,
              "_key": "custom_attributes"
            },
            {
              "type": "string",
              "maxLength": 2000,
              "description": "The description of the device.",
              "example": "Temperature measuring device",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "type": "string",
              "maxLength": 512,
              "description": "The fingerprint of the device certificate.",
              "example": "00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00",
              "api_fieldname": "device_key",
              "entity_fieldname": "device_key",
              "parameter_fieldname": "device_key",
              "in": "body",
              "required": false,
              "_key": "device_key"
            },
            {
              "type": "string",
              "description": "The endpoint name given to the device. The endpoint_name is from the device certificate and is set by factory tool.",
              "example": "00000000-0000-0000-0000-000000000000",
              "readOnly": true,
              "api_fieldname": "endpoint_name",
              "entity_fieldname": "endpoint_name",
              "parameter_fieldname": "endpoint_name",
              "in": "body",
              "required": false,
              "_key": "endpoint_name"
            },
            {
              "type": "string",
              "description": "The endpoint type of the device. For example, the device is a gateway.",
              "maxLength": 64,
              "example": "",
              "api_fieldname": "endpoint_type",
              "entity_fieldname": "endpoint_type",
              "parameter_fieldname": "endpoint_type",
              "in": "body",
              "required": false,
              "_key": "endpoint_type"
            },
            {
              "type": "string",
              "description": "The ID of the host gateway, if appropriate. A device behind Edge has this host_gateway set.",
              "example": "",
              "api_fieldname": "host_gateway",
              "entity_fieldname": "host_gateway",
              "parameter_fieldname": "host_gateway",
              "in": "body",
              "required": false,
              "_key": "host_gateway"
            },
            {
              "type": "string",
              "description": "The ID of the device. The device ID is used across all Device Management APIs.",
              "example": "00000000000000000000000000000000",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "string",
              "maxLength": 128,
              "description": "The name given by the web application for the device. Device itself provides only the endpoint_name.",
              "example": "00000000-0000-0000-0000-000000000000",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Device updated.",
              "schema": [
                {
                  "group": "Devices",
                  "entity": "device",
                  "_key": "foreign_key"
                },
                {
                  "device_execution_mode": {
                    "enum": [
                      0,
                      1,
                      5
                    ],
                    "type": "integer",
                    "description": "The execution mode from the certificate of the device. Defaults to inheriting from host_gateway device.\nPermitted values:\n  - 0 - Unspecified execution mode (default if host_gateway invalid or not set). The device firmware uses a certificate that is not identified as a developer or production certificate.\n  - 1 - Development device. The device firmware uses a developer certificate to communicate with Device Management.\n  - 5 - Production device. The device firmware uses a factory-generated certificate to communicate with Device Management.",
                    "example": 0,
                    "default": 0,
                    "api_fieldname": "device_execution_mode",
                    "entity_fieldname": "device_execution_mode"
                  },
                  "groups": {
                    "description": "An array containing an ID of each group this device belongs to.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "00000000000000000000000000000000"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups"
                  },
                  "issuer_fingerprint": {
                    "type": "string",
                    "pattern": "[A-Fa-f0-9]{64}",
                    "x-nullable": true,
                    "description": "SHA256 fingerprint of the certificate used to validate the signature of the device certificate.",
                    "example": "C42EDEFC75871E4CE2146FCDA67D03DDA05CC26FDF93B17B55F42C1EADFDC322",
                    "api_fieldname": "issuer_fingerprint",
                    "entity_fieldname": "issuer_fingerprint"
                  },
                  "operator_suspended": {
                    "type": "boolean",
                    "description": "Device has been suspended by operator.",
                    "api_fieldname": "operator_suspended",
                    "entity_fieldname": "operator_suspended"
                  },
                  "last_operator_suspended_category": {
                    "type": "string",
                    "description": "The reference of the block category.",
                    "pattern": "[a-f0-9_]{32}",
                    "example": "maintenance",
                    "api_fieldname": "last_operator_suspended_category",
                    "entity_fieldname": "last_operator_suspended_category"
                  },
                  "last_operator_suspended_description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "The most recent description why the device was suspended or returned to service.",
                    "example": "Suspended for maintenance.",
                    "api_fieldname": "last_operator_suspended_description",
                    "entity_fieldname": "last_operator_suspended_description"
                  },
                  "last_operator_suspended_updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of the most recent suspension activity.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "last_operator_suspended_updated_at",
                    "entity_fieldname": "last_operator_suspended_updated_at"
                  },
                  "system_suspended": {
                    "type": "boolean",
                    "description": "Is the device suspended by the system?",
                    "api_fieldname": "system_suspended",
                    "entity_fieldname": "system_suspended"
                  },
                  "last_system_suspended_category": {
                    "type": "string",
                    "description": "The reference of the block category.",
                    "pattern": "[a-f0-9_]{32}",
                    "example": "maintenance",
                    "api_fieldname": "last_system_suspended_category",
                    "entity_fieldname": "last_system_suspended_category"
                  },
                  "last_system_suspended_description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "The most recent description of why the device was blocked or unblocked by the system.",
                    "example": "A certificate in the device's certificate chain was blacklisted by the system.",
                    "api_fieldname": "last_system_suspended_description",
                    "entity_fieldname": "last_system_suspended_description"
                  },
                  "last_system_suspended_updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of the most recent system block activity.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "last_system_suspended_updated_at",
                    "entity_fieldname": "last_system_suspended_updated_at"
                  },
                  "lifecycle_status": {
                    "type": "string",
                    "enum": [
                      "enabled",
                      "blocked"
                    ],
                    "description": "The lifecycle status of the device.\n* Enabled: The device is allowed to connect to Pelion Device Management.\n* Blocked: The device is prevented from connecting to Pelion Device Management. Device can be, for example, 'suspended'.",
                    "example": "enabled",
                    "api_fieldname": "lifecycle_status",
                    "entity_fieldname": "lifecycle_status"
                  },
                  "account_id": {
                    "type": "string",
                    "description": "The ID of the associated account.",
                    "example": "00000000000000000000000000000000",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id"
                  },
                  "auto_update": {
                    "type": "boolean",
                    "description": "DEPRECATED: Mark this device for automatic firmware update.",
                    "api_fieldname": "auto_update",
                    "entity_fieldname": "auto_update"
                  },
                  "bootstrap_expiration_date": {
                    "format": "date",
                    "type": "string",
                    "x-nullable": true,
                    "description": "The expiration date of the certificate used to connect to bootstrap server.",
                    "api_fieldname": "bootstrap_expiration_date",
                    "entity_fieldname": "bootstrap_expiration_date"
                  },
                  "bootstrapped_timestamp": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The timestamp of the device's most recent bootstrap process.",
                    "api_fieldname": "bootstrapped_timestamp",
                    "entity_fieldname": "bootstrapped_timestamp"
                  },
                  "ca_id": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "The certificate issuer's ID.",
                    "example": "00000000000000000000000000000000",
                    "api_fieldname": "ca_id",
                    "entity_fieldname": "ca_id"
                  },
                  "component_attributes": {
                    "type": "object",
                    "maxProperties": 10,
                    "additionalProperties": {
                      "type": "string",
                      "maxLength": 128
                    },
                    "description": "Up to ten custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
                    "example": {
                      "key": "value"
                    },
                    "api_fieldname": "component_attributes",
                    "entity_fieldname": "component_attributes"
                  },
                  "connector_expiration_date": {
                    "format": "date",
                    "type": "string",
                    "x-nullable": true,
                    "description": "The expiration date of the certificate used to connect to LwM2M server.",
                    "api_fieldname": "connector_expiration_date",
                    "entity_fieldname": "connector_expiration_date"
                  },
                  "created_at": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The timestamp of when the device was created in the device directory.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at"
                  },
                  "custom_attributes": {
                    "type": "object",
                    "maxProperties": 5,
                    "additionalProperties": {
                      "type": "string",
                      "maxLength": 128,
                      "pattern": "^[A-Za-z].*"
                    },
                    "description": "Up to five custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
                    "example": {
                      "key": "value"
                    },
                    "api_fieldname": "custom_attributes",
                    "entity_fieldname": "custom_attributes"
                  },
                  "deployed_state": {
                    "enum": [
                      "development",
                      "production"
                    ],
                    "type": "string",
                    "description": "DEPRECATED: The state of the device's deployment.",
                    "api_fieldname": "deployed_state",
                    "entity_fieldname": "deployed_state"
                  },
                  "deployment": {
                    "type": "string",
                    "description": "DEPRECATED: The last deployment used on the device.",
                    "example": "",
                    "api_fieldname": "deployment",
                    "entity_fieldname": "deployment"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "The description of the device.",
                    "example": "Temperature measuring device",
                    "api_fieldname": "description",
                    "entity_fieldname": "description"
                  },
                  "device_class": {
                    "type": "string",
                    "maxLength": 32,
                    "description": "An ID representing the model and hardware revision of the device.",
                    "example": "",
                    "api_fieldname": "device_class",
                    "entity_fieldname": "device_class"
                  },
                  "id": {
                    "type": "string",
                    "description": "The ID of the device. The device ID is used across all Device Management APIs.",
                    "example": "00000000000000000000000000000000",
                    "api_fieldname": "id",
                    "entity_fieldname": "id"
                  },
                  "device_key": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "The fingerprint of the device certificate.",
                    "example": "00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00",
                    "api_fieldname": "device_key",
                    "entity_fieldname": "device_key"
                  },
                  "endpoint_name": {
                    "type": "string",
                    "description": "The endpoint name given to the device. The endpoint_name is from the device certificate and is set by factory tool.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "readOnly": true,
                    "api_fieldname": "endpoint_name",
                    "entity_fieldname": "endpoint_name"
                  },
                  "endpoint_type": {
                    "type": "string",
                    "description": "The endpoint type of the device. For example, the device is a gateway.",
                    "maxLength": 64,
                    "example": "",
                    "api_fieldname": "endpoint_type",
                    "entity_fieldname": "endpoint_type"
                  },
                  "etag": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The entity instance signature.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag"
                  },
                  "firmware_checksum": {
                    "type": "string",
                    "description": "The SHA256 checksum of the current firmware image.",
                    "example": "0000000000000000000000000000000000000000000000000000000000000000",
                    "api_fieldname": "firmware_checksum",
                    "entity_fieldname": "firmware_checksum"
                  },
                  "host_gateway": {
                    "type": "string",
                    "description": "The ID of the host gateway, if appropriate. A device behind Edge has this host_gateway set.",
                    "example": "",
                    "api_fieldname": "host_gateway",
                    "entity_fieldname": "host_gateway"
                  },
                  "manifest": {
                    "type": "string",
                    "description": "DEPRECATED: The URL for the current device manifest.",
                    "example": "",
                    "api_fieldname": "manifest",
                    "entity_fieldname": "manifest"
                  },
                  "manifest_timestamp": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The timestamp of the current manifest version.",
                    "api_fieldname": "manifest_timestamp",
                    "entity_fieldname": "manifest_timestamp"
                  },
                  "mechanism": {
                    "enum": [
                      "connector",
                      "direct"
                    ],
                    "type": "string",
                    "description": "NOT USED: The ID of the channel used to communicate with the device.",
                    "api_fieldname": "mechanism",
                    "entity_fieldname": "mechanism"
                  },
                  "mechanism_url": {
                    "type": "string",
                    "description": "NOT USED: The address of the connector to use.",
                    "example": "",
                    "api_fieldname": "mechanism_url",
                    "entity_fieldname": "mechanism_url"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 128,
                    "description": "The name given by the web application for the device. Device itself provides only the endpoint_name.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "api_fieldname": "name",
                    "entity_fieldname": "name"
                  },
                  "net_id": {
                    "type": "string",
                    "default": "",
                    "maxLength": 40,
                    "description": "Private network identifier. Used to group nodes connected to a specific border router.",
                    "example": "0000:0000:0000:0000:0000:0000:0000:0000",
                    "api_fieldname": "net_id",
                    "entity_fieldname": "net_id"
                  },
                  "object": {
                    "type": "string",
                    "description": "The API resource entity.",
                    "example": "device",
                    "api_fieldname": "object",
                    "entity_fieldname": "object"
                  },
                  "serial_number": {
                    "type": "string",
                    "description": "The [serial number](https://www.pelion.com/docs/device-management-provision/latest/provisioning-info/lwm2m-device-object.html#serial-number) of the device. The serial number is injected by the factory tool during manufacturing.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "api_fieldname": "serial_number",
                    "entity_fieldname": "serial_number"
                  },
                  "state": {
                    "enum": [
                      "unenrolled",
                      "cloud_enrolling",
                      "bootstrapped",
                      "registered",
                      "deregistered"
                    ],
                    "type": "string",
                    "description": "The current state of the device.\n* Unenrolled: The device has been created, but has not yet bootstrapped or connected to Device Management.\n* Cloud_enrolling: The device is bootstrapping for the first time. This state is set only while bootstrapping is in progress. For example, an external CA gives an error, and the device tries to bootstrap again after few seconds.\n* Bootstrapped: The device has bootstrapped, and has credentials to connect to Device Management.\n* Registered: The device has registered with Pelion Device Management. [Device commands](https://www.pelion.com/docs/device-management-api/connect/) can be queued. The device sends events for [subscribed](https://www.pelion.com/docs/device-management/current/resources/handle-resource-webapp.html) resources.\n* Deregistered: The device has requested deregistration, or its registration has expired.",
                    "api_fieldname": "state",
                    "entity_fieldname": "state"
                  },
                  "updated_at": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The time this data object was updated.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at"
                  },
                  "vendor_id": {
                    "type": "string",
                    "description": "The device vendor ID.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "api_fieldname": "vendor_id",
                    "entity_fieldname": "vendor_id"
                  },
                  "enrolment_list_timestamp": {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "description": "The claim date/time.",
                    "api_fieldname": "enrolment_list_timestamp",
                    "entity_fieldname": "enrolment_list_timestamp"
                  },
                  "_key": "properties"
                }
              ],
              "_key": "200"
            },
            {
              "description": "Validation error: The data used to update the device did not validate.",
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "_key": "401"
            },
            {
              "description": "Unable to update device because it can't be found.",
              "_key": "404"
            }
          ],
          "path": "/v3/devices/{id}/",
          "summary": "Update a device.",
          "return_type": "device",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "device_execution_mode",
            "groups",
            "issuer_fingerprint",
            "operator_suspended",
            "last_operator_suspended_category",
            "last_operator_suspended_description",
            "last_operator_suspended_updated_at",
            "system_suspended",
            "last_system_suspended_category",
            "last_system_suspended_description",
            "last_system_suspended_updated_at",
            "lifecycle_status",
            "account_id",
            "bootstrap_expiration_date",
            "bootstrapped_timestamp",
            "component_attributes",
            "connector_expiration_date",
            "created_at",
            "deployed_state",
            "deployment",
            "device_class",
            "firmware_checksum",
            "manifest",
            "manifest_timestamp",
            "mechanism",
            "mechanism_url",
            "net_id",
            "serial_number",
            "state",
            "updated_at",
            "vendor_id",
            "enrolment_list_timestamp"
          ],
          "group_id": "Devices",
          "operation_id": "Device_update",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "type": "string",
          "description": "The ID of the associated account.",
          "example": "00000000000000000000000000000000",
          "api_fieldname": "account_id",
          "readOnly": true,
          "required": false,
          "_key": "account_id"
        },
        {
          "type": "boolean",
          "description": "DEPRECATED: Mark this device for automatic firmware update.",
          "api_fieldname": "auto_update",
          "readOnly": false,
          "required": false,
          "_key": "auto_update"
        },
        {
          "format": "date",
          "type": "string",
          "x-nullable": true,
          "description": "The expiration date of the certificate used to connect to bootstrap server.",
          "api_fieldname": "bootstrap_expiration_date",
          "readOnly": false,
          "required": false,
          "_key": "bootstrap_expiration_date"
        },
        {
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "type": "string",
          "description": "The timestamp of the device's most recent bootstrap process.",
          "api_fieldname": "bootstrapped_timestamp",
          "readOnly": true,
          "required": false,
          "_key": "bootstrapped_timestamp"
        },
        {
          "type": "string",
          "maxLength": 500,
          "description": "The certificate issuer's ID.",
          "example": "00000000000000000000000000000000",
          "api_fieldname": "ca_id",
          "readOnly": false,
          "required": false,
          "_key": "ca_id"
        },
        {
          "type": "object",
          "maxProperties": 10,
          "additionalProperties": {
            "type": "string",
            "maxLength": 128
          },
          "description": "Up to ten custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
          "example": {
            "key": "value"
          },
          "api_fieldname": "component_attributes",
          "readOnly": true,
          "required": false,
          "_key": "component_attributes"
        },
        {
          "format": "date",
          "type": "string",
          "x-nullable": true,
          "description": "The expiration date of the certificate used to connect to LwM2M server.",
          "api_fieldname": "connector_expiration_date",
          "readOnly": false,
          "required": false,
          "_key": "connector_expiration_date"
        },
        {
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "type": "string",
          "description": "The timestamp of when the device was created in the device directory.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "object",
          "maxProperties": 5,
          "additionalProperties": {
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z].*"
          },
          "description": "Up to five custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
          "example": {
            "key": "value"
          },
          "api_fieldname": "custom_attributes",
          "readOnly": false,
          "required": false,
          "_key": "custom_attributes"
        },
        {
          "enum": [
            "development",
            "production"
          ],
          "type": "string",
          "description": "DEPRECATED: The state of the device's deployment.",
          "api_fieldname": "deployed_state",
          "readOnly": true,
          "required": false,
          "enum_reference": "device_deployed_state_enum",
          "_key": "deployed_state"
        },
        {
          "type": "string",
          "description": "DEPRECATED: The last deployment used on the device.",
          "example": "",
          "api_fieldname": "deployment",
          "readOnly": false,
          "required": false,
          "_key": "deployment"
        },
        {
          "type": "string",
          "maxLength": 2000,
          "description": "The description of the device.",
          "example": "Temperature measuring device",
          "api_fieldname": "description",
          "readOnly": false,
          "required": false,
          "_key": "description"
        },
        {
          "type": "string",
          "maxLength": 32,
          "description": "An ID representing the model and hardware revision of the device.",
          "example": "",
          "api_fieldname": "device_class",
          "readOnly": false,
          "required": false,
          "_key": "device_class"
        },
        {
          "enum": [
            0,
            1,
            5
          ],
          "type": "integer",
          "description": "The execution mode from the certificate of the device. Defaults to inheriting from host_gateway device.\nPermitted values:\n  - 0 - Unspecified execution mode (default if host_gateway invalid or not set). The device firmware uses a certificate that is not identified as a developer or production certificate.\n  - 1 - Development device. The device firmware uses a developer certificate to communicate with Device Management.\n  - 5 - Production device. The device firmware uses a factory-generated certificate to communicate with Device Management.",
          "example": 0,
          "default": 0,
          "api_fieldname": "device_execution_mode",
          "readOnly": false,
          "required": false,
          "_key": "device_execution_mode"
        },
        {
          "type": "string",
          "maxLength": 512,
          "description": "The fingerprint of the device certificate.",
          "example": "00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00",
          "api_fieldname": "device_key",
          "readOnly": false,
          "required": false,
          "_key": "device_key"
        },
        {
          "type": "string",
          "description": "The endpoint name given to the device. The endpoint_name is from the device certificate and is set by factory tool.",
          "example": "00000000-0000-0000-0000-000000000000",
          "readOnly": true,
          "api_fieldname": "endpoint_name",
          "required": false,
          "_key": "endpoint_name"
        },
        {
          "type": "string",
          "description": "The endpoint type of the device. For example, the device is a gateway.",
          "maxLength": 64,
          "example": "",
          "api_fieldname": "endpoint_type",
          "readOnly": false,
          "required": false,
          "_key": "endpoint_type"
        },
        {
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "type": "string",
          "description": "The claim date/time.",
          "api_fieldname": "enrolment_list_timestamp",
          "readOnly": true,
          "required": false,
          "_key": "enrolment_list_timestamp"
        },
        {
          "type": "string",
          "description": "The SHA256 checksum of the current firmware image.",
          "example": "0000000000000000000000000000000000000000000000000000000000000000",
          "api_fieldname": "firmware_checksum",
          "readOnly": true,
          "required": false,
          "_key": "firmware_checksum"
        },
        {
          "description": "An array containing an ID of each group this device belongs to.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "00000000000000000000000000000000"
          },
          "api_fieldname": "groups",
          "readOnly": true,
          "required": false,
          "_key": "groups"
        },
        {
          "type": "string",
          "description": "The ID of the host gateway, if appropriate. A device behind Edge has this host_gateway set.",
          "example": "",
          "api_fieldname": "host_gateway",
          "readOnly": false,
          "required": false,
          "_key": "host_gateway"
        },
        {
          "type": "string",
          "description": "The ID of the device. The device ID is used across all Device Management APIs.",
          "example": "00000000000000000000000000000000",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "string",
          "pattern": "[A-Fa-f0-9]{64}",
          "x-nullable": true,
          "description": "SHA256 fingerprint of the certificate used to validate the signature of the device certificate.",
          "example": "C42EDEFC75871E4CE2146FCDA67D03DDA05CC26FDF93B17B55F42C1EADFDC322",
          "api_fieldname": "issuer_fingerprint",
          "readOnly": false,
          "required": false,
          "_key": "issuer_fingerprint"
        },
        {
          "type": "string",
          "description": "The reference of the block category.",
          "pattern": "[a-f0-9_]{32}",
          "example": "maintenance",
          "api_fieldname": "last_operator_suspended_category",
          "readOnly": true,
          "required": false,
          "_key": "last_operator_suspended_category"
        },
        {
          "type": "string",
          "maxLength": 2000,
          "description": "The most recent description why the device was suspended or returned to service.",
          "example": "Suspended for maintenance.",
          "api_fieldname": "last_operator_suspended_description",
          "readOnly": true,
          "required": false,
          "_key": "last_operator_suspended_description"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of the most recent suspension activity.",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "last_operator_suspended_updated_at",
          "readOnly": true,
          "required": false,
          "_key": "last_operator_suspended_updated_at"
        },
        {
          "type": "string",
          "description": "The reference of the block category.",
          "pattern": "[a-f0-9_]{32}",
          "example": "maintenance",
          "api_fieldname": "last_system_suspended_category",
          "readOnly": true,
          "required": false,
          "_key": "last_system_suspended_category"
        },
        {
          "type": "string",
          "maxLength": 2000,
          "description": "The most recent description of why the device was blocked or unblocked by the system.",
          "example": "A certificate in the device's certificate chain was blacklisted by the system.",
          "api_fieldname": "last_system_suspended_description",
          "readOnly": true,
          "required": false,
          "_key": "last_system_suspended_description"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of the most recent system block activity.",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "last_system_suspended_updated_at",
          "readOnly": true,
          "required": false,
          "_key": "last_system_suspended_updated_at"
        },
        {
          "type": "string",
          "enum": [
            "enabled",
            "blocked"
          ],
          "description": "The lifecycle status of the device.\n* Enabled: The device is allowed to connect to Pelion Device Management.\n* Blocked: The device is prevented from connecting to Pelion Device Management. Device can be, for example, 'suspended'.",
          "example": "enabled",
          "api_fieldname": "lifecycle_status",
          "readOnly": true,
          "required": false,
          "enum_reference": "device_lifecycle_status_enum",
          "_key": "lifecycle_status"
        },
        {
          "type": "string",
          "description": "DEPRECATED: The URL for the current device manifest.",
          "example": "",
          "api_fieldname": "manifest",
          "readOnly": false,
          "required": false,
          "_key": "manifest"
        },
        {
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "type": "string",
          "description": "The timestamp of the current manifest version.",
          "api_fieldname": "manifest_timestamp",
          "readOnly": true,
          "required": false,
          "_key": "manifest_timestamp"
        },
        {
          "enum": [
            "connector",
            "direct"
          ],
          "type": "string",
          "description": "NOT USED: The ID of the channel used to communicate with the device.",
          "api_fieldname": "mechanism",
          "readOnly": false,
          "required": false,
          "enum_reference": "device_mechanism_enum",
          "_key": "mechanism"
        },
        {
          "type": "string",
          "description": "NOT USED: The address of the connector to use.",
          "example": "",
          "api_fieldname": "mechanism_url",
          "readOnly": false,
          "required": false,
          "_key": "mechanism_url"
        },
        {
          "type": "string",
          "maxLength": 128,
          "description": "The name given by the web application for the device. Device itself provides only the endpoint_name.",
          "example": "00000000-0000-0000-0000-000000000000",
          "api_fieldname": "name",
          "readOnly": false,
          "required": false,
          "_key": "name"
        },
        {
          "type": "string",
          "default": "",
          "maxLength": 40,
          "description": "Private network identifier. Used to group nodes connected to a specific border router.",
          "example": "0000:0000:0000:0000:0000:0000:0000:0000",
          "api_fieldname": "net_id",
          "readOnly": true,
          "required": false,
          "_key": "net_id"
        },
        {
          "type": "boolean",
          "description": "Device has been suspended by operator.",
          "api_fieldname": "operator_suspended",
          "readOnly": true,
          "required": false,
          "_key": "operator_suspended"
        },
        {
          "type": "string",
          "description": "The [serial number](https://www.pelion.com/docs/device-management-provision/latest/provisioning-info/lwm2m-device-object.html#serial-number) of the device. The serial number is injected by the factory tool during manufacturing.",
          "example": "00000000-0000-0000-0000-000000000000",
          "api_fieldname": "serial_number",
          "readOnly": false,
          "required": false,
          "_key": "serial_number"
        },
        {
          "enum": [
            "unenrolled",
            "cloud_enrolling",
            "bootstrapped",
            "registered",
            "deregistered"
          ],
          "type": "string",
          "description": "The current state of the device.\n* Unenrolled: The device has been created, but has not yet bootstrapped or connected to Device Management.\n* Cloud_enrolling: The device is bootstrapping for the first time. This state is set only while bootstrapping is in progress. For example, an external CA gives an error, and the device tries to bootstrap again after few seconds.\n* Bootstrapped: The device has bootstrapped, and has credentials to connect to Device Management.\n* Registered: The device has registered with Pelion Device Management. [Device commands](https://www.pelion.com/docs/device-management-api/connect/) can be queued. The device sends events for [subscribed](https://www.pelion.com/docs/device-management/current/resources/handle-resource-webapp.html) resources.\n* Deregistered: The device has requested deregistration, or its registration has expired.",
          "api_fieldname": "state",
          "readOnly": false,
          "required": false,
          "enum_reference": "device_state_enum",
          "_key": "state"
        },
        {
          "type": "boolean",
          "description": "Is the device suspended by the system?",
          "api_fieldname": "system_suspended",
          "readOnly": true,
          "required": false,
          "_key": "system_suspended"
        },
        {
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "type": "string",
          "description": "The time this data object was updated.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        },
        {
          "type": "string",
          "description": "The device vendor ID.",
          "example": "00000000-0000-0000-0000-000000000000",
          "api_fieldname": "vendor_id",
          "readOnly": false,
          "required": false,
          "_key": "vendor_id"
        }
      ],
      "field_renames": [],
      "tags": [
        "Device directory - devices",
        "Device security - device certificate renewals",
        "Device directory - groups"
      ],
      "group_id": "Devices",
      "_key": "device"
    },
    {
      "swagger_models": [
        "EnrollmentId",
        "EnrollmentIdentities",
        "EnrollmentIdentity"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "When the device connects to the bootstrap server and provides the enrollment ID, it is assigned to your account.\n<br>\n**Example:**\n```\ncurl -X POST \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\nhttps://api.us-east-1.mbedcloud.com/v3/device-enrollments \\\n-d '{\"enrollment_identity\": \"A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5\"}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "Enrollment identity.",
              "pattern": "^A-[A-Za-z0-9:]{95}$",
              "example": "A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5",
              "api_fieldname": "enrollment_identity",
              "entity_fieldname": "enrollment_identity",
              "parameter_fieldname": "enrollment_identity",
              "in": "body",
              "required": true,
              "_key": "enrollment_identity"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "Created. The enrollment claim has been created and is waiting for the device to connect.",
              "schema": {
                "type": "object",
                "required": [
                  "object",
                  "id",
                  "etag",
                  "account_id",
                  "created_at",
                  "expires_at",
                  "claimed_at",
                  "enrollment_identity",
                  "enrolled_device_id"
                ],
                "properties": [
                  {
                    "type": "string",
                    "description": "ID",
                    "example": "00005a4e027f0a580a01081c00000000",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "description": "The time the device was claimed.",
                    "format": "date-time",
                    "api_fieldname": "claimed_at",
                    "entity_fieldname": "claimed_at",
                    "_key": "claimed_at"
                  },
                  {
                    "type": "string",
                    "description": "The time of the enrollment identity creation.",
                    "format": "date-time",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "The ID of the device in the Device Directory once it is registered.",
                    "pattern": "^[A-Za-z0-9]{32}",
                    "example": "00005a4e027f0a580a01081c00000000",
                    "api_fieldname": "enrolled_device_id",
                    "entity_fieldname": "enrolled_device_id",
                    "_key": "enrolled_device_id"
                  },
                  {
                    "type": "string",
                    "description": "Enrollment identity.",
                    "pattern": "^A-[A-Za-z0-9:]{95}$",
                    "example": "A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5",
                    "api_fieldname": "enrollment_identity",
                    "entity_fieldname": "enrollment_identity",
                    "_key": "enrollment_identity"
                  },
                  {
                    "type": "string",
                    "pattern": "[A-Za-z0-9]{1,256}",
                    "example": "7642xfaxz",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "The enrollment claim expiration time. If the device does not connect to Device Management before expiration, the claim is removed without separate notice.",
                    "format": "date-time",
                    "api_fieldname": "expires_at",
                    "entity_fieldname": "expires_at",
                    "_key": "expires_at"
                  },
                  {
                    "type": "string",
                    "description": "Enrollment identity.",
                    "pattern": "^[A-Za-z0-9]{32}",
                    "example": "00005a4e027f0a580a01081c00000000",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "enrollment"
                    ],
                    "example": "enrollment",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  }
                ],
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device_enrollment"
                }
              },
              "_key": "201"
            },
            {
              "description": "Bad request. The enrollment identity is not valid.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "The provided access token is not valid.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Conflict. The requested identity to add already exists on this or another account.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/device-enrollments",
          "summary": "Create a single enrollment.",
          "return_type": "device_enrollment",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_enrollment"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "claimed_at",
            "account_id",
            "expires_at",
            "enrolled_device_id"
          ],
          "group_id": "Devices",
          "operation_id": "createDeviceEnrollment",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "To free a device from your account, delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and factory reset the device. For more information, see [Transferring ownership using First-to-Claim](https://www.pelion.com/docs/device-management/current/connecting/device-ownership-first-to-claim-by-enrollment-list.html).\n<br>\n**Example:**\n```\ncurl -X DELETE \\\n-H 'Authorization: Bearer <access_key>' \\\nhttps://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id}\n```",
          "field_renames": [],
          "fields": [
            {
              "in": "path",
              "name": "id",
              "type": "string",
              "required": true,
              "description": "Enrollment identity.",
              "entity_fieldname": "id",
              "api_fieldname": "id",
              "external_param": false,
              "parameter_fieldname": "id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "No content. The enrollment claim has been deleted.",
              "_key": "204"
            },
            {
              "description": "Bad request. Invalid enrollment identity.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/device-enrollments/{id}",
          "summary": "Delete an enrollment by ID.",
          "return_type": "device_enrollment",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_enrollment"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Devices",
          "operation_id": "deleteDeviceEnrollment",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Provides a list of pending and claimed enrollments.\n\n**Example:**\n```\ncurl -X GET \\\n-H 'Authorization: Bearer <access_key>' \\\nhttps://api.us-east-1.mbedcloud.com/v3/device-enrollments\n```\nWith query parameters:\n```\ncurl -X GET \\\n-H 'Authorization: Bearer <access_key>' \\\n'https://api.us-east-1.mbedcloud.com/v3/device-enrollments?limit=10'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "Entity ID to fetch after.",
              "example": "00005a4e027f0a580a01081c00000000",
              "pattern": "^[A-Za-z0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "include",
              "type": "string",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "description": "Number of results to return (2-1000).",
              "example": 50,
              "minimum": 2,
              "maximum": 1000,
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "ASC",
              "example": "ASC",
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "description": "ASC or DESC",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "device_enrollment_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "OK.",
              "schema": {
                "type": "object",
                "required": [
                  "object",
                  "limit",
                  "after",
                  "order",
                  "has_more",
                  "total_count",
                  "data"
                ],
                "properties": [
                  {
                    "type": "string",
                    "description": "ID",
                    "example": "00005a4e027f0a580a01081c00000000",
                    "pattern": "^[A-Za-z0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "object",
                        "id",
                        "etag",
                        "account_id",
                        "created_at",
                        "expires_at",
                        "claimed_at",
                        "enrollment_identity",
                        "enrolled_device_id"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "ID",
                          "example": "00005a4e027f0a580a01081c00000000",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "description": "The time the device was claimed.",
                          "format": "date-time",
                          "_key": "claimed_at"
                        },
                        {
                          "type": "string",
                          "description": "The time of the enrollment identity creation.",
                          "format": "date-time",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "description": "The ID of the device in the Device Directory once it is registered.",
                          "pattern": "^[A-Za-z0-9]{32}",
                          "example": "00005a4e027f0a580a01081c00000000",
                          "_key": "enrolled_device_id"
                        },
                        {
                          "type": "string",
                          "description": "Enrollment identity.",
                          "pattern": "^A-[A-Za-z0-9:]{95}$",
                          "example": "A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5",
                          "_key": "enrollment_identity"
                        },
                        {
                          "type": "string",
                          "pattern": "[A-Za-z0-9]{1,256}",
                          "example": "7642xfaxz",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "description": "The enrollment claim expiration time. If the device does not connect to Device Management before expiration, the claim is removed without separate notice.",
                          "format": "date-time",
                          "_key": "expires_at"
                        },
                        {
                          "type": "string",
                          "description": "Enrollment identity.",
                          "pattern": "^[A-Za-z0-9]{32}",
                          "example": "00005a4e027f0a580a01081c00000000",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "enrollment"
                          ],
                          "example": "enrollment",
                          "_key": "object"
                        }
                      ],
                      "foreign_key": {
                        "group": "Devices",
                        "entity": "device_enrollment"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "description": "Range 2-1000, or default.",
                    "example": 50,
                    "minimum": 2,
                    "maximum": 1000,
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "list"
                    ],
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "default": "ASC",
                    "example": "ASC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "example": 100,
                    "format": "int32",
                    "minimum": 1,
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device_enrollment"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad request. The access token could not be read.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "The provided access token is not valid.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            }
          ],
          "path": "/v3/device-enrollments",
          "summary": "Get a list of enrollments per account.",
          "return_type": "paginated_response(device_enrollment)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_enrollment"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "has_more",
            "total_count",
            "data"
          ],
          "foreign_key_priority": "self",
          "group_id": "Devices",
          "operation_id": "getDeviceEnrollments",
          "pagination": true,
          "foreign_key": {
            "group": "Devices",
            "entity": "device_enrollment"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Check detailed enrollment info, for example, date of claim or expiration date.\n\n**Example:**\n```\ncurl -X GET \\\n-H 'Authorization: Bearer <access_key>' \\\nhttps://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id}\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "Enrollment identity.",
              "pattern": "^[A-Za-z0-9]{32}",
              "example": "00005a4e027f0a580a01081c00000000",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "OK. Pending enrollment data.",
              "schema": {
                "type": "object",
                "required": [
                  "object",
                  "id",
                  "etag",
                  "account_id",
                  "created_at",
                  "expires_at",
                  "claimed_at",
                  "enrollment_identity",
                  "enrolled_device_id"
                ],
                "properties": [
                  {
                    "type": "string",
                    "description": "ID",
                    "example": "00005a4e027f0a580a01081c00000000",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "description": "The time the device was claimed.",
                    "format": "date-time",
                    "api_fieldname": "claimed_at",
                    "entity_fieldname": "claimed_at",
                    "_key": "claimed_at"
                  },
                  {
                    "type": "string",
                    "description": "The time of the enrollment identity creation.",
                    "format": "date-time",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "The ID of the device in the Device Directory once it is registered.",
                    "pattern": "^[A-Za-z0-9]{32}",
                    "example": "00005a4e027f0a580a01081c00000000",
                    "api_fieldname": "enrolled_device_id",
                    "entity_fieldname": "enrolled_device_id",
                    "_key": "enrolled_device_id"
                  },
                  {
                    "type": "string",
                    "description": "Enrollment identity.",
                    "pattern": "^A-[A-Za-z0-9:]{95}$",
                    "example": "A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5",
                    "api_fieldname": "enrollment_identity",
                    "entity_fieldname": "enrollment_identity",
                    "_key": "enrollment_identity"
                  },
                  {
                    "type": "string",
                    "pattern": "[A-Za-z0-9]{1,256}",
                    "example": "7642xfaxz",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "The enrollment claim expiration time. If the device does not connect to Device Management before expiration, the claim is removed without separate notice.",
                    "format": "date-time",
                    "api_fieldname": "expires_at",
                    "entity_fieldname": "expires_at",
                    "_key": "expires_at"
                  },
                  {
                    "type": "string",
                    "description": "Enrollment identity.",
                    "pattern": "^[A-Za-z0-9]{32}",
                    "example": "00005a4e027f0a580a01081c00000000",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "enrollment"
                    ],
                    "example": "enrollment",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  }
                ],
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device_enrollment"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad request. Invalid enrollment identity.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/device-enrollments/{id}",
          "summary": "Get details of an single enrollment by ID.",
          "return_type": "device_enrollment",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_enrollment"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "claimed_at",
            "enrollment_identity",
            "account_id",
            "expires_at",
            "enrolled_device_id"
          ],
          "group_id": "Devices",
          "operation_id": "getDeviceEnrollment",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "string",
          "description": "ID",
          "example": "00005a4e027f0a580a01081c00000000",
          "api_fieldname": "account_id",
          "readOnly": true,
          "required": false,
          "_key": "account_id"
        },
        {
          "type": "string",
          "description": "The time the device was claimed.",
          "format": "date-time",
          "api_fieldname": "claimed_at",
          "readOnly": true,
          "required": false,
          "_key": "claimed_at"
        },
        {
          "type": "string",
          "description": "The time of the enrollment identity creation.",
          "format": "date-time",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "description": "The ID of the device in the Device Directory once it is registered.",
          "pattern": "^[A-Za-z0-9]{32}",
          "example": "00005a4e027f0a580a01081c00000000",
          "api_fieldname": "enrolled_device_id",
          "readOnly": true,
          "required": false,
          "_key": "enrolled_device_id"
        },
        {
          "type": "string",
          "description": "Enrollment identity.",
          "pattern": "^A-[A-Za-z0-9:]{95}$",
          "example": "A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5",
          "api_fieldname": "enrollment_identity",
          "readOnly": false,
          "required": true,
          "_key": "enrollment_identity"
        },
        {
          "type": "string",
          "description": "The enrollment claim expiration time. If the device does not connect to Device Management before expiration, the claim is removed without separate notice.",
          "format": "date-time",
          "api_fieldname": "expires_at",
          "readOnly": true,
          "required": false,
          "_key": "expires_at"
        },
        {
          "type": "string",
          "description": "Enrollment identity.",
          "pattern": "^[A-Za-z0-9]{32}",
          "example": "00005a4e027f0a580a01081c00000000",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        }
      ],
      "field_renames": [],
      "tags": [
        "Device ownership - enrollments"
      ],
      "group_id": "Devices",
      "_key": "device_enrollment"
    },
    {
      "swagger_models": [
        "BulkResponse"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "With bulk upload, you can upload a `CSV` file containing a number of enrollment IDs.\n\n**Example:**\n```\ncurl -X POST \\\n-H 'Authorization: Bearer <access_key>' \\\n-F 'enrollment_identities=@/path/to/enrollments/enrollments.csv' \\\nhttps://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads\n\n```\n  **To ensure your CSV file is valid:**\n  1. The first line of the file (header) is ignored.\n  1. Each line can contain comma-separated values, where the first value is the Enrollment ID. Everything after the first comma is ignored.\n  1. Valid enrollments begin with A followed by a - and 95 characters (examples below).\n  1. One enrollment ID per line. Empty lines are ignored.\n  1. Trailing comma at the end of the line is optional.\n  1. Lines are terminated with either a line feed \\n, a carriage return \\r, or both \\r\\n.\n  1. Leading and trailing whitespace characters (Unicode U+0000 - U+0020) are removed from the identity before validation.\n  1. Empty identities are ignored.\n  1. Valid enrollment identities may be enclosed within quotation marks. Whitespace inside quotation marks is not trimmed and will cause validation to fail. Empty quotation marks are also invalid.\n  1. Use UTF-8 encoding.\n\n\n**A valid enrollment file:**\n```\n\"Examples of valid identites, notes\"\n\"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\",\n\"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\"\nA-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\nA-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:24:44:71:22:15:43:23:12, This text is ignored.\n A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:60:25:48:44:71:22:15:43:23:12       , Whitespace is trimmed before validation.\n  \"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:60:25:48:44:71:22:15:43:23:12\"       , Whitespace around quotation marks is also trimmed.\n\n```\n\n**A file containing invalid identities:**\n```\n\"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\", First line is ignored.\nA_4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12, Invalid version identifier.\nA-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12, Too-short identity.\n\"\", Empty quotation marks are an invalid identity\n\" A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12 \", Whitespace inside quotation marks is not trimmed, causing an error.\n\n```\n\n**An empty file:**\n```\n\"Examples of blank lines that are ignored\"\n\n,,\n, This is also considered a blank line.\n```",
          "field_renames": [],
          "fields": [
            {
              "in": "stream",
              "name": "enrollment_identities",
              "type": "file",
              "required": true,
              "description": "The `CSV` file containing the enrollment IDs. The maximum file size is 10 MB.",
              "entity_fieldname": "enrollment_identities",
              "api_fieldname": "enrollment_identities",
              "external_param": true,
              "parameter_fieldname": "enrollment_identities",
              "_key": "enrollment_identities"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "Bulk upload data received and asynchronous processing started.",
              "schema": {
                "type": "object",
                "required": [
                  "object",
                  "id",
                  "etag",
                  "created_at",
                  "account_id",
                  "status",
                  "total_count",
                  "processed_count",
                  "errors_count",
                  "completet_at",
                  "full_report_file",
                  "errors_report_file"
                ],
                "properties": [
                  {
                    "type": "string",
                    "description": "ID",
                    "example": "00005a4e027f0a580a01081c00000000",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "description": "The time the bulk creation task was completed.\nNull when creating bulk upload or delete.",
                    "format": "date-time",
                    "api_fieldname": "completed_at",
                    "entity_fieldname": "completed_at",
                    "_key": "completed_at"
                  },
                  {
                    "type": "string",
                    "description": "The time of receiving the bulk creation task.",
                    "format": "date-time",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "example": 0,
                    "description": "The number of enrollment identities with failed processing.",
                    "api_fieldname": "errors_count",
                    "entity_fieldname": "errors_count",
                    "_key": "errors_count"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "description": "Link to error report file.\nNull when creating bulk upload or delete.",
                    "example": "https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/errors_report.csv",
                    "api_fieldname": "errors_report_file",
                    "entity_fieldname": "errors_report_file",
                    "_key": "errors_report_file"
                  },
                  {
                    "type": "string",
                    "description": "etag",
                    "example": "1",
                    "pattern": "[A-Za-z0-9]{0,256}",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "description": "Link to full report file.\nNull when creating bulk upload or delete.",
                    "example": "https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/full_report.csv",
                    "api_fieldname": "full_report_file",
                    "entity_fieldname": "full_report_file",
                    "_key": "full_report_file"
                  },
                  {
                    "type": "string",
                    "description": "Bulk ID",
                    "pattern": "^[A-Za-z0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "enrollment-identity-bulk-uploads"
                    ],
                    "example": "enrollment-identity-bulk-uploads",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "integer",
                    "example": 0,
                    "description": "The number of enrollment identities processed until now.",
                    "api_fieldname": "processed_count",
                    "entity_fieldname": "processed_count",
                    "_key": "processed_count"
                  },
                  {
                    "enum": [
                      "new",
                      "processing",
                      "completed"
                    ],
                    "default": "new",
                    "example": "new",
                    "description": "The state of the process is 'new' at the time of creation. If creation is still in progress, the state shows as 'processing'. When the request is fully processed, the state changes to 'completed'.",
                    "type": "string",
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "integer",
                    "example": 10,
                    "description": "Total number of enrollment identities found in the input CSV.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device_enrollment_bulk_delete"
                }
              },
              "_key": "201"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Invalid access token.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            }
          ],
          "path": "/v3/device-enrollments-bulk-uploads",
          "summary": "Bulk upload.",
          "return_type": "device_enrollment_bulk_create",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_enrollment_bulk_create"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "account_id",
            "created_at",
            "status",
            "total_count",
            "processed_count",
            "errors_count",
            "completed_at",
            "full_report_file",
            "errors_report_file"
          ],
          "group_id": "Devices",
          "operation_id": "createBulkDeviceEnrollment",
          "pagination": false,
          "request_content_type": "multipart/form-data",
          "request_body": "file",
          "_key": "create"
        },
        {
          "description": "This method will download the CSV file containing detailed information on status of the bulk enrollment.",
          "field_renames": [],
          "fields": [],
          "method": null,
          "mode": "download_errors_report_file",
          "responses": [],
          "path": null,
          "summary": "Download the error report file for the created the bulk enrollment.",
          "return_type": "file",
          "return_info": {
            "self": false,
            "custom": true,
            "type": "file"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Devices",
          "custom_method": "download_errors_report_file",
          "spec": {
            "summary": "Download the error report file for the created the bulk enrollment.",
            "description": "This method will download the CSV file containing detailed information on status of the bulk enrollment.",
            "return_type": "file"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "download_errors_report_file"
        },
        {
          "description": "This method will download the CSV file containing detailed information on status of the bulk enrollment.",
          "field_renames": [],
          "fields": [],
          "method": null,
          "mode": "download_full_report_file",
          "responses": [],
          "path": null,
          "summary": "Download the full report file for the created of the bulk enrollment.",
          "return_type": "file",
          "return_info": {
            "self": false,
            "custom": true,
            "type": "file"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Devices",
          "custom_method": "download_full_report_file",
          "spec": {
            "summary": "Download the full report file for the created of the bulk enrollment.",
            "description": "This method will download the CSV file containing detailed information on status of the bulk enrollment.",
            "return_type": "file"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "download_full_report_file"
        },
        {
          "description": "Provides information on bulk upload for the given ID, for example, bulk status and number of processed enrollment identities. Provides links to bulk upload reports as well.\n\n**Report file format:**\nThe report files have a header line, and the values are separated by commas. Delimit lines with a line break (CRLF). Make sure the report file is compliant with IETF Informal CSV common format [RFC 4180](https://tools.ietf.org/html/rfc4180).\n\nAn example of a full report file:\n```\n\"entity__id\",\"entity__created_at\",\"error__code\",\"error__type\",\"error__message\",\"error__fields\"\n\"A-F9:AA:AA:AA:DE:31:C7:30:72:55:27:AE:8B:E1:1C:6F:42:7D:06:CF:FB:18:6F:59:48:29:B3:98:4B:76:8F:9E\",\"2018-09-07T12:10:58.428Z\",\"\",\"\",\"\",\"\"\n\"A-FF:AA:AA:AA:3B:43:EB:D7:C7:30:03:5F:C8:D0:15:91:70:C2:5D:4F:EB:24:E9:3A:BB:D8:3C:FE:20:EA:B1:72\",\"2018-09-07T12:10:58.428Z\",\"\",\"\",\"\",\"\"\n```\nAn example of an error report file:\n```\n\"entity__id\",\"error__code\",\"error__type\",\"error__message\",\"error__fields\"\n\"A-F9:AA:AA:AA:DE:31:C7:30:72:55:27:AE:8B:E1:1C:6F:42:7D:06:CF:FB:18:6F:59:48:29:B3:98:4B:76:8F:9E\",\"409\",\"duplicate\",\"Enrollment identity is already claimed in the mbed Cloud.\",\"\"\n\"A-FF:AA:AA:AA:3B:43:EB:D7:C7:30:03:5F:C8:D0:15:91:70:C2:5D:4F:EB:24:E9:3A:BB:D8:3C:FE:20:EA:B1:72\",\"409\",\"duplicate\",\"Enrollment identity is already claimed in the mbed Cloud.\",\"\"\n```\n**Example:**\n```\ncurl -X GET \\\n-H 'Authorization: Bearer <access_key>' \\\nhttps://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/{id}\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "Bulk ID",
              "pattern": "^[A-Za-z0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Bulk upload entity found.",
              "schema": {
                "type": "object",
                "required": [
                  "object",
                  "id",
                  "etag",
                  "created_at",
                  "account_id",
                  "status",
                  "total_count",
                  "processed_count",
                  "errors_count",
                  "completet_at",
                  "full_report_file",
                  "errors_report_file"
                ],
                "properties": [
                  {
                    "type": "string",
                    "description": "ID",
                    "example": "00005a4e027f0a580a01081c00000000",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "description": "The time the bulk creation task was completed.\nNull when creating bulk upload or delete.",
                    "format": "date-time",
                    "api_fieldname": "completed_at",
                    "entity_fieldname": "completed_at",
                    "_key": "completed_at"
                  },
                  {
                    "type": "string",
                    "description": "The time of receiving the bulk creation task.",
                    "format": "date-time",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "example": 0,
                    "description": "The number of enrollment identities with failed processing.",
                    "api_fieldname": "errors_count",
                    "entity_fieldname": "errors_count",
                    "_key": "errors_count"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "description": "Link to error report file.\nNull when creating bulk upload or delete.",
                    "example": "https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/errors_report.csv",
                    "api_fieldname": "errors_report_file",
                    "entity_fieldname": "errors_report_file",
                    "_key": "errors_report_file"
                  },
                  {
                    "type": "string",
                    "description": "etag",
                    "example": "1",
                    "pattern": "[A-Za-z0-9]{0,256}",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "description": "Link to full report file.\nNull when creating bulk upload or delete.",
                    "example": "https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/full_report.csv",
                    "api_fieldname": "full_report_file",
                    "entity_fieldname": "full_report_file",
                    "_key": "full_report_file"
                  },
                  {
                    "type": "string",
                    "description": "Bulk ID",
                    "pattern": "^[A-Za-z0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "enrollment-identity-bulk-uploads"
                    ],
                    "example": "enrollment-identity-bulk-uploads",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "integer",
                    "example": 0,
                    "description": "The number of enrollment identities processed until now.",
                    "api_fieldname": "processed_count",
                    "entity_fieldname": "processed_count",
                    "_key": "processed_count"
                  },
                  {
                    "enum": [
                      "new",
                      "processing",
                      "completed"
                    ],
                    "default": "new",
                    "example": "new",
                    "description": "The state of the process is 'new' at the time of creation. If creation is still in progress, the state shows as 'processing'. When the request is fully processed, the state changes to 'completed'.",
                    "type": "string",
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "integer",
                    "example": 10,
                    "description": "Total number of enrollment identities found in the input CSV.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device_enrollment_bulk_delete"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad request. Invalid bulk identity.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Invalid access token.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/device-enrollments-bulk-uploads/{id}",
          "summary": "Get bulk upload entity.",
          "return_type": "device_enrollment_bulk_create",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_enrollment_bulk_create"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "account_id",
            "created_at",
            "status",
            "total_count",
            "processed_count",
            "errors_count",
            "completed_at",
            "full_report_file",
            "errors_report_file"
          ],
          "group_id": "Devices",
          "operation_id": "getBulkDeviceEnrollment",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "string",
          "description": "ID",
          "example": "00005a4e027f0a580a01081c00000000",
          "api_fieldname": "account_id",
          "readOnly": true,
          "required": false,
          "_key": "account_id"
        },
        {
          "type": "string",
          "description": "The time the bulk creation task was completed.\nNull when creating bulk upload or delete.",
          "format": "date-time",
          "api_fieldname": "completed_at",
          "readOnly": true,
          "required": false,
          "_key": "completed_at"
        },
        {
          "type": "string",
          "description": "The time of receiving the bulk creation task.",
          "format": "date-time",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "integer",
          "example": 0,
          "description": "The number of enrollment identities with failed processing.",
          "api_fieldname": "errors_count",
          "readOnly": true,
          "required": false,
          "_key": "errors_count"
        },
        {
          "type": "string",
          "x-nullable": true,
          "description": "Link to error report file.\nNull when creating bulk upload or delete.",
          "example": "https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/errors_report.csv",
          "api_fieldname": "errors_report_file",
          "readOnly": true,
          "required": false,
          "_key": "errors_report_file"
        },
        {
          "type": "string",
          "x-nullable": true,
          "description": "Link to full report file.\nNull when creating bulk upload or delete.",
          "example": "https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/full_report.csv",
          "api_fieldname": "full_report_file",
          "readOnly": true,
          "required": false,
          "_key": "full_report_file"
        },
        {
          "type": "string",
          "description": "Bulk ID",
          "pattern": "^[A-Za-z0-9]{32}",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "integer",
          "example": 0,
          "description": "The number of enrollment identities processed until now.",
          "api_fieldname": "processed_count",
          "readOnly": true,
          "required": false,
          "_key": "processed_count"
        },
        {
          "enum": [
            "new",
            "processing",
            "completed"
          ],
          "default": "new",
          "example": "new",
          "description": "The state of the process is 'new' at the time of creation. If creation is still in progress, the state shows as 'processing'. When the request is fully processed, the state changes to 'completed'.",
          "type": "string",
          "api_fieldname": "status",
          "readOnly": true,
          "required": false,
          "enum_reference": "device_enrollment_bulk_create_status_enum",
          "_key": "status"
        },
        {
          "type": "integer",
          "example": 10,
          "description": "Total number of enrollment identities found in the input CSV.",
          "api_fieldname": "total_count",
          "readOnly": true,
          "required": false,
          "_key": "total_count"
        }
      ],
      "field_renames": [],
      "tags": [
        "Device ownership - enrollments"
      ],
      "group_id": "Devices",
      "_key": "device_enrollment_bulk_create"
    },
    {
      "swagger_models": [
        "BulkResponse"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "With bulk delete, you can upload a `CSV` file containing a number of enrollment IDs to delete.\n\n**Example:**\n```\ncurl -X POST \\\n-H 'Authorization: Bearer <access_key>' \\\n-F 'enrollment_identities=@/path/to/enrollments/enrollments.csv' \\\nhttps://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes\n\n```\n**To ensure your CSV file is valid:**\n1. The first line of the file (header) is ignored.\n1. Each line can contain comma-separated values, where the first value is the Enrollment ID. Everything after the first comma is ignored.\n1. Valid enrollments begin with A followed by a - and 95 characters (examples below).\n1. One enrollment ID per line. Empty lines are ignored.\n1. Trailing comma at the end of the line is optional.\n1. Lines are terminated with either a line feed \\n, a carriage return \\r, or both \\r\\n.\n1. Leading and trailing whitespace characters (Unicode U+0000 - U+0020) are removed from the identity before validation.\n1. Empty identities are ignored.\n1. Valid enrollment identities may be enclosed within quotation marks. Whitespace inside quotation marks is not trimmed and will cause validation to fail. Empty quotation marks are also invalid.\n1. Use UTF-8 encoding.\n\n**A valid enrollment file:**\n```\n\"Examples of valid identites, notes\"\n\"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\",\n\"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\"\nA-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\nA-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:24:44:71:22:15:43:23:12, This text is ignored,\n A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:60:25:48:44:71:22:15:43:23:12       , Whitespace is trimmed before validation.\n  \"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:60:25:48:44:71:22:15:43:23:12\"       , Whitespace around quotation marks is also trimmed.\n\n```\n\n**A file containing invalid identities:**\n```\n\"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\", First line is ignored.\nA_4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12, Invalid version identifier.\nA-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23, Too-short identity.\n\"\", Empty quotation marks are an invalid identity.\n\" A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12 \", Whitespace inside quotation marks is not trimmed, causing an error.\n\n```\n\n**An empty file:**\n```\n\"Examples of blank lines that are ignored.\"\n\n,,\n, This is also considered to a blank line.\n```",
          "field_renames": [],
          "fields": [
            {
              "in": "stream",
              "name": "enrollment_identities",
              "type": "file",
              "required": true,
              "description": "The `CSV` file containing the enrollment IDs. The maximum file size is 10MB.",
              "entity_fieldname": "enrollment_identities",
              "api_fieldname": "enrollment_identities",
              "external_param": true,
              "parameter_fieldname": "enrollment_identities",
              "_key": "enrollment_identities"
            }
          ],
          "method": "post",
          "mode": "delete",
          "responses": [
            {
              "description": "Bulk delete data received and asynchronous processing started.",
              "schema": {
                "type": "object",
                "required": [
                  "object",
                  "id",
                  "etag",
                  "created_at",
                  "account_id",
                  "status",
                  "total_count",
                  "processed_count",
                  "errors_count",
                  "completet_at",
                  "full_report_file",
                  "errors_report_file"
                ],
                "properties": [
                  {
                    "type": "string",
                    "description": "ID",
                    "example": "00005a4e027f0a580a01081c00000000",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "description": "The time the bulk creation task was completed.\nNull when creating bulk upload or delete.",
                    "format": "date-time",
                    "api_fieldname": "completed_at",
                    "entity_fieldname": "completed_at",
                    "_key": "completed_at"
                  },
                  {
                    "type": "string",
                    "description": "The time of receiving the bulk creation task.",
                    "format": "date-time",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "example": 0,
                    "description": "The number of enrollment identities with failed processing.",
                    "api_fieldname": "errors_count",
                    "entity_fieldname": "errors_count",
                    "_key": "errors_count"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "description": "Link to error report file.\nNull when creating bulk upload or delete.",
                    "example": "https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/errors_report.csv",
                    "api_fieldname": "errors_report_file",
                    "entity_fieldname": "errors_report_file",
                    "_key": "errors_report_file"
                  },
                  {
                    "type": "string",
                    "description": "etag",
                    "example": "1",
                    "pattern": "[A-Za-z0-9]{0,256}",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "description": "Link to full report file.\nNull when creating bulk upload or delete.",
                    "example": "https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/full_report.csv",
                    "api_fieldname": "full_report_file",
                    "entity_fieldname": "full_report_file",
                    "_key": "full_report_file"
                  },
                  {
                    "type": "string",
                    "description": "Bulk ID",
                    "pattern": "^[A-Za-z0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "enrollment-identity-bulk-uploads"
                    ],
                    "example": "enrollment-identity-bulk-uploads",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "integer",
                    "example": 0,
                    "description": "The number of enrollment identities processed until now.",
                    "api_fieldname": "processed_count",
                    "entity_fieldname": "processed_count",
                    "_key": "processed_count"
                  },
                  {
                    "enum": [
                      "new",
                      "processing",
                      "completed"
                    ],
                    "default": "new",
                    "example": "new",
                    "description": "The state of the process is 'new' at the time of creation. If creation is still in progress, the state shows as 'processing'. When the request is fully processed, the state changes to 'completed'.",
                    "type": "string",
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "integer",
                    "example": 10,
                    "description": "Total number of enrollment identities found in the input CSV.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device_enrollment_bulk_create"
                }
              },
              "_key": "201"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Invalid access token.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            }
          ],
          "path": "/v3/device-enrollments-bulk-deletes",
          "summary": "Bulk delete.",
          "return_type": "device_enrollment_bulk_delete",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_enrollment_bulk_delete"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "account_id",
            "created_at",
            "status",
            "total_count",
            "processed_count",
            "errors_count",
            "completed_at",
            "full_report_file",
            "errors_report_file"
          ],
          "group_id": "Devices",
          "operation_id": "deleteBulkDeviceEnrollment",
          "pagination": false,
          "request_content_type": "multipart/form-data",
          "request_body": "file",
          "_key": "delete"
        },
        {
          "description": "This method will download the CSV file containing detailed information on status of the bulk enrollment.",
          "field_renames": [],
          "fields": [],
          "method": null,
          "mode": "download_errors_report_file",
          "responses": [],
          "path": null,
          "summary": "Download the error report file for the bulk enrollment deletion.",
          "return_type": "file",
          "return_info": {
            "self": false,
            "custom": true,
            "type": "file"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Devices",
          "custom_method": "download_errors_report_file",
          "spec": {
            "summary": "Download the error report file for the bulk enrollment deletion.",
            "description": "This method will download the CSV file containing detailed information on status of the bulk enrollment.",
            "return_type": "file"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "download_errors_report_file"
        },
        {
          "description": "This method will download the CSV file containing detailed information on status of the bulk enrollment.",
          "field_renames": [],
          "fields": [],
          "method": null,
          "mode": "download_full_report_file",
          "responses": [],
          "path": null,
          "summary": "Download the full report file for the bulk enrollment deletion.",
          "return_type": "file",
          "return_info": {
            "self": false,
            "custom": true,
            "type": "file"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Devices",
          "custom_method": "download_full_report_file",
          "spec": {
            "summary": "Download the full report file for the bulk enrollment deletion.",
            "description": "This method will download the CSV file containing detailed information on status of the bulk enrollment.",
            "return_type": "file"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "download_full_report_file"
        },
        {
          "description": "Provides information on bulk delete for the given ID, for example, bulk status and the number of processed enrollment identities. Provides links to bulk delete reports as well.\n\n**Report file format:**\nThe report files have a header line and the value are separated by commas. The lines are delimited by a line break (CRLF). Make sure the report file is compliant with IETF Informal CSV common format [RFC 4180](https://tools.ietf.org/html/rfc4180).\n\nAn example of a full report file:\n```\n\"entity__id\",\"entity__deleted_at\",\"error__code\",\"error__type\",\"error__message\",\"error__fields\"\n\"A-F9:AA:AA:AA:DE:31:C7:30:72:55:27:AE:8B:E1:1C:6F:42:7D:06:CF:FB:18:6F:59:48:29:B3:98:4B:76:8F:9E\",\"2018-09-07T12:10:58.428Z\",\"\",\"\",\"\",\"\"\n\"A-FF:AA:AA:AA:3B:43:EB:D7:C7:30:03:5F:C8:D0:15:91:70:C2:5D:4F:EB:24:E9:3A:BB:D8:3C:FE:20:EA:B1:72\",\"2018-09-07T12:10:58.428Z\",\"\",\"\",\"\",\"\"\n```\nAn example of an error report file:\n```\n\"entity__id\",\"error__code\",\"error__type\",\"error__message\",\"error__fields\"\n\"A-F9:AA:AA:AA:DE:31:C7:30:72:55:27:AE:8B:E1:1C:6F:42:7D:06:CF:FB:18:6F:59:48:29:B3:98:4B:76:8F:9E\",\"409\",\"duplicate\",\"Enrollment identity is already claimed in the mbed Cloud.\",\"\"\n\"A-FF:AA:AA:AA:3B:43:EB:D7:C7:30:03:5F:C8:D0:15:91:70:C2:5D:4F:EB:24:E9:3A:BB:D8:3C:FE:20:EA:B1:72\",\"409\",\"duplicate\",\"Enrollment identity is already claimed in the mbed Cloud.\",\"\"\n```\n**Example:**\n```\ncurl -X GET \\\n-H 'Authorization: Bearer <access_key>' \\\nhttps://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes/{id}\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "Bulk ID",
              "pattern": "^[A-Za-z0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Bulk delete entity found.",
              "schema": {
                "type": "object",
                "required": [
                  "object",
                  "id",
                  "etag",
                  "created_at",
                  "account_id",
                  "status",
                  "total_count",
                  "processed_count",
                  "errors_count",
                  "completet_at",
                  "full_report_file",
                  "errors_report_file"
                ],
                "properties": [
                  {
                    "type": "string",
                    "description": "ID",
                    "example": "00005a4e027f0a580a01081c00000000",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "description": "The time the bulk creation task was completed.\nNull when creating bulk upload or delete.",
                    "format": "date-time",
                    "api_fieldname": "completed_at",
                    "entity_fieldname": "completed_at",
                    "_key": "completed_at"
                  },
                  {
                    "type": "string",
                    "description": "The time of receiving the bulk creation task.",
                    "format": "date-time",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "example": 0,
                    "description": "The number of enrollment identities with failed processing.",
                    "api_fieldname": "errors_count",
                    "entity_fieldname": "errors_count",
                    "_key": "errors_count"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "description": "Link to error report file.\nNull when creating bulk upload or delete.",
                    "example": "https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/errors_report.csv",
                    "api_fieldname": "errors_report_file",
                    "entity_fieldname": "errors_report_file",
                    "_key": "errors_report_file"
                  },
                  {
                    "type": "string",
                    "description": "etag",
                    "example": "1",
                    "pattern": "[A-Za-z0-9]{0,256}",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "x-nullable": true,
                    "description": "Link to full report file.\nNull when creating bulk upload or delete.",
                    "example": "https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/full_report.csv",
                    "api_fieldname": "full_report_file",
                    "entity_fieldname": "full_report_file",
                    "_key": "full_report_file"
                  },
                  {
                    "type": "string",
                    "description": "Bulk ID",
                    "pattern": "^[A-Za-z0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "enrollment-identity-bulk-uploads"
                    ],
                    "example": "enrollment-identity-bulk-uploads",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "integer",
                    "example": 0,
                    "description": "The number of enrollment identities processed until now.",
                    "api_fieldname": "processed_count",
                    "entity_fieldname": "processed_count",
                    "_key": "processed_count"
                  },
                  {
                    "enum": [
                      "new",
                      "processing",
                      "completed"
                    ],
                    "default": "new",
                    "example": "new",
                    "description": "The state of the process is 'new' at the time of creation. If creation is still in progress, the state shows as 'processing'. When the request is fully processed, the state changes to 'completed'.",
                    "type": "string",
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "integer",
                    "example": 10,
                    "description": "Total number of enrollment identities found in the input CSV.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device_enrollment_bulk_create"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad request. Invalid bulk identity.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Invalid access token.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/device-enrollments-bulk-deletes/{id}",
          "summary": "Get bulk delete entity.",
          "return_type": "device_enrollment_bulk_delete",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_enrollment_bulk_delete"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "account_id",
            "created_at",
            "status",
            "total_count",
            "processed_count",
            "errors_count",
            "completed_at",
            "full_report_file",
            "errors_report_file"
          ],
          "group_id": "Devices",
          "operation_id": "getBulkDeviceEnrollmentDelete",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "string",
          "description": "ID",
          "example": "00005a4e027f0a580a01081c00000000",
          "api_fieldname": "account_id",
          "readOnly": true,
          "required": false,
          "_key": "account_id"
        },
        {
          "type": "string",
          "description": "The time the bulk creation task was completed.\nNull when creating bulk upload or delete.",
          "format": "date-time",
          "api_fieldname": "completed_at",
          "readOnly": true,
          "required": false,
          "_key": "completed_at"
        },
        {
          "type": "string",
          "description": "The time of receiving the bulk creation task.",
          "format": "date-time",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "integer",
          "example": 0,
          "description": "The number of enrollment identities with failed processing.",
          "api_fieldname": "errors_count",
          "readOnly": true,
          "required": false,
          "_key": "errors_count"
        },
        {
          "type": "string",
          "x-nullable": true,
          "description": "Link to error report file.\nNull when creating bulk upload or delete.",
          "example": "https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/errors_report.csv",
          "api_fieldname": "errors_report_file",
          "readOnly": true,
          "required": false,
          "_key": "errors_report_file"
        },
        {
          "type": "string",
          "x-nullable": true,
          "description": "Link to full report file.\nNull when creating bulk upload or delete.",
          "example": "https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/full_report.csv",
          "api_fieldname": "full_report_file",
          "readOnly": true,
          "required": false,
          "_key": "full_report_file"
        },
        {
          "type": "string",
          "description": "Bulk ID",
          "pattern": "^[A-Za-z0-9]{32}",
          "api_fieldname": "id",
          "parameter_fieldname": "id",
          "in": "path",
          "required": true,
          "readOnly": false,
          "_key": "id"
        },
        {
          "type": "integer",
          "example": 0,
          "description": "The number of enrollment identities processed until now.",
          "api_fieldname": "processed_count",
          "readOnly": true,
          "required": false,
          "_key": "processed_count"
        },
        {
          "enum": [
            "new",
            "processing",
            "completed"
          ],
          "default": "new",
          "example": "new",
          "description": "The state of the process is 'new' at the time of creation. If creation is still in progress, the state shows as 'processing'. When the request is fully processed, the state changes to 'completed'.",
          "type": "string",
          "api_fieldname": "status",
          "readOnly": true,
          "required": false,
          "enum_reference": "device_enrollment_bulk_delete_status_enum",
          "_key": "status"
        },
        {
          "type": "integer",
          "example": 10,
          "description": "Total number of enrollment identities found in the input CSV.",
          "api_fieldname": "total_count",
          "readOnly": true,
          "required": false,
          "_key": "total_count"
        }
      ],
      "field_renames": [],
      "tags": [
        "Device ownership - enrollments"
      ],
      "group_id": "Devices",
      "_key": "device_enrollment_bulk_delete"
    },
    {
      "swagger_models": [
        "DeviceEventData",
        "DeviceEventPage"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "List all or a filtered list of device events for the account. Device events are events significant to operation or lifetime, such as creation, firmware update, and suspension.\n\nTo see statistics for device connectivity and usage, use the [Statistics API](https://www.pelion.com/docs/device-management-api/connect-statistics/).\n\n **Example:**\n Following example gets device-events limiting returned results to max 5 events\n ```\n curl -X GET https://api.us-east-1.mbedcloud.com/v3/device-events?limit=5 \\\n -H 'Authorization: Bearer <API key>'\n ```\n or to get events for certain device filter based on device_id:\n ```\n curl -X GET https://api.us-east-1.mbedcloud.com/v3/device-events?device_id=<device_id> \\\n -H 'Authorization: Bearer <API key>'\n ```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": null,
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "description": "The ID of the item after which to retrieve the next page.",
              "in": "query",
              "name": "after",
              "external_param": true,
              "parameter_fieldname": "after",
              "required": false,
              "_key": "after"
            },
            {
              "description": "Comma-separated list of data fields to return. Currently supported: `total_count`.",
              "in": "query",
              "name": "include",
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "required": false,
              "_key": "include"
            },
            {
              "type": "integer",
              "example": 1000,
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "description": "How many objects to retrieve in the page (2-1000). Limit values outside of this range are set to the closest limit.",
              "in": "query",
              "name": "limit",
              "minimum": 2,
              "maximum": 1000,
              "external_param": true,
              "parameter_fieldname": "limit",
              "required": false,
              "_key": "limit"
            },
            {
              "type": "string",
              "example": "DESC",
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "description": "Record order. Acceptable values: ASC, DESC. Default: ASC.",
              "in": "query",
              "name": "order",
              "external_param": true,
              "parameter_fieldname": "order",
              "required": false,
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Request successful.",
              "schema": {
                "properties": [
                  {
                    "type": "string",
                    "example": null,
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "items": {
                      "properties": [
                        {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object"
                          },
                          "example": [],
                          "x-deprecation": {
                            "issued_at": "2019-01-15T14:55:20+00:00",
                            "end_of_life_at": "2020-01-15T14:55:20+00:00",
                            "comment": "This field is not used.",
                            "links": []
                          },
                          "_key": "changes"
                        },
                        {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "_key": "created_at"
                        },
                        {
                          "type": "object",
                          "example": {
                            "campaign_id": "00000000000000000000000000000000"
                          },
                          "description": "Additional data relevant to the event.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "data"
                        },
                        {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "_key": "date_time"
                        },
                        {
                          "type": "string",
                          "example": "Device record created",
                          "_key": "description"
                        },
                        {
                          "type": "string",
                          "example": "00000000000000000000000000000000",
                          "_key": "device_id"
                        },
                        {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "UPD2_100",
                          "description": "Event code",
                          "_key": "event_type"
                        },
                        {
                          "type": "string",
                          "example": "FAIL_MANIFEST_REJECTED",
                          "description": "Category code that groups the event type by a summary category.",
                          "_key": "event_type_category"
                        },
                        {
                          "type": "string",
                          "example": "FAIL",
                          "description": "Generic description of the event.",
                          "_key": "event_type_description"
                        },
                        {
                          "type": "string",
                          "example": "00000000000000000000000000000000",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "description": "The API resource entity.",
                          "example": "device-event",
                          "_key": "object"
                        },
                        {
                          "type": "boolean",
                          "_key": "state_change"
                        }
                      ],
                      "required": [
                        "date_time",
                        "id"
                      ],
                      "foreign_key": {
                        "group": "Devices",
                        "entity": "device_events"
                      }
                    },
                    "type": "array",
                    "example": "[]",
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "example": 1000,
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "DESC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "example": 1,
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device_events"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad request.",
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "_key": "401"
            },
            {
              "description": "Unable to find page.",
              "_key": "404"
            }
          ],
          "path": "/v3/device-events/",
          "summary": "List all device events.",
          "return_type": "paginated_response(device_events)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_events"
          },
          "x_filter": {
            "date_time": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "description": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "device_id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "event_type": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "state_change": [
              "eq",
              "neq"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "data",
            "has_more",
            "total_count",
            "date_time__in",
            "date_time__nin",
            "date_time__lte",
            "date_time__gte",
            "description__eq",
            "description__neq",
            "description__in",
            "description__nin",
            "id__eq",
            "id__neq",
            "id__in",
            "id__nin",
            "device_id__eq",
            "device_id__neq",
            "device_id__in",
            "device_id__nin",
            "event_type__eq",
            "event_type__neq",
            "event_type__in",
            "event_type__nin",
            "state_change__eq",
            "state_change__neq"
          ],
          "foreign_key_priority": "self",
          "group_id": "Devices",
          "operation_id": "Device_Event_list",
          "pagination": true,
          "foreign_key": {
            "group": "Devices",
            "entity": "device_events"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "\"Retrieve a specific device event. See '/v3/device-events/' for information on device events, and how to get the device_event_id.\"\n\n**Example:**\nTo fetch a specific event you can use the 'id' field from '/v3/device-events'. Form of '016c03d40a4e000000000001001003b4'\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/device-events/<device_event_id> \\\n-H 'Authorization: Bearer <API key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "00000000000000000000000000000000",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "device_event_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Retrieved result successfully.",
              "schema": {
                "properties": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    },
                    "example": [],
                    "x-deprecation": {
                      "issued_at": "2019-01-15T14:55:20+00:00",
                      "end_of_life_at": "2020-01-15T14:55:20+00:00",
                      "comment": "This field is not used.",
                      "links": []
                    },
                    "api_fieldname": "changes",
                    "entity_fieldname": "changes",
                    "_key": "changes"
                  },
                  {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "object",
                    "example": {
                      "campaign_id": "00000000000000000000000000000000"
                    },
                    "description": "Additional data relevant to the event.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "api_fieldname": "date_time",
                    "entity_fieldname": "date_time",
                    "_key": "date_time"
                  },
                  {
                    "type": "string",
                    "example": "Device record created",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "00000000000000000000000000000000",
                    "api_fieldname": "device_id",
                    "entity_fieldname": "device_id",
                    "_key": "device_id"
                  },
                  {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "UPD2_100",
                    "description": "Event code",
                    "api_fieldname": "event_type",
                    "entity_fieldname": "event_type",
                    "_key": "event_type"
                  },
                  {
                    "type": "string",
                    "example": "FAIL_MANIFEST_REJECTED",
                    "description": "Category code that groups the event type by a summary category.",
                    "api_fieldname": "event_type_category",
                    "entity_fieldname": "event_type_category",
                    "_key": "event_type_category"
                  },
                  {
                    "type": "string",
                    "example": "FAIL",
                    "description": "Generic description of the event.",
                    "api_fieldname": "event_type_description",
                    "entity_fieldname": "event_type_description",
                    "_key": "event_type_description"
                  },
                  {
                    "type": "string",
                    "example": "00000000000000000000000000000000",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "description": "The API resource entity.",
                    "example": "device-event",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "boolean",
                    "api_fieldname": "state_change",
                    "entity_fieldname": "state_change",
                    "_key": "state_change"
                  }
                ],
                "required": [
                  "date_time",
                  "id"
                ],
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device_events"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad request.",
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "_key": "401"
            },
            {
              "description": "Unable to find device.",
              "_key": "404"
            }
          ],
          "path": "/v3/device-events/{device_event_id}/",
          "summary": "Retrieve a device event.",
          "return_type": "device_events",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_events"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "changes",
            "data",
            "date_time",
            "description",
            "device_id",
            "event_type",
            "event_type_category",
            "event_type_description",
            "state_change"
          ],
          "group_id": "Devices",
          "operation_id": "Device_Event_retrieve",
          "parameter_map": {
            "device_event_id": "id"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "example": [],
          "x-deprecation": {
            "issued_at": "2019-01-15T14:55:20+00:00",
            "end_of_life_at": "2020-01-15T14:55:20+00:00",
            "comment": "This field is not used.",
            "links": []
          },
          "api_fieldname": "changes",
          "readOnly": true,
          "required": false,
          "_key": "changes"
        },
        {
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "type": "string",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "object",
          "example": {
            "campaign_id": "00000000000000000000000000000000"
          },
          "description": "Additional data relevant to the event.",
          "additionalProperties": {
            "type": "string"
          },
          "api_fieldname": "data",
          "readOnly": true,
          "required": false,
          "_key": "data"
        },
        {
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "type": "string",
          "api_fieldname": "date_time",
          "readOnly": true,
          "required": false,
          "_key": "date_time"
        },
        {
          "type": "string",
          "example": "Device record created",
          "api_fieldname": "description",
          "readOnly": true,
          "required": false,
          "_key": "description"
        },
        {
          "type": "string",
          "example": "00000000000000000000000000000000",
          "api_fieldname": "device_id",
          "readOnly": true,
          "required": false,
          "_key": "device_id"
        },
        {
          "type": "string",
          "maxLength": 100,
          "example": "UPD2_100",
          "description": "Event code",
          "api_fieldname": "event_type",
          "readOnly": true,
          "required": false,
          "_key": "event_type"
        },
        {
          "type": "string",
          "example": "FAIL_MANIFEST_REJECTED",
          "description": "Category code that groups the event type by a summary category.",
          "api_fieldname": "event_type_category",
          "readOnly": true,
          "required": false,
          "_key": "event_type_category"
        },
        {
          "type": "string",
          "example": "FAIL",
          "description": "Generic description of the event.",
          "api_fieldname": "event_type_description",
          "readOnly": true,
          "required": false,
          "_key": "event_type_description"
        },
        {
          "type": "string",
          "example": "00000000000000000000000000000000",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "boolean",
          "api_fieldname": "state_change",
          "readOnly": true,
          "required": false,
          "_key": "state_change"
        }
      ],
      "field_renames": [],
      "tags": [
        "Device directory - events"
      ],
      "group_id": "Devices",
      "_key": "device_events"
    },
    {
      "swagger_models": [
        "DeviceGroup",
        "DeviceGroupManipulation",
        "DeviceGroupPage",
        "DevicePage"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Add one device to a group. A device can be in multiple groups.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "00000000000000000000000000000000",
              "name": "device_id",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "device_id",
              "api_fieldname": "device_id",
              "external_param": true,
              "parameter_fieldname": "device_id",
              "required": false,
              "_key": "device_id"
            },
            {
              "in": "path",
              "description": "The ID of the group.",
              "name": "device-group-id",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "device-group-id",
              "external_param": false,
              "parameter_fieldname": "device-group-id",
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "add_device",
          "responses": [
            {
              "description": "Success - device added.",
              "_key": "204"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/device-groups/{device-group-id}/devices/add/",
          "summary": "Add a device to a group.",
          "return_type": "void",
          "return_info": {
            "self": false,
            "custom": true,
            "type": "void"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Devices",
          "parameter_map": {
            "device-group-id": "id"
          },
          "operation_id": "Group_members_add",
          "spec": {
            "return_type": "void"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "add_device"
        },
        {
          "description": "Create a group.",
          "field_renames": [],
          "fields": [
            {
              "type": "object",
              "maxProperties": 10,
              "additionalProperties": {
                "type": "string",
                "maxLength": 128,
                "pattern": "^[A-Za-z].*"
              },
              "description": "Up to ten custom key-value attributes. Keys cannot begin with a number. Both key and value are limited to 128 characters. Updating this field replaces existing contents.",
              "example": {
                "key": "value"
              },
              "api_fieldname": "custom_attributes",
              "entity_fieldname": "custom_attributes",
              "name": "custom_attributes",
              "in": "body",
              "schema_param": true,
              "parameter_fieldname": "custom_attributes",
              "required": false,
              "_key": "custom_attributes"
            },
            {
              "type": "string",
              "maxLength": 1024,
              "description": "The description of the group.",
              "example": "Devices on the factory floor.",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "name": "description",
              "in": "body",
              "schema_param": true,
              "parameter_fieldname": "description",
              "required": false,
              "_key": "description"
            },
            {
              "type": "string",
              "maxLength": 128,
              "description": "Name of the group.",
              "example": "My devices",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "name": "name",
              "in": "body",
              "schema_param": true,
              "parameter_fieldname": "name",
              "required": false,
              "_key": "name"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "Created.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the group was created.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "object",
                    "maxProperties": 10,
                    "additionalProperties": {
                      "type": "string",
                      "maxLength": 128,
                      "pattern": "^[A-Za-z].*"
                    },
                    "description": "Up to ten custom key-value attributes. Keys cannot begin with a number. Both key and value are limited to 128 characters. Updating this field replaces existing contents.",
                    "example": {
                      "key": "value"
                    },
                    "api_fieldname": "custom_attributes",
                    "entity_fieldname": "custom_attributes",
                    "_key": "custom_attributes"
                  },
                  {
                    "type": "string",
                    "maxLength": 1024,
                    "description": "The description of the group.",
                    "example": "Devices on the factory floor.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "integer",
                    "description": "The number of devices in this group.",
                    "example": 10,
                    "api_fieldname": "devices_count",
                    "entity_fieldname": "devices_count",
                    "_key": "devices_count"
                  },
                  {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "The group ID.",
                    "example": "015c3029f6f7000000000001001000c3",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "maxLength": 128,
                    "description": "Name of the group.",
                    "example": "My devices",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `device-group`.",
                    "example": "device-group",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time this object was updated.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device_group"
                }
              },
              "_key": "201"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Conflict - Group name already exists.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/device-groups/",
          "summary": "Create a group.",
          "return_type": "device_group",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "devices_count",
            "created_at",
            "updated_at"
          ],
          "group_id": "Devices",
          "parameter_map": {
            "device-group-id": "id"
          },
          "operation_id": "Group_create",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete a group. This deletes the group, but not the devices in the group.",
          "field_renames": [],
          "fields": [
            {
              "description": "The ID of the group.",
              "in": "path",
              "name": "device-group-id",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "device-group-id",
              "external_param": false,
              "parameter_fieldname": "device-group-id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Success - group deleted.",
              "_key": "204"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not Found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/device-groups/{device-group-id}/",
          "summary": "Delete a group.",
          "return_type": "device_group",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Devices",
          "parameter_map": {
            "device-group-id": "id"
          },
          "operation_id": "Group_delete",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Get a page of devices in a specified group.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "The ID of the item after which to retrieve the next page.",
              "example": "01631667477600000000000100100374",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "in": "query",
              "name": "after",
              "external_param": true,
              "parameter_fieldname": "after",
              "required": false,
              "_key": "after"
            },
            {
              "in": "path",
              "name": "device-group-id",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "device-group-id",
              "external_param": false,
              "parameter_fieldname": "device-group-id",
              "_key": "id"
            },
            {
              "description": "Comma-separated list of data fields to return. Currently supported: `total_count`.",
              "in": "query",
              "name": "include",
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "required": false,
              "_key": "include"
            },
            {
              "type": "integer",
              "description": "How many objects to retrieve in the page (2-1000). Limit values outside of this range are set to the closest limit.",
              "example": 50,
              "minimum": 2,
              "maximum": 1000,
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "in": "query",
              "name": "limit",
              "external_param": true,
              "parameter_fieldname": "limit",
              "required": false,
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order. Acceptable values: ASC, DESC. Default: ASC.",
              "example": "DESC",
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "in": "query",
              "name": "order",
              "external_param": true,
              "parameter_fieldname": "order",
              "required": false,
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "devices",
          "responses": [
            {
              "description": "Ok.",
              "schema": {
                "properties": [
                  {
                    "type": "string",
                    "description": "The ID of the item after which to retrieve the next page.",
                    "example": "01631667477600000000000100100374",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "in": "query",
                    "name": "after",
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "required": false,
                    "_key": "after"
                  },
                  {
                    "items": [
                      {
                        "group": "Devices",
                        "entity": "device",
                        "_key": "foreign_key"
                      },
                      {
                        "device_execution_mode": {
                          "enum": [
                            0,
                            1,
                            5
                          ],
                          "type": "integer",
                          "description": "The execution mode from the certificate of the device. Defaults to inheriting from host_gateway device.\nPermitted values:\n  - 0 - Unspecified execution mode (default if host_gateway invalid or not set). The device firmware uses a certificate that is not identified as a developer or production certificate.\n  - 1 - Development device. The device firmware uses a developer certificate to communicate with Device Management.\n  - 5 - Production device. The device firmware uses a factory-generated certificate to communicate with Device Management.",
                          "example": 0,
                          "default": 0
                        },
                        "groups": {
                          "description": "An array containing an ID of each group this device belongs to.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "00000000000000000000000000000000"
                          }
                        },
                        "issuer_fingerprint": {
                          "type": "string",
                          "pattern": "[A-Fa-f0-9]{64}",
                          "x-nullable": true,
                          "description": "SHA256 fingerprint of the certificate used to validate the signature of the device certificate.",
                          "example": "C42EDEFC75871E4CE2146FCDA67D03DDA05CC26FDF93B17B55F42C1EADFDC322"
                        },
                        "operator_suspended": {
                          "type": "boolean",
                          "description": "Device has been suspended by operator."
                        },
                        "last_operator_suspended_category": {
                          "type": "string",
                          "description": "The reference of the block category.",
                          "pattern": "[a-f0-9_]{32}",
                          "example": "maintenance"
                        },
                        "last_operator_suspended_description": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "The most recent description why the device was suspended or returned to service.",
                          "example": "Suspended for maintenance."
                        },
                        "last_operator_suspended_updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The timestamp of the most recent suspension activity.",
                          "example": "2017-05-22T12:37:55.576563Z"
                        },
                        "system_suspended": {
                          "type": "boolean",
                          "description": "Is the device suspended by the system?"
                        },
                        "last_system_suspended_category": {
                          "type": "string",
                          "description": "The reference of the block category.",
                          "pattern": "[a-f0-9_]{32}",
                          "example": "maintenance"
                        },
                        "last_system_suspended_description": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "The most recent description of why the device was blocked or unblocked by the system.",
                          "example": "A certificate in the device's certificate chain was blacklisted by the system."
                        },
                        "last_system_suspended_updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The timestamp of the most recent system block activity.",
                          "example": "2017-05-22T12:37:55.576563Z"
                        },
                        "lifecycle_status": {
                          "type": "string",
                          "enum": [
                            "enabled",
                            "blocked"
                          ],
                          "description": "The lifecycle status of the device.\n* Enabled: The device is allowed to connect to Pelion Device Management.\n* Blocked: The device is prevented from connecting to Pelion Device Management. Device can be, for example, 'suspended'.",
                          "example": "enabled"
                        },
                        "account_id": {
                          "type": "string",
                          "description": "The ID of the associated account.",
                          "example": "00000000000000000000000000000000"
                        },
                        "auto_update": {
                          "type": "boolean",
                          "description": "DEPRECATED: Mark this device for automatic firmware update."
                        },
                        "bootstrap_expiration_date": {
                          "format": "date",
                          "type": "string",
                          "x-nullable": true,
                          "description": "The expiration date of the certificate used to connect to bootstrap server."
                        },
                        "bootstrapped_timestamp": {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "description": "The timestamp of the device's most recent bootstrap process."
                        },
                        "ca_id": {
                          "type": "string",
                          "maxLength": 500,
                          "description": "The certificate issuer's ID.",
                          "example": "00000000000000000000000000000000"
                        },
                        "component_attributes": {
                          "type": "object",
                          "maxProperties": 10,
                          "additionalProperties": {
                            "type": "string",
                            "maxLength": 128
                          },
                          "description": "Up to ten custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
                          "example": {
                            "key": "value"
                          }
                        },
                        "connector_expiration_date": {
                          "format": "date",
                          "type": "string",
                          "x-nullable": true,
                          "description": "The expiration date of the certificate used to connect to LwM2M server."
                        },
                        "created_at": {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "description": "The timestamp of when the device was created in the device directory."
                        },
                        "custom_attributes": {
                          "type": "object",
                          "maxProperties": 5,
                          "additionalProperties": {
                            "type": "string",
                            "maxLength": 128,
                            "pattern": "^[A-Za-z].*"
                          },
                          "description": "Up to five custom key-value attributes. Note that keys cannot begin with a number. Both keys and values are limited to 128 characters. Updating this field replaces existing contents.",
                          "example": {
                            "key": "value"
                          }
                        },
                        "deployed_state": {
                          "enum": [
                            "development",
                            "production"
                          ],
                          "type": "string",
                          "description": "DEPRECATED: The state of the device's deployment."
                        },
                        "deployment": {
                          "type": "string",
                          "description": "DEPRECATED: The last deployment used on the device.",
                          "example": ""
                        },
                        "description": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "The description of the device.",
                          "example": "Temperature measuring device"
                        },
                        "device_class": {
                          "type": "string",
                          "maxLength": 32,
                          "description": "An ID representing the model and hardware revision of the device.",
                          "example": ""
                        },
                        "id": {
                          "type": "string",
                          "description": "The ID of the device. The device ID is used across all Device Management APIs.",
                          "example": "00000000000000000000000000000000"
                        },
                        "device_key": {
                          "type": "string",
                          "maxLength": 512,
                          "description": "The fingerprint of the device certificate.",
                          "example": "00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00"
                        },
                        "endpoint_name": {
                          "type": "string",
                          "description": "The endpoint name given to the device. The endpoint_name is from the device certificate and is set by factory tool.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "readOnly": true
                        },
                        "endpoint_type": {
                          "type": "string",
                          "description": "The endpoint type of the device. For example, the device is a gateway.",
                          "maxLength": 64,
                          "example": ""
                        },
                        "etag": {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "description": "The entity instance signature."
                        },
                        "firmware_checksum": {
                          "type": "string",
                          "description": "The SHA256 checksum of the current firmware image.",
                          "example": "0000000000000000000000000000000000000000000000000000000000000000"
                        },
                        "host_gateway": {
                          "type": "string",
                          "description": "The ID of the host gateway, if appropriate. A device behind Edge has this host_gateway set.",
                          "example": ""
                        },
                        "manifest": {
                          "type": "string",
                          "description": "DEPRECATED: The URL for the current device manifest.",
                          "example": ""
                        },
                        "manifest_timestamp": {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "description": "The timestamp of the current manifest version."
                        },
                        "mechanism": {
                          "enum": [
                            "connector",
                            "direct"
                          ],
                          "type": "string",
                          "description": "NOT USED: The ID of the channel used to communicate with the device."
                        },
                        "mechanism_url": {
                          "type": "string",
                          "description": "NOT USED: The address of the connector to use.",
                          "example": ""
                        },
                        "name": {
                          "type": "string",
                          "maxLength": 128,
                          "description": "The name given by the web application for the device. Device itself provides only the endpoint_name.",
                          "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "net_id": {
                          "type": "string",
                          "default": "",
                          "maxLength": 40,
                          "description": "Private network identifier. Used to group nodes connected to a specific border router.",
                          "example": "0000:0000:0000:0000:0000:0000:0000:0000"
                        },
                        "object": {
                          "type": "string",
                          "description": "The API resource entity.",
                          "example": "device"
                        },
                        "serial_number": {
                          "type": "string",
                          "description": "The [serial number](https://www.pelion.com/docs/device-management-provision/latest/provisioning-info/lwm2m-device-object.html#serial-number) of the device. The serial number is injected by the factory tool during manufacturing.",
                          "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "state": {
                          "enum": [
                            "unenrolled",
                            "cloud_enrolling",
                            "bootstrapped",
                            "registered",
                            "deregistered"
                          ],
                          "type": "string",
                          "description": "The current state of the device.\n* Unenrolled: The device has been created, but has not yet bootstrapped or connected to Device Management.\n* Cloud_enrolling: The device is bootstrapping for the first time. This state is set only while bootstrapping is in progress. For example, an external CA gives an error, and the device tries to bootstrap again after few seconds.\n* Bootstrapped: The device has bootstrapped, and has credentials to connect to Device Management.\n* Registered: The device has registered with Pelion Device Management. [Device commands](https://www.pelion.com/docs/device-management-api/connect/) can be queued. The device sends events for [subscribed](https://www.pelion.com/docs/device-management/current/resources/handle-resource-webapp.html) resources.\n* Deregistered: The device has requested deregistration, or its registration has expired."
                        },
                        "updated_at": {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "description": "The time this data object was updated."
                        },
                        "vendor_id": {
                          "type": "string",
                          "description": "The device vendor ID.",
                          "example": "00000000-0000-0000-0000-000000000000"
                        },
                        "enrolment_list_timestamp": {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "description": "The claim date/time."
                        },
                        "_key": "properties"
                      }
                    ],
                    "type": "array",
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "description": "Are there more results available.",
                    "example": false,
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "description": "How many objects to retrieve in the page (2-1000). Limit values outside of this range are set to the closest limit.",
                    "example": 50,
                    "minimum": 2,
                    "maximum": 1000,
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "in": "query",
                    "name": "limit",
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "required": false,
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "The type of this API object is a \"list\".",
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order. Acceptable values: ASC, DESC. Default: ASC.",
                    "example": "DESC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "in": "query",
                    "name": "order",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "required": false,
                    "_key": "order"
                  },
                  {
                    "format": "integer",
                    "type": "integer",
                    "example": 1,
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/device-groups/{device-group-id}/devices/",
          "summary": "Get a page of devices.",
          "return_type": "paginated_response(device)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "device"
          },
          "x_filter": {
            "lifecycle_status": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "operator_suspended": [
              "eq",
              "neq"
            ],
            "last_operator_suspended_category": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "last_operator_suspended_updated_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "system_suspended": [
              "eq",
              "neq"
            ],
            "last_system_suspended_category": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "last_system_suspended_updated_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "account_id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "auto_update": [
              "eq",
              "neq"
            ],
            "bootstrap_expiration_date": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "bootstrapped_timestamp": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "ca_id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "connector_expiration_date": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "created_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "deployed_state": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "deployment": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "description": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "device_class": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "device_execution_mode": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "device_key": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "endpoint_name": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "endpoint_type": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "enrolment_list_timestamp": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "firmware_checksum": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "host_gateway": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "manifest": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "manifest_timestamp": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "mechanism": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "mechanism_url": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "name": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "net_id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "serial_number": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "state": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "updated_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "vendor_id": [
              "eq",
              "neq",
              "in",
              "nin"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "data",
            "has_more",
            "total_count",
            "lifecycle_status__eq",
            "lifecycle_status__neq",
            "lifecycle_status__in",
            "lifecycle_status__nin",
            "operator_suspended__eq",
            "operator_suspended__neq",
            "last_operator_suspended_category__eq",
            "last_operator_suspended_category__neq",
            "last_operator_suspended_category__in",
            "last_operator_suspended_category__nin",
            "last_operator_suspended_updated_at__in",
            "last_operator_suspended_updated_at__nin",
            "last_operator_suspended_updated_at__lte",
            "last_operator_suspended_updated_at__gte",
            "system_suspended__eq",
            "system_suspended__neq",
            "last_system_suspended_category__eq",
            "last_system_suspended_category__neq",
            "last_system_suspended_category__in",
            "last_system_suspended_category__nin",
            "last_system_suspended_updated_at__in",
            "last_system_suspended_updated_at__nin",
            "last_system_suspended_updated_at__lte",
            "last_system_suspended_updated_at__gte",
            "account_id__eq",
            "account_id__neq",
            "account_id__in",
            "account_id__nin",
            "auto_update__eq",
            "auto_update__neq",
            "bootstrap_expiration_date__in",
            "bootstrap_expiration_date__nin",
            "bootstrap_expiration_date__lte",
            "bootstrap_expiration_date__gte",
            "bootstrapped_timestamp__in",
            "bootstrapped_timestamp__nin",
            "bootstrapped_timestamp__lte",
            "bootstrapped_timestamp__gte",
            "ca_id__eq",
            "ca_id__neq",
            "ca_id__in",
            "ca_id__nin",
            "connector_expiration_date__in",
            "connector_expiration_date__nin",
            "connector_expiration_date__lte",
            "connector_expiration_date__gte",
            "created_at__in",
            "created_at__nin",
            "created_at__lte",
            "created_at__gte",
            "deployed_state__eq",
            "deployed_state__neq",
            "deployed_state__in",
            "deployed_state__nin",
            "deployment__eq",
            "deployment__neq",
            "deployment__in",
            "deployment__nin",
            "description__eq",
            "description__neq",
            "description__in",
            "description__nin",
            "device_class__eq",
            "device_class__neq",
            "device_class__in",
            "device_class__nin",
            "device_execution_mode__eq",
            "device_execution_mode__neq",
            "device_execution_mode__in",
            "device_execution_mode__nin",
            "device_key__eq",
            "device_key__neq",
            "device_key__in",
            "device_key__nin",
            "endpoint_name__eq",
            "endpoint_name__neq",
            "endpoint_name__in",
            "endpoint_name__nin",
            "endpoint_type__eq",
            "endpoint_type__neq",
            "endpoint_type__in",
            "endpoint_type__nin",
            "enrolment_list_timestamp__in",
            "enrolment_list_timestamp__nin",
            "enrolment_list_timestamp__lte",
            "enrolment_list_timestamp__gte",
            "firmware_checksum__eq",
            "firmware_checksum__neq",
            "firmware_checksum__in",
            "firmware_checksum__nin",
            "host_gateway__eq",
            "host_gateway__neq",
            "host_gateway__in",
            "host_gateway__nin",
            "id__eq",
            "id__neq",
            "id__in",
            "id__nin",
            "manifest__eq",
            "manifest__neq",
            "manifest__in",
            "manifest__nin",
            "manifest_timestamp__in",
            "manifest_timestamp__nin",
            "manifest_timestamp__lte",
            "manifest_timestamp__gte",
            "mechanism__eq",
            "mechanism__neq",
            "mechanism__in",
            "mechanism__nin",
            "mechanism_url__eq",
            "mechanism_url__neq",
            "mechanism_url__in",
            "mechanism_url__nin",
            "name__eq",
            "name__neq",
            "name__in",
            "name__nin",
            "net_id__eq",
            "net_id__neq",
            "net_id__in",
            "net_id__nin",
            "serial_number__eq",
            "serial_number__neq",
            "serial_number__in",
            "serial_number__nin",
            "state__eq",
            "state__neq",
            "state__in",
            "state__nin",
            "updated_at__in",
            "updated_at__nin",
            "updated_at__lte",
            "updated_at__gte",
            "vendor_id__eq",
            "vendor_id__neq",
            "vendor_id__in",
            "vendor_id__nin"
          ],
          "group_id": "Devices",
          "parameter_map": {
            "device-group-id": "id"
          },
          "operation_id": "Group_members_retrieve",
          "pagination": true,
          "foreign_key": {
            "group": "Devices",
            "entity": "device"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "devices"
        },
        {
          "description": "List all groups.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "The ID of the item after which to retrieve the next page.",
              "example": "01631667477600000000000100100374",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "in": "query",
              "name": "after",
              "external_param": true,
              "parameter_fieldname": "after",
              "required": false,
              "_key": "after"
            },
            {
              "description": "Comma-separated list of data fields to return. Currently supported: `total_count`.",
              "in": "query",
              "name": "include",
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "required": false,
              "_key": "include"
            },
            {
              "type": "integer",
              "description": "How many objects to retrieve in the page (2-1000). Limit values outside of this range are set to the closest limit.",
              "example": 50,
              "minimum": 2,
              "maximum": 1000,
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "in": "query",
              "name": "limit",
              "external_param": true,
              "parameter_fieldname": "limit",
              "required": false,
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order. Acceptable values: ASC, DESC. Default: ASC.",
              "example": "DESC",
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "in": "query",
              "name": "order",
              "external_param": true,
              "parameter_fieldname": "order",
              "required": false,
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Ok.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "An offset token for current page.",
                    "example": "01631667477600000000000100100374",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time the group was created.",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "_key": "created_at"
                        },
                        {
                          "type": "object",
                          "maxProperties": 10,
                          "additionalProperties": {
                            "type": "string",
                            "maxLength": 128,
                            "pattern": "^[A-Za-z].*"
                          },
                          "description": "Up to ten custom key-value attributes. Keys cannot begin with a number. Both key and value are limited to 128 characters. Updating this field replaces existing contents.",
                          "example": {
                            "key": "value"
                          },
                          "_key": "custom_attributes"
                        },
                        {
                          "type": "string",
                          "maxLength": 1024,
                          "description": "The description of the group.",
                          "example": "Devices on the factory floor.",
                          "_key": "description"
                        },
                        {
                          "type": "integer",
                          "description": "The number of devices in this group.",
                          "example": 10,
                          "_key": "devices_count"
                        },
                        {
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "description": "The group ID.",
                          "example": "015c3029f6f7000000000001001000c3",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "maxLength": 128,
                          "description": "Name of the group.",
                          "example": "My devices",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `device-group`.",
                          "example": "device-group",
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time this object was updated.",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "_key": "updated_at"
                        }
                      ],
                      "foreign_key": {
                        "group": "Devices",
                        "entity": "device_group"
                      }
                    },
                    "type": "array",
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "description": "More results are available.",
                    "example": false,
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "description": "How many objects to retrieve in the page (2-1000). Limit values outside of this range are set to the closest limit.",
                    "example": 50,
                    "minimum": 2,
                    "maximum": 1000,
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "The type of this API object is 'list'.",
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation time.",
                    "example": "DESC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "format": "integer",
                    "type": "integer",
                    "example": 1,
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device_group"
                }
              },
              "_key": "200"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not Found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/device-groups/",
          "summary": "List all groups.",
          "return_type": "paginated_response(device_group)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_group"
          },
          "x_filter": {
            "id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "devices_count": [
              "eq",
              "neq",
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "name": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "created_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "updated_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "data",
            "has_more",
            "total_count",
            "id__eq",
            "id__neq",
            "id__in",
            "id__nin",
            "devices_count__eq",
            "devices_count__neq",
            "devices_count__in",
            "devices_count__nin",
            "devices_count__lte",
            "devices_count__gte",
            "name__eq",
            "name__neq",
            "name__in",
            "name__nin",
            "created_at__in",
            "created_at__nin",
            "created_at__lte",
            "created_at__gte",
            "updated_at__in",
            "updated_at__nin",
            "updated_at__lte",
            "updated_at__gte"
          ],
          "foreign_key_priority": "self",
          "group_id": "Devices",
          "parameter_map": {
            "device-group-id": "id"
          },
          "operation_id": "Group_list",
          "pagination": true,
          "foreign_key": {
            "group": "Devices",
            "entity": "device_group"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Returns [DeviceGroup](https://www.pelion.com/docs/device-management-api/device-directory/) info what contains info of the group, for example, name and updated date. To list the devices in the group, use '/v3/device-groups/{device-group-id}/devices/'.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "The group ID.",
              "example": "015c3029f6f7000000000001001000c3",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "device-group-id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Ok.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the group was created.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "object",
                    "maxProperties": 10,
                    "additionalProperties": {
                      "type": "string",
                      "maxLength": 128,
                      "pattern": "^[A-Za-z].*"
                    },
                    "description": "Up to ten custom key-value attributes. Keys cannot begin with a number. Both key and value are limited to 128 characters. Updating this field replaces existing contents.",
                    "example": {
                      "key": "value"
                    },
                    "api_fieldname": "custom_attributes",
                    "entity_fieldname": "custom_attributes",
                    "_key": "custom_attributes"
                  },
                  {
                    "type": "string",
                    "maxLength": 1024,
                    "description": "The description of the group.",
                    "example": "Devices on the factory floor.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "integer",
                    "description": "The number of devices in this group.",
                    "example": 10,
                    "api_fieldname": "devices_count",
                    "entity_fieldname": "devices_count",
                    "_key": "devices_count"
                  },
                  {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "The group ID.",
                    "example": "015c3029f6f7000000000001001000c3",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "maxLength": 128,
                    "description": "Name of the group.",
                    "example": "My devices",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `device-group`.",
                    "example": "device-group",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time this object was updated.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device_group"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not Found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/device-groups/{device-group-id}/",
          "summary": "Get a group.",
          "return_type": "device_group",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "name",
            "description",
            "custom_attributes",
            "devices_count",
            "created_at",
            "updated_at"
          ],
          "group_id": "Devices",
          "parameter_map": {
            "device-group-id": "id"
          },
          "operation_id": "Group_retrieve",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Remove one device from a group.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "00000000000000000000000000000000",
              "name": "device_id",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "device_id",
              "api_fieldname": "device_id",
              "external_param": true,
              "parameter_fieldname": "device_id",
              "required": false,
              "_key": "device_id"
            },
            {
              "in": "path",
              "description": "The ID of the group.",
              "name": "device-group-id",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "device-group-id",
              "external_param": false,
              "parameter_fieldname": "device-group-id",
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "remove_device",
          "responses": [
            {
              "description": "Success - device removed.",
              "_key": "204"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/device-groups/{device-group-id}/devices/remove/",
          "summary": "Remove a device from a group.",
          "return_type": "void",
          "return_info": {
            "self": false,
            "custom": true,
            "type": "void"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Devices",
          "parameter_map": {
            "device-group-id": "id"
          },
          "operation_id": "Group_members_remove",
          "spec": {
            "return_type": "void"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "remove_device"
        },
        {
          "description": "Modify the attributes of a group, such as the description.",
          "field_renames": [],
          "fields": [
            {
              "type": "object",
              "maxProperties": 10,
              "additionalProperties": {
                "type": "string",
                "maxLength": 128,
                "pattern": "^[A-Za-z].*"
              },
              "description": "Up to ten custom key-value attributes. Keys cannot begin with a number. Both key and value are limited to 128 characters. Updating this field replaces existing contents.",
              "example": {
                "key": "value"
              },
              "api_fieldname": "custom_attributes",
              "entity_fieldname": "custom_attributes",
              "name": "custom_attributes",
              "in": "body",
              "schema_param": true,
              "parameter_fieldname": "custom_attributes",
              "required": false,
              "_key": "custom_attributes"
            },
            {
              "type": "string",
              "maxLength": 1024,
              "description": "The description of the group.",
              "example": "Devices on the factory floor.",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "name": "description",
              "in": "body",
              "schema_param": true,
              "parameter_fieldname": "description",
              "required": false,
              "_key": "description"
            },
            {
              "type": "string",
              "description": "The group ID.",
              "example": "015c3029f6f7000000000001001000c3",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "device-group-id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "string",
              "maxLength": 128,
              "description": "Name of the group.",
              "example": "My devices",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "name": "name",
              "in": "body",
              "schema_param": true,
              "parameter_fieldname": "name",
              "required": false,
              "_key": "name"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Ok.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the group was created.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "object",
                    "maxProperties": 10,
                    "additionalProperties": {
                      "type": "string",
                      "maxLength": 128,
                      "pattern": "^[A-Za-z].*"
                    },
                    "description": "Up to ten custom key-value attributes. Keys cannot begin with a number. Both key and value are limited to 128 characters. Updating this field replaces existing contents.",
                    "example": {
                      "key": "value"
                    },
                    "api_fieldname": "custom_attributes",
                    "entity_fieldname": "custom_attributes",
                    "_key": "custom_attributes"
                  },
                  {
                    "type": "string",
                    "maxLength": 1024,
                    "description": "The description of the group.",
                    "example": "Devices on the factory floor.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "integer",
                    "description": "The number of devices in this group.",
                    "example": 10,
                    "api_fieldname": "devices_count",
                    "entity_fieldname": "devices_count",
                    "_key": "devices_count"
                  },
                  {
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "The group ID.",
                    "example": "015c3029f6f7000000000001001000c3",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "maxLength": 128,
                    "description": "Name of the group.",
                    "example": "My devices",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `device-group`.",
                    "example": "device-group",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time this object was updated.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Devices",
                  "entity": "device_group"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Unauthorized.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Not Found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/device-groups/{device-group-id}/",
          "summary": "Modify the attributes of a group.",
          "return_type": "device_group",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "device_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "devices_count",
            "created_at",
            "updated_at"
          ],
          "group_id": "Devices",
          "parameter_map": {
            "device-group-id": "id"
          },
          "operation_id": "Group_update",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "type": "string",
          "format": "date-time",
          "description": "The time the group was created.",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "object",
          "maxProperties": 10,
          "additionalProperties": {
            "type": "string",
            "maxLength": 128,
            "pattern": "^[A-Za-z].*"
          },
          "description": "Up to ten custom key-value attributes. Keys cannot begin with a number. Both key and value are limited to 128 characters. Updating this field replaces existing contents.",
          "example": {
            "key": "value"
          },
          "api_fieldname": "custom_attributes",
          "readOnly": false,
          "required": false,
          "_key": "custom_attributes"
        },
        {
          "type": "string",
          "maxLength": 1024,
          "description": "The description of the group.",
          "example": "Devices on the factory floor.",
          "api_fieldname": "description",
          "readOnly": false,
          "required": false,
          "_key": "description"
        },
        {
          "type": "integer",
          "description": "The number of devices in this group.",
          "example": 10,
          "api_fieldname": "devices_count",
          "readOnly": true,
          "required": false,
          "_key": "devices_count"
        },
        {
          "type": "string",
          "description": "The group ID.",
          "example": "015c3029f6f7000000000001001000c3",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "string",
          "maxLength": 128,
          "description": "Name of the group.",
          "example": "My devices",
          "api_fieldname": "name",
          "readOnly": false,
          "required": false,
          "_key": "name"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "The time this object was updated.",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "Device directory - groups"
      ],
      "group_id": "Devices",
      "_key": "device_group"
    },
    {
      "swagger_models": [
        "FirmwareImage",
        "FirmwareImagePage"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Create a firmware image.\n<BR/> **Note:** Only use this API for images smaller than 100 MB. For larger images, [upload in chunks](https://www.pelion.com/docs/device-management/current/updating-firmware/uploading-a-large-firmware-image.html).\n<br>\n**Usage example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/firmware-images \\\n-H 'Authorization: Bearer <api_key>' \\\n-H 'Content-Type: multipart/form-data' \\\n-F 'datafile=@myimage.bin;type=application/octet-stream'\n-F 'description=bla bla' \\\n-F 'name=My Linux Image'\n```\n",
          "field_renames": [
            {
              "api_fieldname": "datafile",
              "_key": "datafile_url"
            }
          ],
          "fields": [
            {
              "description": "The description of the object.",
              "type": "string",
              "format": "free text",
              "maxLength": 2000,
              "example": "a description",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "stream",
              "required": false,
              "_key": "description"
            },
            {
              "description": "The firmware image file to upload. File name must not exceed 166 characters.",
              "in": "stream",
              "name": "datafile",
              "required": true,
              "type": "file",
              "maxLength": 166,
              "entity_fieldname": "firmware_image_file",
              "api_fieldname": "datafile",
              "external_param": true,
              "parameter_fieldname": "datafile",
              "_key": "firmware_image_file"
            },
            {
              "description": "The firmware image name.",
              "type": "string",
              "format": "free text",
              "maxLength": 128,
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "stream",
              "required": false,
              "_key": "name"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "Firmware image created. The API gateway enforces the account-specific file size.",
              "schema": [
                {
                  "group": "Device_Update",
                  "entity": "firmware_image",
                  "_key": "foreign_key"
                },
                {
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was created.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at"
                  },
                  "etag": {
                    "type": "string",
                    "description": "API resource entity version.",
                    "example": "2017-05-22T12:37:58.753425Z",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was updated.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at"
                  },
                  "object": {
                    "description": "Entity name: always 'firmware-image'.",
                    "type": "string",
                    "example": "firmware-image",
                    "api_fieldname": "object",
                    "entity_fieldname": "object"
                  },
                  "datafile": {
                    "description": "The firmware image file URL.",
                    "type": "string",
                    "example": "http://bucket.com/myimage.elf",
                    "api_fieldname": "datafile",
                    "entity_fieldname": "datafile_url"
                  },
                  "datafile_checksum": {
                    "description": "The checksum (sha256) generated for the datafile.",
                    "type": "string",
                    "example": "e979fe432d6a19b0e70a93b33ac29094cd5fe35a8fd5fbedfd383d8d107d6a7e",
                    "api_fieldname": "datafile_checksum",
                    "entity_fieldname": "datafile_checksum"
                  },
                  "datafile_size": {
                    "description": "The size of the datafile in bytes.",
                    "format": "int64",
                    "type": "integer",
                    "api_fieldname": "datafile_size",
                    "entity_fieldname": "datafile_size"
                  },
                  "description": {
                    "description": "The description of the object.",
                    "type": "string",
                    "format": "free text",
                    "maxLength": 2000,
                    "example": "a description",
                    "api_fieldname": "description",
                    "entity_fieldname": "description"
                  },
                  "id": {
                    "description": "The firmware image ID.",
                    "type": "string",
                    "pattern": "[A-Fa-f0-9]{32}",
                    "example": "016e652be671000000000001001001e5",
                    "api_fieldname": "id",
                    "entity_fieldname": "id"
                  },
                  "name": {
                    "description": "The firmware image name.",
                    "type": "string",
                    "format": "free text",
                    "maxLength": 128,
                    "api_fieldname": "name",
                    "entity_fieldname": "name"
                  },
                  "_key": "properties"
                }
              ],
              "_key": "201"
            },
            {
              "description": "Cannot validate the data used to create the firmware image.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Firmware image too large.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "413"
            }
          ],
          "path": "/v3/firmware-images",
          "summary": "Create an image",
          "return_type": "firmware_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "firmware_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "datafile_checksum",
            "datafile_size",
            "id",
            "datafile_url"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "image_id": "id",
            "datafile": "firmware_image_file"
          },
          "operation_id": "Firmware_Image_create",
          "notes": "This is not a standard create method as it uploads a file which creates an entity which contains URIs to the uploaded file.",
          "unaggregated": true,
          "pagination": false,
          "request_content_type": "multipart/form-data",
          "request_body": "file",
          "_key": "create"
        },
        {
          "description": "Delete a firmware image.\n<br>\n**Usage example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/firmware-images/11234567f9012ab56790120000789012 \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [
            {
              "api_fieldname": "datafile",
              "_key": "datafile_url"
            }
          ],
          "fields": [
            {
              "description": "The firmware image ID.",
              "in": "path",
              "name": "image_id",
              "required": true,
              "type": "string",
              "pattern": "[A-Fa-f0-9]{32}",
              "entity_fieldname": "id",
              "api_fieldname": "image_id",
              "external_param": false,
              "parameter_fieldname": "image_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Firmware image deleted.",
              "_key": "204"
            },
            {
              "description": "Bad Request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Firmware image not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/firmware-images/{image_id}",
          "summary": "Delete an image",
          "return_type": "firmware_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "firmware_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "image_id": "id"
          },
          "operation_id": "Firmware_Image_destroy",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "List all firmware images.\n<br>\n**Usage example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/firmware-images \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [
            {
              "api_fieldname": "datafile",
              "_key": "datafile_url"
            }
          ],
          "fields": [
            {
              "type": "string",
              "example": null,
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "description": "The ID of the item after which to retrieve the next page.",
              "in": "query",
              "name": "after",
              "external_param": true,
              "parameter_fieldname": "after",
              "required": false,
              "_key": "after"
            },
            {
              "description": "A comma-separated list of data fields to return. Currently supported: total_count.",
              "in": "query",
              "name": "include",
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "required": false,
              "_key": "include"
            },
            {
              "format": "int32",
              "type": "integer",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "description": "How many objects to retrieve in the page. The minimum limit is 2 and the maximum is 1000. Limit values outside of this range are set to the closest limit.",
              "in": "query",
              "name": "limit",
              "minimum": 2,
              "maximum": 1000,
              "external_param": true,
              "parameter_fieldname": "limit",
              "required": false,
              "_key": "limit"
            },
            {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "description": "ASC or DESC.",
              "example": "ASC",
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "in": "query",
              "name": "order",
              "external_param": true,
              "parameter_fieldname": "order",
              "required": false,
              "enum_reference": "firmware_image_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Request successful.",
              "schema": {
                "properties": [
                  {
                    "type": "string",
                    "example": null,
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "group": "Device_Update",
                        "entity": "firmware_image",
                        "_key": "foreign_key"
                      },
                      {
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time the entity was created.",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "api_fieldname": "created_at",
                          "entity_fieldname": "created_at"
                        },
                        "etag": {
                          "type": "string",
                          "description": "API resource entity version.",
                          "example": "2017-05-22T12:37:58.753425Z",
                          "api_fieldname": "etag",
                          "entity_fieldname": "etag"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time the entity was updated.",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "api_fieldname": "updated_at",
                          "entity_fieldname": "updated_at"
                        },
                        "object": {
                          "description": "Entity name: always 'firmware-image'.",
                          "type": "string",
                          "example": "firmware-image"
                        },
                        "datafile": {
                          "description": "The firmware image file URL.",
                          "type": "string",
                          "example": "http://bucket.com/myimage.elf"
                        },
                        "datafile_checksum": {
                          "description": "The checksum (sha256) generated for the datafile.",
                          "type": "string",
                          "example": "e979fe432d6a19b0e70a93b33ac29094cd5fe35a8fd5fbedfd383d8d107d6a7e"
                        },
                        "datafile_size": {
                          "description": "The size of the datafile in bytes.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "description": {
                          "description": "The description of the object.",
                          "type": "string",
                          "format": "free text",
                          "maxLength": 2000,
                          "example": "a description"
                        },
                        "id": {
                          "description": "The firmware image ID.",
                          "type": "string",
                          "pattern": "[A-Fa-f0-9]{32}",
                          "example": "016e652be671000000000001001001e5"
                        },
                        "name": {
                          "description": "The firmware image name.",
                          "type": "string",
                          "format": "free text",
                          "maxLength": 128
                        },
                        "_key": "properties"
                      }
                    ],
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "format": "int32",
                    "type": "integer",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "description": "Entity name: always 'list'.",
                    "type": "string",
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "description": "The order of the records based on creation time, `ASC` or `DESC`; by default `ASC`.",
                    "example": "ASC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "format": "int32",
                    "type": "integer",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Device_Update",
                  "entity": "firmware_image"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad Request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Unable to find content.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/firmware-images",
          "summary": "List all images",
          "return_type": "paginated_response(firmware_image)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "firmware_image"
          },
          "x_filter": {
            "created_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "datafile_url": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "datafile_checksum": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "datafile_size": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "description": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "name": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "updated_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "data",
            "has_more",
            "total_count",
            "created_at__in",
            "created_at__nin",
            "created_at__lte",
            "created_at__gte",
            "datafile__eq",
            "datafile__neq",
            "datafile__in",
            "datafile__nin",
            "datafile_checksum__eq",
            "datafile_checksum__neq",
            "datafile_checksum__in",
            "datafile_checksum__nin",
            "datafile_size__eq",
            "datafile_size__neq",
            "datafile_size__in",
            "datafile_size__nin",
            "description__eq",
            "description__neq",
            "description__in",
            "description__nin",
            "id__eq",
            "id__neq",
            "id__in",
            "id__nin",
            "name__eq",
            "name__neq",
            "name__in",
            "name__nin",
            "updated_at__in",
            "updated_at__nin",
            "updated_at__lte",
            "updated_at__gte"
          ],
          "foreign_key_priority": "self",
          "group_id": "Device_Update",
          "parameter_map": {
            "image_id": "id"
          },
          "operation_id": "Firmware_Image_list",
          "pagination": true,
          "foreign_key": {
            "group": "Device_Update",
            "entity": "firmware_image"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve a firmware image.\n<br>\n**Usage example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/firmware-images/1123456f9012ab567890120000789012 \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [
            {
              "api_fieldname": "datafile",
              "_key": "datafile_url"
            }
          ],
          "fields": [
            {
              "description": "The firmware image ID.",
              "type": "string",
              "pattern": "[A-Fa-f0-9]{32}",
              "example": "016e652be671000000000001001001e5",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "image_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Retrieved result successfully.",
              "schema": [
                {
                  "group": "Device_Update",
                  "entity": "firmware_image",
                  "_key": "foreign_key"
                },
                {
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was created.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at"
                  },
                  "etag": {
                    "type": "string",
                    "description": "API resource entity version.",
                    "example": "2017-05-22T12:37:58.753425Z",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was updated.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at"
                  },
                  "object": {
                    "description": "Entity name: always 'firmware-image'.",
                    "type": "string",
                    "example": "firmware-image",
                    "api_fieldname": "object",
                    "entity_fieldname": "object"
                  },
                  "datafile": {
                    "description": "The firmware image file URL.",
                    "type": "string",
                    "example": "http://bucket.com/myimage.elf",
                    "api_fieldname": "datafile",
                    "entity_fieldname": "datafile_url"
                  },
                  "datafile_checksum": {
                    "description": "The checksum (sha256) generated for the datafile.",
                    "type": "string",
                    "example": "e979fe432d6a19b0e70a93b33ac29094cd5fe35a8fd5fbedfd383d8d107d6a7e",
                    "api_fieldname": "datafile_checksum",
                    "entity_fieldname": "datafile_checksum"
                  },
                  "datafile_size": {
                    "description": "The size of the datafile in bytes.",
                    "format": "int64",
                    "type": "integer",
                    "api_fieldname": "datafile_size",
                    "entity_fieldname": "datafile_size"
                  },
                  "description": {
                    "description": "The description of the object.",
                    "type": "string",
                    "format": "free text",
                    "maxLength": 2000,
                    "example": "a description",
                    "api_fieldname": "description",
                    "entity_fieldname": "description"
                  },
                  "id": {
                    "description": "The firmware image ID.",
                    "type": "string",
                    "pattern": "[A-Fa-f0-9]{32}",
                    "example": "016e652be671000000000001001001e5",
                    "api_fieldname": "id",
                    "entity_fieldname": "id"
                  },
                  "name": {
                    "description": "The firmware image name.",
                    "type": "string",
                    "format": "free text",
                    "maxLength": 128,
                    "api_fieldname": "name",
                    "entity_fieldname": "name"
                  },
                  "_key": "properties"
                }
              ],
              "_key": "200"
            },
            {
              "description": "Bad Request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Firmware image can't be found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/firmware-images/{image_id}",
          "summary": "Get an image.",
          "return_type": "firmware_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "firmware_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "datafile_checksum",
            "datafile_size",
            "description",
            "name",
            "datafile_url"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "image_id": "id"
          },
          "operation_id": "Firmware_Image_retrieve",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "string",
          "format": "date-time",
          "description": "The time the entity was created.",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "description": "The checksum (sha256) generated for the datafile.",
          "type": "string",
          "example": "e979fe432d6a19b0e70a93b33ac29094cd5fe35a8fd5fbedfd383d8d107d6a7e",
          "api_fieldname": "datafile_checksum",
          "readOnly": true,
          "required": false,
          "_key": "datafile_checksum"
        },
        {
          "description": "The size of the datafile in bytes.",
          "format": "int64",
          "type": "integer",
          "api_fieldname": "datafile_size",
          "readOnly": true,
          "required": false,
          "_key": "datafile_size"
        },
        {
          "description": "The firmware image file URL.",
          "type": "string",
          "example": "http://bucket.com/myimage.elf",
          "api_fieldname": "datafile",
          "readOnly": true,
          "required": false,
          "_key": "datafile_url"
        },
        {
          "description": "The description of the object.",
          "type": "string",
          "format": "free text",
          "maxLength": 2000,
          "example": "a description",
          "api_fieldname": "description",
          "readOnly": false,
          "required": false,
          "_key": "description"
        },
        {
          "description": "The firmware image ID.",
          "type": "string",
          "pattern": "[A-Fa-f0-9]{32}",
          "example": "016e652be671000000000001001001e5",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "description": "The firmware image name.",
          "type": "string",
          "format": "free text",
          "maxLength": 128,
          "api_fieldname": "name",
          "readOnly": false,
          "required": false,
          "_key": "name"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "The time the entity was updated.",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [
        {
          "api_fieldname": "datafile",
          "_key": "datafile_url"
        }
      ],
      "tags": [
        "Device update - firmware images"
      ],
      "group_id": "Device_Update",
      "_key": "firmware_image"
    },
    {
      "swagger_models": [
        "FirmwareManifest",
        "FirmwareManifestPage"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Upload a firmware manifest. The API enforces a maximum manifest size of 2KB.\n<br>\n**Usage example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/firmware-manifests \\\n-H 'Authorization: Bearer <api_key>' \\\n-H 'Content-Type: multipart/form-data' \\\n-F 'datafile=@myimage.bin;type=application/octet-stream' \\\n-F 'description=bla bla' \\\n-F 'key_table=@myKeyTable.proto;type=' \\\n-F 'name=My Manifest'\n```\n",
          "field_renames": [
            {
              "api_fieldname": "datafile",
              "_key": "datafile_url"
            },
            {
              "api_fieldname": "key_table",
              "_key": "key_table_url"
            }
          ],
          "fields": [
            {
              "description": "The description of the firmware manifest.",
              "type": "string",
              "format": "free text",
              "maxLength": 2000,
              "example": "",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "stream",
              "required": false,
              "_key": "description"
            },
            {
              "description": "The manifest file to create. The API gateway enforces the account-specific file size. File name must not exceed 100 characters.",
              "in": "stream",
              "name": "datafile",
              "required": true,
              "type": "file",
              "entity_fieldname": "firmware_manifest_file",
              "api_fieldname": "datafile",
              "external_param": true,
              "parameter_fieldname": "datafile",
              "_key": "firmware_manifest_file"
            },
            {
              "description": "The key table of pre-shared keys for devices. The table is generated by the manifest tool. File name must not exceed 100 characters.",
              "in": "stream",
              "name": "key_table",
              "required": false,
              "type": "file",
              "entity_fieldname": "key_table_file",
              "api_fieldname": "key_table",
              "external_param": true,
              "parameter_fieldname": "key_table",
              "_key": "key_table_file"
            },
            {
              "description": "The name of the manifest.",
              "type": "string",
              "format": "free text",
              "maxLength": 128,
              "example": "manifest_name",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "stream",
              "required": true,
              "_key": "name"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "Created.",
              "schema": [
                {
                  "group": "Device_Update",
                  "entity": "firmware_manifest",
                  "_key": "foreign_key"
                },
                {
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was created.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at"
                  },
                  "etag": {
                    "type": "string",
                    "description": "API resource entity version.",
                    "example": "2017-05-22T12:37:58.753425Z",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was updated.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at"
                  },
                  "object": {
                    "description": "Entity name: always 'firmware-manifest'.",
                    "type": "string",
                    "example": "firmware-manifest",
                    "api_fieldname": "object",
                    "entity_fieldname": "object"
                  },
                  "manifest_schema_version": {
                    "description": "Version of the manifest schema (1 or 3).",
                    "type": "string",
                    "enum": [
                      "1",
                      "3"
                    ],
                    "api_fieldname": "manifest_schema_version",
                    "entity_fieldname": "manifest_schema_version"
                  },
                  "datafile": {
                    "description": "The URL of the ASN.1 DER-encoded firmware manifest binary.",
                    "type": "string",
                    "format": "uri",
                    "example": "http://bucket.com/mymanifest.manifest",
                    "api_fieldname": "datafile",
                    "entity_fieldname": "datafile_url"
                  },
                  "datafile_size": {
                    "description": "The size of the firmware manifest in bytes.",
                    "type": "integer",
                    "format": "int64",
                    "api_fieldname": "datafile_size",
                    "entity_fieldname": "datafile_size"
                  },
                  "delivered_payload_url": {
                    "description": "The URL of the payload to deliver to the device.",
                    "type": "string",
                    "format": "uri",
                    "example": "http://bucket.com/myimage.elf",
                    "api_fieldname": "delivered_payload_url",
                    "entity_fieldname": "delivered_payload_url"
                  },
                  "delivered_payload_size": {
                    "description": "The size in bytes of the payload to deliver to the device.",
                    "type": "integer",
                    "format": "int64",
                    "api_fieldname": "delivered_payload_size",
                    "entity_fieldname": "delivered_payload_size"
                  },
                  "delivered_payload_digest": {
                    "description": "Digest (SHA256, hex-encoded) of the payload to deliver to the device.",
                    "type": "string",
                    "format": "hex",
                    "example": "c520fc771c0482ad39e983d27cf725a7c724fe58c616129a34a420d1941068bc",
                    "api_fieldname": "delivered_payload_digest",
                    "entity_fieldname": "delivered_payload_digest"
                  },
                  "delivered_payload_type": {
                    "description": "Type of the payload to deliver to the device (full or delta image).",
                    "type": "string",
                    "enum": [
                      "full",
                      "delta"
                    ],
                    "api_fieldname": "delivered_payload_type",
                    "entity_fieldname": "delivered_payload_type"
                  },
                  "precursor_payload_digest": {
                    "description": "Digest (SHA256, hex-encoded) of the currently installed payload.",
                    "type": "string",
                    "example": "54d640fcd687c9b13420b9be66a265494899002aad1b7370cfb3dbfd7fbec42f",
                    "api_fieldname": "precursor_payload_digest",
                    "entity_fieldname": "precursor_payload_digest"
                  },
                  "description": {
                    "description": "The description of the firmware manifest.",
                    "type": "string",
                    "format": "free text",
                    "maxLength": 2000,
                    "example": "",
                    "api_fieldname": "description",
                    "entity_fieldname": "description"
                  },
                  "device_class": {
                    "description": "The device class ID.",
                    "type": "string",
                    "format": "uuid",
                    "example": "42c4d8de-704d-546e-b9d3-1ce1eb316167",
                    "api_fieldname": "device_class",
                    "entity_fieldname": "device_class"
                  },
                  "device_vendor": {
                    "description": "The device vendor ID.",
                    "type": "string",
                    "format": "uuid",
                    "example": "5d645eae-c231-5a89-9764-2e655cd94fa8",
                    "api_fieldname": "device_vendor",
                    "entity_fieldname": "device_vendor"
                  },
                  "update_priority": {
                    "description": "Update priority, passed to the application callback when an update is performed. Allows the application to make application-specific decisions.",
                    "type": "integer",
                    "format": "int64",
                    "api_fieldname": "update_priority",
                    "entity_fieldname": "update_priority"
                  },
                  "key_table": {
                    "description": "The key table of pre-shared keys for devices.",
                    "type": "string",
                    "format": "uri",
                    "example": "http://example.com/key-table",
                    "api_fieldname": "key_table",
                    "entity_fieldname": "key_table_url"
                  },
                  "id": {
                    "description": "The firmware manifest ID.",
                    "type": "string",
                    "pattern": "[A-Fa-f0-9]{32}",
                    "example": "12345678901234567890123456789012",
                    "api_fieldname": "id",
                    "entity_fieldname": "id"
                  },
                  "name": {
                    "description": "The name of the manifest.",
                    "type": "string",
                    "format": "free text",
                    "maxLength": 128,
                    "example": "manifest_name",
                    "api_fieldname": "name",
                    "entity_fieldname": "name"
                  },
                  "timestamp": {
                    "description": "The firmware manifest version as a timestamp.",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "api_fieldname": "timestamp",
                    "entity_fieldname": "timestamp"
                  },
                  "parsed_raw_manifest": {
                    "description": "Raw manifest in JSON format, parsed from ASN.1 DER encoding.\nFields may change. Backwards compatibility is not guaranteed.\nRecommended for debugging only.\n",
                    "type": "object",
                    "api_fieldname": "parsed_raw_manifest",
                    "entity_fieldname": "parsed_raw_manifest"
                  },
                  "_key": "properties"
                }
              ],
              "_key": "201"
            },
            {
              "description": "Validation error. The data used to create the firmware manifest did not validate and/or the manifest uploaded exceeded 2 KB in size.\n",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/firmware-manifests/",
          "summary": "Upload a manifest",
          "return_type": "firmware_manifest",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "firmware_manifest"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "manifest_schema_version",
            "datafile_size",
            "delivered_payload_url",
            "delivered_payload_size",
            "delivered_payload_digest",
            "delivered_payload_type",
            "precursor_payload_digest",
            "device_class",
            "device_vendor",
            "update_priority",
            "id",
            "timestamp",
            "parsed_raw_manifest",
            "datafile_url",
            "key_table_url"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "manifest_id": "id",
            "datafile": "firmware_manifest_file",
            "key_table": "key_table_file"
          },
          "operation_id": "Firmware_Manifest_create",
          "notes": "This is not a standard create method as it uploads a file (or files) which creates an entity which contains URIs to the uploaded file(s).",
          "unaggregated": true,
          "pagination": false,
          "request_content_type": "multipart/form-data",
          "request_body": "file",
          "_key": "create"
        },
        {
          "description": "Delete a firmware manifest.\n<br>\n**Usage example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/firmware-manifests/11234567f9012ab56780120000789012 \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [
            {
              "api_fieldname": "datafile",
              "_key": "datafile_url"
            },
            {
              "api_fieldname": "key_table",
              "_key": "key_table_url"
            }
          ],
          "fields": [
            {
              "description": "The firmware manifest ID.",
              "in": "path",
              "name": "manifest_id",
              "required": true,
              "type": "string",
              "pattern": "[A-Fa-f0-9]{32}",
              "entity_fieldname": "id",
              "api_fieldname": "manifest_id",
              "external_param": false,
              "parameter_fieldname": "manifest_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Firmware manifest deleted.",
              "_key": "204"
            },
            {
              "description": "Bad Request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Firmware manifest not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/firmware-manifests/{manifest_id}",
          "summary": "Delete a manifest",
          "return_type": "firmware_manifest",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "firmware_manifest"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "manifest_id": "id"
          },
          "operation_id": "Firmware_Manifest_destroy",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "List all firmware manifests.\n<br>\n**Usage example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/firmware-manifests \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [
            {
              "api_fieldname": "datafile",
              "_key": "datafile_url"
            },
            {
              "api_fieldname": "key_table",
              "_key": "key_table_url"
            }
          ],
          "fields": [
            {
              "type": "string",
              "example": null,
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "description": "The ID of the item after which to retrieve the next page.",
              "in": "query",
              "name": "after",
              "external_param": true,
              "parameter_fieldname": "after",
              "required": false,
              "_key": "after"
            },
            {
              "description": "A comma-separated list of data fields to return. Currently supported: total_count.",
              "in": "query",
              "name": "include",
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "required": false,
              "_key": "include"
            },
            {
              "format": "int32",
              "type": "integer",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "description": "How many objects to retrieve in the page. The minimum limit is 2 and the maximum is 1000. Limit values outside of this range are set to the closest limit.",
              "in": "query",
              "name": "limit",
              "minimum": 2,
              "maximum": 1000,
              "external_param": true,
              "parameter_fieldname": "limit",
              "required": false,
              "_key": "limit"
            },
            {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "description": "ASC or DESC.",
              "example": "ASC",
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "in": "query",
              "name": "order",
              "external_param": true,
              "parameter_fieldname": "order",
              "required": false,
              "enum_reference": "firmware_manifest_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Request successful.",
              "schema": {
                "properties": [
                  {
                    "type": "string",
                    "example": null,
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "group": "Device_Update",
                        "entity": "firmware_manifest",
                        "_key": "foreign_key"
                      },
                      {
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time the entity was created.",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "api_fieldname": "created_at",
                          "entity_fieldname": "created_at"
                        },
                        "etag": {
                          "type": "string",
                          "description": "API resource entity version.",
                          "example": "2017-05-22T12:37:58.753425Z",
                          "api_fieldname": "etag",
                          "entity_fieldname": "etag"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time the entity was updated.",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "api_fieldname": "updated_at",
                          "entity_fieldname": "updated_at"
                        },
                        "object": {
                          "description": "Entity name: always 'firmware-manifest'.",
                          "type": "string",
                          "example": "firmware-manifest"
                        },
                        "manifest_schema_version": {
                          "description": "Version of the manifest schema (1 or 3).",
                          "type": "string",
                          "enum": [
                            "1",
                            "3"
                          ]
                        },
                        "datafile": {
                          "description": "The URL of the ASN.1 DER-encoded firmware manifest binary.",
                          "type": "string",
                          "format": "uri",
                          "example": "http://bucket.com/mymanifest.manifest"
                        },
                        "datafile_size": {
                          "description": "The size of the firmware manifest in bytes.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "delivered_payload_url": {
                          "description": "The URL of the payload to deliver to the device.",
                          "type": "string",
                          "format": "uri",
                          "example": "http://bucket.com/myimage.elf"
                        },
                        "delivered_payload_size": {
                          "description": "The size in bytes of the payload to deliver to the device.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "delivered_payload_digest": {
                          "description": "Digest (SHA256, hex-encoded) of the payload to deliver to the device.",
                          "type": "string",
                          "format": "hex",
                          "example": "c520fc771c0482ad39e983d27cf725a7c724fe58c616129a34a420d1941068bc"
                        },
                        "delivered_payload_type": {
                          "description": "Type of the payload to deliver to the device (full or delta image).",
                          "type": "string",
                          "enum": [
                            "full",
                            "delta"
                          ]
                        },
                        "precursor_payload_digest": {
                          "description": "Digest (SHA256, hex-encoded) of the currently installed payload.",
                          "type": "string",
                          "example": "54d640fcd687c9b13420b9be66a265494899002aad1b7370cfb3dbfd7fbec42f"
                        },
                        "description": {
                          "description": "The description of the firmware manifest.",
                          "type": "string",
                          "format": "free text",
                          "maxLength": 2000,
                          "example": ""
                        },
                        "device_class": {
                          "description": "The device class ID.",
                          "type": "string",
                          "format": "uuid",
                          "example": "42c4d8de-704d-546e-b9d3-1ce1eb316167"
                        },
                        "device_vendor": {
                          "description": "The device vendor ID.",
                          "type": "string",
                          "format": "uuid",
                          "example": "5d645eae-c231-5a89-9764-2e655cd94fa8"
                        },
                        "update_priority": {
                          "description": "Update priority, passed to the application callback when an update is performed. Allows the application to make application-specific decisions.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "key_table": {
                          "description": "The key table of pre-shared keys for devices.",
                          "type": "string",
                          "format": "uri",
                          "example": "http://example.com/key-table"
                        },
                        "id": {
                          "description": "The firmware manifest ID.",
                          "type": "string",
                          "pattern": "[A-Fa-f0-9]{32}",
                          "example": "12345678901234567890123456789012"
                        },
                        "name": {
                          "description": "The name of the manifest.",
                          "type": "string",
                          "format": "free text",
                          "maxLength": 128,
                          "example": "manifest_name"
                        },
                        "timestamp": {
                          "description": "The firmware manifest version as a timestamp.",
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "type": "string"
                        },
                        "parsed_raw_manifest": {
                          "description": "Raw manifest in JSON format, parsed from ASN.1 DER encoding.\nFields may change. Backwards compatibility is not guaranteed.\nRecommended for debugging only.\n",
                          "type": "object"
                        },
                        "_key": "properties"
                      }
                    ],
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "format": "int32",
                    "type": "integer",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "description": "Entity name: always 'list'.",
                    "type": "string",
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "description": "The order of the records to return. Acceptable values: ASC, DESC. Default: ASC.",
                    "example": "ASC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "format": "int32",
                    "type": "integer",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Device_Update",
                  "entity": "firmware_manifest"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad Request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Unable to find content.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/firmware-manifests/",
          "summary": "List all firmware manifests.",
          "return_type": "paginated_response(firmware_manifest)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "firmware_manifest"
          },
          "x_filter": {
            "created_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "datafile_url": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "datafile_size": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "description": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "device_class": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "name": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "timestamp": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "updated_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "data",
            "has_more",
            "total_count",
            "created_at__in",
            "created_at__nin",
            "created_at__lte",
            "created_at__gte",
            "datafile__eq",
            "datafile__neq",
            "datafile__in",
            "datafile__nin",
            "datafile_size__eq",
            "datafile_size__neq",
            "datafile_size__in",
            "datafile_size__nin",
            "description__eq",
            "description__neq",
            "description__in",
            "description__nin",
            "device_class__eq",
            "device_class__neq",
            "device_class__in",
            "device_class__nin",
            "id__eq",
            "id__neq",
            "id__in",
            "id__nin",
            "name__eq",
            "name__neq",
            "name__in",
            "name__nin",
            "timestamp__in",
            "timestamp__nin",
            "timestamp__lte",
            "timestamp__gte",
            "updated_at__in",
            "updated_at__nin",
            "updated_at__lte",
            "updated_at__gte"
          ],
          "foreign_key_priority": "self",
          "group_id": "Device_Update",
          "parameter_map": {
            "manifest_id": "id"
          },
          "operation_id": "Firmware_Manifest_list",
          "pagination": true,
          "foreign_key": {
            "group": "Device_Update",
            "entity": "firmware_manifest"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve a firmware manifest.\n<br>\n**Usage example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/firmware-manifests/1123467f9012ab567890120000789012 \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [
            {
              "api_fieldname": "datafile",
              "_key": "datafile_url"
            },
            {
              "api_fieldname": "key_table",
              "_key": "key_table_url"
            }
          ],
          "fields": [
            {
              "description": "The firmware manifest ID.",
              "type": "string",
              "pattern": "[A-Fa-f0-9]{32}",
              "example": "12345678901234567890123456789012",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "manifest_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Retrieved result successfully.",
              "schema": [
                {
                  "group": "Device_Update",
                  "entity": "firmware_manifest",
                  "_key": "foreign_key"
                },
                {
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was created.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at"
                  },
                  "etag": {
                    "type": "string",
                    "description": "API resource entity version.",
                    "example": "2017-05-22T12:37:58.753425Z",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was updated.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at"
                  },
                  "object": {
                    "description": "Entity name: always 'firmware-manifest'.",
                    "type": "string",
                    "example": "firmware-manifest",
                    "api_fieldname": "object",
                    "entity_fieldname": "object"
                  },
                  "manifest_schema_version": {
                    "description": "Version of the manifest schema (1 or 3).",
                    "type": "string",
                    "enum": [
                      "1",
                      "3"
                    ],
                    "api_fieldname": "manifest_schema_version",
                    "entity_fieldname": "manifest_schema_version"
                  },
                  "datafile": {
                    "description": "The URL of the ASN.1 DER-encoded firmware manifest binary.",
                    "type": "string",
                    "format": "uri",
                    "example": "http://bucket.com/mymanifest.manifest",
                    "api_fieldname": "datafile",
                    "entity_fieldname": "datafile_url"
                  },
                  "datafile_size": {
                    "description": "The size of the firmware manifest in bytes.",
                    "type": "integer",
                    "format": "int64",
                    "api_fieldname": "datafile_size",
                    "entity_fieldname": "datafile_size"
                  },
                  "delivered_payload_url": {
                    "description": "The URL of the payload to deliver to the device.",
                    "type": "string",
                    "format": "uri",
                    "example": "http://bucket.com/myimage.elf",
                    "api_fieldname": "delivered_payload_url",
                    "entity_fieldname": "delivered_payload_url"
                  },
                  "delivered_payload_size": {
                    "description": "The size in bytes of the payload to deliver to the device.",
                    "type": "integer",
                    "format": "int64",
                    "api_fieldname": "delivered_payload_size",
                    "entity_fieldname": "delivered_payload_size"
                  },
                  "delivered_payload_digest": {
                    "description": "Digest (SHA256, hex-encoded) of the payload to deliver to the device.",
                    "type": "string",
                    "format": "hex",
                    "example": "c520fc771c0482ad39e983d27cf725a7c724fe58c616129a34a420d1941068bc",
                    "api_fieldname": "delivered_payload_digest",
                    "entity_fieldname": "delivered_payload_digest"
                  },
                  "delivered_payload_type": {
                    "description": "Type of the payload to deliver to the device (full or delta image).",
                    "type": "string",
                    "enum": [
                      "full",
                      "delta"
                    ],
                    "api_fieldname": "delivered_payload_type",
                    "entity_fieldname": "delivered_payload_type"
                  },
                  "precursor_payload_digest": {
                    "description": "Digest (SHA256, hex-encoded) of the currently installed payload.",
                    "type": "string",
                    "example": "54d640fcd687c9b13420b9be66a265494899002aad1b7370cfb3dbfd7fbec42f",
                    "api_fieldname": "precursor_payload_digest",
                    "entity_fieldname": "precursor_payload_digest"
                  },
                  "description": {
                    "description": "The description of the firmware manifest.",
                    "type": "string",
                    "format": "free text",
                    "maxLength": 2000,
                    "example": "",
                    "api_fieldname": "description",
                    "entity_fieldname": "description"
                  },
                  "device_class": {
                    "description": "The device class ID.",
                    "type": "string",
                    "format": "uuid",
                    "example": "42c4d8de-704d-546e-b9d3-1ce1eb316167",
                    "api_fieldname": "device_class",
                    "entity_fieldname": "device_class"
                  },
                  "device_vendor": {
                    "description": "The device vendor ID.",
                    "type": "string",
                    "format": "uuid",
                    "example": "5d645eae-c231-5a89-9764-2e655cd94fa8",
                    "api_fieldname": "device_vendor",
                    "entity_fieldname": "device_vendor"
                  },
                  "update_priority": {
                    "description": "Update priority, passed to the application callback when an update is performed. Allows the application to make application-specific decisions.",
                    "type": "integer",
                    "format": "int64",
                    "api_fieldname": "update_priority",
                    "entity_fieldname": "update_priority"
                  },
                  "key_table": {
                    "description": "The key table of pre-shared keys for devices.",
                    "type": "string",
                    "format": "uri",
                    "example": "http://example.com/key-table",
                    "api_fieldname": "key_table",
                    "entity_fieldname": "key_table_url"
                  },
                  "id": {
                    "description": "The firmware manifest ID.",
                    "type": "string",
                    "pattern": "[A-Fa-f0-9]{32}",
                    "example": "12345678901234567890123456789012",
                    "api_fieldname": "id",
                    "entity_fieldname": "id"
                  },
                  "name": {
                    "description": "The name of the manifest.",
                    "type": "string",
                    "format": "free text",
                    "maxLength": 128,
                    "example": "manifest_name",
                    "api_fieldname": "name",
                    "entity_fieldname": "name"
                  },
                  "timestamp": {
                    "description": "The firmware manifest version as a timestamp.",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "type": "string",
                    "api_fieldname": "timestamp",
                    "entity_fieldname": "timestamp"
                  },
                  "parsed_raw_manifest": {
                    "description": "Raw manifest in JSON format, parsed from ASN.1 DER encoding.\nFields may change. Backwards compatibility is not guaranteed.\nRecommended for debugging only.\n",
                    "type": "object",
                    "api_fieldname": "parsed_raw_manifest",
                    "entity_fieldname": "parsed_raw_manifest"
                  },
                  "_key": "properties"
                }
              ],
              "_key": "200"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Firmware manifest can't be found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/firmware-manifests/{manifest_id}",
          "summary": "Get a manifest",
          "return_type": "firmware_manifest",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "firmware_manifest"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "manifest_schema_version",
            "datafile_size",
            "delivered_payload_url",
            "delivered_payload_size",
            "delivered_payload_digest",
            "delivered_payload_type",
            "precursor_payload_digest",
            "description",
            "device_class",
            "device_vendor",
            "update_priority",
            "name",
            "timestamp",
            "parsed_raw_manifest",
            "datafile_url",
            "key_table_url"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "manifest_id": "id"
          },
          "operation_id": "Firmware_Manifest_retrieve",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "string",
          "format": "date-time",
          "description": "The time the entity was created.",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "description": "The size of the firmware manifest in bytes.",
          "type": "integer",
          "format": "int64",
          "api_fieldname": "datafile_size",
          "readOnly": true,
          "required": false,
          "_key": "datafile_size"
        },
        {
          "description": "The URL of the ASN.1 DER-encoded firmware manifest binary.",
          "type": "string",
          "format": "uri",
          "example": "http://bucket.com/mymanifest.manifest",
          "api_fieldname": "datafile",
          "readOnly": true,
          "required": false,
          "_key": "datafile_url"
        },
        {
          "description": "Digest (SHA256, hex-encoded) of the payload to deliver to the device.",
          "type": "string",
          "format": "hex",
          "example": "c520fc771c0482ad39e983d27cf725a7c724fe58c616129a34a420d1941068bc",
          "api_fieldname": "delivered_payload_digest",
          "readOnly": true,
          "required": false,
          "_key": "delivered_payload_digest"
        },
        {
          "description": "The size in bytes of the payload to deliver to the device.",
          "type": "integer",
          "format": "int64",
          "api_fieldname": "delivered_payload_size",
          "readOnly": true,
          "required": false,
          "_key": "delivered_payload_size"
        },
        {
          "description": "Type of the payload to deliver to the device (full or delta image).",
          "type": "string",
          "enum": [
            "full",
            "delta"
          ],
          "api_fieldname": "delivered_payload_type",
          "readOnly": true,
          "required": false,
          "enum_reference": "firmware_manifest_delivered_payload_type_enum",
          "_key": "delivered_payload_type"
        },
        {
          "description": "The URL of the payload to deliver to the device.",
          "type": "string",
          "format": "uri",
          "example": "http://bucket.com/myimage.elf",
          "api_fieldname": "delivered_payload_url",
          "readOnly": true,
          "required": false,
          "_key": "delivered_payload_url"
        },
        {
          "description": "The description of the firmware manifest.",
          "type": "string",
          "format": "free text",
          "maxLength": 2000,
          "example": "",
          "api_fieldname": "description",
          "readOnly": false,
          "required": false,
          "_key": "description"
        },
        {
          "description": "The device class ID.",
          "type": "string",
          "format": "uuid",
          "example": "42c4d8de-704d-546e-b9d3-1ce1eb316167",
          "api_fieldname": "device_class",
          "readOnly": true,
          "required": false,
          "_key": "device_class"
        },
        {
          "description": "The device vendor ID.",
          "type": "string",
          "format": "uuid",
          "example": "5d645eae-c231-5a89-9764-2e655cd94fa8",
          "api_fieldname": "device_vendor",
          "readOnly": true,
          "required": false,
          "_key": "device_vendor"
        },
        {
          "description": "The firmware manifest ID.",
          "type": "string",
          "pattern": "[A-Fa-f0-9]{32}",
          "example": "12345678901234567890123456789012",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "description": "The key table of pre-shared keys for devices.",
          "type": "string",
          "format": "uri",
          "example": "http://example.com/key-table",
          "api_fieldname": "key_table",
          "readOnly": true,
          "required": false,
          "_key": "key_table_url"
        },
        {
          "description": "Version of the manifest schema (1 or 3).",
          "type": "string",
          "enum": [
            "1",
            "3"
          ],
          "api_fieldname": "manifest_schema_version",
          "readOnly": true,
          "required": false,
          "enum_reference": "firmware_manifest_schema_version_enum",
          "_key": "manifest_schema_version"
        },
        {
          "description": "The name of the manifest.",
          "type": "string",
          "format": "free text",
          "maxLength": 128,
          "example": "manifest_name",
          "api_fieldname": "name",
          "readOnly": false,
          "required": true,
          "_key": "name"
        },
        {
          "description": "Raw manifest in JSON format, parsed from ASN.1 DER encoding.\nFields may change. Backwards compatibility is not guaranteed.\nRecommended for debugging only.\n",
          "type": "object",
          "api_fieldname": "parsed_raw_manifest",
          "readOnly": true,
          "required": false,
          "_key": "parsed_raw_manifest"
        },
        {
          "description": "Digest (SHA256, hex-encoded) of the currently installed payload.",
          "type": "string",
          "example": "54d640fcd687c9b13420b9be66a265494899002aad1b7370cfb3dbfd7fbec42f",
          "api_fieldname": "precursor_payload_digest",
          "readOnly": true,
          "required": false,
          "_key": "precursor_payload_digest"
        },
        {
          "description": "The firmware manifest version as a timestamp.",
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "type": "string",
          "api_fieldname": "timestamp",
          "readOnly": true,
          "required": false,
          "_key": "timestamp"
        },
        {
          "description": "Update priority, passed to the application callback when an update is performed. Allows the application to make application-specific decisions.",
          "type": "integer",
          "format": "int64",
          "api_fieldname": "update_priority",
          "readOnly": true,
          "required": false,
          "_key": "update_priority"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "The time the entity was updated.",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [
        {
          "api_fieldname": "datafile",
          "_key": "datafile_url"
        },
        {
          "api_fieldname": "key_table",
          "_key": "key_table_url"
        }
      ],
      "tags": [
        "Device update - firmware manifests"
      ],
      "group_id": "Device_Update",
      "_key": "firmware_manifest"
    },
    {
      "swagger_models": [
        "CertificateGenerationReq",
        "IdentityProviderCreationReq",
        "IdentityProviderInfo",
        "IdentityProviderList",
        "IdentityProviderUpdateReq"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Create a new identity provider.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [
            {
              "api_fieldname": "type",
              "_key": "identity_provider_type"
            }
          ],
          "fields": [
            {
              "type": "string",
              "maxLength": 500,
              "description": "Description for the identity provider.",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "in": "query",
              "name": "discovery",
              "description": "Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint * jwks_uri * keys",
              "type": "boolean",
              "allowEmptyValue": true,
              "entity_fieldname": "discovery",
              "api_fieldname": "discovery",
              "external_param": true,
              "parameter_fieldname": "discovery",
              "required": false,
              "_key": "discovery"
            },
            {
              "type": "string",
              "description": "Identity provider type.",
              "enum": [
                "NATIVE",
                "MBED",
                "SAML2",
                "OIDC"
              ],
              "api_fieldname": "type",
              "entity_fieldname": "identity_provider_type",
              "parameter_fieldname": "type",
              "in": "body",
              "required": true,
              "enum_reference": "identity_provider_type_enum",
              "_key": "identity_provider_type"
            },
            {
              "type": "string",
              "maxLength": 100,
              "description": "Name of the identity provider.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": true,
              "_key": "name"
            },
            {
              "type": "object",
              "required": false,
              "properties": [
                {
                  "type": "string",
                  "description": "URL of the OAuth 2.0 authorization endpoint.",
                  "x-nullable": true,
                  "_key": "authorization_endpoint"
                },
                {
                  "type": "boolean",
                  "description": "For future use.",
                  "x-nullable": true,
                  "_key": "auto_enrollment"
                },
                {
                  "description": "Mapping for non-standard OIDC claim names.",
                  "type": "object",
                  "properties": [
                    {
                      "type": "string",
                      "description": "Custom claim name for 'email'.",
                      "example": "email_address",
                      "x-nullable": true,
                      "_key": "email"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'email_verified'.",
                      "example": "email_verified",
                      "x-nullable": true,
                      "_key": "email_verified"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'family_name'.",
                      "example": "family_name",
                      "x-nullable": true,
                      "_key": "family_name"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'given_name'.",
                      "example": "given_name",
                      "x-nullable": true,
                      "_key": "given_name"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'name'.",
                      "example": "name",
                      "x-nullable": true,
                      "_key": "name"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'phone_number'.",
                      "example": "phone_number",
                      "x-nullable": true,
                      "_key": "phone_number"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'sub'.",
                      "example": "sub",
                      "x-nullable": true,
                      "_key": "sub"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'updated_at'.",
                      "example": "updated_at",
                      "x-nullable": true,
                      "_key": "updated_at"
                    },
                    {
                      "type": "string",
                      "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                      "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                      "x-nullable": true,
                      "_key": "updated_at_pattern"
                    }
                  ],
                  "foreign_key": {
                    "group": "Accounts",
                    "entity": "oidc_request_claim_mapping"
                  },
                  "x-nullable": true,
                  "_key": "claim_mapping"
                },
                {
                  "type": "string",
                  "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                  "x-nullable": true,
                  "_key": "client_id"
                },
                {
                  "type": "string",
                  "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                  "x-nullable": true,
                  "_key": "client_secret"
                },
                {
                  "type": "string",
                  "description": "URL of the provider's end session endpoint.",
                  "x-nullable": true,
                  "_key": "end_session_endpoint"
                },
                {
                  "type": "string",
                  "description": "Issuer of the identity provider.",
                  "_key": "issuer"
                },
                {
                  "type": "string",
                  "description": "URL of the provider's JSON web key set document.",
                  "x-nullable": true,
                  "_key": "jwks_uri"
                },
                {
                  "type": "array",
                  "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                  "items": {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "The public key.",
                        "_key": "key"
                      },
                      {
                        "type": "string",
                        "description": "The public key ID.",
                        "_key": "kid"
                      }
                    ],
                    "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "identity_provider_public_key"
                    }
                  },
                  "x-nullable": true,
                  "_key": "keys"
                },
                {
                  "type": "string",
                  "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                  "x-nullable": true,
                  "_key": "redirect_uri"
                },
                {
                  "type": "string",
                  "description": "URL of the provider's token revocation endpoint.",
                  "x-nullable": true,
                  "_key": "revocation_endpoint"
                },
                {
                  "type": "string",
                  "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                  "example": "openid email",
                  "_key": "scopes"
                },
                {
                  "type": "string",
                  "description": "URL of the OAuth 2.0 authorization endpoint.",
                  "x-nullable": true,
                  "_key": "token_endpoint"
                },
                {
                  "type": "string",
                  "enum": [
                    "POST",
                    "GET"
                  ],
                  "default": "POST",
                  "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                  "_key": "token_request_mode"
                },
                {
                  "type": "string",
                  "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                  "example": "oidc.data",
                  "_key": "token_response_path"
                },
                {
                  "type": "string",
                  "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                  "x-nullable": true,
                  "_key": "userinfo_endpoint"
                }
              ],
              "description": "Represents OIDC specific attributes.",
              "foreign_key": {
                "group": "Accounts",
                "entity": "oidc_request"
              },
              "api_fieldname": "oidc_attributes",
              "entity_fieldname": "oidc_attributes",
              "parameter_fieldname": "oidc_attributes",
              "in": "body",
              "_key": "oidc_attributes"
            },
            {
              "type": "object",
              "properties": [
                {
                  "type": "string",
                  "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                  "x-nullable": true,
                  "_key": "assertion_endpoint"
                },
                {
                  "type": "string",
                  "description": "Entity ID of the identity provider.",
                  "x-nullable": true,
                  "_key": "idp_entity_id"
                },
                {
                  "type": "array",
                  "description": "List of public X509 certificates of the identity provider in PEM format.",
                  "items": {
                    "type": "string"
                  },
                  "x-nullable": true,
                  "_key": "idp_x509_certs"
                },
                {
                  "type": "string",
                  "description": "URL of the identity provider's SLO endpoint.",
                  "x-nullable": true,
                  "_key": "slo_endpoint"
                },
                {
                  "type": "string",
                  "description": "Entity ID of the service provider.",
                  "x-nullable": true,
                  "_key": "sp_entity_id"
                },
                {
                  "type": "string",
                  "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                  "readOnly": true,
                  "x-nullable": true,
                  "_key": "sp_x509_cert"
                },
                {
                  "type": "string",
                  "description": "URL of the identity provider's SSO endpoint.",
                  "x-nullable": true,
                  "_key": "sso_endpoint"
                }
              ],
              "description": "Represents SAML2 specific attributes in responses.",
              "api_fieldname": "saml2_attributes",
              "entity_fieldname": "saml2_attributes",
              "parameter_fieldname": "saml2_attributes",
              "in": "body",
              "required": false,
              "_key": "saml2_attributes"
            },
            {
              "type": "string",
              "description": "Status of the identity provider.",
              "enum": [
                "ACTIVE",
                "SUSPENDED"
              ],
              "api_fieldname": "status",
              "entity_fieldname": "status",
              "parameter_fieldname": "status",
              "in": "body",
              "required": false,
              "enum_reference": "identity_provider_status_enum",
              "_key": "status"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "New entity created.",
              "headers": [
                {
                  "type": "string",
                  "description": "/v3/identity-providers/{identity_provider_id}",
                  "_key": "Content-Location"
                },
                {
                  "type": "string",
                  "description": "/v3/identity-providers/{identity_provider_id}",
                  "_key": "Location"
                }
              ],
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "name",
                  "object",
                  "type"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the identity provider belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Description for the identity provider.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "description": "Flag indicating whether this is the global default identity provider.",
                    "readOnly": true,
                    "api_fieldname": "is_default",
                    "entity_fieldname": "is_default",
                    "_key": "is_default"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Name of the identity provider.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'identity-provider'",
                    "enum": [
                      "identity-provider"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "required": [
                      "issuer"
                    ],
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "authorization_endpoint"
                      },
                      {
                        "type": "boolean",
                        "description": "For future use.",
                        "x-nullable": true,
                        "_key": "auto_enrollment"
                      },
                      {
                        "description": "Mapping for non-standard OIDC claim names.",
                        "type": "object",
                        "properties": [
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email'.",
                            "example": "email_address",
                            "x-nullable": true,
                            "_key": "email"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email_verified'.",
                            "example": "email_verified",
                            "x-nullable": true,
                            "_key": "email_verified"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'family_name'.",
                            "example": "family_name",
                            "x-nullable": true,
                            "_key": "family_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'given_name'.",
                            "example": "given_name",
                            "x-nullable": true,
                            "_key": "given_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'name'.",
                            "example": "name",
                            "x-nullable": true,
                            "_key": "name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'phone_number'.",
                            "example": "phone_number",
                            "x-nullable": true,
                            "_key": "phone_number"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'sub'.",
                            "example": "sub",
                            "x-nullable": true,
                            "_key": "sub"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'updated_at'.",
                            "example": "updated_at",
                            "x-nullable": true,
                            "_key": "updated_at"
                          },
                          {
                            "type": "string",
                            "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                            "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                            "x-nullable": true,
                            "_key": "updated_at_pattern"
                          }
                        ],
                        "foreign_key": {
                          "group": "Accounts",
                          "entity": "oidc_request_claim_mapping"
                        },
                        "x-nullable": true,
                        "_key": "claim_mapping"
                      },
                      {
                        "type": "string",
                        "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_id"
                      },
                      {
                        "type": "string",
                        "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_secret"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's end session endpoint.",
                        "x-nullable": true,
                        "_key": "end_session_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Issuer of the identity provider.",
                        "_key": "issuer"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's JSON web key set document.",
                        "x-nullable": true,
                        "_key": "jwks_uri"
                      },
                      {
                        "type": "array",
                        "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                        "items": {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "The public key.",
                              "_key": "key"
                            },
                            {
                              "type": "string",
                              "description": "The public key ID.",
                              "_key": "kid"
                            }
                          ],
                          "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "identity_provider_public_key"
                          }
                        },
                        "x-nullable": true,
                        "_key": "keys"
                      },
                      {
                        "type": "string",
                        "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                        "x-nullable": true,
                        "_key": "redirect_uri"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's token revocation endpoint.",
                        "x-nullable": true,
                        "_key": "revocation_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                        "example": "openid email",
                        "_key": "scopes"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "token_endpoint"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "POST",
                          "GET"
                        ],
                        "default": "POST",
                        "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                        "_key": "token_request_mode"
                      },
                      {
                        "type": "string",
                        "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                        "example": "oidc.data",
                        "_key": "token_response_path"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                        "x-nullable": true,
                        "_key": "userinfo_endpoint"
                      }
                    ],
                    "description": "Represents OIDC specific attributes.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "oidc_request"
                    },
                    "api_fieldname": "oidc_attributes",
                    "entity_fieldname": "oidc_attributes",
                    "_key": "oidc_attributes"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                        "x-nullable": true,
                        "_key": "assertion_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the identity provider.",
                        "x-nullable": true,
                        "_key": "idp_entity_id"
                      },
                      {
                        "type": "array",
                        "description": "List of public X509 certificates of the identity provider in PEM format.",
                        "items": {
                          "type": "string"
                        },
                        "x-nullable": true,
                        "_key": "idp_x509_certs"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SLO endpoint.",
                        "x-nullable": true,
                        "_key": "slo_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the service provider.",
                        "x-nullable": true,
                        "_key": "sp_entity_id"
                      },
                      {
                        "type": "string",
                        "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                        "readOnly": true,
                        "x-nullable": true,
                        "_key": "sp_x509_cert"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SSO endpoint.",
                        "x-nullable": true,
                        "_key": "sso_endpoint"
                      }
                    ],
                    "description": "Represents SAML2 specific attributes in responses.",
                    "api_fieldname": "saml2_attributes",
                    "entity_fieldname": "saml2_attributes",
                    "_key": "saml2_attributes"
                  },
                  {
                    "type": "string",
                    "description": "Status of the identity provider.",
                    "enum": [
                      "ACTIVE",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "identity_provider_type",
                    "_key": "type"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_identity_provider"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data, for example, name is too long.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/identity-providers",
          "summary": "Create a new identity provider.",
          "return_type": "identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "updated_at",
            "account_id",
            "is_default"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "createIdentityProvider",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete an identity provider by ID.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [
            {
              "api_fieldname": "type",
              "_key": "identity_provider_type"
            }
          ],
          "fields": [
            {
              "name": "identity_provider_id",
              "in": "path",
              "description": "The ID of the identity provider to delete.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "identity_provider_id",
              "external_param": false,
              "parameter_fieldname": "identity_provider_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden, or identity provider is in use.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An identity provider not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/identity-providers/{identity_provider_id}",
          "summary": "Delete an identity provider by ID.",
          "return_type": "identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "deleteIdentityProvider",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Delete a service provider certificate.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [
            {
              "api_fieldname": "type",
              "_key": "identity_provider_type"
            }
          ],
          "fields": [
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "identity_provider_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "delete_service_provider_certificate",
          "responses": [
            {
              "description": "Successful operation.",
              "headers": [
                {
                  "type": "string",
                  "description": "/v3/identity-providers/{identity_provider_id}",
                  "_key": "Content-Location"
                }
              ],
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "name",
                  "object",
                  "type"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the identity provider belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Description for the identity provider.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "description": "Flag indicating whether this is the global default identity provider.",
                    "readOnly": true,
                    "api_fieldname": "is_default",
                    "entity_fieldname": "is_default",
                    "_key": "is_default"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Name of the identity provider.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'identity-provider'",
                    "enum": [
                      "identity-provider"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "required": [
                      "issuer"
                    ],
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "authorization_endpoint"
                      },
                      {
                        "type": "boolean",
                        "description": "For future use.",
                        "x-nullable": true,
                        "_key": "auto_enrollment"
                      },
                      {
                        "description": "Mapping for non-standard OIDC claim names.",
                        "type": "object",
                        "properties": [
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email'.",
                            "example": "email_address",
                            "x-nullable": true,
                            "_key": "email"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email_verified'.",
                            "example": "email_verified",
                            "x-nullable": true,
                            "_key": "email_verified"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'family_name'.",
                            "example": "family_name",
                            "x-nullable": true,
                            "_key": "family_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'given_name'.",
                            "example": "given_name",
                            "x-nullable": true,
                            "_key": "given_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'name'.",
                            "example": "name",
                            "x-nullable": true,
                            "_key": "name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'phone_number'.",
                            "example": "phone_number",
                            "x-nullable": true,
                            "_key": "phone_number"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'sub'.",
                            "example": "sub",
                            "x-nullable": true,
                            "_key": "sub"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'updated_at'.",
                            "example": "updated_at",
                            "x-nullable": true,
                            "_key": "updated_at"
                          },
                          {
                            "type": "string",
                            "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                            "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                            "x-nullable": true,
                            "_key": "updated_at_pattern"
                          }
                        ],
                        "foreign_key": {
                          "group": "Accounts",
                          "entity": "oidc_request_claim_mapping"
                        },
                        "x-nullable": true,
                        "_key": "claim_mapping"
                      },
                      {
                        "type": "string",
                        "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_id"
                      },
                      {
                        "type": "string",
                        "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_secret"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's end session endpoint.",
                        "x-nullable": true,
                        "_key": "end_session_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Issuer of the identity provider.",
                        "_key": "issuer"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's JSON web key set document.",
                        "x-nullable": true,
                        "_key": "jwks_uri"
                      },
                      {
                        "type": "array",
                        "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                        "items": {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "The public key.",
                              "_key": "key"
                            },
                            {
                              "type": "string",
                              "description": "The public key ID.",
                              "_key": "kid"
                            }
                          ],
                          "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "identity_provider_public_key"
                          }
                        },
                        "x-nullable": true,
                        "_key": "keys"
                      },
                      {
                        "type": "string",
                        "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                        "x-nullable": true,
                        "_key": "redirect_uri"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's token revocation endpoint.",
                        "x-nullable": true,
                        "_key": "revocation_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                        "example": "openid email",
                        "_key": "scopes"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "token_endpoint"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "POST",
                          "GET"
                        ],
                        "default": "POST",
                        "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                        "_key": "token_request_mode"
                      },
                      {
                        "type": "string",
                        "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                        "example": "oidc.data",
                        "_key": "token_response_path"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                        "x-nullable": true,
                        "_key": "userinfo_endpoint"
                      }
                    ],
                    "description": "Represents OIDC specific attributes.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "oidc_request"
                    },
                    "api_fieldname": "oidc_attributes",
                    "entity_fieldname": "oidc_attributes",
                    "_key": "oidc_attributes"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                        "x-nullable": true,
                        "_key": "assertion_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the identity provider.",
                        "x-nullable": true,
                        "_key": "idp_entity_id"
                      },
                      {
                        "type": "array",
                        "description": "List of public X509 certificates of the identity provider in PEM format.",
                        "items": {
                          "type": "string"
                        },
                        "x-nullable": true,
                        "_key": "idp_x509_certs"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SLO endpoint.",
                        "x-nullable": true,
                        "_key": "slo_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the service provider.",
                        "x-nullable": true,
                        "_key": "sp_entity_id"
                      },
                      {
                        "type": "string",
                        "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                        "readOnly": true,
                        "x-nullable": true,
                        "_key": "sp_x509_cert"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SSO endpoint.",
                        "x-nullable": true,
                        "_key": "sso_endpoint"
                      }
                    ],
                    "description": "Represents SAML2 specific attributes in responses.",
                    "api_fieldname": "saml2_attributes",
                    "entity_fieldname": "saml2_attributes",
                    "_key": "saml2_attributes"
                  },
                  {
                    "type": "string",
                    "description": "Status of the identity provider.",
                    "enum": [
                      "ACTIVE",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "identity_provider_type",
                    "_key": "type"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_identity_provider"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An identity provider not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/identity-providers/{identity_provider_id}/delete-sp-certificate",
          "summary": "Delete the service provider certificate.",
          "return_type": "identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "name",
            "description",
            "status",
            "saml2_attributes",
            "oidc_attributes",
            "account_id",
            "is_default",
            "identity_provider_type"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "deleteSpCertificate",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete_service_provider_certificate"
        },
        {
          "description": "Generate a new service provider certificate.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [
            {
              "api_fieldname": "type",
              "_key": "identity_provider_type"
            }
          ],
          "fields": [
            {
              "type": "string",
              "description": "The algorithm and its key size used for generating the certificate. Defaults to RSA2048.",
              "enum": [
                "RSA2048",
                "RSA3072",
                "EC224",
                "EC256",
                "EC384",
                "EC521",
                "ECDSA224",
                "ECDSA256",
                "ECDSA384",
                "ECDSA521"
              ],
              "name": "algorithm",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "algorithm",
              "api_fieldname": "algorithm",
              "external_param": true,
              "parameter_fieldname": "algorithm",
              "required": false,
              "enum_reference": "identity_provider_algorithm_enum",
              "_key": "algorithm"
            },
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "identity_provider_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "integer",
              "format": "int32",
              "description": "Validity for the certificate in days.",
              "name": "validity",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "validity",
              "api_fieldname": "validity",
              "external_param": true,
              "parameter_fieldname": "validity",
              "required": false,
              "_key": "validity"
            }
          ],
          "method": "post",
          "mode": "generate_service_provider_certificate",
          "responses": [
            {
              "description": "Successful operation.",
              "headers": [
                {
                  "type": "string",
                  "description": "/v3/identity-providers/{identity_provider_id}",
                  "_key": "Content-Location"
                }
              ],
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "name",
                  "object",
                  "type"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the identity provider belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Description for the identity provider.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "description": "Flag indicating whether this is the global default identity provider.",
                    "readOnly": true,
                    "api_fieldname": "is_default",
                    "entity_fieldname": "is_default",
                    "_key": "is_default"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Name of the identity provider.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'identity-provider'",
                    "enum": [
                      "identity-provider"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "required": [
                      "issuer"
                    ],
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "authorization_endpoint"
                      },
                      {
                        "type": "boolean",
                        "description": "For future use.",
                        "x-nullable": true,
                        "_key": "auto_enrollment"
                      },
                      {
                        "description": "Mapping for non-standard OIDC claim names.",
                        "type": "object",
                        "properties": [
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email'.",
                            "example": "email_address",
                            "x-nullable": true,
                            "_key": "email"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email_verified'.",
                            "example": "email_verified",
                            "x-nullable": true,
                            "_key": "email_verified"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'family_name'.",
                            "example": "family_name",
                            "x-nullable": true,
                            "_key": "family_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'given_name'.",
                            "example": "given_name",
                            "x-nullable": true,
                            "_key": "given_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'name'.",
                            "example": "name",
                            "x-nullable": true,
                            "_key": "name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'phone_number'.",
                            "example": "phone_number",
                            "x-nullable": true,
                            "_key": "phone_number"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'sub'.",
                            "example": "sub",
                            "x-nullable": true,
                            "_key": "sub"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'updated_at'.",
                            "example": "updated_at",
                            "x-nullable": true,
                            "_key": "updated_at"
                          },
                          {
                            "type": "string",
                            "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                            "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                            "x-nullable": true,
                            "_key": "updated_at_pattern"
                          }
                        ],
                        "foreign_key": {
                          "group": "Accounts",
                          "entity": "oidc_request_claim_mapping"
                        },
                        "x-nullable": true,
                        "_key": "claim_mapping"
                      },
                      {
                        "type": "string",
                        "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_id"
                      },
                      {
                        "type": "string",
                        "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_secret"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's end session endpoint.",
                        "x-nullable": true,
                        "_key": "end_session_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Issuer of the identity provider.",
                        "_key": "issuer"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's JSON web key set document.",
                        "x-nullable": true,
                        "_key": "jwks_uri"
                      },
                      {
                        "type": "array",
                        "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                        "items": {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "The public key.",
                              "_key": "key"
                            },
                            {
                              "type": "string",
                              "description": "The public key ID.",
                              "_key": "kid"
                            }
                          ],
                          "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "identity_provider_public_key"
                          }
                        },
                        "x-nullable": true,
                        "_key": "keys"
                      },
                      {
                        "type": "string",
                        "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                        "x-nullable": true,
                        "_key": "redirect_uri"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's token revocation endpoint.",
                        "x-nullable": true,
                        "_key": "revocation_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                        "example": "openid email",
                        "_key": "scopes"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "token_endpoint"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "POST",
                          "GET"
                        ],
                        "default": "POST",
                        "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                        "_key": "token_request_mode"
                      },
                      {
                        "type": "string",
                        "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                        "example": "oidc.data",
                        "_key": "token_response_path"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                        "x-nullable": true,
                        "_key": "userinfo_endpoint"
                      }
                    ],
                    "description": "Represents OIDC specific attributes.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "oidc_request"
                    },
                    "api_fieldname": "oidc_attributes",
                    "entity_fieldname": "oidc_attributes",
                    "_key": "oidc_attributes"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                        "x-nullable": true,
                        "_key": "assertion_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the identity provider.",
                        "x-nullable": true,
                        "_key": "idp_entity_id"
                      },
                      {
                        "type": "array",
                        "description": "List of public X509 certificates of the identity provider in PEM format.",
                        "items": {
                          "type": "string"
                        },
                        "x-nullable": true,
                        "_key": "idp_x509_certs"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SLO endpoint.",
                        "x-nullable": true,
                        "_key": "slo_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the service provider.",
                        "x-nullable": true,
                        "_key": "sp_entity_id"
                      },
                      {
                        "type": "string",
                        "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                        "readOnly": true,
                        "x-nullable": true,
                        "_key": "sp_x509_cert"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SSO endpoint.",
                        "x-nullable": true,
                        "_key": "sso_endpoint"
                      }
                    ],
                    "description": "Represents SAML2 specific attributes in responses.",
                    "api_fieldname": "saml2_attributes",
                    "entity_fieldname": "saml2_attributes",
                    "_key": "saml2_attributes"
                  },
                  {
                    "type": "string",
                    "description": "Status of the identity provider.",
                    "enum": [
                      "ACTIVE",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "identity_provider_type",
                    "_key": "type"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_identity_provider"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data, for example, invalid certificate validity value.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An identity provider not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/identity-providers/{identity_provider_id}/generate-sp-certificate",
          "summary": "Generate a new service provider certificate.",
          "return_type": "identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "name",
            "description",
            "status",
            "saml2_attributes",
            "oidc_attributes",
            "account_id",
            "is_default",
            "identity_provider_type"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "generateSpCertificate",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "generate_service_provider_certificate"
        },
        {
          "description": "Retrieve an array of identity providers.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [
            {
              "api_fieldname": "type",
              "_key": "identity_provider_type"
            }
          ],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "identity_provider_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "etag",
                        "id",
                        "name",
                        "object",
                        "type"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account the identity provider belongs to.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "maxLength": 500,
                          "description": "Description for the identity provider.",
                          "_key": "description"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571d01d0242ac12000600000000",
                          "description": "Entity ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "boolean",
                          "description": "Flag indicating whether this is the global default identity provider.",
                          "readOnly": true,
                          "_key": "is_default"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "description": "Name of the identity provider.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'identity-provider'",
                          "enum": [
                            "identity-provider"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "object",
                          "required": [
                            "issuer"
                          ],
                          "properties": [
                            {
                              "type": "string",
                              "description": "URL of the OAuth 2.0 authorization endpoint.",
                              "x-nullable": true,
                              "_key": "authorization_endpoint"
                            },
                            {
                              "type": "boolean",
                              "description": "For future use.",
                              "x-nullable": true,
                              "_key": "auto_enrollment"
                            },
                            {
                              "description": "Mapping for non-standard OIDC claim names.",
                              "type": "object",
                              "properties": [
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'email'.",
                                  "example": "email_address",
                                  "x-nullable": true,
                                  "_key": "email"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'email_verified'.",
                                  "example": "email_verified",
                                  "x-nullable": true,
                                  "_key": "email_verified"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'family_name'.",
                                  "example": "family_name",
                                  "x-nullable": true,
                                  "_key": "family_name"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'given_name'.",
                                  "example": "given_name",
                                  "x-nullable": true,
                                  "_key": "given_name"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'name'.",
                                  "example": "name",
                                  "x-nullable": true,
                                  "_key": "name"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'phone_number'.",
                                  "example": "phone_number",
                                  "x-nullable": true,
                                  "_key": "phone_number"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'sub'.",
                                  "example": "sub",
                                  "x-nullable": true,
                                  "_key": "sub"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'updated_at'.",
                                  "example": "updated_at",
                                  "x-nullable": true,
                                  "_key": "updated_at"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                                  "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                                  "x-nullable": true,
                                  "_key": "updated_at_pattern"
                                }
                              ],
                              "foreign_key": {
                                "group": "Accounts",
                                "entity": "oidc_request_claim_mapping"
                              },
                              "x-nullable": true,
                              "_key": "claim_mapping"
                            },
                            {
                              "type": "string",
                              "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                              "x-nullable": true,
                              "_key": "client_id"
                            },
                            {
                              "type": "string",
                              "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                              "x-nullable": true,
                              "_key": "client_secret"
                            },
                            {
                              "type": "string",
                              "description": "URL of the provider's end session endpoint.",
                              "x-nullable": true,
                              "_key": "end_session_endpoint"
                            },
                            {
                              "type": "string",
                              "description": "Issuer of the identity provider.",
                              "_key": "issuer"
                            },
                            {
                              "type": "string",
                              "description": "URL of the provider's JSON web key set document.",
                              "x-nullable": true,
                              "_key": "jwks_uri"
                            },
                            {
                              "type": "array",
                              "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                              "items": {
                                "type": "object",
                                "properties": [
                                  {
                                    "type": "string",
                                    "description": "The public key.",
                                    "_key": "key"
                                  },
                                  {
                                    "type": "string",
                                    "description": "The public key ID.",
                                    "_key": "kid"
                                  }
                                ],
                                "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                                "foreign_key": {
                                  "group": "Accounts",
                                  "entity": "identity_provider_public_key"
                                }
                              },
                              "x-nullable": true,
                              "_key": "keys"
                            },
                            {
                              "type": "string",
                              "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                              "x-nullable": true,
                              "_key": "redirect_uri"
                            },
                            {
                              "type": "string",
                              "description": "URL of the provider's token revocation endpoint.",
                              "x-nullable": true,
                              "_key": "revocation_endpoint"
                            },
                            {
                              "type": "string",
                              "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                              "example": "openid email",
                              "_key": "scopes"
                            },
                            {
                              "type": "string",
                              "description": "URL of the OAuth 2.0 authorization endpoint.",
                              "x-nullable": true,
                              "_key": "token_endpoint"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "POST",
                                "GET"
                              ],
                              "default": "POST",
                              "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                              "_key": "token_request_mode"
                            },
                            {
                              "type": "string",
                              "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                              "example": "oidc.data",
                              "_key": "token_response_path"
                            },
                            {
                              "type": "string",
                              "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                              "x-nullable": true,
                              "_key": "userinfo_endpoint"
                            }
                          ],
                          "description": "Represents OIDC specific attributes.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "oidc_request"
                          },
                          "_key": "oidc_attributes"
                        },
                        {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                              "x-nullable": true,
                              "_key": "assertion_endpoint"
                            },
                            {
                              "type": "string",
                              "description": "Entity ID of the identity provider.",
                              "x-nullable": true,
                              "_key": "idp_entity_id"
                            },
                            {
                              "type": "array",
                              "description": "List of public X509 certificates of the identity provider in PEM format.",
                              "items": {
                                "type": "string"
                              },
                              "x-nullable": true,
                              "_key": "idp_x509_certs"
                            },
                            {
                              "type": "string",
                              "description": "URL of the identity provider's SLO endpoint.",
                              "x-nullable": true,
                              "_key": "slo_endpoint"
                            },
                            {
                              "type": "string",
                              "description": "Entity ID of the service provider.",
                              "x-nullable": true,
                              "_key": "sp_entity_id"
                            },
                            {
                              "type": "string",
                              "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                              "readOnly": true,
                              "x-nullable": true,
                              "_key": "sp_x509_cert"
                            },
                            {
                              "type": "string",
                              "description": "URL of the identity provider's SSO endpoint.",
                              "x-nullable": true,
                              "_key": "sso_endpoint"
                            }
                          ],
                          "description": "Represents SAML2 specific attributes in responses.",
                          "_key": "saml2_attributes"
                        },
                        {
                          "type": "string",
                          "description": "Status of the identity provider.",
                          "enum": [
                            "ACTIVE",
                            "SUSPENDED"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "string",
                          "description": "Identity provider type.",
                          "enum": [
                            "NATIVE",
                            "MBED",
                            "SAML2",
                            "OIDC"
                          ],
                          "_key": "type"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ],
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "identity_provider"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return , or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "identity_provider"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/identity-providers",
          "summary": "Get all identity providers.",
          "return_type": "paginated_response(identity_provider)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data"
          ],
          "foreign_key_priority": "self",
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "getAllIdentityProviders",
          "pagination": true,
          "foreign_key": {
            "group": "Accounts",
            "entity": "identity_provider"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve an identity provider.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [
            {
              "api_fieldname": "type",
              "_key": "identity_provider_type"
            }
          ],
          "fields": [
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "identity_provider_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "name",
                  "object",
                  "type"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the identity provider belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Description for the identity provider.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "description": "Flag indicating whether this is the global default identity provider.",
                    "readOnly": true,
                    "api_fieldname": "is_default",
                    "entity_fieldname": "is_default",
                    "_key": "is_default"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Name of the identity provider.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'identity-provider'",
                    "enum": [
                      "identity-provider"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "required": [
                      "issuer"
                    ],
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "authorization_endpoint"
                      },
                      {
                        "type": "boolean",
                        "description": "For future use.",
                        "x-nullable": true,
                        "_key": "auto_enrollment"
                      },
                      {
                        "description": "Mapping for non-standard OIDC claim names.",
                        "type": "object",
                        "properties": [
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email'.",
                            "example": "email_address",
                            "x-nullable": true,
                            "_key": "email"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email_verified'.",
                            "example": "email_verified",
                            "x-nullable": true,
                            "_key": "email_verified"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'family_name'.",
                            "example": "family_name",
                            "x-nullable": true,
                            "_key": "family_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'given_name'.",
                            "example": "given_name",
                            "x-nullable": true,
                            "_key": "given_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'name'.",
                            "example": "name",
                            "x-nullable": true,
                            "_key": "name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'phone_number'.",
                            "example": "phone_number",
                            "x-nullable": true,
                            "_key": "phone_number"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'sub'.",
                            "example": "sub",
                            "x-nullable": true,
                            "_key": "sub"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'updated_at'.",
                            "example": "updated_at",
                            "x-nullable": true,
                            "_key": "updated_at"
                          },
                          {
                            "type": "string",
                            "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                            "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                            "x-nullable": true,
                            "_key": "updated_at_pattern"
                          }
                        ],
                        "foreign_key": {
                          "group": "Accounts",
                          "entity": "oidc_request_claim_mapping"
                        },
                        "x-nullable": true,
                        "_key": "claim_mapping"
                      },
                      {
                        "type": "string",
                        "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_id"
                      },
                      {
                        "type": "string",
                        "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_secret"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's end session endpoint.",
                        "x-nullable": true,
                        "_key": "end_session_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Issuer of the identity provider.",
                        "_key": "issuer"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's JSON web key set document.",
                        "x-nullable": true,
                        "_key": "jwks_uri"
                      },
                      {
                        "type": "array",
                        "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                        "items": {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "The public key.",
                              "_key": "key"
                            },
                            {
                              "type": "string",
                              "description": "The public key ID.",
                              "_key": "kid"
                            }
                          ],
                          "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "identity_provider_public_key"
                          }
                        },
                        "x-nullable": true,
                        "_key": "keys"
                      },
                      {
                        "type": "string",
                        "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                        "x-nullable": true,
                        "_key": "redirect_uri"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's token revocation endpoint.",
                        "x-nullable": true,
                        "_key": "revocation_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                        "example": "openid email",
                        "_key": "scopes"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "token_endpoint"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "POST",
                          "GET"
                        ],
                        "default": "POST",
                        "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                        "_key": "token_request_mode"
                      },
                      {
                        "type": "string",
                        "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                        "example": "oidc.data",
                        "_key": "token_response_path"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                        "x-nullable": true,
                        "_key": "userinfo_endpoint"
                      }
                    ],
                    "description": "Represents OIDC specific attributes.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "oidc_request"
                    },
                    "api_fieldname": "oidc_attributes",
                    "entity_fieldname": "oidc_attributes",
                    "_key": "oidc_attributes"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                        "x-nullable": true,
                        "_key": "assertion_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the identity provider.",
                        "x-nullable": true,
                        "_key": "idp_entity_id"
                      },
                      {
                        "type": "array",
                        "description": "List of public X509 certificates of the identity provider in PEM format.",
                        "items": {
                          "type": "string"
                        },
                        "x-nullable": true,
                        "_key": "idp_x509_certs"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SLO endpoint.",
                        "x-nullable": true,
                        "_key": "slo_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the service provider.",
                        "x-nullable": true,
                        "_key": "sp_entity_id"
                      },
                      {
                        "type": "string",
                        "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                        "readOnly": true,
                        "x-nullable": true,
                        "_key": "sp_x509_cert"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SSO endpoint.",
                        "x-nullable": true,
                        "_key": "sso_endpoint"
                      }
                    ],
                    "description": "Represents SAML2 specific attributes in responses.",
                    "api_fieldname": "saml2_attributes",
                    "entity_fieldname": "saml2_attributes",
                    "_key": "saml2_attributes"
                  },
                  {
                    "type": "string",
                    "description": "Status of the identity provider.",
                    "enum": [
                      "ACTIVE",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "identity_provider_type",
                    "_key": "type"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_identity_provider"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An identity provider not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/identity-providers/{identity_provider_id}",
          "summary": "Get identity provider.",
          "return_type": "identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "name",
            "description",
            "status",
            "saml2_attributes",
            "oidc_attributes",
            "account_id",
            "is_default",
            "identity_provider_type"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "getIdentityProvider",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Refreshes an OIDC IdP's signing keys.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [
            {
              "api_fieldname": "type",
              "_key": "identity_provider_type"
            }
          ],
          "fields": [
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "identity_provider_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "refresh_tokens",
          "responses": [
            {
              "description": "Successful operation.",
              "headers": [
                {
                  "type": "string",
                  "description": "/v3/identity-providers/{identity_provider_id}",
                  "_key": "Content-Location"
                }
              ],
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "name",
                  "object",
                  "type"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the identity provider belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Description for the identity provider.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "description": "Flag indicating whether this is the global default identity provider.",
                    "readOnly": true,
                    "api_fieldname": "is_default",
                    "entity_fieldname": "is_default",
                    "_key": "is_default"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Name of the identity provider.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'identity-provider'",
                    "enum": [
                      "identity-provider"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "required": [
                      "issuer"
                    ],
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "authorization_endpoint"
                      },
                      {
                        "type": "boolean",
                        "description": "For future use.",
                        "x-nullable": true,
                        "_key": "auto_enrollment"
                      },
                      {
                        "description": "Mapping for non-standard OIDC claim names.",
                        "type": "object",
                        "properties": [
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email'.",
                            "example": "email_address",
                            "x-nullable": true,
                            "_key": "email"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email_verified'.",
                            "example": "email_verified",
                            "x-nullable": true,
                            "_key": "email_verified"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'family_name'.",
                            "example": "family_name",
                            "x-nullable": true,
                            "_key": "family_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'given_name'.",
                            "example": "given_name",
                            "x-nullable": true,
                            "_key": "given_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'name'.",
                            "example": "name",
                            "x-nullable": true,
                            "_key": "name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'phone_number'.",
                            "example": "phone_number",
                            "x-nullable": true,
                            "_key": "phone_number"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'sub'.",
                            "example": "sub",
                            "x-nullable": true,
                            "_key": "sub"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'updated_at'.",
                            "example": "updated_at",
                            "x-nullable": true,
                            "_key": "updated_at"
                          },
                          {
                            "type": "string",
                            "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                            "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                            "x-nullable": true,
                            "_key": "updated_at_pattern"
                          }
                        ],
                        "foreign_key": {
                          "group": "Accounts",
                          "entity": "oidc_request_claim_mapping"
                        },
                        "x-nullable": true,
                        "_key": "claim_mapping"
                      },
                      {
                        "type": "string",
                        "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_id"
                      },
                      {
                        "type": "string",
                        "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_secret"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's end session endpoint.",
                        "x-nullable": true,
                        "_key": "end_session_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Issuer of the identity provider.",
                        "_key": "issuer"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's JSON web key set document.",
                        "x-nullable": true,
                        "_key": "jwks_uri"
                      },
                      {
                        "type": "array",
                        "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                        "items": {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "The public key.",
                              "_key": "key"
                            },
                            {
                              "type": "string",
                              "description": "The public key ID.",
                              "_key": "kid"
                            }
                          ],
                          "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "identity_provider_public_key"
                          }
                        },
                        "x-nullable": true,
                        "_key": "keys"
                      },
                      {
                        "type": "string",
                        "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                        "x-nullable": true,
                        "_key": "redirect_uri"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's token revocation endpoint.",
                        "x-nullable": true,
                        "_key": "revocation_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                        "example": "openid email",
                        "_key": "scopes"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "token_endpoint"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "POST",
                          "GET"
                        ],
                        "default": "POST",
                        "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                        "_key": "token_request_mode"
                      },
                      {
                        "type": "string",
                        "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                        "example": "oidc.data",
                        "_key": "token_response_path"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                        "x-nullable": true,
                        "_key": "userinfo_endpoint"
                      }
                    ],
                    "description": "Represents OIDC specific attributes.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "oidc_request"
                    },
                    "api_fieldname": "oidc_attributes",
                    "entity_fieldname": "oidc_attributes",
                    "_key": "oidc_attributes"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                        "x-nullable": true,
                        "_key": "assertion_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the identity provider.",
                        "x-nullable": true,
                        "_key": "idp_entity_id"
                      },
                      {
                        "type": "array",
                        "description": "List of public X509 certificates of the identity provider in PEM format.",
                        "items": {
                          "type": "string"
                        },
                        "x-nullable": true,
                        "_key": "idp_x509_certs"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SLO endpoint.",
                        "x-nullable": true,
                        "_key": "slo_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the service provider.",
                        "x-nullable": true,
                        "_key": "sp_entity_id"
                      },
                      {
                        "type": "string",
                        "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                        "readOnly": true,
                        "x-nullable": true,
                        "_key": "sp_x509_cert"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SSO endpoint.",
                        "x-nullable": true,
                        "_key": "sso_endpoint"
                      }
                    ],
                    "description": "Represents SAML2 specific attributes in responses.",
                    "api_fieldname": "saml2_attributes",
                    "entity_fieldname": "saml2_attributes",
                    "_key": "saml2_attributes"
                  },
                  {
                    "type": "string",
                    "description": "Status of the identity provider.",
                    "enum": [
                      "ACTIVE",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "identity_provider_type",
                    "_key": "type"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_identity_provider"
                }
              },
              "_key": "200"
            },
            {
              "description": "Not an OIDC IdP or JWKS URI is unspecified.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An identity provider not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/identity-providers/{identity_provider_id}/refresh-jwks",
          "summary": "Refreshes the OIDC signing keys.",
          "return_type": "identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "name",
            "description",
            "status",
            "saml2_attributes",
            "oidc_attributes",
            "account_id",
            "is_default",
            "identity_provider_type"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "refreshJwks",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "refresh_tokens"
        },
        {
          "description": "Update an existing identity provider.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [
            {
              "api_fieldname": "type",
              "_key": "identity_provider_type"
            }
          ],
          "fields": [
            {
              "type": "string",
              "maxLength": 500,
              "description": "Description for the identity provider.",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "in": "query",
              "name": "discovery",
              "description": "Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint * jwks_uri * keys",
              "type": "boolean",
              "allowEmptyValue": true,
              "entity_fieldname": "discovery",
              "api_fieldname": "discovery",
              "external_param": true,
              "parameter_fieldname": "discovery",
              "required": false,
              "_key": "discovery"
            },
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "identity_provider_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "string",
              "description": "Identity provider type.",
              "enum": [
                "NATIVE",
                "MBED",
                "SAML2",
                "OIDC"
              ],
              "api_fieldname": "type",
              "entity_fieldname": "identity_provider_type",
              "parameter_fieldname": "type",
              "in": "body",
              "required": true,
              "enum_reference": "identity_provider_type_enum",
              "_key": "identity_provider_type"
            },
            {
              "type": "string",
              "maxLength": 100,
              "description": "Name of the identity provider.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": true,
              "_key": "name"
            },
            {
              "type": "object",
              "required": false,
              "properties": [
                {
                  "type": "string",
                  "description": "URL of the OAuth 2.0 authorization endpoint.",
                  "x-nullable": true,
                  "_key": "authorization_endpoint"
                },
                {
                  "type": "boolean",
                  "description": "For future use.",
                  "x-nullable": true,
                  "_key": "auto_enrollment"
                },
                {
                  "description": "Mapping for non-standard OIDC claim names.",
                  "type": "object",
                  "properties": [
                    {
                      "type": "string",
                      "description": "Custom claim name for 'email'.",
                      "example": "email_address",
                      "x-nullable": true,
                      "_key": "email"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'email_verified'.",
                      "example": "email_verified",
                      "x-nullable": true,
                      "_key": "email_verified"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'family_name'.",
                      "example": "family_name",
                      "x-nullable": true,
                      "_key": "family_name"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'given_name'.",
                      "example": "given_name",
                      "x-nullable": true,
                      "_key": "given_name"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'name'.",
                      "example": "name",
                      "x-nullable": true,
                      "_key": "name"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'phone_number'.",
                      "example": "phone_number",
                      "x-nullable": true,
                      "_key": "phone_number"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'sub'.",
                      "example": "sub",
                      "x-nullable": true,
                      "_key": "sub"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'updated_at'.",
                      "example": "updated_at",
                      "x-nullable": true,
                      "_key": "updated_at"
                    },
                    {
                      "type": "string",
                      "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                      "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                      "x-nullable": true,
                      "_key": "updated_at_pattern"
                    }
                  ],
                  "foreign_key": {
                    "group": "Accounts",
                    "entity": "oidc_request_claim_mapping"
                  },
                  "x-nullable": true,
                  "_key": "claim_mapping"
                },
                {
                  "type": "string",
                  "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                  "x-nullable": true,
                  "_key": "client_id"
                },
                {
                  "type": "string",
                  "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                  "x-nullable": true,
                  "_key": "client_secret"
                },
                {
                  "type": "string",
                  "description": "URL of the provider's end session endpoint.",
                  "x-nullable": true,
                  "_key": "end_session_endpoint"
                },
                {
                  "type": "string",
                  "description": "Issuer of the identity provider.",
                  "_key": "issuer"
                },
                {
                  "type": "string",
                  "description": "URL of the provider's JSON web key set document.",
                  "x-nullable": true,
                  "_key": "jwks_uri"
                },
                {
                  "type": "array",
                  "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                  "items": {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "The public key.",
                        "_key": "key"
                      },
                      {
                        "type": "string",
                        "description": "The public key ID.",
                        "_key": "kid"
                      }
                    ],
                    "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "identity_provider_public_key"
                    }
                  },
                  "x-nullable": true,
                  "_key": "keys"
                },
                {
                  "type": "string",
                  "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                  "x-nullable": true,
                  "_key": "redirect_uri"
                },
                {
                  "type": "string",
                  "description": "URL of the provider's token revocation endpoint.",
                  "x-nullable": true,
                  "_key": "revocation_endpoint"
                },
                {
                  "type": "string",
                  "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                  "example": "openid email",
                  "_key": "scopes"
                },
                {
                  "type": "string",
                  "description": "URL of the OAuth 2.0 authorization endpoint.",
                  "x-nullable": true,
                  "_key": "token_endpoint"
                },
                {
                  "type": "string",
                  "enum": [
                    "POST",
                    "GET"
                  ],
                  "default": "POST",
                  "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                  "_key": "token_request_mode"
                },
                {
                  "type": "string",
                  "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                  "example": "oidc.data",
                  "_key": "token_response_path"
                },
                {
                  "type": "string",
                  "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                  "x-nullable": true,
                  "_key": "userinfo_endpoint"
                }
              ],
              "description": "Represents OIDC specific attributes.",
              "foreign_key": {
                "group": "Accounts",
                "entity": "oidc_request"
              },
              "api_fieldname": "oidc_attributes",
              "entity_fieldname": "oidc_attributes",
              "parameter_fieldname": "oidc_attributes",
              "in": "body",
              "_key": "oidc_attributes"
            },
            {
              "type": "object",
              "properties": [
                {
                  "type": "string",
                  "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                  "x-nullable": true,
                  "_key": "assertion_endpoint"
                },
                {
                  "type": "string",
                  "description": "Entity ID of the identity provider.",
                  "x-nullable": true,
                  "_key": "idp_entity_id"
                },
                {
                  "type": "array",
                  "description": "List of public X509 certificates of the identity provider in PEM format.",
                  "items": {
                    "type": "string"
                  },
                  "x-nullable": true,
                  "_key": "idp_x509_certs"
                },
                {
                  "type": "string",
                  "description": "URL of the identity provider's SLO endpoint.",
                  "x-nullable": true,
                  "_key": "slo_endpoint"
                },
                {
                  "type": "string",
                  "description": "Entity ID of the service provider.",
                  "x-nullable": true,
                  "_key": "sp_entity_id"
                },
                {
                  "type": "string",
                  "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                  "readOnly": true,
                  "x-nullable": true,
                  "_key": "sp_x509_cert"
                },
                {
                  "type": "string",
                  "description": "URL of the identity provider's SSO endpoint.",
                  "x-nullable": true,
                  "_key": "sso_endpoint"
                }
              ],
              "description": "Represents SAML2 specific attributes in responses.",
              "api_fieldname": "saml2_attributes",
              "entity_fieldname": "saml2_attributes",
              "parameter_fieldname": "saml2_attributes",
              "in": "body",
              "required": false,
              "_key": "saml2_attributes"
            },
            {
              "type": "string",
              "description": "Status of the identity provider.",
              "enum": [
                "ACTIVE",
                "SUSPENDED"
              ],
              "api_fieldname": "status",
              "entity_fieldname": "status",
              "parameter_fieldname": "status",
              "in": "body",
              "required": false,
              "enum_reference": "identity_provider_status_enum",
              "_key": "status"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "name",
                  "object",
                  "type"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the identity provider belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Description for the identity provider.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "description": "Flag indicating whether this is the global default identity provider.",
                    "readOnly": true,
                    "api_fieldname": "is_default",
                    "entity_fieldname": "is_default",
                    "_key": "is_default"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Name of the identity provider.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'identity-provider'",
                    "enum": [
                      "identity-provider"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "required": [
                      "issuer"
                    ],
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "authorization_endpoint"
                      },
                      {
                        "type": "boolean",
                        "description": "For future use.",
                        "x-nullable": true,
                        "_key": "auto_enrollment"
                      },
                      {
                        "description": "Mapping for non-standard OIDC claim names.",
                        "type": "object",
                        "properties": [
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email'.",
                            "example": "email_address",
                            "x-nullable": true,
                            "_key": "email"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email_verified'.",
                            "example": "email_verified",
                            "x-nullable": true,
                            "_key": "email_verified"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'family_name'.",
                            "example": "family_name",
                            "x-nullable": true,
                            "_key": "family_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'given_name'.",
                            "example": "given_name",
                            "x-nullable": true,
                            "_key": "given_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'name'.",
                            "example": "name",
                            "x-nullable": true,
                            "_key": "name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'phone_number'.",
                            "example": "phone_number",
                            "x-nullable": true,
                            "_key": "phone_number"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'sub'.",
                            "example": "sub",
                            "x-nullable": true,
                            "_key": "sub"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'updated_at'.",
                            "example": "updated_at",
                            "x-nullable": true,
                            "_key": "updated_at"
                          },
                          {
                            "type": "string",
                            "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                            "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                            "x-nullable": true,
                            "_key": "updated_at_pattern"
                          }
                        ],
                        "foreign_key": {
                          "group": "Accounts",
                          "entity": "oidc_request_claim_mapping"
                        },
                        "x-nullable": true,
                        "_key": "claim_mapping"
                      },
                      {
                        "type": "string",
                        "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_id"
                      },
                      {
                        "type": "string",
                        "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_secret"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's end session endpoint.",
                        "x-nullable": true,
                        "_key": "end_session_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Issuer of the identity provider.",
                        "_key": "issuer"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's JSON web key set document.",
                        "x-nullable": true,
                        "_key": "jwks_uri"
                      },
                      {
                        "type": "array",
                        "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                        "items": {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "The public key.",
                              "_key": "key"
                            },
                            {
                              "type": "string",
                              "description": "The public key ID.",
                              "_key": "kid"
                            }
                          ],
                          "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "identity_provider_public_key"
                          }
                        },
                        "x-nullable": true,
                        "_key": "keys"
                      },
                      {
                        "type": "string",
                        "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                        "x-nullable": true,
                        "_key": "redirect_uri"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's token revocation endpoint.",
                        "x-nullable": true,
                        "_key": "revocation_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                        "example": "openid email",
                        "_key": "scopes"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "token_endpoint"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "POST",
                          "GET"
                        ],
                        "default": "POST",
                        "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                        "_key": "token_request_mode"
                      },
                      {
                        "type": "string",
                        "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                        "example": "oidc.data",
                        "_key": "token_response_path"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                        "x-nullable": true,
                        "_key": "userinfo_endpoint"
                      }
                    ],
                    "description": "Represents OIDC specific attributes.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "oidc_request"
                    },
                    "api_fieldname": "oidc_attributes",
                    "entity_fieldname": "oidc_attributes",
                    "_key": "oidc_attributes"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                        "x-nullable": true,
                        "_key": "assertion_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the identity provider.",
                        "x-nullable": true,
                        "_key": "idp_entity_id"
                      },
                      {
                        "type": "array",
                        "description": "List of public X509 certificates of the identity provider in PEM format.",
                        "items": {
                          "type": "string"
                        },
                        "x-nullable": true,
                        "_key": "idp_x509_certs"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SLO endpoint.",
                        "x-nullable": true,
                        "_key": "slo_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the service provider.",
                        "x-nullable": true,
                        "_key": "sp_entity_id"
                      },
                      {
                        "type": "string",
                        "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                        "readOnly": true,
                        "x-nullable": true,
                        "_key": "sp_x509_cert"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SSO endpoint.",
                        "x-nullable": true,
                        "_key": "sso_endpoint"
                      }
                    ],
                    "description": "Represents SAML2 specific attributes in responses.",
                    "api_fieldname": "saml2_attributes",
                    "entity_fieldname": "saml2_attributes",
                    "_key": "saml2_attributes"
                  },
                  {
                    "type": "string",
                    "description": "Status of the identity provider.",
                    "enum": [
                      "ACTIVE",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "identity_provider_type",
                    "_key": "type"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_identity_provider"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data, for example, missing name.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An identity provider not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/identity-providers/{identity_provider_id}",
          "summary": "Update an existing identity provider.",
          "return_type": "identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "account_id",
            "is_default"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "updateIdentityProvider",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the account the identity provider belongs to.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "account_id",
          "readOnly": true,
          "required": false,
          "_key": "account_id"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "maxLength": 500,
          "description": "Description for the identity provider.",
          "api_fieldname": "description",
          "readOnly": false,
          "required": false,
          "_key": "description"
        },
        {
          "type": "string",
          "example": "01619571d01d0242ac12000600000000",
          "description": "Entity ID.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "string",
          "description": "Identity provider type.",
          "enum": [
            "NATIVE",
            "MBED",
            "SAML2",
            "OIDC"
          ],
          "api_fieldname": "type",
          "readOnly": false,
          "required": true,
          "enum_reference": "identity_provider_type_enum",
          "_key": "identity_provider_type"
        },
        {
          "type": "boolean",
          "description": "Flag indicating whether this is the global default identity provider.",
          "readOnly": true,
          "api_fieldname": "is_default",
          "required": false,
          "_key": "is_default"
        },
        {
          "type": "string",
          "maxLength": 100,
          "description": "Name of the identity provider.",
          "api_fieldname": "name",
          "readOnly": false,
          "required": true,
          "_key": "name"
        },
        {
          "type": "object",
          "required": false,
          "properties": [
            {
              "type": "string",
              "description": "URL of the OAuth 2.0 authorization endpoint.",
              "x-nullable": true,
              "_key": "authorization_endpoint"
            },
            {
              "type": "boolean",
              "description": "For future use.",
              "x-nullable": true,
              "_key": "auto_enrollment"
            },
            {
              "description": "Mapping for non-standard OIDC claim names.",
              "type": "object",
              "properties": [
                {
                  "type": "string",
                  "description": "Custom claim name for 'email'.",
                  "example": "email_address",
                  "x-nullable": true,
                  "_key": "email"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'email_verified'.",
                  "example": "email_verified",
                  "x-nullable": true,
                  "_key": "email_verified"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'family_name'.",
                  "example": "family_name",
                  "x-nullable": true,
                  "_key": "family_name"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'given_name'.",
                  "example": "given_name",
                  "x-nullable": true,
                  "_key": "given_name"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'name'.",
                  "example": "name",
                  "x-nullable": true,
                  "_key": "name"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'phone_number'.",
                  "example": "phone_number",
                  "x-nullable": true,
                  "_key": "phone_number"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'sub'.",
                  "example": "sub",
                  "x-nullable": true,
                  "_key": "sub"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'updated_at'.",
                  "example": "updated_at",
                  "x-nullable": true,
                  "_key": "updated_at"
                },
                {
                  "type": "string",
                  "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                  "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                  "x-nullable": true,
                  "_key": "updated_at_pattern"
                }
              ],
              "foreign_key": {
                "group": "Accounts",
                "entity": "oidc_request_claim_mapping"
              },
              "x-nullable": true,
              "_key": "claim_mapping"
            },
            {
              "type": "string",
              "description": "Client ID needed to authenticate and gain access to identity provider's API.",
              "x-nullable": true,
              "_key": "client_id"
            },
            {
              "type": "string",
              "description": "Client secret needed to authenticate and gain access to identity provider's API.",
              "x-nullable": true,
              "_key": "client_secret"
            },
            {
              "type": "string",
              "description": "URL of the provider's end session endpoint.",
              "x-nullable": true,
              "_key": "end_session_endpoint"
            },
            {
              "type": "string",
              "description": "Issuer of the identity provider.",
              "_key": "issuer"
            },
            {
              "type": "string",
              "description": "URL of the provider's JSON web key set document.",
              "x-nullable": true,
              "_key": "jwks_uri"
            },
            {
              "type": "array",
              "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
              "items": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "The public key.",
                    "_key": "key"
                  },
                  {
                    "type": "string",
                    "description": "The public key ID.",
                    "_key": "kid"
                  }
                ],
                "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "identity_provider_public_key"
                }
              },
              "x-nullable": true,
              "_key": "keys"
            },
            {
              "type": "string",
              "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
              "x-nullable": true,
              "_key": "redirect_uri"
            },
            {
              "type": "string",
              "description": "URL of the provider's token revocation endpoint.",
              "x-nullable": true,
              "_key": "revocation_endpoint"
            },
            {
              "type": "string",
              "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
              "example": "openid email",
              "_key": "scopes"
            },
            {
              "type": "string",
              "description": "URL of the OAuth 2.0 authorization endpoint.",
              "x-nullable": true,
              "_key": "token_endpoint"
            },
            {
              "type": "string",
              "enum": [
                "POST",
                "GET"
              ],
              "default": "POST",
              "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
              "_key": "token_request_mode"
            },
            {
              "type": "string",
              "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
              "example": "oidc.data",
              "_key": "token_response_path"
            },
            {
              "type": "string",
              "description": "URL of the OAuth 2.0 UserInfo endpoint.",
              "x-nullable": true,
              "_key": "userinfo_endpoint"
            }
          ],
          "description": "Represents OIDC specific attributes.",
          "foreign_key": {
            "group": "Accounts",
            "entity": "oidc_request"
          },
          "api_fieldname": "oidc_attributes",
          "readOnly": false,
          "_key": "oidc_attributes"
        },
        {
          "type": "object",
          "properties": [
            {
              "type": "string",
              "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
              "x-nullable": true,
              "_key": "assertion_endpoint"
            },
            {
              "type": "string",
              "description": "Entity ID of the identity provider.",
              "x-nullable": true,
              "_key": "idp_entity_id"
            },
            {
              "type": "array",
              "description": "List of public X509 certificates of the identity provider in PEM format.",
              "items": {
                "type": "string"
              },
              "x-nullable": true,
              "_key": "idp_x509_certs"
            },
            {
              "type": "string",
              "description": "URL of the identity provider's SLO endpoint.",
              "x-nullable": true,
              "_key": "slo_endpoint"
            },
            {
              "type": "string",
              "description": "Entity ID of the service provider.",
              "x-nullable": true,
              "_key": "sp_entity_id"
            },
            {
              "type": "string",
              "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
              "readOnly": true,
              "x-nullable": true,
              "_key": "sp_x509_cert"
            },
            {
              "type": "string",
              "description": "URL of the identity provider's SSO endpoint.",
              "x-nullable": true,
              "_key": "sso_endpoint"
            }
          ],
          "description": "Represents SAML2 specific attributes in responses.",
          "api_fieldname": "saml2_attributes",
          "readOnly": false,
          "required": false,
          "_key": "saml2_attributes"
        },
        {
          "type": "string",
          "description": "Status of the identity provider.",
          "enum": [
            "ACTIVE",
            "SUSPENDED"
          ],
          "api_fieldname": "status",
          "readOnly": false,
          "required": false,
          "enum_reference": "identity_provider_status_enum",
          "_key": "status"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update UTC time RFC3339.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [
        {
          "api_fieldname": "type",
          "_key": "identity_provider_type"
        }
      ],
      "tags": [
        "Account - identity providers"
      ],
      "group_id": "Accounts",
      "_key": "identity_provider"
    },
    {
      "swagger_models": [
        "IdpPublicKey"
      ],
      "primary_key_field": null,
      "methods": [],
      "fields": [
        {
          "type": "string",
          "description": "The public key.",
          "api_fieldname": "key",
          "readOnly": true,
          "required": false,
          "_key": "key"
        },
        {
          "type": "string",
          "description": "The public key ID.",
          "api_fieldname": "kid",
          "readOnly": true,
          "required": false,
          "_key": "kid"
        }
      ],
      "field_renames": [],
      "tags": [],
      "group_id": "Accounts",
      "_key": "identity_provider_public_key"
    },
    {
      "swagger_models": [
        "BrandingColor",
        "BrandingColorList"
      ],
      "primary_key_field": "reference",
      "methods": [
        {
          "description": "Resets the branding color to its light theme default.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/{reference} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "is_primary_key": true,
              "_override": true,
              "type": "string",
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "enum": [
                "error_color",
                "primary",
                "secondary",
                "success_color",
                "warning_color",
                "canvas_background",
                "canvas_background_font_color",
                "workspace_background",
                "workspace_background_font_color",
                "info_color",
                "info_font_color",
                "primary_font_color",
                "secondary_font_color",
                "error_font_color",
                "success_font_color",
                "warning_font_color"
              ],
              "name": "reference",
              "in": "path",
              "description": "The name of the branding color.",
              "required": true,
              "enum_reference": "light_theme_color_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Color not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/branding-colors/light/{reference}",
          "summary": "Reset branding color to default.",
          "return_type": "void",
          "return_info": {
            "self": false,
            "custom": true,
            "type": "void"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Branding",
          "operation_id": "resetLightColor",
          "spec": {
            "return_type": "void"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve the light theme branding colors.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-colors/light \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "is_primary_key": true,
              "_override": true,
              "type": "string",
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "_key": "reference"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "example": "#f3f93e",
                          "description": "The color given as name (purple) or as a hex code.",
                          "x-nullable": true,
                          "_key": "color"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'branding_color'",
                          "readOnly": true,
                          "enum": [
                            "branding_color"
                          ],
                          "_key": "object"
                        },
                        {
                          "enum": [
                            "error_color",
                            "primary",
                            "secondary",
                            "success_color",
                            "warning_color",
                            "canvas_background",
                            "canvas_background_font_color",
                            "workspace_background",
                            "workspace_background_font_color",
                            "info_color",
                            "info_font_color",
                            "primary_font_color",
                            "secondary_font_color",
                            "error_font_color",
                            "success_font_color",
                            "warning_font_color"
                          ],
                          "type": "string",
                          "description": "Color name.",
                          "is_primary_key": true,
                          "_override": true,
                          "_key": "reference"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update time in UTC.",
                          "readOnly": true,
                          "_key": "updated_at"
                        }
                      ],
                      "foreign_key": {
                        "group": "Branding",
                        "entity": "dark_theme_color"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return, or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Branding",
                  "entity": "light_theme_color"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/branding-colors/light",
          "summary": "Get light theme branding colors.",
          "return_type": "paginated_response(light_theme_color)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "light_theme_color"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "limit",
            "after",
            "order",
            "total_count",
            "has_more",
            "data"
          ],
          "foreign_key_priority": "self",
          "group_id": "Branding",
          "operation_id": "getLightColors",
          "pagination": true,
          "foreign_key": {
            "group": "Branding",
            "entity": "light_theme_color"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve the requested light theme branding color.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/{reference} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "enum": [
                "error_color",
                "primary",
                "secondary",
                "success_color",
                "warning_color",
                "canvas_background",
                "canvas_background_font_color",
                "workspace_background",
                "workspace_background_font_color",
                "info_color",
                "info_font_color",
                "primary_font_color",
                "secondary_font_color",
                "error_font_color",
                "success_font_color",
                "warning_font_color"
              ],
              "type": "string",
              "description": "Color name.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "light_theme_color_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "example": "#f3f93e",
                    "description": "The color given as name (purple) or as a hex code.",
                    "x-nullable": true,
                    "api_fieldname": "color",
                    "entity_fieldname": "color",
                    "parameter_fieldname": "color",
                    "in": "body",
                    "required": false,
                    "_key": "color"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_color'",
                    "readOnly": true,
                    "enum": [
                      "branding_color"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "name": "object",
                    "in": "body",
                    "schema_param": true,
                    "external_param": true,
                    "parameter_fieldname": "object",
                    "required": false,
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "error_color",
                      "primary",
                      "secondary",
                      "success_color",
                      "warning_color",
                      "canvas_background",
                      "canvas_background_font_color",
                      "workspace_background",
                      "workspace_background_font_color",
                      "info_color",
                      "info_font_color",
                      "primary_font_color",
                      "secondary_font_color",
                      "error_font_color",
                      "success_font_color",
                      "warning_font_color"
                    ],
                    "type": "string",
                    "description": "Color name.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "name": "reference",
                    "in": "path",
                    "required": true,
                    "enum_reference": "dark_theme_color_reference_enum",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "parameter_fieldname": "updated_at",
                    "in": "body",
                    "required": false,
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_light_theme_color"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Color not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/branding-colors/light/{reference}",
          "summary": "Get light theme branding color.",
          "return_type": "light_theme_color",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "light_theme_color"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "color",
            "updated_at"
          ],
          "group_id": "Branding",
          "operation_id": "getLightColor",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update light theme branding color.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/primary \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{ \"color\": \"purple\" }'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "#f3f93e",
              "description": "The color given as name (purple) or as a hex code.",
              "x-nullable": true,
              "api_fieldname": "color",
              "entity_fieldname": "color",
              "parameter_fieldname": "color",
              "in": "body",
              "required": false,
              "_key": "color"
            },
            {
              "enum": [
                "error_color",
                "primary",
                "secondary",
                "success_color",
                "warning_color",
                "canvas_background",
                "canvas_background_font_color",
                "workspace_background",
                "workspace_background_font_color",
                "info_color",
                "info_font_color",
                "primary_font_color",
                "secondary_font_color",
                "error_font_color",
                "success_font_color",
                "warning_font_color"
              ],
              "type": "string",
              "description": "Color name.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "light_theme_color_reference_enum",
              "_key": "reference"
            },
            {
              "type": "string",
              "format": "date-time",
              "example": "2018-02-14T15:24:14Z",
              "description": "Last update time in UTC.",
              "readOnly": true,
              "api_fieldname": "updated_at",
              "entity_fieldname": "updated_at",
              "parameter_fieldname": "updated_at",
              "in": "body",
              "required": false,
              "_key": "updated_at"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Color has been set successfully.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "example": "#f3f93e",
                    "description": "The color given as name (purple) or as a hex code.",
                    "x-nullable": true,
                    "api_fieldname": "color",
                    "entity_fieldname": "color",
                    "parameter_fieldname": "color",
                    "in": "body",
                    "required": false,
                    "_key": "color"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_color'",
                    "readOnly": true,
                    "enum": [
                      "branding_color"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "name": "object",
                    "in": "body",
                    "schema_param": true,
                    "external_param": true,
                    "parameter_fieldname": "object",
                    "required": false,
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "error_color",
                      "primary",
                      "secondary",
                      "success_color",
                      "warning_color",
                      "canvas_background",
                      "canvas_background_font_color",
                      "workspace_background",
                      "workspace_background_font_color",
                      "info_color",
                      "info_font_color",
                      "primary_font_color",
                      "secondary_font_color",
                      "error_font_color",
                      "success_font_color",
                      "warning_font_color"
                    ],
                    "type": "string",
                    "description": "Color name.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "name": "reference",
                    "in": "path",
                    "required": true,
                    "enum_reference": "dark_theme_color_reference_enum",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "parameter_fieldname": "updated_at",
                    "in": "body",
                    "required": false,
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_light_theme_color"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data format.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Color not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/branding-colors/light/{reference}",
          "summary": "Updates light theme branding color.",
          "return_type": "light_theme_color",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "light_theme_color"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Branding",
          "operation_id": "setLightColor",
          "additional_operations": [
            {
              "operation_id": "bulkSetLightColors",
              "notes": "Bulk operation is not appriate for SDK's entity model, this functionality is covered by the update method."
            }
          ],
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "#f3f93e",
          "description": "The color given as name (purple) or as a hex code.",
          "x-nullable": true,
          "api_fieldname": "color",
          "parameter_fieldname": "color",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "color"
        },
        {
          "enum": [
            "error_color",
            "primary",
            "secondary",
            "success_color",
            "warning_color",
            "canvas_background",
            "canvas_background_font_color",
            "workspace_background",
            "workspace_background_font_color",
            "info_color",
            "info_font_color",
            "primary_font_color",
            "secondary_font_color",
            "error_font_color",
            "success_font_color",
            "warning_font_color"
          ],
          "type": "string",
          "description": "Color name.",
          "is_primary_key": true,
          "_override": true,
          "api_fieldname": "reference",
          "name": "reference",
          "in": "path",
          "required": false,
          "enum_reference": "light_theme_color_reference_enum",
          "readOnly": false,
          "_key": "reference"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update time in UTC.",
          "readOnly": true,
          "api_fieldname": "updated_at",
          "parameter_fieldname": "updated_at",
          "in": "body",
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "User interface configuration - colors"
      ],
      "group_id": "Branding",
      "_key": "light_theme_color"
    },
    {
      "swagger_models": [
        "BrandingImage",
        "BrandingImageList"
      ],
      "primary_key_field": "reference",
      "methods": [
        {
          "description": "Revert an account branding image to light theme default.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/branding-images/light/{reference}/clear \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "is_primary_key": true,
              "_override": true,
              "type": "string",
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "enum": [
                "brand_logo_portrait",
                "brand_logo_square",
                "brand_logo_landscape",
                "brand_logo_email",
                "desktop_background_landscape",
                "desktop_background_square",
                "desktop_background_portrait",
                "carousel_image_portrait_0",
                "carousel_image_portrait_1",
                "carousel_image_portrait_2",
                "carousel_image_portrait_3",
                "carousel_image_portrait_4",
                "carousel_image_portrait_5",
                "carousel_image_portrait_6",
                "carousel_image_portrait_7",
                "carousel_image_portrait_8",
                "carousel_image_portrait_9",
                "carousel_image_square_0",
                "carousel_image_square_1",
                "carousel_image_square_2",
                "carousel_image_square_3",
                "carousel_image_square_4",
                "carousel_image_square_5",
                "carousel_image_square_6",
                "carousel_image_square_7",
                "carousel_image_square_8",
                "carousel_image_square_9",
                "carousel_image_landscape_0",
                "carousel_image_landscape_1",
                "carousel_image_landscape_2",
                "carousel_image_landscape_3",
                "carousel_image_landscape_4",
                "carousel_image_landscape_5",
                "carousel_image_landscape_6",
                "carousel_image_landscape_7",
                "carousel_image_landscape_8",
                "carousel_image_landscape_9"
              ],
              "name": "reference",
              "in": "path",
              "description": "Name of the branding images (icon or picture).",
              "required": true,
              "enum_reference": "light_theme_image_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "post",
          "mode": "delete",
          "responses": [
            {
              "description": "Image reverted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Unknown image reference.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/branding-images/light/{reference}/clear",
          "summary": "Revert an image to light theme default.",
          "return_type": "light_theme_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "light_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Branding",
          "operation_id": "clearLightImage",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve the metadata of all light theme branding images.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-images/light \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "is_primary_key": true,
              "_override": true,
              "type": "string",
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "_key": "reference"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "Entity name: always 'branding_image'",
                          "readOnly": true,
                          "enum": [
                            "branding_image"
                          ],
                          "_key": "object"
                        },
                        {
                          "enum": [
                            "brand_logo_portrait",
                            "brand_logo_square",
                            "brand_logo_landscape",
                            "brand_logo_email",
                            "desktop_background_landscape",
                            "desktop_background_square",
                            "desktop_background_portrait",
                            "carousel_image_portrait_0",
                            "carousel_image_portrait_1",
                            "carousel_image_portrait_2",
                            "carousel_image_portrait_3",
                            "carousel_image_portrait_4",
                            "carousel_image_portrait_5",
                            "carousel_image_portrait_6",
                            "carousel_image_portrait_7",
                            "carousel_image_portrait_8",
                            "carousel_image_portrait_9",
                            "carousel_image_square_0",
                            "carousel_image_square_1",
                            "carousel_image_square_2",
                            "carousel_image_square_3",
                            "carousel_image_square_4",
                            "carousel_image_square_5",
                            "carousel_image_square_6",
                            "carousel_image_square_7",
                            "carousel_image_square_8",
                            "carousel_image_square_9",
                            "carousel_image_landscape_0",
                            "carousel_image_landscape_1",
                            "carousel_image_landscape_2",
                            "carousel_image_landscape_3",
                            "carousel_image_landscape_4",
                            "carousel_image_landscape_5",
                            "carousel_image_landscape_6",
                            "carousel_image_landscape_7",
                            "carousel_image_landscape_8",
                            "carousel_image_landscape_9"
                          ],
                          "type": "string",
                          "description": "Name of the image.",
                          "is_primary_key": true,
                          "_override": true,
                          "_key": "reference"
                        },
                        {
                          "type": "string",
                          "format": "uri",
                          "example": "https://static.mbed.com/123456789.jpg",
                          "description": "The static link to the image.",
                          "readOnly": true,
                          "_key": "static_uri"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update time in UTC.",
                          "readOnly": true,
                          "_key": "updated_at"
                        }
                      ],
                      "foreign_key": {
                        "group": "Branding",
                        "entity": "dark_theme_image"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return, or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Branding",
                  "entity": "light_theme_image"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/branding-images/light",
          "summary": "Get metadata of all light theme images.",
          "return_type": "paginated_response(light_theme_image)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "light_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "limit",
            "after",
            "order",
            "total_count",
            "has_more",
            "data"
          ],
          "foreign_key_priority": "self",
          "group_id": "Branding",
          "operation_id": "getAllLightImageData",
          "pagination": true,
          "foreign_key": {
            "group": "Branding",
            "entity": "light_theme_image"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve metadata for one account light theme branding image.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-images/light/{reference} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "enum": [
                "brand_logo_portrait",
                "brand_logo_square",
                "brand_logo_landscape",
                "brand_logo_email",
                "desktop_background_landscape",
                "desktop_background_square",
                "desktop_background_portrait",
                "carousel_image_portrait_0",
                "carousel_image_portrait_1",
                "carousel_image_portrait_2",
                "carousel_image_portrait_3",
                "carousel_image_portrait_4",
                "carousel_image_portrait_5",
                "carousel_image_portrait_6",
                "carousel_image_portrait_7",
                "carousel_image_portrait_8",
                "carousel_image_portrait_9",
                "carousel_image_square_0",
                "carousel_image_square_1",
                "carousel_image_square_2",
                "carousel_image_square_3",
                "carousel_image_square_4",
                "carousel_image_square_5",
                "carousel_image_square_6",
                "carousel_image_square_7",
                "carousel_image_square_8",
                "carousel_image_square_9",
                "carousel_image_landscape_0",
                "carousel_image_landscape_1",
                "carousel_image_landscape_2",
                "carousel_image_landscape_3",
                "carousel_image_landscape_4",
                "carousel_image_landscape_5",
                "carousel_image_landscape_6",
                "carousel_image_landscape_7",
                "carousel_image_landscape_8",
                "carousel_image_landscape_9"
              ],
              "type": "string",
              "description": "Name of the image.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "light_theme_image_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_image'",
                    "readOnly": true,
                    "enum": [
                      "branding_image"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "brand_logo_portrait",
                      "brand_logo_square",
                      "brand_logo_landscape",
                      "brand_logo_email",
                      "desktop_background_landscape",
                      "desktop_background_square",
                      "desktop_background_portrait",
                      "carousel_image_portrait_0",
                      "carousel_image_portrait_1",
                      "carousel_image_portrait_2",
                      "carousel_image_portrait_3",
                      "carousel_image_portrait_4",
                      "carousel_image_portrait_5",
                      "carousel_image_portrait_6",
                      "carousel_image_portrait_7",
                      "carousel_image_portrait_8",
                      "carousel_image_portrait_9",
                      "carousel_image_square_0",
                      "carousel_image_square_1",
                      "carousel_image_square_2",
                      "carousel_image_square_3",
                      "carousel_image_square_4",
                      "carousel_image_square_5",
                      "carousel_image_square_6",
                      "carousel_image_square_7",
                      "carousel_image_square_8",
                      "carousel_image_square_9",
                      "carousel_image_landscape_0",
                      "carousel_image_landscape_1",
                      "carousel_image_landscape_2",
                      "carousel_image_landscape_3",
                      "carousel_image_landscape_4",
                      "carousel_image_landscape_5",
                      "carousel_image_landscape_6",
                      "carousel_image_landscape_7",
                      "carousel_image_landscape_8",
                      "carousel_image_landscape_9"
                    ],
                    "type": "string",
                    "description": "Name of the image.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "name": "reference",
                    "in": "path",
                    "required": true,
                    "enum_reference": "dark_theme_image_reference_enum",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "uri",
                    "example": "https://static.mbed.com/123456789.jpg",
                    "description": "The static link to the image.",
                    "readOnly": true,
                    "api_fieldname": "static_uri",
                    "entity_fieldname": "static_uri",
                    "_key": "static_uri"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_light_theme_image"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Unknown image reference.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/branding-images/light/{reference}",
          "summary": "Get metadata of a light theme image.",
          "return_type": "light_theme_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "light_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "static_uri",
            "updated_at"
          ],
          "group_id": "Branding",
          "operation_id": "getLightImageData",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Upload a new account branding image as form data in the light theme in PNG or JPEG format.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [],
          "fields": [
            {
              "in": "stream",
              "name": "image",
              "description": "The image in PNG or JPEG format as multipart form data.",
              "required": true,
              "type": "file",
              "entity_fieldname": "image",
              "api_fieldname": "image",
              "external_param": true,
              "parameter_fieldname": "image",
              "_key": "image"
            },
            {
              "enum": [
                "brand_logo_portrait",
                "brand_logo_square",
                "brand_logo_landscape",
                "brand_logo_email",
                "desktop_background_landscape",
                "desktop_background_square",
                "desktop_background_portrait",
                "carousel_image_portrait_0",
                "carousel_image_portrait_1",
                "carousel_image_portrait_2",
                "carousel_image_portrait_3",
                "carousel_image_portrait_4",
                "carousel_image_portrait_5",
                "carousel_image_portrait_6",
                "carousel_image_portrait_7",
                "carousel_image_portrait_8",
                "carousel_image_portrait_9",
                "carousel_image_square_0",
                "carousel_image_square_1",
                "carousel_image_square_2",
                "carousel_image_square_3",
                "carousel_image_square_4",
                "carousel_image_square_5",
                "carousel_image_square_6",
                "carousel_image_square_7",
                "carousel_image_square_8",
                "carousel_image_square_9",
                "carousel_image_landscape_0",
                "carousel_image_landscape_1",
                "carousel_image_landscape_2",
                "carousel_image_landscape_3",
                "carousel_image_landscape_4",
                "carousel_image_landscape_5",
                "carousel_image_landscape_6",
                "carousel_image_landscape_7",
                "carousel_image_landscape_8",
                "carousel_image_landscape_9"
              ],
              "type": "string",
              "description": "Name of the image.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "light_theme_image_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "post",
          "mode": "update",
          "responses": [
            {
              "description": "Image uploaded successfully.",
              "headers": [
                {
                  "type": "string",
                  "description": "Location of the image metadata.",
                  "_key": "Content-Location"
                },
                {
                  "type": "string",
                  "description": "Location of the image binary.",
                  "_key": "Location"
                }
              ],
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_image'",
                    "readOnly": true,
                    "enum": [
                      "branding_image"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "brand_logo_portrait",
                      "brand_logo_square",
                      "brand_logo_landscape",
                      "brand_logo_email",
                      "desktop_background_landscape",
                      "desktop_background_square",
                      "desktop_background_portrait",
                      "carousel_image_portrait_0",
                      "carousel_image_portrait_1",
                      "carousel_image_portrait_2",
                      "carousel_image_portrait_3",
                      "carousel_image_portrait_4",
                      "carousel_image_portrait_5",
                      "carousel_image_portrait_6",
                      "carousel_image_portrait_7",
                      "carousel_image_portrait_8",
                      "carousel_image_portrait_9",
                      "carousel_image_square_0",
                      "carousel_image_square_1",
                      "carousel_image_square_2",
                      "carousel_image_square_3",
                      "carousel_image_square_4",
                      "carousel_image_square_5",
                      "carousel_image_square_6",
                      "carousel_image_square_7",
                      "carousel_image_square_8",
                      "carousel_image_square_9",
                      "carousel_image_landscape_0",
                      "carousel_image_landscape_1",
                      "carousel_image_landscape_2",
                      "carousel_image_landscape_3",
                      "carousel_image_landscape_4",
                      "carousel_image_landscape_5",
                      "carousel_image_landscape_6",
                      "carousel_image_landscape_7",
                      "carousel_image_landscape_8",
                      "carousel_image_landscape_9"
                    ],
                    "type": "string",
                    "description": "Name of the image.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "name": "reference",
                    "in": "path",
                    "required": true,
                    "enum_reference": "dark_theme_image_reference_enum",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "uri",
                    "example": "https://static.mbed.com/123456789.jpg",
                    "description": "The static link to the image.",
                    "readOnly": true,
                    "api_fieldname": "static_uri",
                    "entity_fieldname": "static_uri",
                    "_key": "static_uri"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_light_theme_image"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data format, for example, image is too large.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Unknown image reference.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/branding-images/light/{reference}/upload-multipart",
          "summary": "Upload a light theme image.",
          "return_type": "light_theme_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "light_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "static_uri",
            "updated_at"
          ],
          "group_id": "Branding",
          "operation_id": "uploadLightImageMultipart",
          "additional_operations": [
            {
              "operation_id": "uploadLightImage",
              "notes": "The multipart request is more generic and better supported by SDKs."
            }
          ],
          "pagination": false,
          "request_content_type": "multipart/form-data",
          "request_body": "file",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "enum": [
            "brand_logo_portrait",
            "brand_logo_square",
            "brand_logo_landscape",
            "brand_logo_email",
            "desktop_background_landscape",
            "desktop_background_square",
            "desktop_background_portrait",
            "carousel_image_portrait_0",
            "carousel_image_portrait_1",
            "carousel_image_portrait_2",
            "carousel_image_portrait_3",
            "carousel_image_portrait_4",
            "carousel_image_portrait_5",
            "carousel_image_portrait_6",
            "carousel_image_portrait_7",
            "carousel_image_portrait_8",
            "carousel_image_portrait_9",
            "carousel_image_square_0",
            "carousel_image_square_1",
            "carousel_image_square_2",
            "carousel_image_square_3",
            "carousel_image_square_4",
            "carousel_image_square_5",
            "carousel_image_square_6",
            "carousel_image_square_7",
            "carousel_image_square_8",
            "carousel_image_square_9",
            "carousel_image_landscape_0",
            "carousel_image_landscape_1",
            "carousel_image_landscape_2",
            "carousel_image_landscape_3",
            "carousel_image_landscape_4",
            "carousel_image_landscape_5",
            "carousel_image_landscape_6",
            "carousel_image_landscape_7",
            "carousel_image_landscape_8",
            "carousel_image_landscape_9"
          ],
          "type": "string",
          "description": "Name of the image.",
          "is_primary_key": true,
          "_override": true,
          "api_fieldname": "reference",
          "name": "reference",
          "in": "path",
          "required": false,
          "enum_reference": "light_theme_image_reference_enum",
          "readOnly": false,
          "_key": "reference"
        },
        {
          "type": "string",
          "format": "uri",
          "example": "https://static.mbed.com/123456789.jpg",
          "description": "The static link to the image.",
          "readOnly": true,
          "api_fieldname": "static_uri",
          "required": false,
          "_key": "static_uri"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update time in UTC.",
          "readOnly": true,
          "api_fieldname": "updated_at",
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "User interface configuration - images"
      ],
      "group_id": "Branding",
      "_key": "light_theme_image"
    },
    {
      "swagger_models": [
        "LoginHistory"
      ],
      "primary_key_field": null,
      "methods": [],
      "fields": [
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T17:52:07Z",
          "description": "UTC time RFC3339 for this login attempt.",
          "api_fieldname": "date",
          "readOnly": true,
          "required": false,
          "_key": "date"
        },
        {
          "type": "string",
          "example": "127.0.0.1",
          "description": "IP address of the client.",
          "api_fieldname": "ip_address",
          "readOnly": true,
          "required": false,
          "_key": "ip_address"
        },
        {
          "type": "boolean",
          "example": true,
          "description": "Flag indicating whether login attempt was successful or not.",
          "api_fieldname": "success",
          "readOnly": true,
          "required": false,
          "_key": "success"
        },
        {
          "type": "string",
          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
          "description": "User Agent header from the login request.",
          "api_fieldname": "user_agent",
          "readOnly": true,
          "required": false,
          "_key": "user_agent"
        }
      ],
      "field_renames": [],
      "tags": [],
      "group_id": "Accounts",
      "_key": "login_history"
    },
    {
      "swagger_models": [
        "LoginProfile"
      ],
      "primary_key_field": "id",
      "methods": [],
      "fields": [
        {
          "type": "string",
          "example": "fed/user_007",
          "description": "The ID of the user in the identity provider's service.",
          "readOnly": true,
          "api_fieldname": "foreign_id",
          "required": false,
          "_key": "foreign_id"
        },
        {
          "type": "string",
          "example": "01619571f3c00242ac12000600000000",
          "description": "ID of the identity provider.",
          "readOnly": false,
          "_override": true,
          "api_fieldname": "id",
          "required": false,
          "_key": "id"
        },
        {
          "type": "string",
          "description": "Identity provider type.",
          "example": "NATIVE",
          "readOnly": true,
          "enum": [
            "NATIVE",
            "MBED",
            "SAML2",
            "OIDC"
          ],
          "api_fieldname": "type",
          "required": false,
          "enum_reference": "login_profile_type_enum",
          "_key": "login_profile_type"
        },
        {
          "type": "string",
          "example": "Pelion",
          "readOnly": false,
          "description": "Name of the identity provider.",
          "_override": true,
          "api_fieldname": "name",
          "required": false,
          "_key": "name"
        }
      ],
      "field_renames": [
        {
          "api_fieldname": "type",
          "_key": "login_profile_type"
        }
      ],
      "tags": [],
      "group_id": "Accounts",
      "_key": "login_profile"
    },
    {
      "swagger_models": [
        "OIDCInfo"
      ],
      "primary_key_field": null,
      "methods": [],
      "fields": [
        {
          "type": "string",
          "description": "URL of the OAuth 2.0 authorization endpoint.",
          "x-nullable": true,
          "api_fieldname": "authorization_endpoint",
          "readOnly": true,
          "required": false,
          "_key": "authorization_endpoint"
        },
        {
          "type": "boolean",
          "description": "For future use.",
          "x-nullable": true,
          "api_fieldname": "auto_enrollment",
          "readOnly": true,
          "required": false,
          "_key": "auto_enrollment"
        },
        {
          "description": "Mapping for non-standard OIDC claim names.",
          "type": "object",
          "properties": [
            {
              "type": "string",
              "description": "Custom claim name for 'email'.",
              "example": "email_address",
              "x-nullable": true,
              "_key": "email"
            },
            {
              "type": "string",
              "description": "Custom claim name for 'email_verified'.",
              "example": "email_verified",
              "x-nullable": true,
              "_key": "email_verified"
            },
            {
              "type": "string",
              "description": "Custom claim name for 'family_name'.",
              "example": "family_name",
              "x-nullable": true,
              "_key": "family_name"
            },
            {
              "type": "string",
              "description": "Custom claim name for 'given_name'.",
              "example": "given_name",
              "x-nullable": true,
              "_key": "given_name"
            },
            {
              "type": "string",
              "description": "Custom claim name for 'name'.",
              "example": "name",
              "x-nullable": true,
              "_key": "name"
            },
            {
              "type": "string",
              "description": "Custom claim name for 'phone_number'.",
              "example": "phone_number",
              "x-nullable": true,
              "_key": "phone_number"
            },
            {
              "type": "string",
              "description": "Custom claim name for 'sub'.",
              "example": "sub",
              "x-nullable": true,
              "_key": "sub"
            },
            {
              "type": "string",
              "description": "Custom claim name for 'updated_at'.",
              "example": "updated_at",
              "x-nullable": true,
              "_key": "updated_at"
            },
            {
              "type": "string",
              "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
              "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
              "x-nullable": true,
              "_key": "updated_at_pattern"
            }
          ],
          "foreign_key": {
            "group": "Accounts",
            "entity": "oidc_request_claim_mapping"
          },
          "x-nullable": true,
          "api_fieldname": "claim_mapping",
          "readOnly": true,
          "required": false,
          "_key": "claim_mapping"
        },
        {
          "type": "string",
          "description": "Client ID needed to authenticate and gain access to identity provider's API.",
          "x-nullable": true,
          "api_fieldname": "client_id",
          "readOnly": true,
          "required": false,
          "_key": "client_id"
        },
        {
          "type": "string",
          "description": "Client secret needed to authenticate and gain access to identity provider's API.",
          "x-nullable": true,
          "api_fieldname": "client_secret",
          "readOnly": true,
          "required": false,
          "_key": "client_secret"
        },
        {
          "type": "string",
          "description": "URL of the provider's end session endpoint.",
          "x-nullable": true,
          "api_fieldname": "end_session_endpoint",
          "readOnly": true,
          "required": false,
          "_key": "end_session_endpoint"
        },
        {
          "type": "string",
          "description": "Issuer of the identity provider.",
          "api_fieldname": "issuer",
          "readOnly": true,
          "required": false,
          "_key": "issuer"
        },
        {
          "type": "string",
          "description": "URL of the provider's JSON web key set document.",
          "x-nullable": true,
          "api_fieldname": "jwks_uri",
          "readOnly": true,
          "required": false,
          "_key": "jwks_uri"
        },
        {
          "type": "array",
          "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
          "items": {
            "type": "object",
            "properties": [
              {
                "type": "string",
                "description": "The public key.",
                "_key": "key"
              },
              {
                "type": "string",
                "description": "The public key ID.",
                "_key": "kid"
              }
            ],
            "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
            "foreign_key": {
              "group": "Accounts",
              "entity": "identity_provider_public_key"
            }
          },
          "x-nullable": true,
          "api_fieldname": "keys",
          "readOnly": true,
          "required": false,
          "_key": "keys"
        },
        {
          "type": "string",
          "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
          "x-nullable": true,
          "api_fieldname": "redirect_uri",
          "readOnly": true,
          "required": false,
          "_key": "redirect_uri"
        },
        {
          "type": "string",
          "description": "URL of the provider's token revocation endpoint.",
          "x-nullable": true,
          "api_fieldname": "revocation_endpoint",
          "readOnly": true,
          "required": false,
          "_key": "revocation_endpoint"
        },
        {
          "type": "string",
          "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
          "example": "openid email",
          "api_fieldname": "scopes",
          "readOnly": true,
          "required": false,
          "_key": "scopes"
        },
        {
          "type": "string",
          "description": "URL of the OAuth 2.0 authorization endpoint.",
          "x-nullable": true,
          "api_fieldname": "token_endpoint",
          "readOnly": true,
          "required": false,
          "_key": "token_endpoint"
        },
        {
          "type": "string",
          "enum": [
            "POST",
            "GET"
          ],
          "default": "POST",
          "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
          "api_fieldname": "token_request_mode",
          "readOnly": true,
          "required": false,
          "enum_reference": "oidc_request_token_mode_enum",
          "_key": "token_request_mode"
        },
        {
          "type": "string",
          "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
          "example": "oidc.data",
          "api_fieldname": "token_response_path",
          "readOnly": true,
          "required": false,
          "_key": "token_response_path"
        },
        {
          "type": "string",
          "description": "URL of the OAuth 2.0 UserInfo endpoint.",
          "x-nullable": true,
          "api_fieldname": "userinfo_endpoint",
          "readOnly": true,
          "required": false,
          "_key": "userinfo_endpoint"
        }
      ],
      "field_renames": [],
      "tags": [],
      "group_id": "Accounts",
      "_key": "oidc_request"
    },
    {
      "swagger_models": [
        "OIDCClaimMapping"
      ],
      "primary_key_field": null,
      "methods": [],
      "fields": [
        {
          "type": "string",
          "description": "Custom claim name for 'email'.",
          "example": "email_address",
          "x-nullable": true,
          "api_fieldname": "email",
          "readOnly": true,
          "required": false,
          "_key": "email"
        },
        {
          "type": "string",
          "description": "Custom claim name for 'email_verified'.",
          "example": "email_verified",
          "x-nullable": true,
          "api_fieldname": "email_verified",
          "readOnly": true,
          "required": false,
          "_key": "email_verified"
        },
        {
          "type": "string",
          "description": "Custom claim name for 'family_name'.",
          "example": "family_name",
          "x-nullable": true,
          "api_fieldname": "family_name",
          "readOnly": true,
          "required": false,
          "_key": "family_name"
        },
        {
          "type": "string",
          "description": "Custom claim name for 'given_name'.",
          "example": "given_name",
          "x-nullable": true,
          "api_fieldname": "given_name",
          "readOnly": true,
          "required": false,
          "_key": "given_name"
        },
        {
          "type": "string",
          "description": "Custom claim name for 'name'.",
          "example": "name",
          "x-nullable": true,
          "api_fieldname": "name",
          "readOnly": true,
          "required": false,
          "_key": "name"
        },
        {
          "type": "string",
          "description": "Custom claim name for 'phone_number'.",
          "example": "phone_number",
          "x-nullable": true,
          "api_fieldname": "phone_number",
          "readOnly": true,
          "required": false,
          "_key": "phone_number"
        },
        {
          "type": "string",
          "description": "Custom claim name for 'sub'.",
          "example": "sub",
          "x-nullable": true,
          "api_fieldname": "sub",
          "readOnly": true,
          "required": false,
          "_key": "sub"
        },
        {
          "type": "string",
          "description": "Custom claim name for 'updated_at'.",
          "example": "updated_at",
          "x-nullable": true,
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        },
        {
          "type": "string",
          "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
          "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
          "x-nullable": true,
          "api_fieldname": "updated_at_pattern",
          "readOnly": true,
          "required": false,
          "_key": "updated_at_pattern"
        }
      ],
      "field_renames": [],
      "tags": [],
      "group_id": "Accounts",
      "_key": "oidc_request_claim_mapping"
    },
    {
      "swagger_models": [
        "ParentAccountInfo"
      ],
      "primary_key_field": "id",
      "methods": [],
      "fields": [
        {
          "pattern": "^(?=.{3,254}$).+\\@.+",
          "type": "string",
          "example": "info@arm.com",
          "description": "The email address of the admin user who is the contact person of the parent account.",
          "api_fieldname": "admin_email",
          "readOnly": true,
          "required": false,
          "_key": "admin_email"
        },
        {
          "type": "string",
          "maxLength": 100,
          "example": "J. Doe",
          "description": "The name of the admin user who is the contact person of the parent account.",
          "api_fieldname": "admin_name",
          "readOnly": true,
          "required": false,
          "_key": "admin_name"
        },
        {
          "type": "string",
          "example": "01619571dad80242ac12000600000000",
          "description": "The ID of the parent account.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "readOnly": true,
          "required": false,
          "_key": "id"
        }
      ],
      "field_renames": [],
      "tags": [],
      "group_id": "Accounts",
      "_key": "parent_account"
    },
    {
      "swagger_models": [
        "PasswordPolicy"
      ],
      "primary_key_field": null,
      "methods": [],
      "fields": [
        {
          "type": "integer",
          "minimum": 8,
          "maximum": 512,
          "example": "8",
          "description": "Minimum length for the password.",
          "api_fieldname": "minimum_length",
          "readOnly": true,
          "required": false,
          "_key": "minimum_length"
        }
      ],
      "field_renames": [],
      "tags": [],
      "group_id": "Accounts",
      "_key": "password_policy"
    },
    {
      "swagger_models": [
        "FeaturePolicy"
      ],
      "primary_key_field": null,
      "methods": [],
      "fields": [
        {
          "type": "string",
          "example": "GET",
          "description": "Comma-separated list of actions, empty string represents all actions.",
          "api_fieldname": "action",
          "readOnly": true,
          "required": false,
          "_key": "action"
        },
        {
          "type": "boolean",
          "example": true,
          "description": "True or false controlling whether an action is allowed or not.",
          "api_fieldname": "allow",
          "readOnly": true,
          "required": false,
          "_key": "allow"
        },
        {
          "type": "string",
          "example": "update-campaigns",
          "description": "Feature name corresponding to this policy.",
          "api_fieldname": "feature",
          "readOnly": true,
          "required": false,
          "_key": "feature"
        },
        {
          "type": "boolean",
          "example": false,
          "description": "Flag indicating whether this feature is inherited or overwritten specifically.",
          "readOnly": true,
          "api_fieldname": "inherited",
          "required": false,
          "_key": "inherited"
        },
        {
          "type": "string",
          "example": "016ada3ec2d46665bf66e32e00000000",
          "description": "An ID indicating where this policy is inherited from.",
          "pattern": "[a-f0-9]{32}",
          "readOnly": true,
          "api_fieldname": "inherited_from",
          "required": false,
          "_key": "inherited_from"
        },
        {
          "type": "string",
          "example": "account",
          "description": "Indicates the type of entity this policy is inherited from.",
          "readOnly": true,
          "enum": [
            "account",
            "template",
            "tier_template"
          ],
          "api_fieldname": "inherited_type",
          "required": false,
          "enum_reference": "policy_inherited_type_enum",
          "_key": "inherited_type"
        },
        {
          "type": "string",
          "example": "/v3/update-campaign",
          "description": "Resource that is protected by this policy.",
          "api_fieldname": "resource",
          "readOnly": true,
          "required": false,
          "_key": "resource"
        }
      ],
      "field_renames": [],
      "tags": [],
      "group_id": "Accounts",
      "_key": "policy"
    },
    {
      "swagger_models": [
        "ApiKeyInfoRespList",
        "GroupCreationInfo",
        "GroupSummary",
        "GroupSummaryList",
        "GroupUpdateInfo",
        "UserInfoRespList"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Retrieve an array of API keys associated with a policy group.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/api-keys \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "group_id",
              "in": "path",
              "description": "The ID of the group.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "group_id",
              "external_param": false,
              "parameter_fieldname": "group_id",
              "_key": "id"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "policy_group_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "api_keys",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "etag",
                        "id",
                        "key",
                        "name",
                        "object"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727683,
                          "description": "The timestamp of the API key creation in the storage, in milliseconds.",
                          "_key": "creation_time"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "array",
                          "description": "A list of group IDs this API key belongs to.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "groups"
                        },
                        {
                          "type": "string",
                          "example": "01619571f7020242ac12000600000000",
                          "description": "The ID of the API key.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
                          "description": "The API key.",
                          "_key": "key"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727688,
                          "description": "The timestamp of the latest API key usage, in milliseconds.",
                          "_key": "last_login_time"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "API key gorgon",
                          "description": "The display name for the API key.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'api-key'",
                          "enum": [
                            "api-key"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e89242ac12000600000000",
                          "description": "The owner of this API key, who is the creator by default.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "owner"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "The status of the API key.",
                          "enum": [
                            "ACTIVE",
                            "INACTIVE"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ],
                      "description": "Represents an API key in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "api_key"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "account_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "api_key"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A group with that ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/policy-groups/{group_id}/api-keys",
          "summary": "Get the API keys of a policy group.",
          "return_type": "paginated_response(api_key)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "api_key"
          },
          "x_filter": {},
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated, GET https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/applications",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "getApiKeysOfGroup",
          "foreign_key": {
            "entity": "api_key"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "api_keys"
        },
        {
          "description": "Create a new group.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/policy-groups \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' -d '{\"name\": \"MyGroup1\"}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "object",
              "properties": [
                {
                  "type": "array",
                  "description": "An array of API key IDs.",
                  "items": {
                    "type": "string"
                  },
                  "x-deprecation": {
                    "issued_at": "2020-08-01T00:00:00+00:00",
                    "end_of_life_at": "2021-08-01T00:00:00+00:00",
                    "comment": "This field is deprecated, use 'applications'",
                    "links": []
                  },
                  "_key": "apikeys"
                },
                {
                  "type": "array",
                  "description": "An array of applicationIDs.",
                  "items": {
                    "type": "string"
                  },
                  "_key": "applications"
                },
                {
                  "type": "array",
                  "description": "An array of user IDs.",
                  "items": {
                    "type": "string"
                  },
                  "_key": "users"
                }
              ],
              "description": "Represents arrays of user and API key IDs.",
              "name": "members",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "members",
              "api_fieldname": "members",
              "external_param": true,
              "parameter_fieldname": "members",
              "required": false,
              "_key": "members"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "Administrators",
              "description": "The name of the group.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": true,
              "_key": "name"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "New entity created.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "apikey_count",
                  "etag",
                  "id",
                  "name",
                  "object",
                  "user_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account this group belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The number of API keys in this group.",
                    "x-deprecation": {
                      "issued_at": "2020-08-01T00:00:00+00:00",
                      "end_of_life_at": "2021-08-01T00:00:00+00:00",
                      "comment": "This property is deprecated. See 'application_count' property.",
                      "links": []
                    },
                    "api_fieldname": "apikey_count",
                    "entity_fieldname": "apikey_count",
                    "_key": "apikey_count"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The number of applications in this group.",
                    "api_fieldname": "application_count",
                    "entity_fieldname": "application_count",
                    "_key": "application_count"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571dec00242ac12000600000000",
                    "description": "The ID of the group.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Administrators",
                    "description": "The name of the group.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `group`.",
                    "enum": [
                      "group"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "The number of users in this group.",
                    "api_fieldname": "user_count",
                    "entity_fieldname": "user_count",
                    "_key": "user_count"
                  }
                ],
                "description": "This object contains basic information about groups.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_policy_group"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data, for example, invalid group name.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A group with that name already exists.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/policy-groups",
          "summary": "Create a new group.",
          "return_type": "policy_group",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "policy_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "updated_at",
            "account_id",
            "user_count",
            "application_count",
            "apikey_count"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "createGroup",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete a group.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "group_id",
              "in": "path",
              "description": "The ID of the group to delete.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "group_id",
              "external_param": false,
              "parameter_fieldname": "group_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden, or Administrators group cannot be removed.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A group with that ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/policy-groups/{group_id}",
          "summary": "Delete a group.",
          "return_type": "policy_group",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "policy_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "deleteGroup",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve an array of policy groups.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/policy-groups \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "policy_group_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "apikey_count",
                        "etag",
                        "id",
                        "name",
                        "object",
                        "user_count"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account this group belongs to.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 0,
                          "description": "The number of API keys in this group.",
                          "x-deprecation": {
                            "issued_at": "2020-08-01T00:00:00+00:00",
                            "end_of_life_at": "2021-08-01T00:00:00+00:00",
                            "comment": "This property is deprecated. See 'application_count' property.",
                            "links": []
                          },
                          "_key": "apikey_count"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 0,
                          "description": "The number of applications in this group.",
                          "_key": "application_count"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571dec00242ac12000600000000",
                          "description": "The ID of the group.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "Administrators",
                          "description": "The name of the group.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `group`.",
                          "enum": [
                            "group"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 1,
                          "description": "The number of users in this group.",
                          "_key": "user_count"
                        }
                      ],
                      "description": "This object contains basic information about groups.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "subtenant_policy_group"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "subtenant_api_key_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "policy_group"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/policy-groups",
          "summary": "Get policy groups.",
          "return_type": "paginated_response(policy_group)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "policy_group"
          },
          "x_filter": {
            "name": [
              "eq"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data",
            "name__eq"
          ],
          "foreign_key_priority": "self",
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "getAllGroups",
          "pagination": true,
          "foreign_key": {
            "group": "Accounts",
            "entity": "policy_group"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve a policy group.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571dec00242ac12000600000000",
              "description": "The ID of the group.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "group_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "apikey_count",
                  "etag",
                  "id",
                  "name",
                  "object",
                  "user_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account this group belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The number of API keys in this group.",
                    "x-deprecation": {
                      "issued_at": "2020-08-01T00:00:00+00:00",
                      "end_of_life_at": "2021-08-01T00:00:00+00:00",
                      "comment": "This property is deprecated. See 'application_count' property.",
                      "links": []
                    },
                    "api_fieldname": "apikey_count",
                    "entity_fieldname": "apikey_count",
                    "_key": "apikey_count"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The number of applications in this group.",
                    "api_fieldname": "application_count",
                    "entity_fieldname": "application_count",
                    "_key": "application_count"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571dec00242ac12000600000000",
                    "description": "The ID of the group.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Administrators",
                    "description": "The name of the group.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `group`.",
                    "enum": [
                      "group"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "The number of users in this group.",
                    "api_fieldname": "user_count",
                    "entity_fieldname": "user_count",
                    "_key": "user_count"
                  }
                ],
                "description": "This object contains basic information about groups.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_policy_group"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A group with that ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/policy-groups/{group_id}",
          "summary": "Get a policy group.",
          "return_type": "policy_group",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "policy_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "account_id",
            "name",
            "user_count",
            "application_count",
            "apikey_count"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "getGroupSummary",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update a group name.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id} \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{\"name\": \"TestGroup2\"}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571dec00242ac12000600000000",
              "description": "The ID of the group.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "group_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "Administrators",
              "description": "The name of the group.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": true,
              "_key": "name"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "apikey_count",
                  "etag",
                  "id",
                  "name",
                  "object",
                  "user_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account this group belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The number of API keys in this group.",
                    "x-deprecation": {
                      "issued_at": "2020-08-01T00:00:00+00:00",
                      "end_of_life_at": "2021-08-01T00:00:00+00:00",
                      "comment": "This property is deprecated. See 'application_count' property.",
                      "links": []
                    },
                    "api_fieldname": "apikey_count",
                    "entity_fieldname": "apikey_count",
                    "_key": "apikey_count"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The number of applications in this group.",
                    "api_fieldname": "application_count",
                    "entity_fieldname": "application_count",
                    "_key": "application_count"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571dec00242ac12000600000000",
                    "description": "The ID of the group.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Administrators",
                    "description": "The name of the group.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `group`.",
                    "enum": [
                      "group"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "The number of users in this group.",
                    "api_fieldname": "user_count",
                    "entity_fieldname": "user_count",
                    "_key": "user_count"
                  }
                ],
                "description": "This object contains basic information about groups.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_policy_group"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data, for example, the group name is too long.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A group with that ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/policy-groups/{group_id}",
          "summary": "Update the group name.",
          "return_type": "policy_group",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "policy_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "account_id",
            "user_count",
            "application_count",
            "apikey_count"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "updateGroupName",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        },
        {
          "description": "Retrieve an array of users associated with a policy group.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/users \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "group_id",
              "in": "path",
              "description": "The ID of the group.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "group_id",
              "external_param": false,
              "parameter_fieldname": "group_id",
              "_key": "id"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "policy_group_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "users",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "email",
                        "etag",
                        "id",
                        "object",
                        "status"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "array",
                          "description": "List of active user sessions.",
                          "items": {
                            "type": "object",
                            "required": [
                              "account_id",
                              "ip_address",
                              "login_time",
                              "object",
                              "reference_token",
                              "user_agent"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "example": "01619571e2e90242ac12000600000000",
                                "description": "The UUID of the account.",
                                "pattern": "[a-f0-9]{32}",
                                "api_fieldname": "account_id",
                                "entity_fieldname": "account_id",
                                "_key": "account_id"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-13T09:35:20Z",
                                "description": "Creation UTC time RFC3339.",
                                "api_fieldname": "created_at",
                                "entity_fieldname": "created_at",
                                "_key": "created_at"
                              },
                              {
                                "type": "string",
                                "example": "127.0.0.1",
                                "description": "IP address of the client.",
                                "api_fieldname": "ip_address",
                                "entity_fieldname": "ip_address",
                                "_key": "ip_address"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T17:52:07Z",
                                "description": "The login time of the user.",
                                "api_fieldname": "login_time",
                                "entity_fieldname": "login_time",
                                "_key": "login_time"
                              },
                              {
                                "type": "string",
                                "description": "Entity name: always 'user-session'",
                                "enum": [
                                  "user-session"
                                ],
                                "api_fieldname": "object",
                                "entity_fieldname": "object",
                                "_key": "object"
                              },
                              {
                                "type": "string",
                                "example": "rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk",
                                "description": "The reference token.",
                                "api_fieldname": "reference_token",
                                "entity_fieldname": "reference_token",
                                "_key": "reference_token"
                              },
                              {
                                "type": "string",
                                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                                "description": "User Agent header from the login request.",
                                "api_fieldname": "user_agent",
                                "entity_fieldname": "user_agent",
                                "_key": "user_agent"
                              }
                            ],
                            "description": "Represents an active user session.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "active_session"
                            }
                          },
                          "_key": "active_sessions"
                        },
                        {
                          "type": "string",
                          "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
                          "description": "Address.",
                          "x-nullable": true,
                          "_key": "address"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727683,
                          "description": "A timestamp of the user creation in the storage, in milliseconds.",
                          "_key": "creation_time"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "description": "User's account-specific custom properties. The value is a string.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "custom_fields"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "example": "user@arm.com",
                          "description": "The email address.",
                          "_key": "email"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating whether the user's email address has been verified or not.",
                          "_key": "email_verified"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "User Doe",
                          "x-nullable": true,
                          "description": "The full name of the user.",
                          "_key": "full_name"
                        },
                        {
                          "type": "array",
                          "description": "A list of IDs of the groups this user belongs to.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "groups"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e89242ac12000600000000",
                          "description": "The ID of the user.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating that the user has accepted General Terms and Conditions.",
                          "_key": "is_gtc_accepted"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating that the user has consented to receive marketing information.",
                          "_key": "is_marketing_accepted"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
                          "_key": "is_totp_enabled"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727688,
                          "description": "A timestamp of the latest login of the user, in milliseconds.",
                          "_key": "last_login_time"
                        },
                        {
                          "type": "array",
                          "maxItems": 5,
                          "description": "Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.",
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "ip_address",
                              "success",
                              "user_agent"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T17:52:07Z",
                                "description": "UTC time RFC3339 for this login attempt.",
                                "api_fieldname": "date",
                                "entity_fieldname": "date",
                                "_key": "date"
                              },
                              {
                                "type": "string",
                                "example": "127.0.0.1",
                                "description": "IP address of the client.",
                                "api_fieldname": "ip_address",
                                "entity_fieldname": "ip_address",
                                "_key": "ip_address"
                              },
                              {
                                "type": "boolean",
                                "example": true,
                                "description": "Flag indicating whether login attempt was successful or not.",
                                "api_fieldname": "success",
                                "entity_fieldname": "success",
                                "_key": "success"
                              },
                              {
                                "type": "string",
                                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                                "description": "User Agent header from the login request.",
                                "api_fieldname": "user_agent",
                                "entity_fieldname": "user_agent",
                                "_key": "user_agent"
                              }
                            ],
                            "description": "Represents an entry in login history.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "login_history"
                            }
                          },
                          "_key": "login_history"
                        },
                        {
                          "type": "array",
                          "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                          "x-nullable": true,
                          "items": {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "example": "fed/user_007",
                                "description": "The ID of the user in the identity provider's service.",
                                "readOnly": true,
                                "api_fieldname": "foreign_id",
                                "entity_fieldname": "foreign_id",
                                "_key": "foreign_id"
                              },
                              {
                                "type": "string",
                                "example": "01619571f3c00242ac12000600000000",
                                "description": "ID of the identity provider.",
                                "readOnly": false,
                                "_override": true,
                                "api_fieldname": "id",
                                "entity_fieldname": "id",
                                "_key": "id"
                              },
                              {
                                "type": "string",
                                "example": "Pelion",
                                "readOnly": false,
                                "description": "Name of the identity provider.",
                                "_override": true,
                                "api_fieldname": "name",
                                "entity_fieldname": "name",
                                "_key": "name"
                              },
                              {
                                "type": "string",
                                "description": "Identity provider type.",
                                "example": "NATIVE",
                                "readOnly": true,
                                "enum": [
                                  "NATIVE",
                                  "MBED",
                                  "SAML2",
                                  "OIDC"
                                ],
                                "api_fieldname": "type",
                                "entity_fieldname": "login_profile_type",
                                "_key": "type"
                              }
                            ],
                            "description": "Represents a user login profile in Device Management.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "login_profile"
                            }
                          },
                          "_key": "login_profiles"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `user`.",
                          "enum": [
                            "user"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "PZf9eEUH43DAPE9ULINFeuj",
                          "description": "The password when creating a new user. It will be generated when not present in the request.",
                          "x-nullable": true,
                          "_key": "password"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727688,
                          "description": "A timestamp of the latest change of the user password, in milliseconds.",
                          "_key": "password_changed_time"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "+44 (1223) 400 400",
                          "description": "Phone number.",
                          "x-nullable": true,
                          "_key": "phone_number"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "The status of the user. ENROLLING state indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately. INACTIVE users are locked out and not permitted to use the system.",
                          "enum": [
                            "ENROLLING",
                            "INVITED",
                            "ACTIVE",
                            "RESET",
                            "INACTIVE"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "A list of scratch codes for the two-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "totp_scratch_codes"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "pattern": "[\\w\\-,._@+=]{4,30}",
                          "type": "string",
                          "example": "admin",
                          "description": "A username.",
                          "x-nullable": true,
                          "_key": "username"
                        }
                      ],
                      "description": "Represents a user in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "user"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "account_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "user"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A group with that ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/policy-groups/{group_id}/users",
          "summary": "Get users of a policy group.",
          "return_type": "paginated_response(user)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "user"
          },
          "x_filter": {
            "status": [
              "eq",
              "in",
              "nin"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data",
            "status__eq",
            "status__in",
            "status__nin"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "getUsersOfGroup",
          "foreign_key": {
            "entity": "user"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "users"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the account this group belongs to.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "account_id",
          "readOnly": true,
          "required": false,
          "_key": "account_id"
        },
        {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The number of API keys in this group.",
          "x-deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This property is deprecated. See 'application_count' property.",
            "links": []
          },
          "api_fieldname": "apikey_count",
          "readOnly": true,
          "required": false,
          "_key": "apikey_count"
        },
        {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The number of applications in this group.",
          "api_fieldname": "application_count",
          "readOnly": true,
          "required": false,
          "_key": "application_count"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "example": "01619571dec00242ac12000600000000",
          "description": "The ID of the group.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "string",
          "maxLength": 100,
          "example": "Administrators",
          "description": "The name of the group.",
          "api_fieldname": "name",
          "readOnly": false,
          "required": true,
          "_key": "name"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update UTC time RFC3339.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        },
        {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The number of users in this group.",
          "api_fieldname": "user_count",
          "readOnly": true,
          "required": false,
          "_key": "user_count"
        }
      ],
      "field_renames": [],
      "tags": [
        "Account - policy groups"
      ],
      "group_id": "Accounts",
      "_key": "policy_group"
    },
    {
      "swagger_models": [
        "ListOfPreSharedKeysWithoutSecret",
        "PreSharedKey",
        "PreSharedKeyWithoutSecret"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Upload a PSK for an endpoint to allow it to bootstrap. The existing key cannot be overwritten, but needs\nto be deleted first in the case of re-setting a PSK for an endpoint.\n\n**Note**: The PSK APIs are available only to accounts that have this feature enabled.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v2/device-shared-keys \\\n-H \"Authorization: Bearer <access_key>\" \\\n-H \"content-type: application/json\"  \\\n     -d '{ \"endpoint_name\": \"my-endpoint-0001\", \"secret_hex\": \"4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\" }'\n```",
          "field_renames": [],
          "fields": [
            {
              "getter_custom_method": "pre_shared_key_id_getter",
              "setter_custom_method": "pre_shared_key_id_setter",
              "readOnly": false,
              "_override": true,
              "type": "string",
              "api_fieldname": "endpoint_name",
              "entity_fieldname": "endpoint_name",
              "_key": "endpoint_name"
            },
            {
              "description": "The Id of the pre_shared_key, shadows the endpoint_name",
              "type": "string",
              "getter_custom_method": "pre_shared_key_id_getter",
              "setter_custom_method": "pre_shared_key_id_setter",
              "_override": true,
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "pattern": "^[ -~]{16,64}$",
              "example": "my-endpoint-0001",
              "name": "endpoint_name",
              "in": "body",
              "schema_param": true,
              "_key": "id"
            },
            {
              "type": "string",
              "pattern": "^(0[xX])?[0-9a-fA-F]{32,64}$",
              "description": "The secret of the PSK in hexadecimal. It is not case sensitive; 4a is same as 4A, and it is allowed with or without 0x in the beginning. The minimum length of the secret is 128 bits and maximum 256 bits.",
              "example": "4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a",
              "name": "secret_hex",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "secret_hex",
              "api_fieldname": "secret_hex",
              "external_param": true,
              "parameter_fieldname": "secret_hex",
              "required": true,
              "_key": "secret_hex"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "Successfully created.",
              "_key": "201"
            },
            {
              "description": "Bad request. Contains comma-separated errors INVALID_ENDPOINT_NAME, INVALID_SECRET_HEX, and MALFORMED_JSON_CONTENT.",
              "schema": {
                "type": "string"
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "_key": "401"
            },
            {
              "description": "Forbidden. You need to read and accept the PSK license in Device Management Portal.",
              "_key": "403"
            },
            {
              "description": "Conflict. The PSK for the endpoint already exists and cannot be overwritten. Contains error KEY_ALREADY_EXISTS_FOR_ENDPOINT.",
              "schema": {
                "type": "string"
              },
              "_key": "409"
            }
          ],
          "path": "/v2/device-shared-keys",
          "summary": "Upload a PSK to Pelion Device Management.",
          "return_type": "pre_shared_key",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "pre_shared_key"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Security",
          "parameter_map": {
            "endpoint_name": "id"
          },
          "operation_id": "uploadPreSharedKey",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Remove a PSK.\n\n**Example:**\n\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v2/device-shared-keys/my-endpoint-0001 \\\n-H \"Authorization: Bearer <access_key>\"\n```",
          "field_renames": [],
          "fields": [
            {
              "getter_custom_method": "pre_shared_key_id_getter",
              "setter_custom_method": "pre_shared_key_id_setter",
              "readOnly": false,
              "_override": true,
              "type": "string",
              "api_fieldname": "endpoint_name",
              "entity_fieldname": "endpoint_name",
              "_key": "endpoint_name"
            },
            {
              "description": "The Id of the pre_shared_key, shadows the endpoint_name",
              "type": "string",
              "getter_custom_method": "pre_shared_key_id_getter",
              "setter_custom_method": "pre_shared_key_id_setter",
              "_override": true,
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "name": "endpoint_name",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Successfully deleted. Responds even if the endpoint does not have an associated PSK.",
              "_key": "204"
            },
            {
              "description": "Bad request. Endpoint name validation failed. Contains error INVALID_ENDPOINT_NAME.",
              "schema": {
                "type": "string"
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "_key": "401"
            }
          ],
          "path": "/v2/device-shared-keys/{endpoint_name}",
          "summary": "Remove a PSK.",
          "return_type": "pre_shared_key",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "pre_shared_key"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Security",
          "parameter_map": {
            "endpoint_name": "id"
          },
          "operation_id": "deletePreSharedKey",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve pre-shared keys (PSKs) with pagination. Default page size of 50 entries.\n\n**Example:**\n\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v2/device-shared-keys \\\n-H \"Authorization: Bearer <access_key>\"\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "An offset token for fetching a specific page. Provided by the server.",
              "example": "001e001000120010fac8f300487f11e8839a459edde8bd42f07fffffebf07fffffebb1219cc7862b64bbaf775dc545e274810004",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "getter_custom_method": "pre_shared_key_id_getter",
              "setter_custom_method": "pre_shared_key_id_setter",
              "readOnly": false,
              "_override": true,
              "type": "string",
              "api_fieldname": "endpoint_name",
              "entity_fieldname": "endpoint_name",
              "_key": "endpoint_name"
            },
            {
              "description": "The Id of the pre_shared_key, shadows the endpoint_name",
              "type": "string",
              "getter_custom_method": "pre_shared_key_id_getter",
              "setter_custom_method": "pre_shared_key_id_setter",
              "_override": true,
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "_key": "id"
            },
            {
              "type": "integer",
              "description": "The number of objects to retrieve on a page (2-1000). Values outside the range are set to the closest limit.",
              "example": 50,
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "minimum": 2,
              "maximum": 1000,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "List of PSKs.",
              "schema": {
                "type": "object",
                "required": [
                  "object",
                  "limit",
                  "order",
                  "has_more",
                  "data"
                ],
                "properties": [
                  {
                    "type": "string",
                    "description": "An offset token for current page.",
                    "example": "001e001000120010fac8f300487f11e8839a459edde8bd42f07fffffebf07fffffebb1219cc7862b64bbaf775dc545e274810004",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "string",
                    "description": "An offset token for fetching the next page. Note that exactly the same limit needs to be used on the request for fetching subsequent pages.",
                    "example": "001e001000120010fac8f300487f11e8839a459edde8bd42f07fffffebf07fffffebb1219cc7862b64bbaf775dc545e274810005",
                    "api_fieldname": "continuation_marker",
                    "entity_fieldname": "continuation_marker",
                    "_key": "continuation_marker"
                  },
                  {
                    "type": "array",
                    "description": "Array of the PSK entries. The array is empty if there are no PSKs.",
                    "minLength": 0,
                    "items": {
                      "type": "object",
                      "required": [
                        "endpoint_name"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date-time (RFC3339) when this PSK was uploaded to Device Management.",
                          "example": "2017-07-21T17:32:28.012Z",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "pattern": "^[ -~]{16,64}$",
                          "description": "The unique endpoint identifier that this PSK applies to. 16-64 [printable](https://en.wikipedia.org/wiki/ASCII#Printable_characters) (non-control) ASCII characters.",
                          "example": "my-endpoint-0001",
                          "getter_custom_method": "pre_shared_key_id_getter",
                          "setter_custom_method": "pre_shared_key_id_setter",
                          "readOnly": false,
                          "_override": true,
                          "_key": "endpoint_name"
                        }
                      ],
                      "foreign_key": {
                        "group": "Security",
                        "entity": "pre_shared_key"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "description": "More results are available.",
                    "example": true,
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "description": "The value of limit query parameter from the request, or default if not specified.",
                    "example": 50,
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "The type of this API object is a \"list\".",
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation time.",
                    "example": "DESC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Security",
                  "entity": "pre_shared_key"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad request. Contains the error as a string, either TOKEN_NOT_FOUND or INVALID_LIMIT.",
              "_key": "400"
            }
          ],
          "path": "/v2/device-shared-keys",
          "summary": "List PSKs.",
          "return_type": "paginated_response(pre_shared_key)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "pre_shared_key"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "order",
            "has_more",
            "continuation_marker",
            "data"
          ],
          "foreign_key_priority": "self",
          "group_id": "Security",
          "parameter_map": {
            "endpoint_name": "id"
          },
          "operation_id": "listPreSharedKeys",
          "pagination": true,
          "foreign_key": {
            "group": "Security",
            "entity": "pre_shared_key"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Check if a PSK for an endpoint exists or not. The response does not contain the secret itself.\n\n**Example:**\n\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v2/device-shared-keys/my-endpoint-0001 \\\n-H \"Authorization: Bearer <access_key>\"\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "pattern": "^[ -~]{16,64}$",
              "description": "The unique endpoint identifier that this PSK applies to. 16-64 [printable](https://en.wikipedia.org/wiki/ASCII#Printable_characters) (non-control) ASCII characters.",
              "example": "my-endpoint-0001",
              "getter_custom_method": "pre_shared_key_id_getter",
              "setter_custom_method": "pre_shared_key_id_setter",
              "readOnly": false,
              "_override": true,
              "api_fieldname": "endpoint_name",
              "entity_fieldname": "endpoint_name",
              "_key": "endpoint_name"
            },
            {
              "description": "The Id of the pre_shared_key, shadows the endpoint_name",
              "type": "string",
              "getter_custom_method": "pre_shared_key_id_getter",
              "setter_custom_method": "pre_shared_key_id_setter",
              "_override": true,
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "name": "endpoint_name",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Pre-shared key for the device (does not contain secret).",
              "schema": {
                "type": "object",
                "required": [
                  "endpoint_name"
                ],
                "properties": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date-time (RFC3339) when this PSK was uploaded to Device Management.",
                    "example": "2017-07-21T17:32:28.012Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "pattern": "^[ -~]{16,64}$",
                    "description": "The unique endpoint identifier that this PSK applies to. 16-64 [printable](https://en.wikipedia.org/wiki/ASCII#Printable_characters) (non-control) ASCII characters.",
                    "example": "my-endpoint-0001",
                    "getter_custom_method": "pre_shared_key_id_getter",
                    "setter_custom_method": "pre_shared_key_id_setter",
                    "readOnly": false,
                    "_override": true,
                    "api_fieldname": "endpoint_name",
                    "entity_fieldname": "endpoint_name",
                    "_key": "endpoint_name"
                  }
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "pre_shared_key"
                }
              },
              "_key": "200"
            },
            {
              "description": "Bad request. Endpoint name validation failed. Contains error INVALID_ENDPOINT_NAME.",
              "schema": {
                "type": "string"
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "_key": "401"
            },
            {
              "description": "The PSK does not exist.",
              "_key": "404"
            }
          ],
          "path": "/v2/device-shared-keys/{endpoint_name}",
          "summary": "Get a PSK.",
          "return_type": "pre_shared_key",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "pre_shared_key"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at"
          ],
          "group_id": "Security",
          "parameter_map": {
            "endpoint_name": "id"
          },
          "operation_id": "getPreSharedKey",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "string",
          "format": "date-time",
          "description": "The date-time (RFC3339) when this PSK was uploaded to Device Management.",
          "example": "2017-07-21T17:32:28.012Z",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "getter_custom_method": "pre_shared_key_id_getter",
          "setter_custom_method": "pre_shared_key_id_setter",
          "readOnly": false,
          "_override": true,
          "type": "string",
          "api_fieldname": "endpoint_name",
          "pattern": "^[ -~]{16,64}$",
          "description": "The unique endpoint identifier that this PSK applies to. 16-64 [printable](https://en.wikipedia.org/wiki/ASCII#Printable_characters) (non-control) ASCII characters.",
          "example": "my-endpoint-0001",
          "required": false,
          "_key": "endpoint_name"
        },
        {
          "description": "The Id of the pre_shared_key, shadows the endpoint_name",
          "type": "string",
          "getter_custom_method": "pre_shared_key_id_getter",
          "setter_custom_method": "pre_shared_key_id_setter",
          "_override": true,
          "api_fieldname": "id",
          "readOnly": false,
          "required": false,
          "_key": "id"
        }
      ],
      "field_renames": [],
      "tags": [
        "Security and identity - pre-shared keys"
      ],
      "group_id": "Security",
      "_key": "pre_shared_key"
    },
    {
      "swagger_models": [
        "SAML2Req"
      ],
      "primary_key_field": null,
      "methods": [],
      "fields": [
        {
          "type": "string",
          "format": "byte",
          "maxLength": 65535,
          "description": "Contains an entity descriptor document for the identity provider. Can be used as an alternative method to provide the identity provider's attributes.",
          "api_fieldname": "entity_descriptor",
          "readOnly": true,
          "required": false,
          "_key": "entity_descriptor"
        },
        {
          "type": "string",
          "description": "Entity ID of the identity provider.",
          "api_fieldname": "idp_entity_id",
          "readOnly": true,
          "required": false,
          "_key": "idp_entity_id"
        },
        {
          "type": "array",
          "description": "List of public X509 certificates of the identity provider. Certificates must be in PEM format.",
          "items": {
            "type": "string"
          },
          "api_fieldname": "idp_x509_certs",
          "readOnly": true,
          "required": false,
          "_key": "idp_x509_certs"
        },
        {
          "type": "string",
          "description": "URL of the identity provider's SLO endpoint.",
          "api_fieldname": "slo_endpoint",
          "readOnly": true,
          "required": false,
          "_key": "slo_endpoint"
        },
        {
          "type": "string",
          "description": "Entity ID of the service provider. We recommend that you leave it empty and let the system generate it.",
          "api_fieldname": "sp_entity_id",
          "readOnly": true,
          "required": false,
          "_key": "sp_entity_id"
        },
        {
          "type": "string",
          "description": "URL of the identity provider's SSO endpoint.",
          "api_fieldname": "sso_endpoint",
          "readOnly": true,
          "required": false,
          "_key": "sso_endpoint"
        }
      ],
      "field_renames": [],
      "tags": [],
      "group_id": "Accounts",
      "_key": "saml2_request"
    },
    {
      "swagger_models": [
        "ServerCredentialsResponseData"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Return bootstrap server credentials for client to connect to bootstrap server.\n\n**Example:**\n```\ncurl -X GET http://api.us-east-1.mbedcloud.com/v3/server-credentials/bootstrap \\\n-H \"Authorization: Bearer <access_key>\"\n```",
          "field_renames": [],
          "fields": [],
          "method": "get",
          "mode": "get_bootstrap",
          "responses": [
            {
              "description": "Bootstrap server credentials fetched successfully.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "Unique entity ID.",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `server-credentials`.",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "PEM-format X.509 server certificate used to validate the server certificate received during the TLS/DTLS handshake.",
                    "api_fieldname": "server_certificate",
                    "entity_fieldname": "server_certificate",
                    "_key": "server_certificate"
                  },
                  {
                    "type": "string",
                    "description": "Server URI that the client connects to.",
                    "api_fieldname": "server_uri",
                    "entity_fieldname": "server_uri",
                    "_key": "server_uri"
                  }
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "server_credentials"
                }
              },
              "examples": [
                {
                  "object": "server-credentials",
                  "id": "015fee4431fd38c98640fbfb00000000",
                  "etag": "1",
                  "created_at": "2017-12-11T14:22:20.009Z",
                  "server_certificate": "-----BEGIN CERTIFICATE-----\\nMIICNTCCAdugAwIBAgIQXCeldn1YhYpDkaBhq8+mWTAKBggqhkjOPQQDAjByMQsw\\nCQYDVQQGEwJHQjEXMBUGA1UECBMOQ2FtYnJpZGdlc2hpcmUxEjAQBgNVBAcTCUNh\\nbWJyaWRnZTEQMA4GA1UEChMHQVJNIEx0ZDEkMCIGA1UEAxMbQVJNIEludGVncmF0\\naW9uIEJvb3RzdHJhcENBMCAXDTE3MDUxNTE5NDkxMVoYDzIwNTIwNTE1MTk1OTEw\\nWjByMQswCQYDVQQGEwJHQjEXMBUGA1UECBMOQ2FtYnJpZGdlc2hpcmUxEjAQBgNV\\nBAcTCUNhbWJyaWRnZTEQMA4GA1UEChMHQVJNIEx0ZDEkMCIGA1UEAxMbQVJNIElu\\ndGVncmF0aW9uIEJvb3RzdHJhcENBMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\\ni3yGw4hU5l/gV04brCmC6n2RAGOnSgW8VMVxJzMZGy76Qfh6mgxd/LM3AZnFyb54\\nWx3ssBod3ORvVwT0Osqo0qNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMB\\nAf8wHQYDVR0OBBYEFBPvafpiPwCG9AW4tuay8dtpELQ5MBAGCSsGAQQBgjcVAQQD\\nAgEAMAoGCCqGSM49BAMCA0gAMEUCIQCiUIgPVegmSeb1cYYzKQVM+f0fFJiShdlc\\nSAKewnmoWQIgPv48oL/TDxWDVrzy+hYmesFoqryRPGlENvl0oYJ2em4=\\n-----END CERTIFICATE-----",
                  "server_uri": "coaps://coap.us-east-1.mbedcloud.com:5684?aid=015843e32ec902420a015e0700000000",
                  "_key": "Success"
                }
              ],
              "_key": "200"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Invalid access token.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "examples": [
                {
                  "object": "error",
                  "code": 401,
                  "type": "invalid_auth",
                  "message": "Invalid access token.",
                  "request_id": "015fee4431fd38c98640fbfb00000000",
                  "_key": "Authentication Error"
                }
              ],
              "_key": "401"
            }
          ],
          "path": "/v3/server-credentials/bootstrap",
          "summary": "Fetch bootstrap server credentials.",
          "return_type": "server_credentials",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "server_credentials"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "server_certificate",
            "server_uri"
          ],
          "group_id": "Security",
          "operation_id": "getBootstrapServerCredentials",
          "additional_operations": [
            {
              "operation_id": "getAllServerCredentials",
              "notes": "The information returned by this endpoint can be obtained by calling `get_bootstrap`."
            }
          ],
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "get_bootstrap"
        },
        {
          "description": "Return LwM2M server credentials for client to connect to LwM2M server.\n\n**Example:**\n```\ncurl -X GET http://api.us-east-1.mbedcloud.com/v3/server-credentials/lwm2m \\\n-H \"Authorization: Bearer <access_key>\"\n```",
          "field_renames": [],
          "fields": [],
          "method": "get",
          "mode": "get_lwm2m",
          "responses": [
            {
              "description": "LwM2M server credentials fetched successfully.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "Unique entity ID.",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `server-credentials`.",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "PEM-format X.509 server certificate used to validate the server certificate received during the TLS/DTLS handshake.",
                    "api_fieldname": "server_certificate",
                    "entity_fieldname": "server_certificate",
                    "_key": "server_certificate"
                  },
                  {
                    "type": "string",
                    "description": "Server URI that the client connects to.",
                    "api_fieldname": "server_uri",
                    "entity_fieldname": "server_uri",
                    "_key": "server_uri"
                  }
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "server_credentials"
                }
              },
              "examples": [
                {
                  "object": "server-credentials",
                  "id": "015fee4431fd38c98640fbfb00000000",
                  "etag": "1",
                  "created_at": "2017-12-11T14:22:20.009Z",
                  "server_certificate": "-----BEGIN CERTIFICATE-----\\nMIICNTCCAdugAwIBAgIQXCeldn1YhYpDkaBhq8+mWTAKBggqhkjOPQQDAjByMQsw\\nCQYDVQQGEwJHQjEXMBUGA1UECBMOQ2FtYnJpZGdlc2hpcmUxEjAQBgNVBAcTCUNh\\nbWJyaWRnZTEQMA4GA1UEChMHQVJNIEx0ZDEkMCIGA1UEAxMbQVJNIEludGVncmF0\\naW9uIEJvb3RzdHJhcENBMCAXDTE3MDUxNTE5NDkxMVoYDzIwNTIwNTE1MTk1OTEw\\nWjByMQswCQYDVQQGEwJHQjEXMBUGA1UECBMOQ2FtYnJpZGdlc2hpcmUxEjAQBgNV\\nBAcTCUNhbWJyaWRnZTEQMA4GA1UEChMHQVJNIEx0ZDEkMCIGA1UEAxMbQVJNIElu\\ndGVncmF0aW9uIEJvb3RzdHJhcENBMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\\ni3yGw4hU5l/gV04brCmC6n2RAGOnSgW8VMVxJzMZGy76Qfh6mgxd/LM3AZnFyb54\\nWx3ssBod3ORvVwT0Osqo0qNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMB\\nAf8wHQYDVR0OBBYEFBPvafpiPwCG9AW4tuay8dtpELQ5MBAGCSsGAQQBgjcVAQQD\\nAgEAMAoGCCqGSM49BAMCA0gAMEUCIQCiUIgPVegmSeb1cYYzKQVM+f0fFJiShdlc\\nSAKewnmoWQIgPv48oL/TDxWDVrzy+hYmesFoqryRPGlENvl0oYJ2em4=\\n-----END CERTIFICATE-----",
                  "server_uri": "coaps://mds.us-east-1.mbedcloud.com:5684?aid=015843e32ec902420a015e0700000000",
                  "_key": "Success"
                }
              ],
              "_key": "200"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Invalid access token.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "examples": [
                {
                  "object": "error",
                  "code": 401,
                  "type": "invalid_auth",
                  "message": "Invalid access token.",
                  "request_id": "015fee4431fd38c98640fbfb00000000",
                  "_key": "Authentication Error"
                }
              ],
              "_key": "401"
            }
          ],
          "path": "/v3/server-credentials/lwm2m",
          "summary": "Fetch LwM2M server credentials.",
          "return_type": "server_credentials",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "server_credentials"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "server_certificate",
            "server_uri"
          ],
          "group_id": "Security",
          "operation_id": "getL2M2MServerCredentials",
          "additional_operations": [
            {
              "operation_id": "getAllServerCredentials",
              "notes": "The information returned by this endpoint can be obtained by calling `get_lwm2m`."
            }
          ],
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "get_lwm2m"
        }
      ],
      "fields": [
        {
          "type": "string",
          "format": "date-time",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "description": "Unique entity ID.",
          "api_fieldname": "id",
          "readOnly": true,
          "required": false,
          "_key": "id"
        },
        {
          "type": "string",
          "description": "PEM-format X.509 server certificate used to validate the server certificate received during the TLS/DTLS handshake.",
          "api_fieldname": "server_certificate",
          "readOnly": true,
          "required": false,
          "_key": "server_certificate"
        },
        {
          "type": "string",
          "description": "Server URI that the client connects to.",
          "api_fieldname": "server_uri",
          "readOnly": true,
          "required": false,
          "_key": "server_uri"
        }
      ],
      "field_renames": [],
      "tags": [
        "Security and identity - server credentials"
      ],
      "group_id": "Security",
      "_key": "server_credentials"
    },
    {
      "swagger_models": [
        "ApiKeyInfoReq",
        "ApiKeyInfoResp",
        "ApiKeyUpdateReq",
        "GroupSummaryList"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Create a new API key. There is no default value for the owner ID, and it must be from the same account where the new API key is created.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{\"name\": \"MyKey1\"}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "array",
              "description": "A list of group IDs this API key belongs to.",
              "items": {
                "type": "string"
              },
              "api_fieldname": "groups",
              "entity_fieldname": "groups",
              "parameter_fieldname": "groups",
              "in": "body",
              "required": false,
              "_key": "groups"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "API key gorgon",
              "description": "The display name for the API key.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            },
            {
              "type": "string",
              "example": "01619571e2e89242ac12000600000000",
              "description": "The owner of this API key, who is the creator by default.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "owner",
              "entity_fieldname": "owner",
              "parameter_fieldname": "owner",
              "in": "body",
              "required": false,
              "_key": "owner"
            },
            {
              "type": "string",
              "example": "ACTIVE",
              "description": "The status of the API key.",
              "enum": [
                "ACTIVE",
                "INACTIVE"
              ],
              "api_fieldname": "status",
              "entity_fieldname": "status",
              "parameter_fieldname": "status",
              "in": "body",
              "required": false,
              "enum_reference": "subtenant_api_key_status_enum",
              "_key": "status"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "New entity created.",
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "key",
                  "name",
                  "object"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727683,
                    "description": "The timestamp of the API key creation in the storage, in milliseconds.",
                    "api_fieldname": "creation_time",
                    "entity_fieldname": "creation_time",
                    "_key": "creation_time"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "array",
                    "description": "A list of group IDs this API key belongs to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "parameter_fieldname": "groups",
                    "in": "body",
                    "required": false,
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571f7020242ac12000600000000",
                    "description": "The ID of the API key.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "apikey_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
                    "description": "The API key.",
                    "api_fieldname": "key",
                    "entity_fieldname": "key",
                    "_key": "key"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "The timestamp of the latest API key usage, in milliseconds.",
                    "api_fieldname": "last_login_time",
                    "entity_fieldname": "last_login_time",
                    "_key": "last_login_time"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "API key gorgon",
                    "description": "The display name for the API key.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": false,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'api-key'",
                    "enum": [
                      "api-key"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The owner of this API key, who is the creator by default.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner",
                    "entity_fieldname": "owner",
                    "parameter_fieldname": "owner",
                    "in": "body",
                    "required": false,
                    "_key": "owner"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the API key.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "enum_reference": "api_key_status_enum",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "description": "Represents an API key in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "api_key"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data, for example, missing API key name.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account with the given ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/api-keys",
          "summary": "Create a new API key.",
          "return_type": "subtenant_api_key",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_api_key"
          },
          "x_filter": {},
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "updated_at",
            "key",
            "creation_time",
            "last_login_time"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "apikey_id": "id"
          },
          "operation_id": "createAccountApiKey",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete an API key.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "name": "apikey_id",
              "in": "path",
              "description": "The ID of the API key to delete.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "apikey_id",
              "external_param": false,
              "parameter_fieldname": "apikey_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or API key with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/api-keys/{apikey_id}",
          "summary": "Delete the API key.",
          "return_type": "subtenant_api_key",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_api_key"
          },
          "x_filter": {},
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated. Use DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys/{access_key_id}",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "apikey_id": "id"
          },
          "operation_id": "deleteAccountApiKey",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve an array of policy groups associated with an API key.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}/groups \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "apikey_id",
              "in": "path",
              "description": "The ID of the API key.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "apikey_id",
              "external_param": false,
              "parameter_fieldname": "apikey_id",
              "_key": "id"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "subtenant_api_key_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "policy_groups",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "apikey_count",
                        "etag",
                        "id",
                        "name",
                        "object",
                        "user_count"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account this group belongs to.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 0,
                          "description": "The number of API keys in this group.",
                          "x-deprecation": {
                            "issued_at": "2020-08-01T00:00:00+00:00",
                            "end_of_life_at": "2021-08-01T00:00:00+00:00",
                            "comment": "This property is deprecated. See 'application_count' property.",
                            "links": []
                          },
                          "_key": "apikey_count"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 0,
                          "description": "The number of applications in this group.",
                          "_key": "application_count"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571dec00242ac12000600000000",
                          "description": "The ID of the group.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "Administrators",
                          "description": "The name of the group.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `group`.",
                          "enum": [
                            "group"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 1,
                          "description": "The number of users in this group.",
                          "_key": "user_count"
                        }
                      ],
                      "description": "This object contains basic information about groups.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "subtenant_policy_group"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "api_key_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_policy_group"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or API key with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/api-keys/{apikey_id}/groups",
          "summary": "Get policy groups of an API key.",
          "return_type": "paginated_response(subtenant_policy_group)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "subtenant_policy_group"
          },
          "x_filter": {},
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/groups",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "apikey_id": "id"
          },
          "operation_id": "getGroupsOfAccountApikey",
          "foreign_key": {
            "entity": "subtenant_policy_group"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "policy_groups"
        },
        {
          "description": "Retrieve details of an API key.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id} \\\n -H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571f7020242ac12000600000000",
              "description": "The ID of the API key.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "apikey_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "key",
                  "name",
                  "object"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727683,
                    "description": "The timestamp of the API key creation in the storage, in milliseconds.",
                    "api_fieldname": "creation_time",
                    "entity_fieldname": "creation_time",
                    "_key": "creation_time"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "array",
                    "description": "A list of group IDs this API key belongs to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "parameter_fieldname": "groups",
                    "in": "body",
                    "required": false,
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571f7020242ac12000600000000",
                    "description": "The ID of the API key.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "apikey_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
                    "description": "The API key.",
                    "api_fieldname": "key",
                    "entity_fieldname": "key",
                    "_key": "key"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "The timestamp of the latest API key usage, in milliseconds.",
                    "api_fieldname": "last_login_time",
                    "entity_fieldname": "last_login_time",
                    "_key": "last_login_time"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "API key gorgon",
                    "description": "The display name for the API key.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": false,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'api-key'",
                    "enum": [
                      "api-key"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The owner of this API key, who is the creator by default.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner",
                    "entity_fieldname": "owner",
                    "parameter_fieldname": "owner",
                    "in": "body",
                    "required": false,
                    "_key": "owner"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the API key.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "enum_reference": "api_key_status_enum",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "description": "Represents an API key in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "api_key"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or API key with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/api-keys/{apikey_id}",
          "summary": "Get API key details.",
          "return_type": "subtenant_api_key",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_api_key"
          },
          "x_filter": {},
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys/{access_key_id}",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "key",
            "name",
            "groups",
            "owner",
            "status",
            "creation_time",
            "last_login_time"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "apikey_id": "id"
          },
          "operation_id": "getAccountApiKey",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update API key details.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id} \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{\"name\": \"TestApiKey25\"}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "array",
              "description": "A list of group IDs this API key belongs to.",
              "items": {
                "type": "string"
              },
              "api_fieldname": "groups",
              "entity_fieldname": "groups",
              "parameter_fieldname": "groups",
              "in": "body",
              "required": false,
              "_key": "groups"
            },
            {
              "type": "string",
              "example": "01619571f7020242ac12000600000000",
              "description": "The ID of the API key.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "apikey_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "API key gorgon",
              "description": "The display name for the API key.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            },
            {
              "type": "string",
              "example": "01619571e2e89242ac12000600000000",
              "description": "The owner of this API key, who is the creator by default.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "owner",
              "entity_fieldname": "owner",
              "parameter_fieldname": "owner",
              "in": "body",
              "required": false,
              "_key": "owner"
            },
            {
              "type": "string",
              "example": "ACTIVE",
              "description": "The status of the API key.",
              "enum": [
                "ACTIVE",
                "INACTIVE"
              ],
              "api_fieldname": "status",
              "entity_fieldname": "status",
              "parameter_fieldname": "status",
              "in": "body",
              "required": false,
              "enum_reference": "subtenant_api_key_status_enum",
              "_key": "status"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "key",
                  "name",
                  "object"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727683,
                    "description": "The timestamp of the API key creation in the storage, in milliseconds.",
                    "api_fieldname": "creation_time",
                    "entity_fieldname": "creation_time",
                    "_key": "creation_time"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "array",
                    "description": "A list of group IDs this API key belongs to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "parameter_fieldname": "groups",
                    "in": "body",
                    "required": false,
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571f7020242ac12000600000000",
                    "description": "The ID of the API key.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "apikey_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
                    "description": "The API key.",
                    "api_fieldname": "key",
                    "entity_fieldname": "key",
                    "_key": "key"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "The timestamp of the latest API key usage, in milliseconds.",
                    "api_fieldname": "last_login_time",
                    "entity_fieldname": "last_login_time",
                    "_key": "last_login_time"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "API key gorgon",
                    "description": "The display name for the API key.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": false,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'api-key'",
                    "enum": [
                      "api-key"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The owner of this API key, who is the creator by default.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner",
                    "entity_fieldname": "owner",
                    "parameter_fieldname": "owner",
                    "in": "body",
                    "required": false,
                    "_key": "owner"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the API key.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "enum_reference": "api_key_status_enum",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "description": "Represents an API key in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "api_key"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data, for example, invalid API key name.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account ID or API key with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/api-keys/{apikey_id}",
          "summary": "Update API key details.",
          "return_type": "subtenant_api_key",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_api_key"
          },
          "x_filter": {},
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated. Use PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys/{access_key_id}",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "key",
            "creation_time",
            "last_login_time"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "apikey_id": "id"
          },
          "operation_id": "updateAccountApiKey",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the account.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "account_id",
          "readOnly": false,
          "required": true,
          "_key": "account_id"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "integer",
          "format": "int64",
          "example": 1518630727683,
          "description": "The timestamp of the API key creation in the storage, in milliseconds.",
          "api_fieldname": "creation_time",
          "readOnly": true,
          "required": false,
          "_key": "creation_time"
        },
        {
          "type": "array",
          "description": "A list of group IDs this API key belongs to.",
          "items": {
            "type": "string"
          },
          "api_fieldname": "groups",
          "parameter_fieldname": "groups",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "groups"
        },
        {
          "type": "string",
          "example": "01619571f7020242ac12000600000000",
          "description": "The ID of the API key.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "parameter_fieldname": "apikey_id",
          "in": "path",
          "required": true,
          "readOnly": false,
          "_key": "id"
        },
        {
          "type": "string",
          "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
          "description": "The API key.",
          "api_fieldname": "key",
          "readOnly": true,
          "required": false,
          "_key": "key"
        },
        {
          "type": "integer",
          "format": "int64",
          "example": 1518630727688,
          "description": "The timestamp of the latest API key usage, in milliseconds.",
          "api_fieldname": "last_login_time",
          "readOnly": true,
          "required": false,
          "_key": "last_login_time"
        },
        {
          "type": "string",
          "maxLength": 100,
          "example": "API key gorgon",
          "description": "The display name for the API key.",
          "api_fieldname": "name",
          "parameter_fieldname": "name",
          "in": "body",
          "required": true,
          "readOnly": false,
          "_key": "name"
        },
        {
          "type": "string",
          "example": "01619571e2e89242ac12000600000000",
          "description": "The owner of this API key, who is the creator by default.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "owner",
          "parameter_fieldname": "owner",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "owner"
        },
        {
          "type": "string",
          "example": "ACTIVE",
          "description": "The status of the API key.",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "api_fieldname": "status",
          "parameter_fieldname": "status",
          "in": "body",
          "required": false,
          "enum_reference": "subtenant_api_key_status_enum",
          "readOnly": false,
          "_key": "status"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update UTC time RFC3339.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "Tenant accounts - API keys"
      ],
      "group_id": "Accounts",
      "_key": "subtenant_api_key"
    },
    {
      "swagger_models": [
        "BrandingColor"
      ],
      "primary_key_field": "reference",
      "methods": [
        {
          "description": "Resets the branding color to its dark theme default.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/dark/{reference} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": true,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "is_primary_key": true,
              "_override": true,
              "type": "string",
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "enum": [
                "error_color",
                "primary",
                "secondary",
                "success_color",
                "warning_color",
                "canvas_background",
                "canvas_background_font_color",
                "workspace_background",
                "workspace_background_font_color",
                "info_color",
                "info_font_color",
                "primary_font_color",
                "secondary_font_color",
                "error_font_color",
                "success_font_color",
                "warning_font_color"
              ],
              "name": "reference",
              "in": "path",
              "description": "The name of the branding color.",
              "required": true,
              "enum_reference": "subtenant_dark_theme_color_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Color or account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-colors/dark/{reference}",
          "summary": "Reset branding color to default.",
          "return_type": "void",
          "return_info": {
            "self": false,
            "custom": true,
            "type": "void"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Branding",
          "operation_id": "resetAccountDarkColor",
          "spec": {
            "return_type": "void"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve the requested dark theme branding color.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/dark/{reference} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": true,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "enum": [
                "error_color",
                "primary",
                "secondary",
                "success_color",
                "warning_color",
                "canvas_background",
                "canvas_background_font_color",
                "workspace_background",
                "workspace_background_font_color",
                "info_color",
                "info_font_color",
                "primary_font_color",
                "secondary_font_color",
                "error_font_color",
                "success_font_color",
                "warning_font_color"
              ],
              "type": "string",
              "description": "Color name.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "subtenant_dark_theme_color_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "example": "#f3f93e",
                    "description": "The color given as name (purple) or as a hex code.",
                    "x-nullable": true,
                    "api_fieldname": "color",
                    "entity_fieldname": "color",
                    "parameter_fieldname": "color",
                    "in": "body",
                    "required": false,
                    "_key": "color"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_color'",
                    "readOnly": true,
                    "enum": [
                      "branding_color"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "name": "object",
                    "in": "body",
                    "schema_param": true,
                    "external_param": true,
                    "parameter_fieldname": "object",
                    "required": false,
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "error_color",
                      "primary",
                      "secondary",
                      "success_color",
                      "warning_color",
                      "canvas_background",
                      "canvas_background_font_color",
                      "workspace_background",
                      "workspace_background_font_color",
                      "info_color",
                      "info_font_color",
                      "primary_font_color",
                      "secondary_font_color",
                      "error_font_color",
                      "success_font_color",
                      "warning_font_color"
                    ],
                    "type": "string",
                    "description": "Color name.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "name": "reference",
                    "in": "path",
                    "required": true,
                    "enum_reference": "light_theme_color_reference_enum",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "parameter_fieldname": "updated_at",
                    "in": "body",
                    "required": false,
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_light_theme_color"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Color or account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-colors/dark/{reference}",
          "summary": "Get dark theme branding color.",
          "return_type": "subtenant_dark_theme_color",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_dark_theme_color"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "color",
            "updated_at"
          ],
          "group_id": "Branding",
          "operation_id": "getAccountDarkColor",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update a dark theme branding color.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id)/branding-colors/dark/primary \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{ \"color\": \"#f3f93e\" }'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": true,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "#f3f93e",
              "description": "The color given as name (purple) or as a hex code.",
              "x-nullable": true,
              "api_fieldname": "color",
              "entity_fieldname": "color",
              "parameter_fieldname": "color",
              "in": "body",
              "required": false,
              "_key": "color"
            },
            {
              "enum": [
                "error_color",
                "primary",
                "secondary",
                "success_color",
                "warning_color",
                "canvas_background",
                "canvas_background_font_color",
                "workspace_background",
                "workspace_background_font_color",
                "info_color",
                "info_font_color",
                "primary_font_color",
                "secondary_font_color",
                "error_font_color",
                "success_font_color",
                "warning_font_color"
              ],
              "type": "string",
              "description": "Color name.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "subtenant_dark_theme_color_reference_enum",
              "_key": "reference"
            },
            {
              "type": "string",
              "format": "date-time",
              "example": "2018-02-14T15:24:14Z",
              "description": "Last update time in UTC.",
              "readOnly": true,
              "api_fieldname": "updated_at",
              "entity_fieldname": "updated_at",
              "parameter_fieldname": "updated_at",
              "in": "body",
              "required": false,
              "_key": "updated_at"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Color has been set successfully.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "example": "#f3f93e",
                    "description": "The color given as name (purple) or as a hex code.",
                    "x-nullable": true,
                    "api_fieldname": "color",
                    "entity_fieldname": "color",
                    "parameter_fieldname": "color",
                    "in": "body",
                    "required": false,
                    "_key": "color"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_color'",
                    "readOnly": true,
                    "enum": [
                      "branding_color"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "name": "object",
                    "in": "body",
                    "schema_param": true,
                    "external_param": true,
                    "parameter_fieldname": "object",
                    "required": false,
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "error_color",
                      "primary",
                      "secondary",
                      "success_color",
                      "warning_color",
                      "canvas_background",
                      "canvas_background_font_color",
                      "workspace_background",
                      "workspace_background_font_color",
                      "info_color",
                      "info_font_color",
                      "primary_font_color",
                      "secondary_font_color",
                      "error_font_color",
                      "success_font_color",
                      "warning_font_color"
                    ],
                    "type": "string",
                    "description": "Color name.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "name": "reference",
                    "in": "path",
                    "required": true,
                    "enum_reference": "light_theme_color_reference_enum",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "parameter_fieldname": "updated_at",
                    "in": "body",
                    "required": false,
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_light_theme_color"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data format.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Color or account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-colors/dark/{reference}",
          "summary": "Updates a dark theme branding color.",
          "return_type": "subtenant_dark_theme_color",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_dark_theme_color"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Branding",
          "operation_id": "setAccountDarkColor",
          "additional_operations": [
            {
              "operation_id": "bulkSetAccountDarkColors",
              "notes": "Bulk operation is not appriate for SDK's entity model, this functionality is covered by the update method."
            }
          ],
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "#f3f93e",
          "description": "The color given as name (purple) or as a hex code.",
          "x-nullable": true,
          "api_fieldname": "color",
          "parameter_fieldname": "color",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "color"
        },
        {
          "enum": [
            "error_color",
            "primary",
            "secondary",
            "success_color",
            "warning_color",
            "canvas_background",
            "canvas_background_font_color",
            "workspace_background",
            "workspace_background_font_color",
            "info_color",
            "info_font_color",
            "primary_font_color",
            "secondary_font_color",
            "error_font_color",
            "success_font_color",
            "warning_font_color"
          ],
          "type": "string",
          "description": "Color name.",
          "is_primary_key": true,
          "_override": true,
          "api_fieldname": "reference",
          "name": "reference",
          "in": "path",
          "required": false,
          "enum_reference": "subtenant_dark_theme_color_reference_enum",
          "readOnly": false,
          "_key": "reference"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update time in UTC.",
          "readOnly": true,
          "api_fieldname": "updated_at",
          "parameter_fieldname": "updated_at",
          "in": "body",
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "Tenant user interface configuration - colors"
      ],
      "group_id": "Branding",
      "_key": "subtenant_dark_theme_color"
    },
    {
      "swagger_models": [
        "BrandingImage"
      ],
      "primary_key_field": "reference",
      "methods": [
        {
          "description": "Revert an account branding image to dark theme default.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark/{reference}/clear \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": true,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "is_primary_key": true,
              "_override": true,
              "type": "string",
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "enum": [
                "brand_logo_portrait",
                "brand_logo_square",
                "brand_logo_landscape",
                "brand_logo_email",
                "desktop_background_landscape",
                "desktop_background_square",
                "desktop_background_portrait",
                "carousel_image_portrait_0",
                "carousel_image_portrait_1",
                "carousel_image_portrait_2",
                "carousel_image_portrait_3",
                "carousel_image_portrait_4",
                "carousel_image_portrait_5",
                "carousel_image_portrait_6",
                "carousel_image_portrait_7",
                "carousel_image_portrait_8",
                "carousel_image_portrait_9",
                "carousel_image_square_0",
                "carousel_image_square_1",
                "carousel_image_square_2",
                "carousel_image_square_3",
                "carousel_image_square_4",
                "carousel_image_square_5",
                "carousel_image_square_6",
                "carousel_image_square_7",
                "carousel_image_square_8",
                "carousel_image_square_9",
                "carousel_image_landscape_0",
                "carousel_image_landscape_1",
                "carousel_image_landscape_2",
                "carousel_image_landscape_3",
                "carousel_image_landscape_4",
                "carousel_image_landscape_5",
                "carousel_image_landscape_6",
                "carousel_image_landscape_7",
                "carousel_image_landscape_8",
                "carousel_image_landscape_9"
              ],
              "name": "reference",
              "in": "path",
              "description": "Name of the branding images (icon or picture).",
              "required": true,
              "enum_reference": "subtenant_dark_theme_image_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "post",
          "mode": "delete",
          "responses": [
            {
              "description": "Image reverted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Unknown image reference, or account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-images/dark/{reference}/clear",
          "summary": "Revert an image to dark theme default.",
          "return_type": "subtenant_dark_theme_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_dark_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Branding",
          "operation_id": "clearAccountDarkImage",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve metadata of one account dark theme branding image.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark/{reference} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": true,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "enum": [
                "brand_logo_portrait",
                "brand_logo_square",
                "brand_logo_landscape",
                "brand_logo_email",
                "desktop_background_landscape",
                "desktop_background_square",
                "desktop_background_portrait",
                "carousel_image_portrait_0",
                "carousel_image_portrait_1",
                "carousel_image_portrait_2",
                "carousel_image_portrait_3",
                "carousel_image_portrait_4",
                "carousel_image_portrait_5",
                "carousel_image_portrait_6",
                "carousel_image_portrait_7",
                "carousel_image_portrait_8",
                "carousel_image_portrait_9",
                "carousel_image_square_0",
                "carousel_image_square_1",
                "carousel_image_square_2",
                "carousel_image_square_3",
                "carousel_image_square_4",
                "carousel_image_square_5",
                "carousel_image_square_6",
                "carousel_image_square_7",
                "carousel_image_square_8",
                "carousel_image_square_9",
                "carousel_image_landscape_0",
                "carousel_image_landscape_1",
                "carousel_image_landscape_2",
                "carousel_image_landscape_3",
                "carousel_image_landscape_4",
                "carousel_image_landscape_5",
                "carousel_image_landscape_6",
                "carousel_image_landscape_7",
                "carousel_image_landscape_8",
                "carousel_image_landscape_9"
              ],
              "type": "string",
              "description": "Name of the image.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "subtenant_dark_theme_image_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_image'",
                    "readOnly": true,
                    "enum": [
                      "branding_image"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "brand_logo_portrait",
                      "brand_logo_square",
                      "brand_logo_landscape",
                      "brand_logo_email",
                      "desktop_background_landscape",
                      "desktop_background_square",
                      "desktop_background_portrait",
                      "carousel_image_portrait_0",
                      "carousel_image_portrait_1",
                      "carousel_image_portrait_2",
                      "carousel_image_portrait_3",
                      "carousel_image_portrait_4",
                      "carousel_image_portrait_5",
                      "carousel_image_portrait_6",
                      "carousel_image_portrait_7",
                      "carousel_image_portrait_8",
                      "carousel_image_portrait_9",
                      "carousel_image_square_0",
                      "carousel_image_square_1",
                      "carousel_image_square_2",
                      "carousel_image_square_3",
                      "carousel_image_square_4",
                      "carousel_image_square_5",
                      "carousel_image_square_6",
                      "carousel_image_square_7",
                      "carousel_image_square_8",
                      "carousel_image_square_9",
                      "carousel_image_landscape_0",
                      "carousel_image_landscape_1",
                      "carousel_image_landscape_2",
                      "carousel_image_landscape_3",
                      "carousel_image_landscape_4",
                      "carousel_image_landscape_5",
                      "carousel_image_landscape_6",
                      "carousel_image_landscape_7",
                      "carousel_image_landscape_8",
                      "carousel_image_landscape_9"
                    ],
                    "type": "string",
                    "description": "Name of the image.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "name": "reference",
                    "in": "path",
                    "required": true,
                    "enum_reference": "light_theme_image_reference_enum",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "uri",
                    "example": "https://static.mbed.com/123456789.jpg",
                    "description": "The static link to the image.",
                    "readOnly": true,
                    "api_fieldname": "static_uri",
                    "entity_fieldname": "static_uri",
                    "_key": "static_uri"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_light_theme_image"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Unknown image reference, or account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-images/dark/{reference}",
          "summary": "Get metadata of a dark theme image.",
          "return_type": "subtenant_dark_theme_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_dark_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "static_uri",
            "updated_at"
          ],
          "group_id": "Branding",
          "operation_id": "getAccountDarkImageData",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Upload a new account dark theme branding image as form data in PNG or JPEG format.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": true,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "in": "stream",
              "name": "image",
              "description": "The image in PNG or JPEG format as multipart form data.",
              "required": true,
              "type": "file",
              "entity_fieldname": "image",
              "api_fieldname": "image",
              "external_param": true,
              "parameter_fieldname": "image",
              "_key": "image"
            },
            {
              "enum": [
                "brand_logo_portrait",
                "brand_logo_square",
                "brand_logo_landscape",
                "brand_logo_email",
                "desktop_background_landscape",
                "desktop_background_square",
                "desktop_background_portrait",
                "carousel_image_portrait_0",
                "carousel_image_portrait_1",
                "carousel_image_portrait_2",
                "carousel_image_portrait_3",
                "carousel_image_portrait_4",
                "carousel_image_portrait_5",
                "carousel_image_portrait_6",
                "carousel_image_portrait_7",
                "carousel_image_portrait_8",
                "carousel_image_portrait_9",
                "carousel_image_square_0",
                "carousel_image_square_1",
                "carousel_image_square_2",
                "carousel_image_square_3",
                "carousel_image_square_4",
                "carousel_image_square_5",
                "carousel_image_square_6",
                "carousel_image_square_7",
                "carousel_image_square_8",
                "carousel_image_square_9",
                "carousel_image_landscape_0",
                "carousel_image_landscape_1",
                "carousel_image_landscape_2",
                "carousel_image_landscape_3",
                "carousel_image_landscape_4",
                "carousel_image_landscape_5",
                "carousel_image_landscape_6",
                "carousel_image_landscape_7",
                "carousel_image_landscape_8",
                "carousel_image_landscape_9"
              ],
              "type": "string",
              "description": "Name of the image.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "subtenant_dark_theme_image_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "post",
          "mode": "update",
          "responses": [
            {
              "description": "Image uploaded successfully.",
              "headers": [
                {
                  "type": "string",
                  "description": "Location of the image metadata.",
                  "_key": "Content-Location"
                },
                {
                  "type": "string",
                  "description": "Location of the image binary.",
                  "_key": "Location"
                }
              ],
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_image'",
                    "readOnly": true,
                    "enum": [
                      "branding_image"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "brand_logo_portrait",
                      "brand_logo_square",
                      "brand_logo_landscape",
                      "brand_logo_email",
                      "desktop_background_landscape",
                      "desktop_background_square",
                      "desktop_background_portrait",
                      "carousel_image_portrait_0",
                      "carousel_image_portrait_1",
                      "carousel_image_portrait_2",
                      "carousel_image_portrait_3",
                      "carousel_image_portrait_4",
                      "carousel_image_portrait_5",
                      "carousel_image_portrait_6",
                      "carousel_image_portrait_7",
                      "carousel_image_portrait_8",
                      "carousel_image_portrait_9",
                      "carousel_image_square_0",
                      "carousel_image_square_1",
                      "carousel_image_square_2",
                      "carousel_image_square_3",
                      "carousel_image_square_4",
                      "carousel_image_square_5",
                      "carousel_image_square_6",
                      "carousel_image_square_7",
                      "carousel_image_square_8",
                      "carousel_image_square_9",
                      "carousel_image_landscape_0",
                      "carousel_image_landscape_1",
                      "carousel_image_landscape_2",
                      "carousel_image_landscape_3",
                      "carousel_image_landscape_4",
                      "carousel_image_landscape_5",
                      "carousel_image_landscape_6",
                      "carousel_image_landscape_7",
                      "carousel_image_landscape_8",
                      "carousel_image_landscape_9"
                    ],
                    "type": "string",
                    "description": "Name of the image.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "name": "reference",
                    "in": "path",
                    "required": true,
                    "enum_reference": "light_theme_image_reference_enum",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "uri",
                    "example": "https://static.mbed.com/123456789.jpg",
                    "description": "The static link to the image.",
                    "readOnly": true,
                    "api_fieldname": "static_uri",
                    "entity_fieldname": "static_uri",
                    "_key": "static_uri"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_light_theme_image"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data format, for example, image is too large.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Unknown image reference.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-images/dark/{reference}/upload-multipart",
          "summary": "Upload a dark theme image.",
          "return_type": "subtenant_dark_theme_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_dark_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "static_uri",
            "updated_at"
          ],
          "group_id": "Branding",
          "operation_id": "uploadAccountDarkImageMultipart",
          "additional_operations": [
            {
              "operation_id": "uploadAccountDarkImage",
              "notes": "The multipart endpoint is used by the SDKs as it offers the same functionality as the standard upload endpoint."
            }
          ],
          "pagination": false,
          "request_content_type": "multipart/form-data",
          "request_body": "file",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "enum": [
            "brand_logo_portrait",
            "brand_logo_square",
            "brand_logo_landscape",
            "brand_logo_email",
            "desktop_background_landscape",
            "desktop_background_square",
            "desktop_background_portrait",
            "carousel_image_portrait_0",
            "carousel_image_portrait_1",
            "carousel_image_portrait_2",
            "carousel_image_portrait_3",
            "carousel_image_portrait_4",
            "carousel_image_portrait_5",
            "carousel_image_portrait_6",
            "carousel_image_portrait_7",
            "carousel_image_portrait_8",
            "carousel_image_portrait_9",
            "carousel_image_square_0",
            "carousel_image_square_1",
            "carousel_image_square_2",
            "carousel_image_square_3",
            "carousel_image_square_4",
            "carousel_image_square_5",
            "carousel_image_square_6",
            "carousel_image_square_7",
            "carousel_image_square_8",
            "carousel_image_square_9",
            "carousel_image_landscape_0",
            "carousel_image_landscape_1",
            "carousel_image_landscape_2",
            "carousel_image_landscape_3",
            "carousel_image_landscape_4",
            "carousel_image_landscape_5",
            "carousel_image_landscape_6",
            "carousel_image_landscape_7",
            "carousel_image_landscape_8",
            "carousel_image_landscape_9"
          ],
          "type": "string",
          "description": "Name of the image.",
          "is_primary_key": true,
          "_override": true,
          "api_fieldname": "reference",
          "name": "reference",
          "in": "path",
          "required": false,
          "enum_reference": "subtenant_dark_theme_image_reference_enum",
          "readOnly": false,
          "_key": "reference"
        },
        {
          "type": "string",
          "format": "uri",
          "example": "https://static.mbed.com/123456789.jpg",
          "description": "The static link to the image.",
          "readOnly": true,
          "api_fieldname": "static_uri",
          "required": false,
          "_key": "static_uri"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update time in UTC.",
          "readOnly": true,
          "api_fieldname": "updated_at",
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "Tenant user interface configuration - images"
      ],
      "group_id": "Branding",
      "_key": "subtenant_dark_theme_image"
    },
    {
      "swagger_models": [
        "CertificateGenerationReq",
        "IdentityProviderCreationReq",
        "IdentityProviderInfo",
        "IdentityProviderList",
        "IdentityProviderUpdateReq"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Create a new identity provider.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account the identity provider belongs to.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "maxLength": 500,
              "description": "Description for the identity provider.",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "in": "query",
              "name": "discovery",
              "description": "Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint * jwks_uri * keys",
              "type": "boolean",
              "allowEmptyValue": true,
              "entity_fieldname": "discovery",
              "api_fieldname": "discovery",
              "external_param": true,
              "parameter_fieldname": "discovery",
              "required": false,
              "_key": "discovery"
            },
            {
              "type": "string",
              "maxLength": 100,
              "description": "Name of the identity provider.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": true,
              "_key": "name"
            },
            {
              "type": "object",
              "required": false,
              "properties": [
                {
                  "type": "string",
                  "description": "URL of the OAuth 2.0 authorization endpoint.",
                  "x-nullable": true,
                  "_key": "authorization_endpoint"
                },
                {
                  "type": "boolean",
                  "description": "For future use.",
                  "x-nullable": true,
                  "_key": "auto_enrollment"
                },
                {
                  "description": "Mapping for non-standard OIDC claim names.",
                  "type": "object",
                  "properties": [
                    {
                      "type": "string",
                      "description": "Custom claim name for 'email'.",
                      "example": "email_address",
                      "x-nullable": true,
                      "_key": "email"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'email_verified'.",
                      "example": "email_verified",
                      "x-nullable": true,
                      "_key": "email_verified"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'family_name'.",
                      "example": "family_name",
                      "x-nullable": true,
                      "_key": "family_name"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'given_name'.",
                      "example": "given_name",
                      "x-nullable": true,
                      "_key": "given_name"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'name'.",
                      "example": "name",
                      "x-nullable": true,
                      "_key": "name"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'phone_number'.",
                      "example": "phone_number",
                      "x-nullable": true,
                      "_key": "phone_number"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'sub'.",
                      "example": "sub",
                      "x-nullable": true,
                      "_key": "sub"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'updated_at'.",
                      "example": "updated_at",
                      "x-nullable": true,
                      "_key": "updated_at"
                    },
                    {
                      "type": "string",
                      "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                      "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                      "x-nullable": true,
                      "_key": "updated_at_pattern"
                    }
                  ],
                  "foreign_key": {
                    "group": "Accounts",
                    "entity": "oidc_request_claim_mapping"
                  },
                  "x-nullable": true,
                  "_key": "claim_mapping"
                },
                {
                  "type": "string",
                  "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                  "x-nullable": true,
                  "_key": "client_id"
                },
                {
                  "type": "string",
                  "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                  "x-nullable": true,
                  "_key": "client_secret"
                },
                {
                  "type": "string",
                  "description": "URL of the provider's end session endpoint.",
                  "x-nullable": true,
                  "_key": "end_session_endpoint"
                },
                {
                  "type": "string",
                  "description": "Issuer of the identity provider.",
                  "_key": "issuer"
                },
                {
                  "type": "string",
                  "description": "URL of the provider's JSON web key set document.",
                  "x-nullable": true,
                  "_key": "jwks_uri"
                },
                {
                  "type": "array",
                  "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                  "items": {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "The public key.",
                        "_key": "key"
                      },
                      {
                        "type": "string",
                        "description": "The public key ID.",
                        "_key": "kid"
                      }
                    ],
                    "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "identity_provider_public_key"
                    }
                  },
                  "x-nullable": true,
                  "_key": "keys"
                },
                {
                  "type": "string",
                  "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                  "x-nullable": true,
                  "_key": "redirect_uri"
                },
                {
                  "type": "string",
                  "description": "URL of the provider's token revocation endpoint.",
                  "x-nullable": true,
                  "_key": "revocation_endpoint"
                },
                {
                  "type": "string",
                  "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                  "example": "openid email",
                  "_key": "scopes"
                },
                {
                  "type": "string",
                  "description": "URL of the OAuth 2.0 authorization endpoint.",
                  "x-nullable": true,
                  "_key": "token_endpoint"
                },
                {
                  "type": "string",
                  "enum": [
                    "POST",
                    "GET"
                  ],
                  "default": "POST",
                  "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                  "_key": "token_request_mode"
                },
                {
                  "type": "string",
                  "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                  "example": "oidc.data",
                  "_key": "token_response_path"
                },
                {
                  "type": "string",
                  "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                  "x-nullable": true,
                  "_key": "userinfo_endpoint"
                }
              ],
              "description": "Represents OIDC specific attributes.",
              "foreign_key": {
                "group": "Accounts",
                "entity": "oidc_request"
              },
              "api_fieldname": "oidc_attributes",
              "entity_fieldname": "oidc_attributes",
              "parameter_fieldname": "oidc_attributes",
              "in": "body",
              "_key": "oidc_attributes"
            },
            {
              "type": "object",
              "properties": [
                {
                  "type": "string",
                  "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                  "x-nullable": true,
                  "_key": "assertion_endpoint"
                },
                {
                  "type": "string",
                  "description": "Entity ID of the identity provider.",
                  "x-nullable": true,
                  "_key": "idp_entity_id"
                },
                {
                  "type": "array",
                  "description": "List of public X509 certificates of the identity provider in PEM format.",
                  "items": {
                    "type": "string"
                  },
                  "x-nullable": true,
                  "_key": "idp_x509_certs"
                },
                {
                  "type": "string",
                  "description": "URL of the identity provider's SLO endpoint.",
                  "x-nullable": true,
                  "_key": "slo_endpoint"
                },
                {
                  "type": "string",
                  "description": "Entity ID of the service provider.",
                  "x-nullable": true,
                  "_key": "sp_entity_id"
                },
                {
                  "type": "string",
                  "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                  "readOnly": true,
                  "x-nullable": true,
                  "_key": "sp_x509_cert"
                },
                {
                  "type": "string",
                  "description": "URL of the identity provider's SSO endpoint.",
                  "x-nullable": true,
                  "_key": "sso_endpoint"
                }
              ],
              "description": "Represents SAML2 specific attributes in responses.",
              "api_fieldname": "saml2_attributes",
              "entity_fieldname": "saml2_attributes",
              "parameter_fieldname": "saml2_attributes",
              "in": "body",
              "required": false,
              "_key": "saml2_attributes"
            },
            {
              "type": "string",
              "description": "Status of the identity provider.",
              "enum": [
                "ACTIVE",
                "SUSPENDED"
              ],
              "api_fieldname": "status",
              "entity_fieldname": "status",
              "parameter_fieldname": "status",
              "in": "body",
              "required": false,
              "enum_reference": "subtenant_identity_provider_status_enum",
              "_key": "status"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "New entity created.",
              "headers": [
                {
                  "type": "string",
                  "description": "/v3/accounts/{account_id}/identity-providers/{identity_provider_id}",
                  "_key": "Content-Location"
                },
                {
                  "type": "string",
                  "description": "/v3/accounts/{account_id}/identity-providers/{identity_provider_id}",
                  "_key": "Location"
                }
              ],
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "name",
                  "object",
                  "type"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the identity provider belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Description for the identity provider.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "parameter_fieldname": "description",
                    "in": "body",
                    "required": false,
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "identity_provider_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "description": "Flag indicating whether this is the global default identity provider.",
                    "readOnly": true,
                    "api_fieldname": "is_default",
                    "entity_fieldname": "is_default",
                    "_key": "is_default"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Name of the identity provider.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": true,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'identity-provider'",
                    "enum": [
                      "identity-provider"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "required": false,
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "authorization_endpoint"
                      },
                      {
                        "type": "boolean",
                        "description": "For future use.",
                        "x-nullable": true,
                        "_key": "auto_enrollment"
                      },
                      {
                        "description": "Mapping for non-standard OIDC claim names.",
                        "type": "object",
                        "properties": [
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email'.",
                            "example": "email_address",
                            "x-nullable": true,
                            "_key": "email"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email_verified'.",
                            "example": "email_verified",
                            "x-nullable": true,
                            "_key": "email_verified"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'family_name'.",
                            "example": "family_name",
                            "x-nullable": true,
                            "_key": "family_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'given_name'.",
                            "example": "given_name",
                            "x-nullable": true,
                            "_key": "given_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'name'.",
                            "example": "name",
                            "x-nullable": true,
                            "_key": "name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'phone_number'.",
                            "example": "phone_number",
                            "x-nullable": true,
                            "_key": "phone_number"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'sub'.",
                            "example": "sub",
                            "x-nullable": true,
                            "_key": "sub"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'updated_at'.",
                            "example": "updated_at",
                            "x-nullable": true,
                            "_key": "updated_at"
                          },
                          {
                            "type": "string",
                            "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                            "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                            "x-nullable": true,
                            "_key": "updated_at_pattern"
                          }
                        ],
                        "foreign_key": {
                          "group": "Accounts",
                          "entity": "oidc_request_claim_mapping"
                        },
                        "x-nullable": true,
                        "_key": "claim_mapping"
                      },
                      {
                        "type": "string",
                        "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_id"
                      },
                      {
                        "type": "string",
                        "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_secret"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's end session endpoint.",
                        "x-nullable": true,
                        "_key": "end_session_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Issuer of the identity provider.",
                        "_key": "issuer"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's JSON web key set document.",
                        "x-nullable": true,
                        "_key": "jwks_uri"
                      },
                      {
                        "type": "array",
                        "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                        "items": {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "The public key.",
                              "_key": "key"
                            },
                            {
                              "type": "string",
                              "description": "The public key ID.",
                              "_key": "kid"
                            }
                          ],
                          "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "identity_provider_public_key"
                          }
                        },
                        "x-nullable": true,
                        "_key": "keys"
                      },
                      {
                        "type": "string",
                        "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                        "x-nullable": true,
                        "_key": "redirect_uri"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's token revocation endpoint.",
                        "x-nullable": true,
                        "_key": "revocation_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                        "example": "openid email",
                        "_key": "scopes"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "token_endpoint"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "POST",
                          "GET"
                        ],
                        "default": "POST",
                        "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                        "_key": "token_request_mode"
                      },
                      {
                        "type": "string",
                        "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                        "example": "oidc.data",
                        "_key": "token_response_path"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                        "x-nullable": true,
                        "_key": "userinfo_endpoint"
                      }
                    ],
                    "description": "Represents OIDC specific attributes.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "oidc_request"
                    },
                    "api_fieldname": "oidc_attributes",
                    "entity_fieldname": "oidc_attributes",
                    "parameter_fieldname": "oidc_attributes",
                    "in": "body",
                    "_key": "oidc_attributes"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                        "x-nullable": true,
                        "_key": "assertion_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the identity provider.",
                        "x-nullable": true,
                        "_key": "idp_entity_id"
                      },
                      {
                        "type": "array",
                        "description": "List of public X509 certificates of the identity provider in PEM format.",
                        "items": {
                          "type": "string"
                        },
                        "x-nullable": true,
                        "_key": "idp_x509_certs"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SLO endpoint.",
                        "x-nullable": true,
                        "_key": "slo_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the service provider.",
                        "x-nullable": true,
                        "_key": "sp_entity_id"
                      },
                      {
                        "type": "string",
                        "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                        "readOnly": true,
                        "x-nullable": true,
                        "_key": "sp_x509_cert"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SSO endpoint.",
                        "x-nullable": true,
                        "_key": "sso_endpoint"
                      }
                    ],
                    "description": "Represents SAML2 specific attributes in responses.",
                    "api_fieldname": "saml2_attributes",
                    "entity_fieldname": "saml2_attributes",
                    "parameter_fieldname": "saml2_attributes",
                    "in": "body",
                    "required": false,
                    "_key": "saml2_attributes"
                  },
                  {
                    "type": "string",
                    "description": "Status of the identity provider.",
                    "enum": [
                      "ACTIVE",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "enum_reference": "identity_provider_status_enum",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "type",
                    "parameter_fieldname": "type",
                    "in": "body",
                    "required": true,
                    "enum_reference": "identity_provider_type_enum",
                    "_key": "type"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "identity_provider"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data, for example, too long name.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/identity-providers",
          "summary": "Create a new identity provider.",
          "return_type": "subtenant_identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "updated_at",
            "is_default"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "createAccountIdentityProvider",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete an identity provider by ID.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "name": "identity_provider_id",
              "in": "path",
              "description": "The ID of the identity provider to delete.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "identity_provider_id",
              "external_param": false,
              "parameter_fieldname": "identity_provider_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden, or identity provider is in use.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or identity provider not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/identity-providers/{identity_provider_id}",
          "summary": "Delete an identity provider by ID.",
          "return_type": "subtenant_identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "deleteAccountIdentityProvider",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Delete a service provider certificate.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account the identity provider belongs to.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "identity_provider_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "delete_service_provider_certificate",
          "responses": [
            {
              "description": "Successful operation.",
              "headers": [
                {
                  "type": "string",
                  "description": "/v3/accounts/{account_id}/identity-providers/{identity_provider_id}",
                  "_key": "Content-Location"
                }
              ],
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "name",
                  "object",
                  "type"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the identity provider belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Description for the identity provider.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "parameter_fieldname": "description",
                    "in": "body",
                    "required": false,
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "identity_provider_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "description": "Flag indicating whether this is the global default identity provider.",
                    "readOnly": true,
                    "api_fieldname": "is_default",
                    "entity_fieldname": "is_default",
                    "_key": "is_default"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Name of the identity provider.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": true,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'identity-provider'",
                    "enum": [
                      "identity-provider"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "required": false,
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "authorization_endpoint"
                      },
                      {
                        "type": "boolean",
                        "description": "For future use.",
                        "x-nullable": true,
                        "_key": "auto_enrollment"
                      },
                      {
                        "description": "Mapping for non-standard OIDC claim names.",
                        "type": "object",
                        "properties": [
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email'.",
                            "example": "email_address",
                            "x-nullable": true,
                            "_key": "email"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email_verified'.",
                            "example": "email_verified",
                            "x-nullable": true,
                            "_key": "email_verified"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'family_name'.",
                            "example": "family_name",
                            "x-nullable": true,
                            "_key": "family_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'given_name'.",
                            "example": "given_name",
                            "x-nullable": true,
                            "_key": "given_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'name'.",
                            "example": "name",
                            "x-nullable": true,
                            "_key": "name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'phone_number'.",
                            "example": "phone_number",
                            "x-nullable": true,
                            "_key": "phone_number"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'sub'.",
                            "example": "sub",
                            "x-nullable": true,
                            "_key": "sub"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'updated_at'.",
                            "example": "updated_at",
                            "x-nullable": true,
                            "_key": "updated_at"
                          },
                          {
                            "type": "string",
                            "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                            "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                            "x-nullable": true,
                            "_key": "updated_at_pattern"
                          }
                        ],
                        "foreign_key": {
                          "group": "Accounts",
                          "entity": "oidc_request_claim_mapping"
                        },
                        "x-nullable": true,
                        "_key": "claim_mapping"
                      },
                      {
                        "type": "string",
                        "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_id"
                      },
                      {
                        "type": "string",
                        "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_secret"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's end session endpoint.",
                        "x-nullable": true,
                        "_key": "end_session_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Issuer of the identity provider.",
                        "_key": "issuer"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's JSON web key set document.",
                        "x-nullable": true,
                        "_key": "jwks_uri"
                      },
                      {
                        "type": "array",
                        "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                        "items": {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "The public key.",
                              "_key": "key"
                            },
                            {
                              "type": "string",
                              "description": "The public key ID.",
                              "_key": "kid"
                            }
                          ],
                          "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "identity_provider_public_key"
                          }
                        },
                        "x-nullable": true,
                        "_key": "keys"
                      },
                      {
                        "type": "string",
                        "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                        "x-nullable": true,
                        "_key": "redirect_uri"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's token revocation endpoint.",
                        "x-nullable": true,
                        "_key": "revocation_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                        "example": "openid email",
                        "_key": "scopes"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "token_endpoint"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "POST",
                          "GET"
                        ],
                        "default": "POST",
                        "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                        "_key": "token_request_mode"
                      },
                      {
                        "type": "string",
                        "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                        "example": "oidc.data",
                        "_key": "token_response_path"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                        "x-nullable": true,
                        "_key": "userinfo_endpoint"
                      }
                    ],
                    "description": "Represents OIDC specific attributes.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "oidc_request"
                    },
                    "api_fieldname": "oidc_attributes",
                    "entity_fieldname": "oidc_attributes",
                    "parameter_fieldname": "oidc_attributes",
                    "in": "body",
                    "_key": "oidc_attributes"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                        "x-nullable": true,
                        "_key": "assertion_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the identity provider.",
                        "x-nullable": true,
                        "_key": "idp_entity_id"
                      },
                      {
                        "type": "array",
                        "description": "List of public X509 certificates of the identity provider in PEM format.",
                        "items": {
                          "type": "string"
                        },
                        "x-nullable": true,
                        "_key": "idp_x509_certs"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SLO endpoint.",
                        "x-nullable": true,
                        "_key": "slo_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the service provider.",
                        "x-nullable": true,
                        "_key": "sp_entity_id"
                      },
                      {
                        "type": "string",
                        "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                        "readOnly": true,
                        "x-nullable": true,
                        "_key": "sp_x509_cert"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SSO endpoint.",
                        "x-nullable": true,
                        "_key": "sso_endpoint"
                      }
                    ],
                    "description": "Represents SAML2 specific attributes in responses.",
                    "api_fieldname": "saml2_attributes",
                    "entity_fieldname": "saml2_attributes",
                    "parameter_fieldname": "saml2_attributes",
                    "in": "body",
                    "required": false,
                    "_key": "saml2_attributes"
                  },
                  {
                    "type": "string",
                    "description": "Status of the identity provider.",
                    "enum": [
                      "ACTIVE",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "enum_reference": "identity_provider_status_enum",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "type",
                    "parameter_fieldname": "type",
                    "in": "body",
                    "required": true,
                    "enum_reference": "identity_provider_type_enum",
                    "_key": "type"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "identity_provider"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or identity provider not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/identity-providers/{identity_provider_id}/delete-sp-certificate",
          "summary": "Delete the service provider certificate.",
          "return_type": "subtenant_identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "name",
            "description",
            "status",
            "saml2_attributes",
            "oidc_attributes",
            "is_default"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "deleteAccountSpCertificate",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete_service_provider_certificate"
        },
        {
          "description": "Generate a new service provider certificate.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account the identity provider belongs to.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "description": "The algorithm and its key size used for generating the certificate. Defaults to RSA2048.",
              "enum": [
                "RSA2048",
                "RSA3072",
                "EC224",
                "EC256",
                "EC384",
                "EC521",
                "ECDSA224",
                "ECDSA256",
                "ECDSA384",
                "ECDSA521"
              ],
              "name": "algorithm",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "algorithm",
              "api_fieldname": "algorithm",
              "external_param": true,
              "parameter_fieldname": "algorithm",
              "required": false,
              "enum_reference": "subtenant_identity_provider_algorithm_enum",
              "_key": "algorithm"
            },
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "identity_provider_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "integer",
              "format": "int32",
              "description": "Validity for the certificate in days.",
              "name": "validity",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "validity",
              "api_fieldname": "validity",
              "external_param": true,
              "parameter_fieldname": "validity",
              "required": false,
              "_key": "validity"
            }
          ],
          "method": "post",
          "mode": "generate_service_provider_certificate",
          "responses": [
            {
              "description": "Successful operation.",
              "headers": [
                {
                  "type": "string",
                  "description": "/v3/accounts/{account_id}/identity-providers/{identity_provider_id}",
                  "_key": "Content-Location"
                }
              ],
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "name",
                  "object",
                  "type"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the identity provider belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Description for the identity provider.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "parameter_fieldname": "description",
                    "in": "body",
                    "required": false,
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "identity_provider_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "description": "Flag indicating whether this is the global default identity provider.",
                    "readOnly": true,
                    "api_fieldname": "is_default",
                    "entity_fieldname": "is_default",
                    "_key": "is_default"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Name of the identity provider.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": true,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'identity-provider'",
                    "enum": [
                      "identity-provider"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "required": false,
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "authorization_endpoint"
                      },
                      {
                        "type": "boolean",
                        "description": "For future use.",
                        "x-nullable": true,
                        "_key": "auto_enrollment"
                      },
                      {
                        "description": "Mapping for non-standard OIDC claim names.",
                        "type": "object",
                        "properties": [
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email'.",
                            "example": "email_address",
                            "x-nullable": true,
                            "_key": "email"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email_verified'.",
                            "example": "email_verified",
                            "x-nullable": true,
                            "_key": "email_verified"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'family_name'.",
                            "example": "family_name",
                            "x-nullable": true,
                            "_key": "family_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'given_name'.",
                            "example": "given_name",
                            "x-nullable": true,
                            "_key": "given_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'name'.",
                            "example": "name",
                            "x-nullable": true,
                            "_key": "name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'phone_number'.",
                            "example": "phone_number",
                            "x-nullable": true,
                            "_key": "phone_number"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'sub'.",
                            "example": "sub",
                            "x-nullable": true,
                            "_key": "sub"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'updated_at'.",
                            "example": "updated_at",
                            "x-nullable": true,
                            "_key": "updated_at"
                          },
                          {
                            "type": "string",
                            "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                            "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                            "x-nullable": true,
                            "_key": "updated_at_pattern"
                          }
                        ],
                        "foreign_key": {
                          "group": "Accounts",
                          "entity": "oidc_request_claim_mapping"
                        },
                        "x-nullable": true,
                        "_key": "claim_mapping"
                      },
                      {
                        "type": "string",
                        "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_id"
                      },
                      {
                        "type": "string",
                        "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_secret"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's end session endpoint.",
                        "x-nullable": true,
                        "_key": "end_session_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Issuer of the identity provider.",
                        "_key": "issuer"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's JSON web key set document.",
                        "x-nullable": true,
                        "_key": "jwks_uri"
                      },
                      {
                        "type": "array",
                        "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                        "items": {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "The public key.",
                              "_key": "key"
                            },
                            {
                              "type": "string",
                              "description": "The public key ID.",
                              "_key": "kid"
                            }
                          ],
                          "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "identity_provider_public_key"
                          }
                        },
                        "x-nullable": true,
                        "_key": "keys"
                      },
                      {
                        "type": "string",
                        "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                        "x-nullable": true,
                        "_key": "redirect_uri"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's token revocation endpoint.",
                        "x-nullable": true,
                        "_key": "revocation_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                        "example": "openid email",
                        "_key": "scopes"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "token_endpoint"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "POST",
                          "GET"
                        ],
                        "default": "POST",
                        "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                        "_key": "token_request_mode"
                      },
                      {
                        "type": "string",
                        "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                        "example": "oidc.data",
                        "_key": "token_response_path"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                        "x-nullable": true,
                        "_key": "userinfo_endpoint"
                      }
                    ],
                    "description": "Represents OIDC specific attributes.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "oidc_request"
                    },
                    "api_fieldname": "oidc_attributes",
                    "entity_fieldname": "oidc_attributes",
                    "parameter_fieldname": "oidc_attributes",
                    "in": "body",
                    "_key": "oidc_attributes"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                        "x-nullable": true,
                        "_key": "assertion_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the identity provider.",
                        "x-nullable": true,
                        "_key": "idp_entity_id"
                      },
                      {
                        "type": "array",
                        "description": "List of public X509 certificates of the identity provider in PEM format.",
                        "items": {
                          "type": "string"
                        },
                        "x-nullable": true,
                        "_key": "idp_x509_certs"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SLO endpoint.",
                        "x-nullable": true,
                        "_key": "slo_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the service provider.",
                        "x-nullable": true,
                        "_key": "sp_entity_id"
                      },
                      {
                        "type": "string",
                        "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                        "readOnly": true,
                        "x-nullable": true,
                        "_key": "sp_x509_cert"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SSO endpoint.",
                        "x-nullable": true,
                        "_key": "sso_endpoint"
                      }
                    ],
                    "description": "Represents SAML2 specific attributes in responses.",
                    "api_fieldname": "saml2_attributes",
                    "entity_fieldname": "saml2_attributes",
                    "parameter_fieldname": "saml2_attributes",
                    "in": "body",
                    "required": false,
                    "_key": "saml2_attributes"
                  },
                  {
                    "type": "string",
                    "description": "Status of the identity provider.",
                    "enum": [
                      "ACTIVE",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "enum_reference": "identity_provider_status_enum",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "type",
                    "parameter_fieldname": "type",
                    "in": "body",
                    "required": true,
                    "enum_reference": "identity_provider_type_enum",
                    "_key": "type"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "identity_provider"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data, for example, invalid certificate validity value.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or identity provider not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/identity-providers/{identity_provider_id}/generate-sp-certificate",
          "summary": "Generate a new service provider certificate.",
          "return_type": "subtenant_identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "name",
            "description",
            "status",
            "saml2_attributes",
            "oidc_attributes",
            "is_default"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "generateAccountSpCertificate",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "generate_service_provider_certificate"
        },
        {
          "description": "Retrieve an array of identity providers.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "subtenant_identity_provider_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "etag",
                        "id",
                        "name",
                        "object",
                        "type"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account the identity provider belongs to.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "maxLength": 500,
                          "description": "Description for the identity provider.",
                          "_key": "description"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571d01d0242ac12000600000000",
                          "description": "Entity ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "boolean",
                          "description": "Flag indicating whether this is the global default identity provider.",
                          "readOnly": true,
                          "_key": "is_default"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "description": "Name of the identity provider.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'identity-provider'",
                          "enum": [
                            "identity-provider"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "object",
                          "required": [
                            "issuer"
                          ],
                          "properties": [
                            {
                              "type": "string",
                              "description": "URL of the OAuth 2.0 authorization endpoint.",
                              "x-nullable": true,
                              "_key": "authorization_endpoint"
                            },
                            {
                              "type": "boolean",
                              "description": "For future use.",
                              "x-nullable": true,
                              "_key": "auto_enrollment"
                            },
                            {
                              "description": "Mapping for non-standard OIDC claim names.",
                              "type": "object",
                              "properties": [
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'email'.",
                                  "example": "email_address",
                                  "x-nullable": true,
                                  "_key": "email"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'email_verified'.",
                                  "example": "email_verified",
                                  "x-nullable": true,
                                  "_key": "email_verified"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'family_name'.",
                                  "example": "family_name",
                                  "x-nullable": true,
                                  "_key": "family_name"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'given_name'.",
                                  "example": "given_name",
                                  "x-nullable": true,
                                  "_key": "given_name"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'name'.",
                                  "example": "name",
                                  "x-nullable": true,
                                  "_key": "name"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'phone_number'.",
                                  "example": "phone_number",
                                  "x-nullable": true,
                                  "_key": "phone_number"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'sub'.",
                                  "example": "sub",
                                  "x-nullable": true,
                                  "_key": "sub"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom claim name for 'updated_at'.",
                                  "example": "updated_at",
                                  "x-nullable": true,
                                  "_key": "updated_at"
                                },
                                {
                                  "type": "string",
                                  "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                                  "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                                  "x-nullable": true,
                                  "_key": "updated_at_pattern"
                                }
                              ],
                              "foreign_key": {
                                "group": "Accounts",
                                "entity": "oidc_request_claim_mapping"
                              },
                              "x-nullable": true,
                              "_key": "claim_mapping"
                            },
                            {
                              "type": "string",
                              "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                              "x-nullable": true,
                              "_key": "client_id"
                            },
                            {
                              "type": "string",
                              "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                              "x-nullable": true,
                              "_key": "client_secret"
                            },
                            {
                              "type": "string",
                              "description": "URL of the provider's end session endpoint.",
                              "x-nullable": true,
                              "_key": "end_session_endpoint"
                            },
                            {
                              "type": "string",
                              "description": "Issuer of the identity provider.",
                              "_key": "issuer"
                            },
                            {
                              "type": "string",
                              "description": "URL of the provider's JSON web key set document.",
                              "x-nullable": true,
                              "_key": "jwks_uri"
                            },
                            {
                              "type": "array",
                              "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                              "items": {
                                "type": "object",
                                "properties": [
                                  {
                                    "type": "string",
                                    "description": "The public key.",
                                    "_key": "key"
                                  },
                                  {
                                    "type": "string",
                                    "description": "The public key ID.",
                                    "_key": "kid"
                                  }
                                ],
                                "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                                "foreign_key": {
                                  "group": "Accounts",
                                  "entity": "identity_provider_public_key"
                                }
                              },
                              "x-nullable": true,
                              "_key": "keys"
                            },
                            {
                              "type": "string",
                              "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                              "x-nullable": true,
                              "_key": "redirect_uri"
                            },
                            {
                              "type": "string",
                              "description": "URL of the provider's token revocation endpoint.",
                              "x-nullable": true,
                              "_key": "revocation_endpoint"
                            },
                            {
                              "type": "string",
                              "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                              "example": "openid email",
                              "_key": "scopes"
                            },
                            {
                              "type": "string",
                              "description": "URL of the OAuth 2.0 authorization endpoint.",
                              "x-nullable": true,
                              "_key": "token_endpoint"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "POST",
                                "GET"
                              ],
                              "default": "POST",
                              "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                              "_key": "token_request_mode"
                            },
                            {
                              "type": "string",
                              "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                              "example": "oidc.data",
                              "_key": "token_response_path"
                            },
                            {
                              "type": "string",
                              "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                              "x-nullable": true,
                              "_key": "userinfo_endpoint"
                            }
                          ],
                          "description": "Represents OIDC specific attributes.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "oidc_request"
                          },
                          "_key": "oidc_attributes"
                        },
                        {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                              "x-nullable": true,
                              "_key": "assertion_endpoint"
                            },
                            {
                              "type": "string",
                              "description": "Entity ID of the identity provider.",
                              "x-nullable": true,
                              "_key": "idp_entity_id"
                            },
                            {
                              "type": "array",
                              "description": "List of public X509 certificates of the identity provider in PEM format.",
                              "items": {
                                "type": "string"
                              },
                              "x-nullable": true,
                              "_key": "idp_x509_certs"
                            },
                            {
                              "type": "string",
                              "description": "URL of the identity provider's SLO endpoint.",
                              "x-nullable": true,
                              "_key": "slo_endpoint"
                            },
                            {
                              "type": "string",
                              "description": "Entity ID of the service provider.",
                              "x-nullable": true,
                              "_key": "sp_entity_id"
                            },
                            {
                              "type": "string",
                              "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                              "readOnly": true,
                              "x-nullable": true,
                              "_key": "sp_x509_cert"
                            },
                            {
                              "type": "string",
                              "description": "URL of the identity provider's SSO endpoint.",
                              "x-nullable": true,
                              "_key": "sso_endpoint"
                            }
                          ],
                          "description": "Represents SAML2 specific attributes in responses.",
                          "_key": "saml2_attributes"
                        },
                        {
                          "type": "string",
                          "description": "Status of the identity provider.",
                          "enum": [
                            "ACTIVE",
                            "SUSPENDED"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "string",
                          "description": "Identity provider type.",
                          "enum": [
                            "NATIVE",
                            "MBED",
                            "SAML2",
                            "OIDC"
                          ],
                          "_key": "type"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ],
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "identity_provider"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "identity_provider_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_identity_provider"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/identity-providers",
          "summary": "Get all identity providers.",
          "return_type": "paginated_response(subtenant_identity_provider)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data"
          ],
          "foreign_key_priority": "self",
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "getAllAccountIdentityProviders",
          "pagination": true,
          "foreign_key": {
            "group": "Accounts",
            "entity": "subtenant_identity_provider"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve an identity provider.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account the identity provider belongs to.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "identity_provider_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "name",
                  "object",
                  "type"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the identity provider belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Description for the identity provider.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "parameter_fieldname": "description",
                    "in": "body",
                    "required": false,
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "identity_provider_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "description": "Flag indicating whether this is the global default identity provider.",
                    "readOnly": true,
                    "api_fieldname": "is_default",
                    "entity_fieldname": "is_default",
                    "_key": "is_default"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Name of the identity provider.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": true,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'identity-provider'",
                    "enum": [
                      "identity-provider"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "required": false,
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "authorization_endpoint"
                      },
                      {
                        "type": "boolean",
                        "description": "For future use.",
                        "x-nullable": true,
                        "_key": "auto_enrollment"
                      },
                      {
                        "description": "Mapping for non-standard OIDC claim names.",
                        "type": "object",
                        "properties": [
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email'.",
                            "example": "email_address",
                            "x-nullable": true,
                            "_key": "email"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email_verified'.",
                            "example": "email_verified",
                            "x-nullable": true,
                            "_key": "email_verified"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'family_name'.",
                            "example": "family_name",
                            "x-nullable": true,
                            "_key": "family_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'given_name'.",
                            "example": "given_name",
                            "x-nullable": true,
                            "_key": "given_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'name'.",
                            "example": "name",
                            "x-nullable": true,
                            "_key": "name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'phone_number'.",
                            "example": "phone_number",
                            "x-nullable": true,
                            "_key": "phone_number"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'sub'.",
                            "example": "sub",
                            "x-nullable": true,
                            "_key": "sub"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'updated_at'.",
                            "example": "updated_at",
                            "x-nullable": true,
                            "_key": "updated_at"
                          },
                          {
                            "type": "string",
                            "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                            "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                            "x-nullable": true,
                            "_key": "updated_at_pattern"
                          }
                        ],
                        "foreign_key": {
                          "group": "Accounts",
                          "entity": "oidc_request_claim_mapping"
                        },
                        "x-nullable": true,
                        "_key": "claim_mapping"
                      },
                      {
                        "type": "string",
                        "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_id"
                      },
                      {
                        "type": "string",
                        "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_secret"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's end session endpoint.",
                        "x-nullable": true,
                        "_key": "end_session_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Issuer of the identity provider.",
                        "_key": "issuer"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's JSON web key set document.",
                        "x-nullable": true,
                        "_key": "jwks_uri"
                      },
                      {
                        "type": "array",
                        "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                        "items": {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "The public key.",
                              "_key": "key"
                            },
                            {
                              "type": "string",
                              "description": "The public key ID.",
                              "_key": "kid"
                            }
                          ],
                          "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "identity_provider_public_key"
                          }
                        },
                        "x-nullable": true,
                        "_key": "keys"
                      },
                      {
                        "type": "string",
                        "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                        "x-nullable": true,
                        "_key": "redirect_uri"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's token revocation endpoint.",
                        "x-nullable": true,
                        "_key": "revocation_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                        "example": "openid email",
                        "_key": "scopes"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "token_endpoint"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "POST",
                          "GET"
                        ],
                        "default": "POST",
                        "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                        "_key": "token_request_mode"
                      },
                      {
                        "type": "string",
                        "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                        "example": "oidc.data",
                        "_key": "token_response_path"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                        "x-nullable": true,
                        "_key": "userinfo_endpoint"
                      }
                    ],
                    "description": "Represents OIDC specific attributes.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "oidc_request"
                    },
                    "api_fieldname": "oidc_attributes",
                    "entity_fieldname": "oidc_attributes",
                    "parameter_fieldname": "oidc_attributes",
                    "in": "body",
                    "_key": "oidc_attributes"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                        "x-nullable": true,
                        "_key": "assertion_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the identity provider.",
                        "x-nullable": true,
                        "_key": "idp_entity_id"
                      },
                      {
                        "type": "array",
                        "description": "List of public X509 certificates of the identity provider in PEM format.",
                        "items": {
                          "type": "string"
                        },
                        "x-nullable": true,
                        "_key": "idp_x509_certs"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SLO endpoint.",
                        "x-nullable": true,
                        "_key": "slo_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the service provider.",
                        "x-nullable": true,
                        "_key": "sp_entity_id"
                      },
                      {
                        "type": "string",
                        "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                        "readOnly": true,
                        "x-nullable": true,
                        "_key": "sp_x509_cert"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SSO endpoint.",
                        "x-nullable": true,
                        "_key": "sso_endpoint"
                      }
                    ],
                    "description": "Represents SAML2 specific attributes in responses.",
                    "api_fieldname": "saml2_attributes",
                    "entity_fieldname": "saml2_attributes",
                    "parameter_fieldname": "saml2_attributes",
                    "in": "body",
                    "required": false,
                    "_key": "saml2_attributes"
                  },
                  {
                    "type": "string",
                    "description": "Status of the identity provider.",
                    "enum": [
                      "ACTIVE",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "enum_reference": "identity_provider_status_enum",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "type",
                    "parameter_fieldname": "type",
                    "in": "body",
                    "required": true,
                    "enum_reference": "identity_provider_type_enum",
                    "_key": "type"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "identity_provider"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or identity provider not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/identity-providers/{identity_provider_id}",
          "summary": "Get an identity provider.",
          "return_type": "subtenant_identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "name",
            "description",
            "status",
            "saml2_attributes",
            "oidc_attributes",
            "is_default"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "getAccountIdentityProvider",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Refresh an OIDC IdP's signing keys.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account the identity provider belongs to.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "identity_provider_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "refresh_tokens",
          "responses": [
            {
              "description": "Successful operation.",
              "headers": [
                {
                  "type": "string",
                  "description": "/v3/accounts/{account_id}/identity-providers/{identity_provider_id}",
                  "_key": "Content-Location"
                }
              ],
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "name",
                  "object",
                  "type"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the identity provider belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Description for the identity provider.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "parameter_fieldname": "description",
                    "in": "body",
                    "required": false,
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "identity_provider_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "description": "Flag indicating whether this is the global default identity provider.",
                    "readOnly": true,
                    "api_fieldname": "is_default",
                    "entity_fieldname": "is_default",
                    "_key": "is_default"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Name of the identity provider.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": true,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'identity-provider'",
                    "enum": [
                      "identity-provider"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "required": false,
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "authorization_endpoint"
                      },
                      {
                        "type": "boolean",
                        "description": "For future use.",
                        "x-nullable": true,
                        "_key": "auto_enrollment"
                      },
                      {
                        "description": "Mapping for non-standard OIDC claim names.",
                        "type": "object",
                        "properties": [
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email'.",
                            "example": "email_address",
                            "x-nullable": true,
                            "_key": "email"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email_verified'.",
                            "example": "email_verified",
                            "x-nullable": true,
                            "_key": "email_verified"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'family_name'.",
                            "example": "family_name",
                            "x-nullable": true,
                            "_key": "family_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'given_name'.",
                            "example": "given_name",
                            "x-nullable": true,
                            "_key": "given_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'name'.",
                            "example": "name",
                            "x-nullable": true,
                            "_key": "name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'phone_number'.",
                            "example": "phone_number",
                            "x-nullable": true,
                            "_key": "phone_number"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'sub'.",
                            "example": "sub",
                            "x-nullable": true,
                            "_key": "sub"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'updated_at'.",
                            "example": "updated_at",
                            "x-nullable": true,
                            "_key": "updated_at"
                          },
                          {
                            "type": "string",
                            "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                            "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                            "x-nullable": true,
                            "_key": "updated_at_pattern"
                          }
                        ],
                        "foreign_key": {
                          "group": "Accounts",
                          "entity": "oidc_request_claim_mapping"
                        },
                        "x-nullable": true,
                        "_key": "claim_mapping"
                      },
                      {
                        "type": "string",
                        "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_id"
                      },
                      {
                        "type": "string",
                        "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_secret"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's end session endpoint.",
                        "x-nullable": true,
                        "_key": "end_session_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Issuer of the identity provider.",
                        "_key": "issuer"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's JSON web key set document.",
                        "x-nullable": true,
                        "_key": "jwks_uri"
                      },
                      {
                        "type": "array",
                        "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                        "items": {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "The public key.",
                              "_key": "key"
                            },
                            {
                              "type": "string",
                              "description": "The public key ID.",
                              "_key": "kid"
                            }
                          ],
                          "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "identity_provider_public_key"
                          }
                        },
                        "x-nullable": true,
                        "_key": "keys"
                      },
                      {
                        "type": "string",
                        "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                        "x-nullable": true,
                        "_key": "redirect_uri"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's token revocation endpoint.",
                        "x-nullable": true,
                        "_key": "revocation_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                        "example": "openid email",
                        "_key": "scopes"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "token_endpoint"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "POST",
                          "GET"
                        ],
                        "default": "POST",
                        "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                        "_key": "token_request_mode"
                      },
                      {
                        "type": "string",
                        "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                        "example": "oidc.data",
                        "_key": "token_response_path"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                        "x-nullable": true,
                        "_key": "userinfo_endpoint"
                      }
                    ],
                    "description": "Represents OIDC specific attributes.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "oidc_request"
                    },
                    "api_fieldname": "oidc_attributes",
                    "entity_fieldname": "oidc_attributes",
                    "parameter_fieldname": "oidc_attributes",
                    "in": "body",
                    "_key": "oidc_attributes"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                        "x-nullable": true,
                        "_key": "assertion_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the identity provider.",
                        "x-nullable": true,
                        "_key": "idp_entity_id"
                      },
                      {
                        "type": "array",
                        "description": "List of public X509 certificates of the identity provider in PEM format.",
                        "items": {
                          "type": "string"
                        },
                        "x-nullable": true,
                        "_key": "idp_x509_certs"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SLO endpoint.",
                        "x-nullable": true,
                        "_key": "slo_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the service provider.",
                        "x-nullable": true,
                        "_key": "sp_entity_id"
                      },
                      {
                        "type": "string",
                        "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                        "readOnly": true,
                        "x-nullable": true,
                        "_key": "sp_x509_cert"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SSO endpoint.",
                        "x-nullable": true,
                        "_key": "sso_endpoint"
                      }
                    ],
                    "description": "Represents SAML2 specific attributes in responses.",
                    "api_fieldname": "saml2_attributes",
                    "entity_fieldname": "saml2_attributes",
                    "parameter_fieldname": "saml2_attributes",
                    "in": "body",
                    "required": false,
                    "_key": "saml2_attributes"
                  },
                  {
                    "type": "string",
                    "description": "Status of the identity provider.",
                    "enum": [
                      "ACTIVE",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "enum_reference": "identity_provider_status_enum",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "type",
                    "parameter_fieldname": "type",
                    "in": "body",
                    "required": true,
                    "enum_reference": "identity_provider_type_enum",
                    "_key": "type"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "identity_provider"
                }
              },
              "_key": "200"
            },
            {
              "description": "Not an OIDC IdP or JWKS URI is unspecified.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or identity provider not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/identity-providers/{identity_provider_id}/refresh-jwks",
          "summary": "Refresh the OIDC signing keys.",
          "return_type": "subtenant_identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "name",
            "description",
            "status",
            "saml2_attributes",
            "oidc_attributes",
            "is_default"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "refreshAccountJwks",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "refresh_tokens"
        },
        {
          "description": "Update an existing identity provider.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account the identity provider belongs to.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "maxLength": 500,
              "description": "Description for the identity provider.",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "in": "query",
              "name": "discovery",
              "description": "Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint * jwks_uri * keys",
              "type": "boolean",
              "allowEmptyValue": true,
              "entity_fieldname": "discovery",
              "api_fieldname": "discovery",
              "external_param": true,
              "parameter_fieldname": "discovery",
              "required": false,
              "_key": "discovery"
            },
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "identity_provider_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "string",
              "maxLength": 100,
              "description": "Name of the identity provider.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": true,
              "_key": "name"
            },
            {
              "type": "object",
              "required": false,
              "properties": [
                {
                  "type": "string",
                  "description": "URL of the OAuth 2.0 authorization endpoint.",
                  "x-nullable": true,
                  "_key": "authorization_endpoint"
                },
                {
                  "type": "boolean",
                  "description": "For future use.",
                  "x-nullable": true,
                  "_key": "auto_enrollment"
                },
                {
                  "description": "Mapping for non-standard OIDC claim names.",
                  "type": "object",
                  "properties": [
                    {
                      "type": "string",
                      "description": "Custom claim name for 'email'.",
                      "example": "email_address",
                      "x-nullable": true,
                      "_key": "email"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'email_verified'.",
                      "example": "email_verified",
                      "x-nullable": true,
                      "_key": "email_verified"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'family_name'.",
                      "example": "family_name",
                      "x-nullable": true,
                      "_key": "family_name"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'given_name'.",
                      "example": "given_name",
                      "x-nullable": true,
                      "_key": "given_name"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'name'.",
                      "example": "name",
                      "x-nullable": true,
                      "_key": "name"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'phone_number'.",
                      "example": "phone_number",
                      "x-nullable": true,
                      "_key": "phone_number"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'sub'.",
                      "example": "sub",
                      "x-nullable": true,
                      "_key": "sub"
                    },
                    {
                      "type": "string",
                      "description": "Custom claim name for 'updated_at'.",
                      "example": "updated_at",
                      "x-nullable": true,
                      "_key": "updated_at"
                    },
                    {
                      "type": "string",
                      "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                      "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                      "x-nullable": true,
                      "_key": "updated_at_pattern"
                    }
                  ],
                  "foreign_key": {
                    "group": "Accounts",
                    "entity": "oidc_request_claim_mapping"
                  },
                  "x-nullable": true,
                  "_key": "claim_mapping"
                },
                {
                  "type": "string",
                  "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                  "x-nullable": true,
                  "_key": "client_id"
                },
                {
                  "type": "string",
                  "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                  "x-nullable": true,
                  "_key": "client_secret"
                },
                {
                  "type": "string",
                  "description": "URL of the provider's end session endpoint.",
                  "x-nullable": true,
                  "_key": "end_session_endpoint"
                },
                {
                  "type": "string",
                  "description": "Issuer of the identity provider.",
                  "_key": "issuer"
                },
                {
                  "type": "string",
                  "description": "URL of the provider's JSON web key set document.",
                  "x-nullable": true,
                  "_key": "jwks_uri"
                },
                {
                  "type": "array",
                  "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                  "items": {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "The public key.",
                        "_key": "key"
                      },
                      {
                        "type": "string",
                        "description": "The public key ID.",
                        "_key": "kid"
                      }
                    ],
                    "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "identity_provider_public_key"
                    }
                  },
                  "x-nullable": true,
                  "_key": "keys"
                },
                {
                  "type": "string",
                  "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                  "x-nullable": true,
                  "_key": "redirect_uri"
                },
                {
                  "type": "string",
                  "description": "URL of the provider's token revocation endpoint.",
                  "x-nullable": true,
                  "_key": "revocation_endpoint"
                },
                {
                  "type": "string",
                  "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                  "example": "openid email",
                  "_key": "scopes"
                },
                {
                  "type": "string",
                  "description": "URL of the OAuth 2.0 authorization endpoint.",
                  "x-nullable": true,
                  "_key": "token_endpoint"
                },
                {
                  "type": "string",
                  "enum": [
                    "POST",
                    "GET"
                  ],
                  "default": "POST",
                  "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                  "_key": "token_request_mode"
                },
                {
                  "type": "string",
                  "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                  "example": "oidc.data",
                  "_key": "token_response_path"
                },
                {
                  "type": "string",
                  "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                  "x-nullable": true,
                  "_key": "userinfo_endpoint"
                }
              ],
              "description": "Represents OIDC specific attributes.",
              "foreign_key": {
                "group": "Accounts",
                "entity": "oidc_request"
              },
              "api_fieldname": "oidc_attributes",
              "entity_fieldname": "oidc_attributes",
              "parameter_fieldname": "oidc_attributes",
              "in": "body",
              "_key": "oidc_attributes"
            },
            {
              "type": "object",
              "properties": [
                {
                  "type": "string",
                  "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                  "x-nullable": true,
                  "_key": "assertion_endpoint"
                },
                {
                  "type": "string",
                  "description": "Entity ID of the identity provider.",
                  "x-nullable": true,
                  "_key": "idp_entity_id"
                },
                {
                  "type": "array",
                  "description": "List of public X509 certificates of the identity provider in PEM format.",
                  "items": {
                    "type": "string"
                  },
                  "x-nullable": true,
                  "_key": "idp_x509_certs"
                },
                {
                  "type": "string",
                  "description": "URL of the identity provider's SLO endpoint.",
                  "x-nullable": true,
                  "_key": "slo_endpoint"
                },
                {
                  "type": "string",
                  "description": "Entity ID of the service provider.",
                  "x-nullable": true,
                  "_key": "sp_entity_id"
                },
                {
                  "type": "string",
                  "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                  "readOnly": true,
                  "x-nullable": true,
                  "_key": "sp_x509_cert"
                },
                {
                  "type": "string",
                  "description": "URL of the identity provider's SSO endpoint.",
                  "x-nullable": true,
                  "_key": "sso_endpoint"
                }
              ],
              "description": "Represents SAML2 specific attributes in responses.",
              "api_fieldname": "saml2_attributes",
              "entity_fieldname": "saml2_attributes",
              "parameter_fieldname": "saml2_attributes",
              "in": "body",
              "required": false,
              "_key": "saml2_attributes"
            },
            {
              "type": "string",
              "description": "Status of the identity provider.",
              "enum": [
                "ACTIVE",
                "SUSPENDED"
              ],
              "api_fieldname": "status",
              "entity_fieldname": "status",
              "parameter_fieldname": "status",
              "in": "body",
              "required": false,
              "enum_reference": "subtenant_identity_provider_status_enum",
              "_key": "status"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "etag",
                  "id",
                  "name",
                  "object",
                  "type"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the identity provider belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Description for the identity provider.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "parameter_fieldname": "description",
                    "in": "body",
                    "required": false,
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "identity_provider_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "description": "Flag indicating whether this is the global default identity provider.",
                    "readOnly": true,
                    "api_fieldname": "is_default",
                    "entity_fieldname": "is_default",
                    "_key": "is_default"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Name of the identity provider.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": true,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'identity-provider'",
                    "enum": [
                      "identity-provider"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "object",
                    "required": false,
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "authorization_endpoint"
                      },
                      {
                        "type": "boolean",
                        "description": "For future use.",
                        "x-nullable": true,
                        "_key": "auto_enrollment"
                      },
                      {
                        "description": "Mapping for non-standard OIDC claim names.",
                        "type": "object",
                        "properties": [
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email'.",
                            "example": "email_address",
                            "x-nullable": true,
                            "_key": "email"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'email_verified'.",
                            "example": "email_verified",
                            "x-nullable": true,
                            "_key": "email_verified"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'family_name'.",
                            "example": "family_name",
                            "x-nullable": true,
                            "_key": "family_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'given_name'.",
                            "example": "given_name",
                            "x-nullable": true,
                            "_key": "given_name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'name'.",
                            "example": "name",
                            "x-nullable": true,
                            "_key": "name"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'phone_number'.",
                            "example": "phone_number",
                            "x-nullable": true,
                            "_key": "phone_number"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'sub'.",
                            "example": "sub",
                            "x-nullable": true,
                            "_key": "sub"
                          },
                          {
                            "type": "string",
                            "description": "Custom claim name for 'updated_at'.",
                            "example": "updated_at",
                            "x-nullable": true,
                            "_key": "updated_at"
                          },
                          {
                            "type": "string",
                            "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                            "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                            "x-nullable": true,
                            "_key": "updated_at_pattern"
                          }
                        ],
                        "foreign_key": {
                          "group": "Accounts",
                          "entity": "oidc_request_claim_mapping"
                        },
                        "x-nullable": true,
                        "_key": "claim_mapping"
                      },
                      {
                        "type": "string",
                        "description": "Client ID needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_id"
                      },
                      {
                        "type": "string",
                        "description": "Client secret needed to authenticate and gain access to identity provider's API.",
                        "x-nullable": true,
                        "_key": "client_secret"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's end session endpoint.",
                        "x-nullable": true,
                        "_key": "end_session_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Issuer of the identity provider.",
                        "_key": "issuer"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's JSON web key set document.",
                        "x-nullable": true,
                        "_key": "jwks_uri"
                      },
                      {
                        "type": "array",
                        "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
                        "items": {
                          "type": "object",
                          "properties": [
                            {
                              "type": "string",
                              "description": "The public key.",
                              "_key": "key"
                            },
                            {
                              "type": "string",
                              "description": "The public key ID.",
                              "_key": "kid"
                            }
                          ],
                          "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                          "foreign_key": {
                            "group": "Accounts",
                            "entity": "identity_provider_public_key"
                          }
                        },
                        "x-nullable": true,
                        "_key": "keys"
                      },
                      {
                        "type": "string",
                        "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
                        "x-nullable": true,
                        "_key": "redirect_uri"
                      },
                      {
                        "type": "string",
                        "description": "URL of the provider's token revocation endpoint.",
                        "x-nullable": true,
                        "_key": "revocation_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
                        "example": "openid email",
                        "_key": "scopes"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 authorization endpoint.",
                        "x-nullable": true,
                        "_key": "token_endpoint"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "POST",
                          "GET"
                        ],
                        "default": "POST",
                        "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
                        "_key": "token_request_mode"
                      },
                      {
                        "type": "string",
                        "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
                        "example": "oidc.data",
                        "_key": "token_response_path"
                      },
                      {
                        "type": "string",
                        "description": "URL of the OAuth 2.0 UserInfo endpoint.",
                        "x-nullable": true,
                        "_key": "userinfo_endpoint"
                      }
                    ],
                    "description": "Represents OIDC specific attributes.",
                    "foreign_key": {
                      "group": "Accounts",
                      "entity": "oidc_request"
                    },
                    "api_fieldname": "oidc_attributes",
                    "entity_fieldname": "oidc_attributes",
                    "parameter_fieldname": "oidc_attributes",
                    "in": "body",
                    "_key": "oidc_attributes"
                  },
                  {
                    "type": "object",
                    "properties": [
                      {
                        "type": "string",
                        "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
                        "x-nullable": true,
                        "_key": "assertion_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the identity provider.",
                        "x-nullable": true,
                        "_key": "idp_entity_id"
                      },
                      {
                        "type": "array",
                        "description": "List of public X509 certificates of the identity provider in PEM format.",
                        "items": {
                          "type": "string"
                        },
                        "x-nullable": true,
                        "_key": "idp_x509_certs"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SLO endpoint.",
                        "x-nullable": true,
                        "_key": "slo_endpoint"
                      },
                      {
                        "type": "string",
                        "description": "Entity ID of the service provider.",
                        "x-nullable": true,
                        "_key": "sp_entity_id"
                      },
                      {
                        "type": "string",
                        "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
                        "readOnly": true,
                        "x-nullable": true,
                        "_key": "sp_x509_cert"
                      },
                      {
                        "type": "string",
                        "description": "URL of the identity provider's SSO endpoint.",
                        "x-nullable": true,
                        "_key": "sso_endpoint"
                      }
                    ],
                    "description": "Represents SAML2 specific attributes in responses.",
                    "api_fieldname": "saml2_attributes",
                    "entity_fieldname": "saml2_attributes",
                    "parameter_fieldname": "saml2_attributes",
                    "in": "body",
                    "required": false,
                    "_key": "saml2_attributes"
                  },
                  {
                    "type": "string",
                    "description": "Status of the identity provider.",
                    "enum": [
                      "ACTIVE",
                      "SUSPENDED"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "enum_reference": "identity_provider_status_enum",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "type",
                    "parameter_fieldname": "type",
                    "in": "body",
                    "required": true,
                    "enum_reference": "identity_provider_type_enum",
                    "_key": "type"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "identity_provider"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data, for example, missing name.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or identity provider not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/identity-providers/{identity_provider_id}",
          "summary": "Update an existing identity provider.",
          "return_type": "subtenant_identity_provider",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_identity_provider"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "is_default"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "identity_provider_id": "id"
          },
          "operation_id": "updateAccountIdentityProvider",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the account the identity provider belongs to.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "account_id",
          "readOnly": false,
          "required": true,
          "_key": "account_id"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "maxLength": 500,
          "description": "Description for the identity provider.",
          "api_fieldname": "description",
          "parameter_fieldname": "description",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "description"
        },
        {
          "type": "string",
          "example": "01619571d01d0242ac12000600000000",
          "description": "Entity ID.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "parameter_fieldname": "identity_provider_id",
          "in": "path",
          "required": true,
          "readOnly": false,
          "_key": "id"
        },
        {
          "type": "boolean",
          "description": "Flag indicating whether this is the global default identity provider.",
          "readOnly": true,
          "api_fieldname": "is_default",
          "required": false,
          "_key": "is_default"
        },
        {
          "type": "string",
          "maxLength": 100,
          "description": "Name of the identity provider.",
          "api_fieldname": "name",
          "parameter_fieldname": "name",
          "in": "body",
          "required": true,
          "readOnly": false,
          "_key": "name"
        },
        {
          "type": "object",
          "required": false,
          "properties": [
            {
              "type": "string",
              "description": "URL of the OAuth 2.0 authorization endpoint.",
              "x-nullable": true,
              "_key": "authorization_endpoint"
            },
            {
              "type": "boolean",
              "description": "For future use.",
              "x-nullable": true,
              "_key": "auto_enrollment"
            },
            {
              "description": "Mapping for non-standard OIDC claim names.",
              "type": "object",
              "properties": [
                {
                  "type": "string",
                  "description": "Custom claim name for 'email'.",
                  "example": "email_address",
                  "x-nullable": true,
                  "_key": "email"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'email_verified'.",
                  "example": "email_verified",
                  "x-nullable": true,
                  "_key": "email_verified"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'family_name'.",
                  "example": "family_name",
                  "x-nullable": true,
                  "_key": "family_name"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'given_name'.",
                  "example": "given_name",
                  "x-nullable": true,
                  "_key": "given_name"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'name'.",
                  "example": "name",
                  "x-nullable": true,
                  "_key": "name"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'phone_number'.",
                  "example": "phone_number",
                  "x-nullable": true,
                  "_key": "phone_number"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'sub'.",
                  "example": "sub",
                  "x-nullable": true,
                  "_key": "sub"
                },
                {
                  "type": "string",
                  "description": "Custom claim name for 'updated_at'.",
                  "example": "updated_at",
                  "x-nullable": true,
                  "_key": "updated_at"
                },
                {
                  "type": "string",
                  "description": "Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.",
                  "example": "yyyy-MM-dd'T'HH:mm:ssXXX",
                  "x-nullable": true,
                  "_key": "updated_at_pattern"
                }
              ],
              "foreign_key": {
                "group": "Accounts",
                "entity": "oidc_request_claim_mapping"
              },
              "x-nullable": true,
              "_key": "claim_mapping"
            },
            {
              "type": "string",
              "description": "Client ID needed to authenticate and gain access to identity provider's API.",
              "x-nullable": true,
              "_key": "client_id"
            },
            {
              "type": "string",
              "description": "Client secret needed to authenticate and gain access to identity provider's API.",
              "x-nullable": true,
              "_key": "client_secret"
            },
            {
              "type": "string",
              "description": "URL of the provider's end session endpoint.",
              "x-nullable": true,
              "_key": "end_session_endpoint"
            },
            {
              "type": "string",
              "description": "Issuer of the identity provider.",
              "_key": "issuer"
            },
            {
              "type": "string",
              "description": "URL of the provider's JSON web key set document.",
              "x-nullable": true,
              "_key": "jwks_uri"
            },
            {
              "type": "array",
              "description": "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded.",
              "items": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "The public key.",
                    "_key": "key"
                  },
                  {
                    "type": "string",
                    "description": "The public key ID.",
                    "_key": "kid"
                  }
                ],
                "description": "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "identity_provider_public_key"
                }
              },
              "x-nullable": true,
              "_key": "keys"
            },
            {
              "type": "string",
              "description": "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI.",
              "x-nullable": true,
              "_key": "redirect_uri"
            },
            {
              "type": "string",
              "description": "URL of the provider's token revocation endpoint.",
              "x-nullable": true,
              "_key": "revocation_endpoint"
            },
            {
              "type": "string",
              "description": "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).",
              "example": "openid email",
              "_key": "scopes"
            },
            {
              "type": "string",
              "description": "URL of the OAuth 2.0 authorization endpoint.",
              "x-nullable": true,
              "_key": "token_endpoint"
            },
            {
              "type": "string",
              "enum": [
                "POST",
                "GET"
              ],
              "default": "POST",
              "description": "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode.",
              "_key": "token_request_mode"
            },
            {
              "type": "string",
              "description": "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters.",
              "example": "oidc.data",
              "_key": "token_response_path"
            },
            {
              "type": "string",
              "description": "URL of the OAuth 2.0 UserInfo endpoint.",
              "x-nullable": true,
              "_key": "userinfo_endpoint"
            }
          ],
          "description": "Represents OIDC specific attributes.",
          "foreign_key": {
            "group": "Accounts",
            "entity": "oidc_request"
          },
          "api_fieldname": "oidc_attributes",
          "parameter_fieldname": "oidc_attributes",
          "in": "body",
          "readOnly": false,
          "_key": "oidc_attributes"
        },
        {
          "type": "object",
          "properties": [
            {
              "type": "string",
              "description": "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint.",
              "x-nullable": true,
              "_key": "assertion_endpoint"
            },
            {
              "type": "string",
              "description": "Entity ID of the identity provider.",
              "x-nullable": true,
              "_key": "idp_entity_id"
            },
            {
              "type": "array",
              "description": "List of public X509 certificates of the identity provider in PEM format.",
              "items": {
                "type": "string"
              },
              "x-nullable": true,
              "_key": "idp_x509_certs"
            },
            {
              "type": "string",
              "description": "URL of the identity provider's SLO endpoint.",
              "x-nullable": true,
              "_key": "slo_endpoint"
            },
            {
              "type": "string",
              "description": "Entity ID of the service provider.",
              "x-nullable": true,
              "_key": "sp_entity_id"
            },
            {
              "type": "string",
              "description": "Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.",
              "readOnly": true,
              "x-nullable": true,
              "_key": "sp_x509_cert"
            },
            {
              "type": "string",
              "description": "URL of the identity provider's SSO endpoint.",
              "x-nullable": true,
              "_key": "sso_endpoint"
            }
          ],
          "description": "Represents SAML2 specific attributes in responses.",
          "api_fieldname": "saml2_attributes",
          "parameter_fieldname": "saml2_attributes",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "saml2_attributes"
        },
        {
          "type": "string",
          "description": "Status of the identity provider.",
          "enum": [
            "ACTIVE",
            "SUSPENDED"
          ],
          "api_fieldname": "status",
          "parameter_fieldname": "status",
          "in": "body",
          "required": false,
          "enum_reference": "subtenant_identity_provider_status_enum",
          "readOnly": false,
          "_key": "status"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update UTC time RFC3339.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "Tenant accounts - identity providers"
      ],
      "group_id": "Accounts",
      "_key": "subtenant_identity_provider"
    },
    {
      "swagger_models": [
        "BrandingColor"
      ],
      "primary_key_field": "reference",
      "methods": [
        {
          "description": "Resets the branding color to its light theme default.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/light/{reference} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": true,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "is_primary_key": true,
              "_override": true,
              "type": "string",
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "enum": [
                "error_color",
                "primary",
                "secondary",
                "success_color",
                "warning_color",
                "canvas_background",
                "canvas_background_font_color",
                "workspace_background",
                "workspace_background_font_color",
                "info_color",
                "info_font_color",
                "primary_font_color",
                "secondary_font_color",
                "error_font_color",
                "success_font_color",
                "warning_font_color"
              ],
              "name": "reference",
              "in": "path",
              "description": "The name of the branding color.",
              "required": true,
              "enum_reference": "subtenant_light_theme_color_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Color or account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-colors/light/{reference}",
          "summary": "Reset branding color to default.",
          "return_type": "void",
          "return_info": {
            "self": false,
            "custom": true,
            "type": "void"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Branding",
          "operation_id": "resetAccountLightColor",
          "spec": {
            "return_type": "void"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve the requested light theme branding color.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/light/{reference}\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": true,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "enum": [
                "error_color",
                "primary",
                "secondary",
                "success_color",
                "warning_color",
                "canvas_background",
                "canvas_background_font_color",
                "workspace_background",
                "workspace_background_font_color",
                "info_color",
                "info_font_color",
                "primary_font_color",
                "secondary_font_color",
                "error_font_color",
                "success_font_color",
                "warning_font_color"
              ],
              "type": "string",
              "description": "Color name.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "subtenant_light_theme_color_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "example": "#f3f93e",
                    "description": "The color given as name (purple) or as a hex code.",
                    "x-nullable": true,
                    "api_fieldname": "color",
                    "entity_fieldname": "color",
                    "parameter_fieldname": "color",
                    "in": "body",
                    "required": false,
                    "_key": "color"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_color'",
                    "readOnly": true,
                    "enum": [
                      "branding_color"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "name": "object",
                    "in": "body",
                    "schema_param": true,
                    "external_param": true,
                    "parameter_fieldname": "object",
                    "required": false,
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "error_color",
                      "primary",
                      "secondary",
                      "success_color",
                      "warning_color",
                      "canvas_background",
                      "canvas_background_font_color",
                      "workspace_background",
                      "workspace_background_font_color",
                      "info_color",
                      "info_font_color",
                      "primary_font_color",
                      "secondary_font_color",
                      "error_font_color",
                      "success_font_color",
                      "warning_font_color"
                    ],
                    "type": "string",
                    "description": "Color name.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "name": "reference",
                    "in": "path",
                    "required": true,
                    "enum_reference": "subtenant_dark_theme_color_reference_enum",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "parameter_fieldname": "updated_at",
                    "in": "body",
                    "required": false,
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_dark_theme_color"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Color or account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-colors/light/{reference}",
          "summary": "Get light theme branding color.",
          "return_type": "subtenant_light_theme_color",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_light_theme_color"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "color",
            "updated_at"
          ],
          "group_id": "Branding",
          "operation_id": "getAccountLightColor",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update a light theme branding color.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id)/branding-colors/light/primary \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{ \"color\": \"purple\" }'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": true,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "#f3f93e",
              "description": "The color given as name (purple) or as a hex code.",
              "x-nullable": true,
              "api_fieldname": "color",
              "entity_fieldname": "color",
              "parameter_fieldname": "color",
              "in": "body",
              "required": false,
              "_key": "color"
            },
            {
              "enum": [
                "error_color",
                "primary",
                "secondary",
                "success_color",
                "warning_color",
                "canvas_background",
                "canvas_background_font_color",
                "workspace_background",
                "workspace_background_font_color",
                "info_color",
                "info_font_color",
                "primary_font_color",
                "secondary_font_color",
                "error_font_color",
                "success_font_color",
                "warning_font_color"
              ],
              "type": "string",
              "description": "Color name.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "subtenant_light_theme_color_reference_enum",
              "_key": "reference"
            },
            {
              "type": "string",
              "format": "date-time",
              "example": "2018-02-14T15:24:14Z",
              "description": "Last update time in UTC.",
              "readOnly": true,
              "api_fieldname": "updated_at",
              "entity_fieldname": "updated_at",
              "parameter_fieldname": "updated_at",
              "in": "body",
              "required": false,
              "_key": "updated_at"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Color set successfully.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "example": "#f3f93e",
                    "description": "The color given as name (purple) or as a hex code.",
                    "x-nullable": true,
                    "api_fieldname": "color",
                    "entity_fieldname": "color",
                    "parameter_fieldname": "color",
                    "in": "body",
                    "required": false,
                    "_key": "color"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_color'",
                    "readOnly": true,
                    "enum": [
                      "branding_color"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "name": "object",
                    "in": "body",
                    "schema_param": true,
                    "external_param": true,
                    "parameter_fieldname": "object",
                    "required": false,
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "error_color",
                      "primary",
                      "secondary",
                      "success_color",
                      "warning_color",
                      "canvas_background",
                      "canvas_background_font_color",
                      "workspace_background",
                      "workspace_background_font_color",
                      "info_color",
                      "info_font_color",
                      "primary_font_color",
                      "secondary_font_color",
                      "error_font_color",
                      "success_font_color",
                      "warning_font_color"
                    ],
                    "type": "string",
                    "description": "Color name.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "name": "reference",
                    "in": "path",
                    "required": true,
                    "enum_reference": "subtenant_dark_theme_color_reference_enum",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "parameter_fieldname": "updated_at",
                    "in": "body",
                    "required": false,
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_dark_theme_color"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data format.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Color or account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-colors/light/{reference}",
          "summary": "Updates light theme branding color.",
          "return_type": "subtenant_light_theme_color",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_light_theme_color"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Branding",
          "operation_id": "setAccountLightColor",
          "additional_operations": [
            {
              "operation_id": "bulkSetAccountLightColors",
              "notes": "Bulk operation is not appriate for SDK's entity model, this functionality is covered by the update method."
            }
          ],
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "#f3f93e",
          "description": "The color given as name (purple) or as a hex code.",
          "x-nullable": true,
          "api_fieldname": "color",
          "parameter_fieldname": "color",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "color"
        },
        {
          "enum": [
            "error_color",
            "primary",
            "secondary",
            "success_color",
            "warning_color",
            "canvas_background",
            "canvas_background_font_color",
            "workspace_background",
            "workspace_background_font_color",
            "info_color",
            "info_font_color",
            "primary_font_color",
            "secondary_font_color",
            "error_font_color",
            "success_font_color",
            "warning_font_color"
          ],
          "type": "string",
          "description": "Color name.",
          "is_primary_key": true,
          "_override": true,
          "api_fieldname": "reference",
          "name": "reference",
          "in": "path",
          "required": false,
          "enum_reference": "subtenant_light_theme_color_reference_enum",
          "readOnly": false,
          "_key": "reference"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update time in UTC.",
          "readOnly": true,
          "api_fieldname": "updated_at",
          "parameter_fieldname": "updated_at",
          "in": "body",
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "Tenant user interface configuration - colors"
      ],
      "group_id": "Branding",
      "_key": "subtenant_light_theme_color"
    },
    {
      "swagger_models": [
        "BrandingImage"
      ],
      "primary_key_field": "reference",
      "methods": [
        {
          "description": "Revert an account branding image to light theme default.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light/{reference}/clear \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": true,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "is_primary_key": true,
              "_override": true,
              "type": "string",
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "enum": [
                "brand_logo_portrait",
                "brand_logo_square",
                "brand_logo_landscape",
                "brand_logo_email",
                "desktop_background_landscape",
                "desktop_background_square",
                "desktop_background_portrait",
                "carousel_image_portrait_0",
                "carousel_image_portrait_1",
                "carousel_image_portrait_2",
                "carousel_image_portrait_3",
                "carousel_image_portrait_4",
                "carousel_image_portrait_5",
                "carousel_image_portrait_6",
                "carousel_image_portrait_7",
                "carousel_image_portrait_8",
                "carousel_image_portrait_9",
                "carousel_image_square_0",
                "carousel_image_square_1",
                "carousel_image_square_2",
                "carousel_image_square_3",
                "carousel_image_square_4",
                "carousel_image_square_5",
                "carousel_image_square_6",
                "carousel_image_square_7",
                "carousel_image_square_8",
                "carousel_image_square_9",
                "carousel_image_landscape_0",
                "carousel_image_landscape_1",
                "carousel_image_landscape_2",
                "carousel_image_landscape_3",
                "carousel_image_landscape_4",
                "carousel_image_landscape_5",
                "carousel_image_landscape_6",
                "carousel_image_landscape_7",
                "carousel_image_landscape_8",
                "carousel_image_landscape_9"
              ],
              "name": "reference",
              "in": "path",
              "description": "Name of the branding images (icon or picture).",
              "required": true,
              "enum_reference": "subtenant_light_theme_image_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "post",
          "mode": "delete",
          "responses": [
            {
              "description": "Image reverted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Unknown image reference, or account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-images/light/{reference}/clear",
          "summary": "Revert an image to light theme default.",
          "return_type": "subtenant_light_theme_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_light_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Branding",
          "operation_id": "clearAccountLightImage",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve metadata for one account light theme branding image.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light/{reference} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": true,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "enum": [
                "brand_logo_portrait",
                "brand_logo_square",
                "brand_logo_landscape",
                "brand_logo_email",
                "desktop_background_landscape",
                "desktop_background_square",
                "desktop_background_portrait",
                "carousel_image_portrait_0",
                "carousel_image_portrait_1",
                "carousel_image_portrait_2",
                "carousel_image_portrait_3",
                "carousel_image_portrait_4",
                "carousel_image_portrait_5",
                "carousel_image_portrait_6",
                "carousel_image_portrait_7",
                "carousel_image_portrait_8",
                "carousel_image_portrait_9",
                "carousel_image_square_0",
                "carousel_image_square_1",
                "carousel_image_square_2",
                "carousel_image_square_3",
                "carousel_image_square_4",
                "carousel_image_square_5",
                "carousel_image_square_6",
                "carousel_image_square_7",
                "carousel_image_square_8",
                "carousel_image_square_9",
                "carousel_image_landscape_0",
                "carousel_image_landscape_1",
                "carousel_image_landscape_2",
                "carousel_image_landscape_3",
                "carousel_image_landscape_4",
                "carousel_image_landscape_5",
                "carousel_image_landscape_6",
                "carousel_image_landscape_7",
                "carousel_image_landscape_8",
                "carousel_image_landscape_9"
              ],
              "type": "string",
              "description": "Name of the image.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "subtenant_light_theme_image_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_image'",
                    "readOnly": true,
                    "enum": [
                      "branding_image"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "brand_logo_portrait",
                      "brand_logo_square",
                      "brand_logo_landscape",
                      "brand_logo_email",
                      "desktop_background_landscape",
                      "desktop_background_square",
                      "desktop_background_portrait",
                      "carousel_image_portrait_0",
                      "carousel_image_portrait_1",
                      "carousel_image_portrait_2",
                      "carousel_image_portrait_3",
                      "carousel_image_portrait_4",
                      "carousel_image_portrait_5",
                      "carousel_image_portrait_6",
                      "carousel_image_portrait_7",
                      "carousel_image_portrait_8",
                      "carousel_image_portrait_9",
                      "carousel_image_square_0",
                      "carousel_image_square_1",
                      "carousel_image_square_2",
                      "carousel_image_square_3",
                      "carousel_image_square_4",
                      "carousel_image_square_5",
                      "carousel_image_square_6",
                      "carousel_image_square_7",
                      "carousel_image_square_8",
                      "carousel_image_square_9",
                      "carousel_image_landscape_0",
                      "carousel_image_landscape_1",
                      "carousel_image_landscape_2",
                      "carousel_image_landscape_3",
                      "carousel_image_landscape_4",
                      "carousel_image_landscape_5",
                      "carousel_image_landscape_6",
                      "carousel_image_landscape_7",
                      "carousel_image_landscape_8",
                      "carousel_image_landscape_9"
                    ],
                    "type": "string",
                    "description": "Name of the image.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "name": "reference",
                    "in": "path",
                    "required": true,
                    "enum_reference": "subtenant_dark_theme_image_reference_enum",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "uri",
                    "example": "https://static.mbed.com/123456789.jpg",
                    "description": "The static link to the image.",
                    "readOnly": true,
                    "api_fieldname": "static_uri",
                    "entity_fieldname": "static_uri",
                    "_key": "static_uri"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_dark_theme_image"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Unknown image reference, or account not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-images/light/{reference}",
          "summary": "Get metadata of a light theme image.",
          "return_type": "subtenant_light_theme_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_light_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "static_uri",
            "updated_at"
          ],
          "group_id": "Branding",
          "operation_id": "getAccountLightImageData",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Upload a new account branding image as form data in PNG or JPEG format.\n<b>Note:</b> This endpoint is restricted to administrators.",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "The ID of the account.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": true,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "in": "stream",
              "name": "image",
              "description": "The image in PNG or JPEG format as multipart form data.",
              "required": true,
              "type": "file",
              "entity_fieldname": "image",
              "api_fieldname": "image",
              "external_param": true,
              "parameter_fieldname": "image",
              "_key": "image"
            },
            {
              "enum": [
                "brand_logo_portrait",
                "brand_logo_square",
                "brand_logo_landscape",
                "brand_logo_email",
                "desktop_background_landscape",
                "desktop_background_square",
                "desktop_background_portrait",
                "carousel_image_portrait_0",
                "carousel_image_portrait_1",
                "carousel_image_portrait_2",
                "carousel_image_portrait_3",
                "carousel_image_portrait_4",
                "carousel_image_portrait_5",
                "carousel_image_portrait_6",
                "carousel_image_portrait_7",
                "carousel_image_portrait_8",
                "carousel_image_portrait_9",
                "carousel_image_square_0",
                "carousel_image_square_1",
                "carousel_image_square_2",
                "carousel_image_square_3",
                "carousel_image_square_4",
                "carousel_image_square_5",
                "carousel_image_square_6",
                "carousel_image_square_7",
                "carousel_image_square_8",
                "carousel_image_square_9",
                "carousel_image_landscape_0",
                "carousel_image_landscape_1",
                "carousel_image_landscape_2",
                "carousel_image_landscape_3",
                "carousel_image_landscape_4",
                "carousel_image_landscape_5",
                "carousel_image_landscape_6",
                "carousel_image_landscape_7",
                "carousel_image_landscape_8",
                "carousel_image_landscape_9"
              ],
              "type": "string",
              "description": "Name of the image.",
              "is_primary_key": true,
              "_override": true,
              "api_fieldname": "reference",
              "entity_fieldname": "reference",
              "name": "reference",
              "in": "path",
              "required": true,
              "enum_reference": "subtenant_light_theme_image_reference_enum",
              "_key": "reference"
            }
          ],
          "method": "post",
          "mode": "update",
          "responses": [
            {
              "description": "Image uploaded successfully.",
              "headers": [
                {
                  "type": "string",
                  "description": "Location of the image metadata.",
                  "_key": "Content-Location"
                },
                {
                  "type": "string",
                  "description": "Location of the image binary.",
                  "_key": "Location"
                }
              ],
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "Entity name: always 'branding_image'",
                    "readOnly": true,
                    "enum": [
                      "branding_image"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "enum": [
                      "brand_logo_portrait",
                      "brand_logo_square",
                      "brand_logo_landscape",
                      "brand_logo_email",
                      "desktop_background_landscape",
                      "desktop_background_square",
                      "desktop_background_portrait",
                      "carousel_image_portrait_0",
                      "carousel_image_portrait_1",
                      "carousel_image_portrait_2",
                      "carousel_image_portrait_3",
                      "carousel_image_portrait_4",
                      "carousel_image_portrait_5",
                      "carousel_image_portrait_6",
                      "carousel_image_portrait_7",
                      "carousel_image_portrait_8",
                      "carousel_image_portrait_9",
                      "carousel_image_square_0",
                      "carousel_image_square_1",
                      "carousel_image_square_2",
                      "carousel_image_square_3",
                      "carousel_image_square_4",
                      "carousel_image_square_5",
                      "carousel_image_square_6",
                      "carousel_image_square_7",
                      "carousel_image_square_8",
                      "carousel_image_square_9",
                      "carousel_image_landscape_0",
                      "carousel_image_landscape_1",
                      "carousel_image_landscape_2",
                      "carousel_image_landscape_3",
                      "carousel_image_landscape_4",
                      "carousel_image_landscape_5",
                      "carousel_image_landscape_6",
                      "carousel_image_landscape_7",
                      "carousel_image_landscape_8",
                      "carousel_image_landscape_9"
                    ],
                    "type": "string",
                    "description": "Name of the image.",
                    "is_primary_key": true,
                    "_override": true,
                    "api_fieldname": "reference",
                    "entity_fieldname": "reference",
                    "name": "reference",
                    "in": "path",
                    "required": true,
                    "enum_reference": "subtenant_dark_theme_image_reference_enum",
                    "_key": "reference"
                  },
                  {
                    "type": "string",
                    "format": "uri",
                    "example": "https://static.mbed.com/123456789.jpg",
                    "description": "The static link to the image.",
                    "readOnly": true,
                    "api_fieldname": "static_uri",
                    "entity_fieldname": "static_uri",
                    "_key": "static_uri"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update time in UTC.",
                    "readOnly": true,
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  }
                ],
                "foreign_key": {
                  "group": "Branding",
                  "entity": "subtenant_dark_theme_image"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data format, for example, image is too large.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Unknown image reference.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/branding-images/light/{reference}/upload-multipart",
          "summary": "Upload a light theme image.",
          "return_type": "subtenant_light_theme_image",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_light_theme_image"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "static_uri",
            "updated_at"
          ],
          "group_id": "Branding",
          "operation_id": "uploadAccountLightImageMultipart",
          "additional_operations": [
            {
              "operation_id": "uploadAccountLightImage",
              "notes": "The multipart request is more generic and better supported by SDKs."
            }
          ],
          "pagination": false,
          "request_content_type": "multipart/form-data",
          "request_body": "file",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "enum": [
            "brand_logo_portrait",
            "brand_logo_square",
            "brand_logo_landscape",
            "brand_logo_email",
            "desktop_background_landscape",
            "desktop_background_square",
            "desktop_background_portrait",
            "carousel_image_portrait_0",
            "carousel_image_portrait_1",
            "carousel_image_portrait_2",
            "carousel_image_portrait_3",
            "carousel_image_portrait_4",
            "carousel_image_portrait_5",
            "carousel_image_portrait_6",
            "carousel_image_portrait_7",
            "carousel_image_portrait_8",
            "carousel_image_portrait_9",
            "carousel_image_square_0",
            "carousel_image_square_1",
            "carousel_image_square_2",
            "carousel_image_square_3",
            "carousel_image_square_4",
            "carousel_image_square_5",
            "carousel_image_square_6",
            "carousel_image_square_7",
            "carousel_image_square_8",
            "carousel_image_square_9",
            "carousel_image_landscape_0",
            "carousel_image_landscape_1",
            "carousel_image_landscape_2",
            "carousel_image_landscape_3",
            "carousel_image_landscape_4",
            "carousel_image_landscape_5",
            "carousel_image_landscape_6",
            "carousel_image_landscape_7",
            "carousel_image_landscape_8",
            "carousel_image_landscape_9"
          ],
          "type": "string",
          "description": "Name of the image.",
          "is_primary_key": true,
          "_override": true,
          "api_fieldname": "reference",
          "name": "reference",
          "in": "path",
          "required": false,
          "enum_reference": "subtenant_light_theme_image_reference_enum",
          "readOnly": false,
          "_key": "reference"
        },
        {
          "type": "string",
          "format": "uri",
          "example": "https://static.mbed.com/123456789.jpg",
          "description": "The static link to the image.",
          "readOnly": true,
          "api_fieldname": "static_uri",
          "required": false,
          "_key": "static_uri"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update time in UTC.",
          "readOnly": true,
          "api_fieldname": "updated_at",
          "required": false,
          "_key": "updated_at"
        }
      ],
      "field_renames": [],
      "tags": [
        "Tenant user interface configuration - images"
      ],
      "group_id": "Branding",
      "_key": "subtenant_light_theme_image"
    },
    {
      "swagger_models": [
        "ApiKeyInfoRespList",
        "GroupCreationInfo",
        "GroupSummary",
        "GroupSummaryList",
        "GroupUpdateInfo",
        "UserInfoRespList"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Retrieve an array of API keys associated with a policy group.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "group_id",
              "in": "path",
              "description": "The ID of the group to retrieve API keys for.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "group_id",
              "external_param": false,
              "parameter_fieldname": "group_id",
              "_key": "id"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "subtenant_policy_group_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "api_keys",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "etag",
                        "id",
                        "key",
                        "name",
                        "object"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727683,
                          "description": "The timestamp of the API key creation in the storage, in milliseconds.",
                          "_key": "creation_time"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "array",
                          "description": "A list of group IDs this API key belongs to.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "groups"
                        },
                        {
                          "type": "string",
                          "example": "01619571f7020242ac12000600000000",
                          "description": "The ID of the API key.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
                          "description": "The API key.",
                          "_key": "key"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727688,
                          "description": "The timestamp of the latest API key usage, in milliseconds.",
                          "_key": "last_login_time"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "API key gorgon",
                          "description": "The display name for the API key.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'api-key'",
                          "enum": [
                            "api-key"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e89242ac12000600000000",
                          "description": "The owner of this API key, who is the creator by default.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "owner"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "The status of the API key.",
                          "enum": [
                            "ACTIVE",
                            "INACTIVE"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        }
                      ],
                      "description": "Represents an API key in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "api_key"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "policy_group_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "api_key"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or group with that ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys",
          "summary": "Get API keys in a group.",
          "return_type": "paginated_response(subtenant_api_key)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "subtenant_api_key"
          },
          "x_filter": {},
          "x_deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/applications",
            "links": []
          },
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "getApiKeysOfAccountGroup",
          "foreign_key": {
            "entity": "subtenant_api_key"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "api_keys"
        },
        {
          "description": "Create a new group.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{\"name\": \"MyGroup1\"}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account this group belongs to.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "object",
              "properties": [
                {
                  "type": "array",
                  "description": "An array of API key IDs.",
                  "items": {
                    "type": "string"
                  },
                  "x-deprecation": {
                    "issued_at": "2020-08-01T00:00:00+00:00",
                    "end_of_life_at": "2021-08-01T00:00:00+00:00",
                    "comment": "This field is deprecated, use 'applications'",
                    "links": []
                  },
                  "_key": "apikeys"
                },
                {
                  "type": "array",
                  "description": "An array of applicationIDs.",
                  "items": {
                    "type": "string"
                  },
                  "_key": "applications"
                },
                {
                  "type": "array",
                  "description": "An array of user IDs.",
                  "items": {
                    "type": "string"
                  },
                  "_key": "users"
                }
              ],
              "description": "Represents arrays of user and API key IDs.",
              "name": "members",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "members",
              "api_fieldname": "members",
              "external_param": true,
              "parameter_fieldname": "members",
              "required": false,
              "_key": "members"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "Administrators",
              "description": "The name of the group.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": true,
              "_key": "name"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "New entity created.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "apikey_count",
                  "etag",
                  "id",
                  "name",
                  "object",
                  "user_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account this group belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The number of API keys in this group.",
                    "x-deprecation": {
                      "issued_at": "2020-08-01T00:00:00+00:00",
                      "end_of_life_at": "2021-08-01T00:00:00+00:00",
                      "comment": "This property is deprecated. See 'application_count' property.",
                      "links": []
                    },
                    "api_fieldname": "apikey_count",
                    "entity_fieldname": "apikey_count",
                    "_key": "apikey_count"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The number of applications in this group.",
                    "api_fieldname": "application_count",
                    "entity_fieldname": "application_count",
                    "_key": "application_count"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571dec00242ac12000600000000",
                    "description": "The ID of the group.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "group_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Administrators",
                    "description": "The name of the group.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": true,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `group`.",
                    "enum": [
                      "group"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "The number of users in this group.",
                    "api_fieldname": "user_count",
                    "entity_fieldname": "user_count",
                    "_key": "user_count"
                  }
                ],
                "description": "This object contains basic information about groups.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "policy_group"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data, for example, invalid group name.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            },
            {
              "description": "A group with that name already exists.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/accounts/{account_id}/policy-groups",
          "summary": "Create a new group.",
          "return_type": "subtenant_policy_group",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_policy_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "updated_at",
            "user_count",
            "application_count",
            "apikey_count"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "createAccountGroup",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete a group.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "name": "group_id",
              "in": "path",
              "description": "The ID of the group to delete.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "group_id",
              "external_param": false,
              "parameter_fieldname": "group_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden, or Administrators group cannot be removed.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or group with that ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/policy-groups/{group_id}",
          "summary": "Delete a group.",
          "return_type": "subtenant_policy_group",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_policy_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "deleteAccountGroup",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve an array of policy groups.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "subtenant_policy_group_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "apikey_count",
                        "etag",
                        "id",
                        "name",
                        "object",
                        "user_count"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account this group belongs to.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 0,
                          "description": "The number of API keys in this group.",
                          "x-deprecation": {
                            "issued_at": "2020-08-01T00:00:00+00:00",
                            "end_of_life_at": "2021-08-01T00:00:00+00:00",
                            "comment": "This property is deprecated. See 'application_count' property.",
                            "links": []
                          },
                          "_key": "apikey_count"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 0,
                          "description": "The number of applications in this group.",
                          "_key": "application_count"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571dec00242ac12000600000000",
                          "description": "The ID of the group.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "Administrators",
                          "description": "The name of the group.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `group`.",
                          "enum": [
                            "group"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 1,
                          "description": "The number of users in this group.",
                          "_key": "user_count"
                        }
                      ],
                      "description": "This object contains basic information about groups.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "subtenant_policy_group"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "policy_group_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_policy_group"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/policy-groups",
          "summary": "Get policy groups.",
          "return_type": "paginated_response(subtenant_policy_group)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_policy_group"
          },
          "x_filter": {
            "name": [
              "eq"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data",
            "name__eq"
          ],
          "foreign_key_priority": "self",
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "getAllAccountGroups",
          "pagination": true,
          "foreign_key": {
            "group": "Accounts",
            "entity": "subtenant_policy_group"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve policy group details.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account this group belongs to.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571dec00242ac12000600000000",
              "description": "The ID of the group.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "group_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "apikey_count",
                  "etag",
                  "id",
                  "name",
                  "object",
                  "user_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account this group belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The number of API keys in this group.",
                    "x-deprecation": {
                      "issued_at": "2020-08-01T00:00:00+00:00",
                      "end_of_life_at": "2021-08-01T00:00:00+00:00",
                      "comment": "This property is deprecated. See 'application_count' property.",
                      "links": []
                    },
                    "api_fieldname": "apikey_count",
                    "entity_fieldname": "apikey_count",
                    "_key": "apikey_count"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The number of applications in this group.",
                    "api_fieldname": "application_count",
                    "entity_fieldname": "application_count",
                    "_key": "application_count"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571dec00242ac12000600000000",
                    "description": "The ID of the group.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "group_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Administrators",
                    "description": "The name of the group.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": true,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `group`.",
                    "enum": [
                      "group"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "The number of users in this group.",
                    "api_fieldname": "user_count",
                    "entity_fieldname": "user_count",
                    "_key": "user_count"
                  }
                ],
                "description": "This object contains basic information about groups.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "policy_group"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or group with that ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/policy-groups/{group_id}",
          "summary": "Get policy group.",
          "return_type": "subtenant_policy_group",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_policy_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "name",
            "user_count",
            "application_count",
            "apikey_count"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "getAccountGroupSummary",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update a group name.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/ \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{\"name\": \"TestGroup2\"}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account this group belongs to.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571dec00242ac12000600000000",
              "description": "The ID of the group.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "group_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "Administrators",
              "description": "The name of the group.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": true,
              "_key": "name"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "apikey_count",
                  "etag",
                  "id",
                  "name",
                  "object",
                  "user_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account this group belongs to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The number of API keys in this group.",
                    "x-deprecation": {
                      "issued_at": "2020-08-01T00:00:00+00:00",
                      "end_of_life_at": "2021-08-01T00:00:00+00:00",
                      "comment": "This property is deprecated. See 'application_count' property.",
                      "links": []
                    },
                    "api_fieldname": "apikey_count",
                    "entity_fieldname": "apikey_count",
                    "_key": "apikey_count"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The number of applications in this group.",
                    "api_fieldname": "application_count",
                    "entity_fieldname": "application_count",
                    "_key": "application_count"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571dec00242ac12000600000000",
                    "description": "The ID of the group.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "group_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Administrators",
                    "description": "The name of the group.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": true,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `group`.",
                    "enum": [
                      "group"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "The number of users in this group.",
                    "api_fieldname": "user_count",
                    "entity_fieldname": "user_count",
                    "_key": "user_count"
                  }
                ],
                "description": "This object contains basic information about groups.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "policy_group"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data, for example, the group name is too long.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A group with that ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/policy-groups/{group_id}",
          "summary": "Update the group name.",
          "return_type": "subtenant_policy_group",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_policy_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "user_count",
            "application_count",
            "apikey_count"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "updateAccountGroupName",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        },
        {
          "description": "Retrieve an array of users associated with a policy group.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/users \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "group_id",
              "in": "path",
              "description": "The ID of the group to retrieve users for.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "group_id",
              "external_param": false,
              "parameter_fieldname": "group_id",
              "_key": "id"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "subtenant_policy_group_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "users",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "email",
                        "etag",
                        "id",
                        "object",
                        "status"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "array",
                          "description": "List of active user sessions.",
                          "items": {
                            "type": "object",
                            "required": [
                              "account_id",
                              "ip_address",
                              "login_time",
                              "object",
                              "reference_token",
                              "user_agent"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "example": "01619571e2e90242ac12000600000000",
                                "description": "The UUID of the account.",
                                "pattern": "[a-f0-9]{32}",
                                "api_fieldname": "account_id",
                                "entity_fieldname": "account_id",
                                "_key": "account_id"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-13T09:35:20Z",
                                "description": "Creation UTC time RFC3339.",
                                "api_fieldname": "created_at",
                                "entity_fieldname": "created_at",
                                "_key": "created_at"
                              },
                              {
                                "type": "string",
                                "example": "127.0.0.1",
                                "description": "IP address of the client.",
                                "api_fieldname": "ip_address",
                                "entity_fieldname": "ip_address",
                                "_key": "ip_address"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T17:52:07Z",
                                "description": "The login time of the user.",
                                "api_fieldname": "login_time",
                                "entity_fieldname": "login_time",
                                "_key": "login_time"
                              },
                              {
                                "type": "string",
                                "description": "Entity name: always 'user-session'",
                                "enum": [
                                  "user-session"
                                ],
                                "api_fieldname": "object",
                                "entity_fieldname": "object",
                                "_key": "object"
                              },
                              {
                                "type": "string",
                                "example": "rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk",
                                "description": "The reference token.",
                                "api_fieldname": "reference_token",
                                "entity_fieldname": "reference_token",
                                "_key": "reference_token"
                              },
                              {
                                "type": "string",
                                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                                "description": "User Agent header from the login request.",
                                "api_fieldname": "user_agent",
                                "entity_fieldname": "user_agent",
                                "_key": "user_agent"
                              }
                            ],
                            "description": "Represents an active user session.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "active_session"
                            }
                          },
                          "_key": "active_sessions"
                        },
                        {
                          "type": "string",
                          "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
                          "description": "Address.",
                          "x-nullable": true,
                          "_key": "address"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727683,
                          "description": "A timestamp of the user creation in the storage, in milliseconds.",
                          "_key": "creation_time"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "description": "User's account-specific custom properties. The value is a string.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "custom_fields"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "example": "user@arm.com",
                          "description": "The email address.",
                          "_key": "email"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating whether the user's email address has been verified or not.",
                          "_key": "email_verified"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "User Doe",
                          "x-nullable": true,
                          "description": "The full name of the user.",
                          "_key": "full_name"
                        },
                        {
                          "type": "array",
                          "description": "A list of IDs of the groups this user belongs to.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "groups"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e89242ac12000600000000",
                          "description": "The ID of the user.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating that the user has accepted General Terms and Conditions.",
                          "_key": "is_gtc_accepted"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating that the user has consented to receive marketing information.",
                          "_key": "is_marketing_accepted"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
                          "_key": "is_totp_enabled"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727688,
                          "description": "A timestamp of the latest login of the user, in milliseconds.",
                          "_key": "last_login_time"
                        },
                        {
                          "type": "array",
                          "maxItems": 5,
                          "description": "Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.",
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "ip_address",
                              "success",
                              "user_agent"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T17:52:07Z",
                                "description": "UTC time RFC3339 for this login attempt.",
                                "api_fieldname": "date",
                                "entity_fieldname": "date",
                                "_key": "date"
                              },
                              {
                                "type": "string",
                                "example": "127.0.0.1",
                                "description": "IP address of the client.",
                                "api_fieldname": "ip_address",
                                "entity_fieldname": "ip_address",
                                "_key": "ip_address"
                              },
                              {
                                "type": "boolean",
                                "example": true,
                                "description": "Flag indicating whether login attempt was successful or not.",
                                "api_fieldname": "success",
                                "entity_fieldname": "success",
                                "_key": "success"
                              },
                              {
                                "type": "string",
                                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                                "description": "User Agent header from the login request.",
                                "api_fieldname": "user_agent",
                                "entity_fieldname": "user_agent",
                                "_key": "user_agent"
                              }
                            ],
                            "description": "Represents an entry in login history.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "login_history"
                            }
                          },
                          "_key": "login_history"
                        },
                        {
                          "type": "array",
                          "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                          "x-nullable": true,
                          "items": {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "example": "fed/user_007",
                                "description": "The ID of the user in the identity provider's service.",
                                "readOnly": true,
                                "api_fieldname": "foreign_id",
                                "entity_fieldname": "foreign_id",
                                "_key": "foreign_id"
                              },
                              {
                                "type": "string",
                                "example": "01619571f3c00242ac12000600000000",
                                "description": "ID of the identity provider.",
                                "readOnly": false,
                                "_override": true,
                                "api_fieldname": "id",
                                "entity_fieldname": "id",
                                "_key": "id"
                              },
                              {
                                "type": "string",
                                "example": "Pelion",
                                "readOnly": false,
                                "description": "Name of the identity provider.",
                                "_override": true,
                                "api_fieldname": "name",
                                "entity_fieldname": "name",
                                "_key": "name"
                              },
                              {
                                "type": "string",
                                "description": "Identity provider type.",
                                "example": "NATIVE",
                                "readOnly": true,
                                "enum": [
                                  "NATIVE",
                                  "MBED",
                                  "SAML2",
                                  "OIDC"
                                ],
                                "api_fieldname": "type",
                                "entity_fieldname": "login_profile_type",
                                "_key": "type"
                              }
                            ],
                            "description": "Represents a user login profile in Device Management.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "login_profile"
                            }
                          },
                          "_key": "login_profiles"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `user`.",
                          "enum": [
                            "user"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "PZf9eEUH43DAPE9ULINFeuj",
                          "description": "The password when creating a new user. It will be generated when not present in the request.",
                          "x-nullable": true,
                          "_key": "password"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727688,
                          "description": "A timestamp of the latest change of the user password, in milliseconds.",
                          "_key": "password_changed_time"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "+44 (1223) 400 400",
                          "description": "Phone number.",
                          "x-nullable": true,
                          "_key": "phone_number"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "The status of the user. ENROLLING state indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately. INACTIVE users are locked out and not permitted to use the system.",
                          "enum": [
                            "ENROLLING",
                            "INVITED",
                            "ACTIVE",
                            "RESET",
                            "INACTIVE"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "A list of scratch codes for the two-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "totp_scratch_codes"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "pattern": "[\\w\\-,._@+=]{4,30}",
                          "type": "string",
                          "example": "admin",
                          "description": "A username.",
                          "x-nullable": true,
                          "_key": "username"
                        }
                      ],
                      "description": "Represents a user in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "user"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "policy_group_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "user"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or group with that ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/policy-groups/{group_id}/users",
          "summary": "Get users in a policy group.",
          "return_type": "paginated_response(subtenant_user)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "subtenant_user"
          },
          "x_filter": {
            "status": [
              "eq",
              "in",
              "nin"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data",
            "status__eq",
            "status__in",
            "status__nin"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "group_id": "id"
          },
          "operation_id": "getUsersOfAccountGroup",
          "foreign_key": {
            "entity": "subtenant_user"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "users"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the account this group belongs to.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "account_id",
          "readOnly": false,
          "required": true,
          "_key": "account_id"
        },
        {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The number of API keys in this group.",
          "x-deprecation": {
            "issued_at": "2020-08-01T00:00:00+00:00",
            "end_of_life_at": "2021-08-01T00:00:00+00:00",
            "comment": "This property is deprecated. See 'application_count' property.",
            "links": []
          },
          "api_fieldname": "apikey_count",
          "readOnly": true,
          "required": false,
          "_key": "apikey_count"
        },
        {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The number of applications in this group.",
          "api_fieldname": "application_count",
          "readOnly": true,
          "required": false,
          "_key": "application_count"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "example": "01619571dec00242ac12000600000000",
          "description": "The ID of the group.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "parameter_fieldname": "group_id",
          "in": "path",
          "required": true,
          "readOnly": false,
          "_key": "id"
        },
        {
          "type": "string",
          "maxLength": 100,
          "example": "Administrators",
          "description": "The name of the group.",
          "api_fieldname": "name",
          "parameter_fieldname": "name",
          "in": "body",
          "required": true,
          "readOnly": false,
          "_key": "name"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update UTC time RFC3339.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        },
        {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The number of users in this group.",
          "api_fieldname": "user_count",
          "readOnly": true,
          "required": false,
          "_key": "user_count"
        }
      ],
      "field_renames": [],
      "tags": [
        "Tenant accounts - policy groups"
      ],
      "group_id": "Accounts",
      "_key": "subtenant_policy_group"
    },
    {
      "swagger_models": [
        "DeveloperCertificateResponseData",
        "TrustedCertificateReq",
        "TrustedCertificateResp",
        "TrustedCertificateUpdateReq"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Upload new trusted certificate.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d {\"name\": \"myCert1\", \"description\": \"very important cert\", \"certificate\": \"certificate_data\", \"service\": \"lwm2m\"}\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
              "description": "X509.v3 trusted certificate in PEM format.",
              "api_fieldname": "certificate",
              "entity_fieldname": "certificate",
              "parameter_fieldname": "certificate",
              "in": "body",
              "required": false,
              "_key": "certificate"
            },
            {
              "type": "string",
              "maxLength": 500,
              "x-nullable": true,
              "example": "Certificate created by me.",
              "description": "Human readable description of this certificate.",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "type": "boolean",
              "example": false,
              "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
              "x-deprecation": {
                "issued_at": "2020-11-01T00:00:00+00:00",
                "end_of_life_at": "2021-11-01T00:00:00+00:00",
                "comment": "This field is deprecated, do not use it anymore.",
                "links": []
              },
              "api_fieldname": "enrollment_mode",
              "entity_fieldname": "enrollment_mode",
              "parameter_fieldname": "enrollment_mode",
              "in": "body",
              "required": false,
              "_key": "enrollment_mode"
            },
            {
              "description": "Whether or not this certificate is a developer certificate.",
              "example": true,
              "type": "boolean",
              "readOnly": true,
              "getter_custom_method": "is_developer_certificate_getter",
              "_override": true,
              "api_fieldname": "is_developer_certificate",
              "entity_fieldname": "is_developer_certificate",
              "_key": "is_developer_certificate"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "My certificate",
              "description": "Certificate name.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            },
            {
              "type": "string",
              "description": "Service name where the certificate is used.",
              "enum": [
                "lwm2m",
                "bootstrap"
              ],
              "api_fieldname": "service",
              "entity_fieldname": "service",
              "parameter_fieldname": "service",
              "in": "body",
              "required": false,
              "enum_reference": "subtenant_trusted_certificate_service_enum",
              "_key": "service"
            },
            {
              "type": "string",
              "example": "ACTIVE",
              "description": "Status of the certificate.",
              "enum": [
                "ACTIVE",
                "INACTIVE"
              ],
              "api_fieldname": "status",
              "entity_fieldname": "status",
              "parameter_fieldname": "status",
              "in": "body",
              "required": false,
              "enum_reference": "subtenant_trusted_certificate_status_enum",
              "_key": "status"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "New entity created.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "certificate",
                  "certificate_fingerprint",
                  "etag",
                  "id",
                  "issuer",
                  "name",
                  "object",
                  "service",
                  "subject",
                  "validity"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
                    "description": "X509.v3 trusted certificate in PEM format.",
                    "api_fieldname": "certificate",
                    "entity_fieldname": "certificate",
                    "parameter_fieldname": "certificate",
                    "in": "body",
                    "required": false,
                    "_key": "certificate"
                  },
                  {
                    "type": "string",
                    "example": "a10fb2c8ba90e6de927bd0ae391dcc38f6115685de2d7024712af37ead0608f1",
                    "description": "A SHA-256 fingerprint of the certificate.",
                    "api_fieldname": "certificate_fingerprint",
                    "entity_fieldname": "certificate_fingerprint",
                    "_key": "certificate_fingerprint"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "x-nullable": true,
                    "example": "Certificate created by me.",
                    "description": "Human readable description of this certificate.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "parameter_fieldname": "description",
                    "in": "body",
                    "required": false,
                    "_key": "description"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "Device execution mode where 1 means a developer certificate.",
                    "api_fieldname": "device_execution_mode",
                    "entity_fieldname": "device_execution_mode",
                    "_key": "device_execution_mode"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
                    "x-deprecation": {
                      "issued_at": "2020-11-01T00:00:00+00:00",
                      "end_of_life_at": "2021-11-01T00:00:00+00:00",
                      "comment": "This field is deprecated, do not use it anymore.",
                      "links": []
                    },
                    "api_fieldname": "enrollment_mode",
                    "entity_fieldname": "enrollment_mode",
                    "parameter_fieldname": "enrollment_mode",
                    "in": "body",
                    "required": false,
                    "_key": "enrollment_mode"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "cert_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "CN=issuer",
                    "description": "Issuer of the certificate.",
                    "api_fieldname": "issuer",
                    "entity_fieldname": "issuer",
                    "_key": "issuer"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "My certificate",
                    "description": "Certificate name.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": false,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'trusted-cert'",
                    "enum": [
                      "trusted-cert"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "x-nullable": true,
                    "type": "string",
                    "example": "01619571dad80242ac12000600000000",
                    "description": "The ID of the owner.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner_id",
                    "entity_fieldname": "owner_id",
                    "_key": "owner_id"
                  },
                  {
                    "type": "string",
                    "description": "Service name where the certificate is used.",
                    "enum": [
                      "lwm2m",
                      "bootstrap"
                    ],
                    "api_fieldname": "service",
                    "entity_fieldname": "service",
                    "parameter_fieldname": "service",
                    "in": "body",
                    "required": false,
                    "enum_reference": "trusted_certificate_service_enum",
                    "_key": "service"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "Status of the certificate.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "enum_reference": "trusted_certificate_status_enum",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "example": "CN=subject",
                    "description": "Subject of the certificate.",
                    "api_fieldname": "subject",
                    "entity_fieldname": "subject",
                    "_key": "subject"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "This read-only flag indicates whether the certificate is valid or not.",
                    "readOnly": true,
                    "api_fieldname": "valid",
                    "entity_fieldname": "valid",
                    "_key": "valid"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2038-02-14T15:24:14Z",
                    "description": "Expiration time in UTC formatted as RFC3339.",
                    "api_fieldname": "validity",
                    "entity_fieldname": "validity",
                    "_key": "validity"
                  }
                ],
                "description": "Represents a trusted certificate in responses.",
                "foreign_key": {
                  "group": "Security",
                  "entity": "developer_certificate"
                }
              },
              "_key": "201"
            },
            {
              "description": "Invalid certificate data, certificate validation failed, certificate already expired or certificate uses unsupported, or weak cipher.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden, only available for administrators of commercial accounts.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account with the given ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/trusted-certificates",
          "summary": "Upload new trusted certificate.",
          "return_type": "subtenant_trusted_certificate",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_trusted_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "signature",
            "id",
            "created_at",
            "updated_at",
            "owner_id",
            "issuer",
            "subject",
            "validity",
            "device_execution_mode",
            "certificate_fingerprint",
            "valid"
          ],
          "group_id": "Security",
          "operation_id": "addAccountCertificate",
          "notes": "Signature is not used by the SDK as it is a deprecated field.",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete a trusted certificate.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "name": "cert_id",
              "in": "path",
              "description": "The ID of the trusted certificate to delete.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "cert_id",
              "external_param": false,
              "parameter_fieldname": "cert_id",
              "_key": "id"
            },
            {
              "description": "Whether or not this certificate is a developer certificate.",
              "example": true,
              "type": "boolean",
              "readOnly": true,
              "getter_custom_method": "is_developer_certificate_getter",
              "_override": true,
              "api_fieldname": "is_developer_certificate",
              "entity_fieldname": "is_developer_certificate",
              "_key": "is_developer_certificate"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden, only available for administrators of commercial accounts.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or certificate with the given ID not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/trusted-certificates/{cert_id}",
          "summary": "Delete a trusted certificate by ID.",
          "return_type": "subtenant_trusted_certificate",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_trusted_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "signature"
          ],
          "group_id": "Security",
          "operation_id": "deleteAccountCertificate",
          "parameter_map": {
            "cert_id": "id"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Return an existing developer certificate (a certificate that can be flashed to multiple devices to connect to bootstrap server).\n\n**Example:**\n```\ncurl -X GET http://api.us-east-1.mbedcloud.com/v3/developer-certificates/THE_CERTIFICATE_ID \\\n-H \"Authorization: Bearer <access_key>\"\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "ID that uniquely identifies the developer certificate.",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "developerCertificateId",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "description": "Whether or not this certificate is a developer certificate.",
              "example": true,
              "type": "boolean",
              "readOnly": true,
              "getter_custom_method": "is_developer_certificate_getter",
              "_override": true,
              "api_fieldname": "is_developer_certificate",
              "entity_fieldname": "is_developer_certificate",
              "_key": "is_developer_certificate"
            }
          ],
          "method": "get",
          "mode": "get_developer_certificate_info",
          "responses": [
            {
              "description": "Developer certificate returned successfully.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "Account to which the developer certificate belongs.",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "Description for the developer certificate.",
                    "x-nullable": true,
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "description": "PEM-format X.509 developer certificate.",
                    "api_fieldname": "developer_certificate",
                    "entity_fieldname": "developer_certificate",
                    "_key": "developer_certificate"
                  },
                  {
                    "type": "string",
                    "description": "PEM-format developer private key associated with the certificate.",
                    "api_fieldname": "developer_private_key",
                    "entity_fieldname": "developer_private_key",
                    "_key": "developer_private_key"
                  },
                  {
                    "type": "string",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "ID that uniquely identifies the developer certificate.",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "description": "Name of the developer certificate.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `trusted-cert`.",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Content of the `security.c` file flashed to the device to provide security credentials.",
                    "api_fieldname": "security_file_content",
                    "entity_fieldname": "security_file_content",
                    "_key": "security_file_content"
                  }
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "developer_certificate"
                }
              },
              "examples": [
                {
                  "object": "trusted-cert",
                  "id": "015fee4431fd38c98640fbfb00000000",
                  "etag": "1",
                  "created_at": "2017-12-11T14:22:20.009Z",
                  "account_id": "015fee5d9b3538c98640fbfb00000000",
                  "name": "DeveloperCertificate",
                  "description": "This certificate applies to multiple developer devices.",
                  "developer_certificate": "-----BEGIN CERTIFICATE-----\\nMIICcDCCAhWgAwIBAgIRAPSBbBtLUE/ekQcWE4GzPJEwCgYIKoZIzj0EAwIwgaIx\\nCzAJBgNVBAYTAkdCMRcwFQYDVQQIDA5DYW1icmlkZ2VzaGlyZTESMBAGA1UEBwwJ\\nQ2FtYnJpZGdlMRAwDgYDVQQKDAdBUk0gTHRkMSkwJwYDVQQLDCAwMTU4NDNlMzJl\\nYzkwMjQyMGEwMTVlMDcwMDAwMDAwMDEpMCcGA1UEAwwgMDE2MWRiYmNkZDY2MGE1\\nODBhMDEwYzM0MDNjMDAwMDAwHhcNMTgwMjI4MDkyNzIzWhcNMjgwMjI4MDkyNzIz\\nWjCBojELMAkGA1UEBhMCR0IxFzAVBgNVBAgMDkNhbWJyaWRnZXNoaXJlMRIwEAYD\\nVQQHDAlDYW1icmlkZ2UxEDAOBgNVBAoMB0FSTSBMdGQxKTAnBgNVBAsMIDAxNTg0\\nM2UzMmVjOTAyNDIwYTAxNWUwNzAwMDAwMDAwMSkwJwYDVQQDDCAwMTYxZGJiY2Rk\\nNjYwYTU4MGEwMTBjMzQwM2MwMDAwMDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\\nBEScLDbOXvOb903AYlI9ow8E4hbLSHJPt5E2BO4Q4bHOpuWH2Oh6P+CDPte9pAv3\\nE6g90Xk/ZcZpQ+xBO6qci/ajKjAoMBIGCSsGAQQBoCCBSQQFAgNAAJEwEgYDVR0T\\nAQH/BAgwBgEB/wIBADAKBggqhkjOPQQDAgNJADBGAiEAsi9zSK8Njl22GoEHrsg8\\nQlwFnrkkP9d6FyLFtmqndt4CIQCmVHwisYNcCkqD2SWctG1xQHo0HZePAQW8PstM\\nzhNupQ==\\n-----END CERTIFICATE-----\\n",
                  "developer_private_key": "-----BEGIN PRIVATE KEY-----\\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgeKc97aC1Z4aniXVG\\njNSvvXw2hl6zwACYIs88OKQx61GgCgYIKoZIzj0DAQehRANCAAREnCw2zl7zm/dN\\nwGJSPaMPBOIWy0hyT7eRNgTuEOGxzqblh9joej/ggz7XvaQL9xOoPdF5P2XGaUPs\\nQTuqnIv2\\n-----END PRIVATE KEY-----\\n",
                  "security_file_content": "/*\\n * Copyright (c) 2017 ARM Limited. All rights reserved.\\n * SPDX-License-Identifier: Apache-2.0\\n * Licensed under the Apache License, Version 2.0 (the License); you may\\n * not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an AS IS BASIS, WITHOUT\\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n#ifndef __MBED_CLOUD_DEV_CREDENTIALS_H__\\n#define __MBED_CLOUD_DEV_CREDENTIALS_H__\\n\\n#include <inttypes.h>\\n\\nconst char MBED_CLOUD_DEV_BOOTSTRAP_ENDPOINT_NAME[] = \\\"0161dbbcdd660a580a010c3403c00000\\\";\\nconst char MBED_CLOUD_DEV_ACCOUNT_ID[] = \\\"015843e32ec902420a015e0700000000\\\";\\nconst char MBED_CLOUD_DEV_BOOTSTRAP_SERVER_URI[] = \\\"coaps://coap.us-east-1.mbedcloud.com:5684?aid=015843e32ec902420a015e0700000000\\\";\\n\\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE[] = \\n{ 0x30, 0x82, 0x02, 0x70, 0x30, 0x82, 0x02, 0x15,\\n 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x11, 0x00,\\n 0xf4, 0x81, 0x6c, 0x1b, 0x4b, 0x50, 0x4f, 0xde,\\n 0x91, 0x07, 0x16, 0x13, 0x81, 0xb3, 0x3c, 0x91,\\n 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,\\n 0x3d, 0x04, 0x03, 0x02, 0x30, 0x81, 0xa2, 0x31,\\n 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,\\n 0x13, 0x02, 0x47, 0x42, 0x31, 0x17, 0x30, 0x15,\\n 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0e, 0x43,\\n 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,\\n 0x73, 0x68, 0x69, 0x72, 0x65, 0x31, 0x12, 0x30,\\n 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09,\\n 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67,\\n 0x65, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55,\\n 0x04, 0x0a, 0x0c, 0x07, 0x41, 0x52, 0x4d, 0x20,\\n 0x4c, 0x74, 0x64, 0x31, 0x29, 0x30, 0x27, 0x06,\\n 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x20, 0x30, 0x31,\\n 0x35, 0x38, 0x34, 0x33, 0x65, 0x33, 0x32, 0x65,\\n 0x63, 0x39, 0x30, 0x32, 0x34, 0x32, 0x30, 0x61,\\n 0x30, 0x31, 0x35, 0x65, 0x30, 0x37, 0x30, 0x30,\\n 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x29,\\n 0x30, 0x27, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c,\\n 0x20, 0x30, 0x31, 0x36, 0x31, 0x64, 0x62, 0x62,\\n 0x63, 0x64, 0x64, 0x36, 0x36, 0x30, 0x61, 0x35,\\n 0x38, 0x30, 0x61, 0x30, 0x31, 0x30, 0x63, 0x33,\\n 0x34, 0x30, 0x33, 0x63, 0x30, 0x30, 0x30, 0x30,\\n 0x30, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x30,\\n 0x32, 0x32, 0x38, 0x30, 0x39, 0x32, 0x37, 0x32,\\n 0x33, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x30, 0x32,\\n 0x32, 0x38, 0x30, 0x39, 0x32, 0x37, 0x32, 0x33,\\n 0x5a, 0x30, 0x81, 0xa2, 0x31, 0x0b, 0x30, 0x09,\\n 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x47,\\n 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55,\\n 0x04, 0x08, 0x0c, 0x0e, 0x43, 0x61, 0x6d, 0x62,\\n 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x68, 0x69,\\n 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03,\\n 0x55, 0x04, 0x07, 0x0c, 0x09, 0x43, 0x61, 0x6d,\\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x31, 0x10,\\n 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c,\\n 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74, 0x64,\\n 0x31, 0x29, 0x30, 0x27, 0x06, 0x03, 0x55, 0x04,\\n 0x0b, 0x0c, 0x20, 0x30, 0x31, 0x35, 0x38, 0x34,\\n 0x33, 0x65, 0x33, 0x32, 0x65, 0x63, 0x39, 0x30,\\n 0x32, 0x34, 0x32, 0x30, 0x61, 0x30, 0x31, 0x35,\\n 0x65, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30,\\n 0x30, 0x30, 0x30, 0x31, 0x29, 0x30, 0x27, 0x06,\\n 0x03, 0x55, 0x04, 0x03, 0x0c, 0x20, 0x30, 0x31,\\n 0x36, 0x31, 0x64, 0x62, 0x62, 0x63, 0x64, 0x64,\\n 0x36, 0x36, 0x30, 0x61, 0x35, 0x38, 0x30, 0x61,\\n 0x30, 0x31, 0x30, 0x63, 0x33, 0x34, 0x30, 0x33,\\n 0x63, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x59,\\n 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,\\n 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48,\\n 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00,\\n 0x04, 0x44, 0x9c, 0x2c, 0x36, 0xce, 0x5e, 0xf3,\\n 0x9b, 0xf7, 0x4d, 0xc0, 0x62, 0x52, 0x3d, 0xa3,\\n 0x0f, 0x04, 0xe2, 0x16, 0xcb, 0x48, 0x72, 0x4f,\\n 0xb7, 0x91, 0x36, 0x04, 0xee, 0x10, 0xe1, 0xb1,\\n 0xce, 0xa6, 0xe5, 0x87, 0xd8, 0xe8, 0x7a, 0x3f,\\n 0xe0, 0x83, 0x3e, 0xd7, 0xbd, 0xa4, 0x0b, 0xf7,\\n 0x13, 0xa8, 0x3d, 0xd1, 0x79, 0x3f, 0x65, 0xc6,\\n 0x69, 0x43, 0xec, 0x41, 0x3b, 0xaa, 0x9c, 0x8b,\\n 0xf6, 0xa3, 0x2a, 0x30, 0x28, 0x30, 0x12, 0x06,\\n 0x09, 0x2b, 0x06, 0x01, 0x04, 0x01, 0xa0, 0x20,\\n 0x81, 0x49, 0x04, 0x05, 0x02, 0x03, 0x40, 0x00,\\n 0x91, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13,\\n 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01,\\n 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x0a, 0x06,\\n 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,\\n 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,\\n 0x00, 0xb2, 0x2f, 0x73, 0x48, 0xaf, 0x0d, 0x8e,\\n 0x5d, 0xb6, 0x1a, 0x81, 0x07, 0xae, 0xc8, 0x3c,\\n 0x42, 0x5c, 0x05, 0x9e, 0xb9, 0x24, 0x3f, 0xd7,\\n 0x7a, 0x17, 0x22, 0xc5, 0xb6, 0x6a, 0xa7, 0x76,\\n 0xde, 0x02, 0x21, 0x00, 0xa6, 0x54, 0x7c, 0x22,\\n 0xb1, 0x83, 0x5c, 0x0a, 0x4a, 0x83, 0xd9, 0x25,\\n 0x9c, 0xb4, 0x6d, 0x71, 0x40, 0x7a, 0x34, 0x1d,\\n 0x97, 0x8f, 0x01, 0x05, 0xbc, 0x3e, 0xcb, 0x4c,\\n 0xce, 0x13, 0x6e, 0xa5 };\\n\\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE[] = \\n{ 0x30, 0x82, 0x02, 0x35, 0x30, 0x82, 0x01, 0xdb,\\n 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x5c,\\n 0x27, 0xa5, 0x76, 0x7d, 0x58, 0x85, 0x8a, 0x43,\\n 0x91, 0xa0, 0x61, 0xab, 0xcf, 0xa6, 0x59, 0x30,\\n 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x04, 0x03, 0x02, 0x30, 0x72, 0x31, 0x0b, 0x30,\\n 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02,\\n 0x47, 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,\\n 0x55, 0x04, 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d,\\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x68,\\n 0x69, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06,\\n 0x03, 0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x61,\\n 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x31,\\n 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a,\\n 0x13, 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74,\\n 0x64, 0x31, 0x24, 0x30, 0x22, 0x06, 0x03, 0x55,\\n 0x04, 0x03, 0x13, 0x1b, 0x41, 0x52, 0x4d, 0x20,\\n 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,\\n 0x69, 0x6f, 0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x74,\\n 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x41, 0x30,\\n 0x20, 0x17, 0x0d, 0x31, 0x37, 0x30, 0x35, 0x31,\\n 0x35, 0x31, 0x39, 0x34, 0x39, 0x31, 0x31, 0x5a,\\n 0x18, 0x0f, 0x32, 0x30, 0x35, 0x32, 0x30, 0x35,\\n 0x31, 0x35, 0x31, 0x39, 0x35, 0x39, 0x31, 0x30,\\n 0x5a, 0x30, 0x72, 0x31, 0x0b, 0x30, 0x09, 0x06,\\n 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x47, 0x42,\\n 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04,\\n 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d, 0x62, 0x72,\\n 0x69, 0x64, 0x67, 0x65, 0x73, 0x68, 0x69, 0x72,\\n 0x65, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55,\\n 0x04, 0x07, 0x13, 0x09, 0x43, 0x61, 0x6d, 0x62,\\n 0x72, 0x69, 0x64, 0x67, 0x65, 0x31, 0x10, 0x30,\\n 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x07,\\n 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74, 0x64, 0x31,\\n 0x24, 0x30, 0x22, 0x06, 0x03, 0x55, 0x04, 0x03,\\n 0x13, 0x1b, 0x41, 0x52, 0x4d, 0x20, 0x49, 0x6e,\\n 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,\\n 0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,\\n 0x72, 0x61, 0x70, 0x43, 0x41, 0x30, 0x59, 0x30,\\n 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,\\n 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04,\\n 0x8b, 0x7c, 0x86, 0xc3, 0x88, 0x54, 0xe6, 0x5f,\\n 0xe0, 0x57, 0x4e, 0x1b, 0xac, 0x29, 0x82, 0xea,\\n 0x7d, 0x91, 0x00, 0x63, 0xa7, 0x4a, 0x05, 0xbc,\\n 0x54, 0xc5, 0x71, 0x27, 0x33, 0x19, 0x1b, 0x2e,\\n 0xfa, 0x41, 0xf8, 0x7a, 0x9a, 0x0c, 0x5d, 0xfc,\\n 0xb3, 0x37, 0x01, 0x99, 0xc5, 0xc9, 0xbe, 0x78,\\n 0x5b, 0x1d, 0xec, 0xb0, 0x1a, 0x1d, 0xdc, 0xe4,\\n 0x6f, 0x57, 0x04, 0xf4, 0x3a, 0xca, 0xa8, 0xd2,\\n 0xa3, 0x51, 0x30, 0x4f, 0x30, 0x0b, 0x06, 0x03,\\n 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x01,\\n 0x86, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13,\\n 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01,\\n 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,\\n 0x0e, 0x04, 0x16, 0x04, 0x14, 0x13, 0xef, 0x69,\\n 0xfa, 0x62, 0x3f, 0x00, 0x86, 0xf4, 0x05, 0xb8,\\n 0xb6, 0xe6, 0xb2, 0xf1, 0xdb, 0x69, 0x10, 0xb4,\\n 0x39, 0x30, 0x10, 0x06, 0x09, 0x2b, 0x06, 0x01,\\n 0x04, 0x01, 0x82, 0x37, 0x15, 0x01, 0x04, 0x03,\\n 0x02, 0x01, 0x00, 0x30, 0x0a, 0x06, 0x08, 0x2a,\\n 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03,\\n 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xa2,\\n 0x50, 0x88, 0x0f, 0x55, 0xe8, 0x26, 0x49, 0xe6,\\n 0xf5, 0x71, 0x86, 0x33, 0x29, 0x05, 0x4c, 0xf9,\\n 0xfd, 0x1f, 0x14, 0x98, 0x92, 0x85, 0xd9, 0x5c,\\n 0x48, 0x02, 0x9e, 0xc2, 0x79, 0xa8, 0x59, 0x02,\\n 0x20, 0x3e, 0xfe, 0x3c, 0xa0, 0xbf, 0xd3, 0x0f,\\n 0x15, 0x83, 0x56, 0xbc, 0xf2, 0xfa, 0x16, 0x26,\\n 0x7a, 0xc1, 0x68, 0xaa, 0xbc, 0x91, 0x3c, 0x69,\\n 0x44, 0x36, 0xf9, 0x74, 0xa1, 0x82, 0x76, 0x7a,\\n 0x6e };\\n\\nconst uint8_t MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE[] = \\n{ 0x30, 0x82, 0x02, 0x30, 0x30, 0x82, 0x01, 0xd5,\\n 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x26,\\n 0xf9, 0x08, 0xfc, 0xf1, 0xc0, 0x46, 0xa4, 0x4a,\\n 0x4d, 0x2c, 0xf1, 0x94, 0x27, 0xf9, 0x1f, 0x30,\\n 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x04, 0x03, 0x02, 0x30, 0x6f, 0x31, 0x0b, 0x30,\\n 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02,\\n 0x47, 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,\\n 0x55, 0x04, 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d,\\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x68,\\n 0x69, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06,\\n 0x03, 0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x61,\\n 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x31,\\n 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a,\\n 0x13, 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74,\\n 0x64, 0x31, 0x21, 0x30, 0x1f, 0x06, 0x03, 0x55,\\n 0x04, 0x03, 0x13, 0x18, 0x41, 0x52, 0x4d, 0x20,\\n 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,\\n 0x69, 0x6f, 0x6e, 0x20, 0x4c, 0x57, 0x4d, 0x32,\\n 0x4d, 0x20, 0x43, 0x41, 0x30, 0x20, 0x17, 0x0d,\\n 0x31, 0x37, 0x30, 0x32, 0x31, 0x32, 0x31, 0x30,\\n 0x33, 0x37, 0x35, 0x32, 0x5a, 0x18, 0x0f, 0x32,\\n 0x30, 0x35, 0x32, 0x30, 0x32, 0x31, 0x32, 0x31,\\n 0x30, 0x34, 0x37, 0x35, 0x32, 0x5a, 0x30, 0x6f,\\n 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,\\n 0x06, 0x13, 0x02, 0x47, 0x42, 0x31, 0x17, 0x30,\\n 0x15, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0e,\\n 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67,\\n 0x65, 0x73, 0x68, 0x69, 0x72, 0x65, 0x31, 0x12,\\n 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13,\\n 0x09, 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64,\\n 0x67, 0x65, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03,\\n 0x55, 0x04, 0x0a, 0x13, 0x07, 0x41, 0x52, 0x4d,\\n 0x20, 0x4c, 0x74, 0x64, 0x31, 0x21, 0x30, 0x1f,\\n 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x18, 0x41,\\n 0x52, 0x4d, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67,\\n 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4c,\\n 0x57, 0x4d, 0x32, 0x4d, 0x20, 0x43, 0x41, 0x30,\\n 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48,\\n 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86,\\n 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42,\\n 0x00, 0x04, 0xba, 0xea, 0x80, 0x01, 0x2d, 0xf0,\\n 0xe1, 0xb6, 0xc5, 0x5f, 0xf9, 0x76, 0x84, 0x31,\\n 0xa9, 0x29, 0xa1, 0xc7, 0xa8, 0xfd, 0xa0, 0xad,\\n 0xd9, 0x94, 0xe7, 0xec, 0x5a, 0x33, 0xa1, 0x2c,\\n 0x8e, 0x36, 0x43, 0x9b, 0x18, 0xdf, 0xce, 0x71,\\n 0x14, 0x24, 0xb1, 0xfb, 0x16, 0x34, 0x0e, 0x43,\\n 0xfc, 0x23, 0x77, 0xd4, 0x13, 0xd7, 0x11, 0xaa,\\n 0x39, 0x60, 0xab, 0xa2, 0xdf, 0x24, 0xb3, 0xeb,\\n 0xa0, 0xc5, 0xa3, 0x51, 0x30, 0x4f, 0x30, 0x0b,\\n 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03,\\n 0x02, 0x01, 0x86, 0x30, 0x0f, 0x06, 0x03, 0x55,\\n 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,\\n 0x03, 0x01, 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03,\\n 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x7b,\\n 0xa1, 0xa5, 0x94, 0xa5, 0xe5, 0x8f, 0x95, 0x5d,\\n 0xd4, 0xce, 0xdc, 0x0f, 0x8a, 0xbe, 0xad, 0x9a,\\n 0x6b, 0x66, 0x3e, 0x30, 0x10, 0x06, 0x09, 0x2b,\\n 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x01,\\n 0x04, 0x03, 0x02, 0x01, 0x00, 0x30, 0x0a, 0x06,\\n 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,\\n 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,\\n 0x00, 0xd2, 0x06, 0x28, 0xc5, 0x31, 0x3a, 0x11,\\n 0x8d, 0xb6, 0xcb, 0x2b, 0x3f, 0xdd, 0x2a, 0x9a,\\n 0x13, 0x30, 0x52, 0x77, 0xaa, 0xda, 0xda, 0xcb,\\n 0xce, 0xb9, 0x5c, 0xe4, 0x32, 0x1c, 0x02, 0xfa,\\n 0x30, 0x02, 0x21, 0x00, 0xb3, 0x82, 0x24, 0xa2,\\n 0xb1, 0x67, 0x6b, 0x69, 0x07, 0x0e, 0xcd, 0x77,\\n 0x74, 0x99, 0x06, 0x9c, 0x59, 0xb2, 0x00, 0xc0,\\n 0xb3, 0xbb, 0x37, 0x5b, 0xc0, 0x1b, 0xfb, 0xd9,\\n 0x70, 0x98, 0xb9, 0x1e };\\n\\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY[] = \\n{ 0x30, 0x81, 0x93, 0x02, 0x01, 0x00, 0x30, 0x13,\\n 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,\\n 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x03, 0x01, 0x07, 0x04, 0x79, 0x30, 0x77, 0x02,\\n 0x01, 0x01, 0x04, 0x20, 0x78, 0xa7, 0x3d, 0xed,\\n 0xa0, 0xb5, 0x67, 0x86, 0xa7, 0x89, 0x75, 0x46,\\n 0x8c, 0xd4, 0xaf, 0xbd, 0x7c, 0x36, 0x86, 0x5e,\\n 0xb3, 0xc0, 0x00, 0x98, 0x22, 0xcf, 0x3c, 0x38,\\n 0xa4, 0x31, 0xeb, 0x51, 0xa0, 0x0a, 0x06, 0x08,\\n 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07,\\n 0xa1, 0x44, 0x03, 0x42, 0x00, 0x04, 0x44, 0x9c,\\n 0x2c, 0x36, 0xce, 0x5e, 0xf3, 0x9b, 0xf7, 0x4d,\\n 0xc0, 0x62, 0x52, 0x3d, 0xa3, 0x0f, 0x04, 0xe2,\\n 0x16, 0xcb, 0x48, 0x72, 0x4f, 0xb7, 0x91, 0x36,\\n 0x04, 0xee, 0x10, 0xe1, 0xb1, 0xce, 0xa6, 0xe5,\\n 0x87, 0xd8, 0xe8, 0x7a, 0x3f, 0xe0, 0x83, 0x3e,\\n 0xd7, 0xbd, 0xa4, 0x0b, 0xf7, 0x13, 0xa8, 0x3d,\\n 0xd1, 0x79, 0x3f, 0x65, 0xc6, 0x69, 0x43, 0xec,\\n 0x41, 0x3b, 0xaa, 0x9c, 0x8b, 0xf6 };\\n\\nconst char MBED_CLOUD_DEV_MANUFACTURER[] = \\\"dev_manufacturer\\\";\\n\\nconst char MBED_CLOUD_DEV_MODEL_NUMBER[] = \\\"dev_model_num\\\";\\n\\nconst char MBED_CLOUD_DEV_SERIAL_NUMBER[] = \\\"0\\\";\\n\\nconst char MBED_CLOUD_DEV_DEVICE_TYPE[] = \\\"dev_device_type\\\";\\n\\nconst char MBED_CLOUD_DEV_HARDWARE_VERSION[] = \\\"dev_hardware_version\\\";\\n\\nconst uint32_t MBED_CLOUD_DEV_MEMORY_TOTAL_KB = 0;\\n\\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE);\\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE);\\nconst uint32_t MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE);\\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY);\\n\\n#endif //__MBED_CLOUD_DEV_CREDENTIALS_H__\\n",
                  "_key": "Success"
                }
              ],
              "_key": "200"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Invalid access token.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "examples": [
                {
                  "object": "error",
                  "code": 401,
                  "type": "invalid_auth",
                  "message": "Invalid access token.",
                  "request_id": "015fee4431fd38c98640fbfb00000000",
                  "_key": "Authentication Error"
                }
              ],
              "_key": "401"
            },
            {
              "description": "Developer certificate not found with given ID.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "examples": [
                {
                  "object": "error",
                  "code": 404,
                  "type": "not_found",
                  "message": "Not Found. Not found: 016006724ff53ade90ed948d03c00001",
                  "request_id": "015fee4431fd38c98640fbfb00000000",
                  "_key": "Authentication Error"
                }
              ],
              "_key": "404"
            }
          ],
          "path": "/v3/developer-certificates/{developerCertificateId}",
          "summary": "Fetch an existing developer certificate to connect to the bootstrap server.",
          "return_type": "developer_certificate",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "developer_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "signature",
            "created_at",
            "account_id",
            "name",
            "description",
            "developer_certificate",
            "developer_private_key",
            "security_file_content"
          ],
          "group_id": "Security",
          "operation_id": "getDeveloperCertificate",
          "unaggregated": true,
          "parameter_map": {
            "developerCertificateId": "id"
          },
          "foreign_key": {
            "entity": "developer_certificate",
            "group": "Security"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "get_developer_certificate_info"
        },
        {
          "description": "Retrieve a trusted certificate.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "cert_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "description": "Whether or not this certificate is a developer certificate.",
              "example": true,
              "type": "boolean",
              "readOnly": true,
              "getter_custom_method": "is_developer_certificate_getter",
              "_override": true,
              "api_fieldname": "is_developer_certificate",
              "entity_fieldname": "is_developer_certificate",
              "_key": "is_developer_certificate"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "certificate",
                  "certificate_fingerprint",
                  "etag",
                  "id",
                  "issuer",
                  "name",
                  "object",
                  "service",
                  "subject",
                  "validity"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
                    "description": "X509.v3 trusted certificate in PEM format.",
                    "api_fieldname": "certificate",
                    "entity_fieldname": "certificate",
                    "parameter_fieldname": "certificate",
                    "in": "body",
                    "required": false,
                    "_key": "certificate"
                  },
                  {
                    "type": "string",
                    "example": "a10fb2c8ba90e6de927bd0ae391dcc38f6115685de2d7024712af37ead0608f1",
                    "description": "A SHA-256 fingerprint of the certificate.",
                    "api_fieldname": "certificate_fingerprint",
                    "entity_fieldname": "certificate_fingerprint",
                    "_key": "certificate_fingerprint"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "x-nullable": true,
                    "example": "Certificate created by me.",
                    "description": "Human readable description of this certificate.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "parameter_fieldname": "description",
                    "in": "body",
                    "required": false,
                    "_key": "description"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "Device execution mode where 1 means a developer certificate.",
                    "api_fieldname": "device_execution_mode",
                    "entity_fieldname": "device_execution_mode",
                    "_key": "device_execution_mode"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
                    "x-deprecation": {
                      "issued_at": "2020-11-01T00:00:00+00:00",
                      "end_of_life_at": "2021-11-01T00:00:00+00:00",
                      "comment": "This field is deprecated, do not use it anymore.",
                      "links": []
                    },
                    "api_fieldname": "enrollment_mode",
                    "entity_fieldname": "enrollment_mode",
                    "parameter_fieldname": "enrollment_mode",
                    "in": "body",
                    "required": false,
                    "_key": "enrollment_mode"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "cert_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "CN=issuer",
                    "description": "Issuer of the certificate.",
                    "api_fieldname": "issuer",
                    "entity_fieldname": "issuer",
                    "_key": "issuer"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "My certificate",
                    "description": "Certificate name.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": false,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'trusted-cert'",
                    "enum": [
                      "trusted-cert"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "x-nullable": true,
                    "type": "string",
                    "example": "01619571dad80242ac12000600000000",
                    "description": "The ID of the owner.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner_id",
                    "entity_fieldname": "owner_id",
                    "_key": "owner_id"
                  },
                  {
                    "type": "string",
                    "description": "Service name where the certificate is used.",
                    "enum": [
                      "lwm2m",
                      "bootstrap"
                    ],
                    "api_fieldname": "service",
                    "entity_fieldname": "service",
                    "parameter_fieldname": "service",
                    "in": "body",
                    "required": false,
                    "enum_reference": "trusted_certificate_service_enum",
                    "_key": "service"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "Status of the certificate.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "enum_reference": "trusted_certificate_status_enum",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "example": "CN=subject",
                    "description": "Subject of the certificate.",
                    "api_fieldname": "subject",
                    "entity_fieldname": "subject",
                    "_key": "subject"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "This read-only flag indicates whether the certificate is valid or not.",
                    "readOnly": true,
                    "api_fieldname": "valid",
                    "entity_fieldname": "valid",
                    "_key": "valid"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2038-02-14T15:24:14Z",
                    "description": "Expiration time in UTC formatted as RFC3339.",
                    "api_fieldname": "validity",
                    "entity_fieldname": "validity",
                    "_key": "validity"
                  }
                ],
                "description": "Represents a trusted certificate in responses.",
                "foreign_key": {
                  "group": "Security",
                  "entity": "developer_certificate"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden, only available for administrators of commercial accounts.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or certificate with the given ID not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/trusted-certificates/{cert_id}",
          "summary": "Get a trusted certificate.",
          "return_type": "subtenant_trusted_certificate",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_trusted_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "signature",
            "created_at",
            "updated_at",
            "name",
            "description",
            "owner_id",
            "certificate",
            "service",
            "issuer",
            "subject",
            "validity",
            "status",
            "device_execution_mode",
            "enrollment_mode",
            "certificate_fingerprint",
            "valid"
          ],
          "group_id": "Security",
          "operation_id": "getAccountCertificate",
          "parameter_map": {
            "cert_id": "id"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update a trusted certificate.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id} \\\n -H 'Authorization: Bearer <access_key>' \\\n -H 'content-type: application/json' \\\n -d {\"description\": \"very important cert\"}\n ```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
              "description": "X509.v3 trusted certificate in PEM format.",
              "api_fieldname": "certificate",
              "entity_fieldname": "certificate",
              "parameter_fieldname": "certificate",
              "in": "body",
              "required": false,
              "_key": "certificate"
            },
            {
              "type": "string",
              "maxLength": 500,
              "x-nullable": true,
              "example": "Certificate created by me.",
              "description": "Human readable description of this certificate.",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "type": "boolean",
              "example": false,
              "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
              "x-deprecation": {
                "issued_at": "2020-11-01T00:00:00+00:00",
                "end_of_life_at": "2021-11-01T00:00:00+00:00",
                "comment": "This field is deprecated, do not use it anymore.",
                "links": []
              },
              "api_fieldname": "enrollment_mode",
              "entity_fieldname": "enrollment_mode",
              "parameter_fieldname": "enrollment_mode",
              "in": "body",
              "required": false,
              "_key": "enrollment_mode"
            },
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "cert_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "description": "Whether or not this certificate is a developer certificate.",
              "example": true,
              "type": "boolean",
              "readOnly": true,
              "getter_custom_method": "is_developer_certificate_getter",
              "_override": true,
              "api_fieldname": "is_developer_certificate",
              "entity_fieldname": "is_developer_certificate",
              "_key": "is_developer_certificate"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "My certificate",
              "description": "Certificate name.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            },
            {
              "type": "string",
              "description": "Service name where the certificate is used.",
              "enum": [
                "lwm2m",
                "bootstrap"
              ],
              "api_fieldname": "service",
              "entity_fieldname": "service",
              "parameter_fieldname": "service",
              "in": "body",
              "required": false,
              "enum_reference": "subtenant_trusted_certificate_service_enum",
              "_key": "service"
            },
            {
              "type": "string",
              "example": "ACTIVE",
              "description": "Status of the certificate.",
              "enum": [
                "ACTIVE",
                "INACTIVE"
              ],
              "api_fieldname": "status",
              "entity_fieldname": "status",
              "parameter_fieldname": "status",
              "in": "body",
              "required": false,
              "enum_reference": "subtenant_trusted_certificate_status_enum",
              "_key": "status"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "certificate",
                  "certificate_fingerprint",
                  "etag",
                  "id",
                  "issuer",
                  "name",
                  "object",
                  "service",
                  "subject",
                  "validity"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
                    "description": "X509.v3 trusted certificate in PEM format.",
                    "api_fieldname": "certificate",
                    "entity_fieldname": "certificate",
                    "parameter_fieldname": "certificate",
                    "in": "body",
                    "required": false,
                    "_key": "certificate"
                  },
                  {
                    "type": "string",
                    "example": "a10fb2c8ba90e6de927bd0ae391dcc38f6115685de2d7024712af37ead0608f1",
                    "description": "A SHA-256 fingerprint of the certificate.",
                    "api_fieldname": "certificate_fingerprint",
                    "entity_fieldname": "certificate_fingerprint",
                    "_key": "certificate_fingerprint"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "x-nullable": true,
                    "example": "Certificate created by me.",
                    "description": "Human readable description of this certificate.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "parameter_fieldname": "description",
                    "in": "body",
                    "required": false,
                    "_key": "description"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "Device execution mode where 1 means a developer certificate.",
                    "api_fieldname": "device_execution_mode",
                    "entity_fieldname": "device_execution_mode",
                    "_key": "device_execution_mode"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
                    "x-deprecation": {
                      "issued_at": "2020-11-01T00:00:00+00:00",
                      "end_of_life_at": "2021-11-01T00:00:00+00:00",
                      "comment": "This field is deprecated, do not use it anymore.",
                      "links": []
                    },
                    "api_fieldname": "enrollment_mode",
                    "entity_fieldname": "enrollment_mode",
                    "parameter_fieldname": "enrollment_mode",
                    "in": "body",
                    "required": false,
                    "_key": "enrollment_mode"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "cert_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "CN=issuer",
                    "description": "Issuer of the certificate.",
                    "api_fieldname": "issuer",
                    "entity_fieldname": "issuer",
                    "_key": "issuer"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "My certificate",
                    "description": "Certificate name.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "parameter_fieldname": "name",
                    "in": "body",
                    "required": false,
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'trusted-cert'",
                    "enum": [
                      "trusted-cert"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "x-nullable": true,
                    "type": "string",
                    "example": "01619571dad80242ac12000600000000",
                    "description": "The ID of the owner.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner_id",
                    "entity_fieldname": "owner_id",
                    "_key": "owner_id"
                  },
                  {
                    "type": "string",
                    "description": "Service name where the certificate is used.",
                    "enum": [
                      "lwm2m",
                      "bootstrap"
                    ],
                    "api_fieldname": "service",
                    "entity_fieldname": "service",
                    "parameter_fieldname": "service",
                    "in": "body",
                    "required": false,
                    "enum_reference": "trusted_certificate_service_enum",
                    "_key": "service"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "Status of the certificate.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "enum_reference": "trusted_certificate_status_enum",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "example": "CN=subject",
                    "description": "Subject of the certificate.",
                    "api_fieldname": "subject",
                    "entity_fieldname": "subject",
                    "_key": "subject"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "This read-only flag indicates whether the certificate is valid or not.",
                    "readOnly": true,
                    "api_fieldname": "valid",
                    "entity_fieldname": "valid",
                    "_key": "valid"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2038-02-14T15:24:14Z",
                    "description": "Expiration time in UTC formatted as RFC3339.",
                    "api_fieldname": "validity",
                    "entity_fieldname": "validity",
                    "_key": "validity"
                  }
                ],
                "description": "Represents a trusted certificate in responses.",
                "foreign_key": {
                  "group": "Security",
                  "entity": "developer_certificate"
                }
              },
              "_key": "200"
            },
            {
              "description": "Invalid certificate data, certificate validation failed, certificate already expired or certificate uses unsupported, or weak cipher.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden, only available for administrators of commercial accounts.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or certificate with the given ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/trusted-certificates/{cert_id}",
          "summary": "Update trusted certificate.",
          "return_type": "subtenant_trusted_certificate",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_trusted_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "signature",
            "created_at",
            "updated_at",
            "owner_id",
            "issuer",
            "subject",
            "validity",
            "device_execution_mode",
            "certificate_fingerprint",
            "valid"
          ],
          "group_id": "Security",
          "operation_id": "updateAccountCertificate",
          "parameter_map": {
            "cert_id": "id"
          },
          "notes": "Signature is not used by the SDK as it is a deprecated field.",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the account.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "account_id",
          "readOnly": false,
          "required": true,
          "_key": "account_id"
        },
        {
          "type": "string",
          "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
          "description": "X509.v3 trusted certificate in PEM format.",
          "api_fieldname": "certificate",
          "parameter_fieldname": "certificate",
          "in": "body",
          "required": true,
          "readOnly": false,
          "_key": "certificate"
        },
        {
          "type": "string",
          "example": "a10fb2c8ba90e6de927bd0ae391dcc38f6115685de2d7024712af37ead0608f1",
          "description": "A SHA-256 fingerprint of the certificate.",
          "api_fieldname": "certificate_fingerprint",
          "readOnly": true,
          "required": false,
          "_key": "certificate_fingerprint"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "maxLength": 500,
          "x-nullable": true,
          "example": "Certificate created by me.",
          "description": "Human readable description of this certificate.",
          "api_fieldname": "description",
          "parameter_fieldname": "description",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "description"
        },
        {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Device execution mode where 1 means a developer certificate.",
          "api_fieldname": "device_execution_mode",
          "readOnly": true,
          "required": false,
          "_key": "device_execution_mode"
        },
        {
          "type": "boolean",
          "example": false,
          "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
          "x-deprecation": {
            "issued_at": "2020-11-01T00:00:00+00:00",
            "end_of_life_at": "2021-11-01T00:00:00+00:00",
            "comment": "This field is deprecated, do not use it anymore.",
            "links": []
          },
          "api_fieldname": "enrollment_mode",
          "parameter_fieldname": "enrollment_mode",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "enrollment_mode"
        },
        {
          "type": "string",
          "example": "01619571d01d0242ac12000600000000",
          "description": "Entity ID.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "parameter_fieldname": "cert_id",
          "in": "path",
          "required": true,
          "readOnly": false,
          "_key": "id"
        },
        {
          "description": "Whether or not this certificate is a developer certificate.",
          "example": true,
          "type": "boolean",
          "readOnly": true,
          "getter_custom_method": "is_developer_certificate_getter",
          "_override": true,
          "api_fieldname": "is_developer_certificate",
          "required": false,
          "_key": "is_developer_certificate"
        },
        {
          "type": "string",
          "example": "CN=issuer",
          "description": "Issuer of the certificate.",
          "api_fieldname": "issuer",
          "readOnly": true,
          "required": false,
          "_key": "issuer"
        },
        {
          "type": "string",
          "maxLength": 100,
          "example": "My certificate",
          "description": "Certificate name.",
          "api_fieldname": "name",
          "parameter_fieldname": "name",
          "in": "body",
          "required": true,
          "readOnly": false,
          "_key": "name"
        },
        {
          "x-nullable": true,
          "type": "string",
          "example": "01619571dad80242ac12000600000000",
          "description": "The ID of the owner.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "owner_id",
          "readOnly": true,
          "required": false,
          "_key": "owner_id"
        },
        {
          "type": "string",
          "description": "Service name where the certificate is used.",
          "enum": [
            "lwm2m",
            "bootstrap"
          ],
          "api_fieldname": "service",
          "parameter_fieldname": "service",
          "in": "body",
          "required": true,
          "enum_reference": "subtenant_trusted_certificate_service_enum",
          "readOnly": false,
          "_key": "service"
        },
        {
          "type": "string",
          "example": "ACTIVE",
          "description": "Status of the certificate.",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "api_fieldname": "status",
          "parameter_fieldname": "status",
          "in": "body",
          "required": false,
          "enum_reference": "subtenant_trusted_certificate_status_enum",
          "readOnly": false,
          "_key": "status"
        },
        {
          "type": "string",
          "example": "CN=subject",
          "description": "Subject of the certificate.",
          "api_fieldname": "subject",
          "readOnly": true,
          "required": false,
          "_key": "subject"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update UTC time RFC3339.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        },
        {
          "type": "boolean",
          "example": true,
          "description": "This read-only flag indicates whether the certificate is valid or not.",
          "readOnly": true,
          "api_fieldname": "valid",
          "required": false,
          "_key": "valid"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2038-02-14T15:24:14Z",
          "description": "Expiration time in UTC formatted as RFC3339.",
          "api_fieldname": "validity",
          "readOnly": true,
          "required": false,
          "_key": "validity"
        }
      ],
      "field_renames": [],
      "tags": [
        "Tenant security and identity - certificates",
        "Security and identity - developer class certificates"
      ],
      "group_id": "Security",
      "_key": "subtenant_trusted_certificate"
    },
    {
      "swagger_models": [
        "GroupSummaryList",
        "UserInfoReq",
        "UserInfoResp",
        "UserUpdateReq"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Create or invite a new user to the account. Only email address is used; other attributes are set in the second step.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d {\"email\": \"myemail@company.com\"}\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "name": "action",
              "in": "query",
              "description": "Create or invite user.",
              "required": false,
              "type": "string",
              "default": "create",
              "entity_fieldname": "action",
              "api_fieldname": "action",
              "external_param": true,
              "parameter_fieldname": "action",
              "_key": "action"
            },
            {
              "type": "string",
              "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
              "description": "Address.",
              "x-nullable": true,
              "api_fieldname": "address",
              "entity_fieldname": "address",
              "parameter_fieldname": "address",
              "in": "body",
              "required": false,
              "_key": "address"
            },
            {
              "pattern": "^(?=.{3,254}$).+\\@.+",
              "type": "string",
              "example": "user@arm.com",
              "description": "The email address.",
              "api_fieldname": "email",
              "entity_fieldname": "email",
              "parameter_fieldname": "email",
              "in": "body",
              "required": false,
              "_key": "email"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "User Doe",
              "x-nullable": true,
              "description": "The full name of the user.",
              "api_fieldname": "full_name",
              "entity_fieldname": "full_name",
              "parameter_fieldname": "full_name",
              "in": "body",
              "required": false,
              "_key": "full_name"
            },
            {
              "type": "array",
              "description": "A list of IDs of the groups this user belongs to.",
              "items": {
                "type": "string"
              },
              "api_fieldname": "groups",
              "entity_fieldname": "groups",
              "parameter_fieldname": "groups",
              "in": "body",
              "required": false,
              "_key": "groups"
            },
            {
              "type": "boolean",
              "example": true,
              "description": "A flag indicating that the user has accepted General Terms and Conditions.",
              "api_fieldname": "is_gtc_accepted",
              "entity_fieldname": "is_gtc_accepted",
              "parameter_fieldname": "is_gtc_accepted",
              "in": "body",
              "required": false,
              "_key": "is_gtc_accepted"
            },
            {
              "type": "boolean",
              "example": true,
              "description": "A flag indicating that the user has consented to receive marketing information.",
              "api_fieldname": "is_marketing_accepted",
              "entity_fieldname": "is_marketing_accepted",
              "parameter_fieldname": "is_marketing_accepted",
              "in": "body",
              "required": false,
              "_key": "is_marketing_accepted"
            },
            {
              "type": "array",
              "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
              "x-nullable": true,
              "items": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "fed/user_007",
                    "description": "The ID of the user in the identity provider's service.",
                    "readOnly": true,
                    "api_fieldname": "foreign_id",
                    "entity_fieldname": "foreign_id",
                    "_key": "foreign_id"
                  },
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "ID of the identity provider.",
                    "readOnly": false,
                    "_override": true,
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "Pelion",
                    "readOnly": false,
                    "description": "Name of the identity provider.",
                    "_override": true,
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "example": "NATIVE",
                    "readOnly": true,
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "login_profile_type",
                    "_key": "type"
                  }
                ],
                "description": "Represents a user login profile in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "login_profile"
                }
              },
              "api_fieldname": "login_profiles",
              "entity_fieldname": "login_profiles",
              "parameter_fieldname": "login_profiles",
              "in": "body",
              "required": false,
              "_key": "login_profiles"
            },
            {
              "type": "string",
              "example": "PZf9eEUH43DAPE9ULINFeuj",
              "description": "The password when creating a new user. It will be generated when not present in the request.",
              "x-nullable": true,
              "api_fieldname": "password",
              "entity_fieldname": "password",
              "parameter_fieldname": "password",
              "in": "body",
              "required": false,
              "_key": "password"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "+44 (1223) 400 400",
              "description": "Phone number.",
              "x-nullable": true,
              "api_fieldname": "phone_number",
              "entity_fieldname": "phone_number",
              "parameter_fieldname": "phone_number",
              "in": "body",
              "required": false,
              "_key": "phone_number"
            },
            {
              "pattern": "[\\w\\-,._@+=]{4,30}",
              "type": "string",
              "example": "admin",
              "description": "A username.",
              "x-nullable": true,
              "api_fieldname": "username",
              "entity_fieldname": "username",
              "parameter_fieldname": "username",
              "in": "body",
              "required": false,
              "_key": "username"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "New entity created.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "email",
                  "etag",
                  "id",
                  "object",
                  "status"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "array",
                    "description": "List of active user sessions.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "ip_address",
                        "login_time",
                        "object",
                        "reference_token",
                        "user_agent"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The UUID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "api_fieldname": "account_id",
                          "entity_fieldname": "account_id",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "api_fieldname": "created_at",
                          "entity_fieldname": "created_at",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "example": "127.0.0.1",
                          "description": "IP address of the client.",
                          "api_fieldname": "ip_address",
                          "entity_fieldname": "ip_address",
                          "_key": "ip_address"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T17:52:07Z",
                          "description": "The login time of the user.",
                          "api_fieldname": "login_time",
                          "entity_fieldname": "login_time",
                          "_key": "login_time"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'user-session'",
                          "enum": [
                            "user-session"
                          ],
                          "api_fieldname": "object",
                          "entity_fieldname": "object",
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk",
                          "description": "The reference token.",
                          "api_fieldname": "reference_token",
                          "entity_fieldname": "reference_token",
                          "_key": "reference_token"
                        },
                        {
                          "type": "string",
                          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                          "description": "User Agent header from the login request.",
                          "api_fieldname": "user_agent",
                          "entity_fieldname": "user_agent",
                          "_key": "user_agent"
                        }
                      ],
                      "description": "Represents an active user session.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "active_session"
                      }
                    },
                    "api_fieldname": "active_sessions",
                    "entity_fieldname": "active_sessions",
                    "_key": "active_sessions"
                  },
                  {
                    "type": "string",
                    "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
                    "description": "Address.",
                    "x-nullable": true,
                    "api_fieldname": "address",
                    "entity_fieldname": "address",
                    "parameter_fieldname": "address",
                    "in": "body",
                    "required": false,
                    "_key": "address"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727683,
                    "description": "A timestamp of the user creation in the storage, in milliseconds.",
                    "api_fieldname": "creation_time",
                    "entity_fieldname": "creation_time",
                    "_key": "creation_time"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "description": "User's account-specific custom properties. The value is a string.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "custom_fields",
                    "entity_fieldname": "custom_fields",
                    "_key": "custom_fields"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "user@arm.com",
                    "description": "The email address.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "parameter_fieldname": "email",
                    "in": "body",
                    "required": false,
                    "_key": "email"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating whether the user's email address has been verified or not.",
                    "api_fieldname": "email_verified",
                    "entity_fieldname": "email_verified",
                    "_key": "email_verified"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "User Doe",
                    "x-nullable": true,
                    "description": "The full name of the user.",
                    "api_fieldname": "full_name",
                    "entity_fieldname": "full_name",
                    "parameter_fieldname": "full_name",
                    "in": "body",
                    "required": false,
                    "_key": "full_name"
                  },
                  {
                    "type": "array",
                    "description": "A list of IDs of the groups this user belongs to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "parameter_fieldname": "groups",
                    "in": "body",
                    "required": false,
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The ID of the user.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "user_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating that the user has accepted General Terms and Conditions.",
                    "api_fieldname": "is_gtc_accepted",
                    "entity_fieldname": "is_gtc_accepted",
                    "parameter_fieldname": "is_gtc_accepted",
                    "in": "body",
                    "required": false,
                    "_key": "is_gtc_accepted"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating that the user has consented to receive marketing information.",
                    "api_fieldname": "is_marketing_accepted",
                    "entity_fieldname": "is_marketing_accepted",
                    "parameter_fieldname": "is_marketing_accepted",
                    "in": "body",
                    "required": false,
                    "_key": "is_marketing_accepted"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
                    "api_fieldname": "is_totp_enabled",
                    "entity_fieldname": "is_totp_enabled",
                    "parameter_fieldname": "is_totp_enabled",
                    "in": "body",
                    "required": false,
                    "_key": "is_totp_enabled"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "A timestamp of the latest login of the user, in milliseconds.",
                    "api_fieldname": "last_login_time",
                    "entity_fieldname": "last_login_time",
                    "_key": "last_login_time"
                  },
                  {
                    "type": "array",
                    "maxItems": 5,
                    "description": "Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.",
                    "items": {
                      "type": "object",
                      "required": [
                        "date",
                        "ip_address",
                        "success",
                        "user_agent"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T17:52:07Z",
                          "description": "UTC time RFC3339 for this login attempt.",
                          "api_fieldname": "date",
                          "entity_fieldname": "date",
                          "_key": "date"
                        },
                        {
                          "type": "string",
                          "example": "127.0.0.1",
                          "description": "IP address of the client.",
                          "api_fieldname": "ip_address",
                          "entity_fieldname": "ip_address",
                          "_key": "ip_address"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "Flag indicating whether login attempt was successful or not.",
                          "api_fieldname": "success",
                          "entity_fieldname": "success",
                          "_key": "success"
                        },
                        {
                          "type": "string",
                          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                          "description": "User Agent header from the login request.",
                          "api_fieldname": "user_agent",
                          "entity_fieldname": "user_agent",
                          "_key": "user_agent"
                        }
                      ],
                      "description": "Represents an entry in login history.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_history"
                      }
                    },
                    "api_fieldname": "login_history",
                    "entity_fieldname": "login_history",
                    "_key": "login_history"
                  },
                  {
                    "type": "array",
                    "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                    "x-nullable": true,
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "fed/user_007",
                          "description": "The ID of the user in the identity provider's service.",
                          "readOnly": true,
                          "api_fieldname": "foreign_id",
                          "entity_fieldname": "foreign_id",
                          "_key": "foreign_id"
                        },
                        {
                          "type": "string",
                          "example": "01619571f3c00242ac12000600000000",
                          "description": "ID of the identity provider.",
                          "readOnly": false,
                          "_override": true,
                          "api_fieldname": "id",
                          "entity_fieldname": "id",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "Pelion",
                          "readOnly": false,
                          "description": "Name of the identity provider.",
                          "_override": true,
                          "api_fieldname": "name",
                          "entity_fieldname": "name",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Identity provider type.",
                          "example": "NATIVE",
                          "readOnly": true,
                          "enum": [
                            "NATIVE",
                            "MBED",
                            "SAML2",
                            "OIDC"
                          ],
                          "api_fieldname": "type",
                          "entity_fieldname": "login_profile_type",
                          "_key": "type"
                        }
                      ],
                      "description": "Represents a user login profile in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_profile"
                      }
                    },
                    "api_fieldname": "login_profiles",
                    "entity_fieldname": "login_profiles",
                    "parameter_fieldname": "login_profiles",
                    "in": "body",
                    "required": false,
                    "_key": "login_profiles"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `user`.",
                    "enum": [
                      "user"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "PZf9eEUH43DAPE9ULINFeuj",
                    "description": "The password when creating a new user. It will be generated when not present in the request.",
                    "x-nullable": true,
                    "api_fieldname": "password",
                    "entity_fieldname": "password",
                    "parameter_fieldname": "password",
                    "in": "body",
                    "required": false,
                    "_key": "password"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "A timestamp of the latest change of the user password, in milliseconds.",
                    "api_fieldname": "password_changed_time",
                    "entity_fieldname": "password_changed_time",
                    "_key": "password_changed_time"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "+44 (1223) 400 400",
                    "description": "Phone number.",
                    "x-nullable": true,
                    "api_fieldname": "phone_number",
                    "entity_fieldname": "phone_number",
                    "parameter_fieldname": "phone_number",
                    "in": "body",
                    "required": false,
                    "_key": "phone_number"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the user. ENROLLING state indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately. INACTIVE users are locked out and not permitted to use the system.",
                    "enum": [
                      "ENROLLING",
                      "INVITED",
                      "ACTIVE",
                      "RESET",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "_key": "status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "A list of scratch codes for the two-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "totp_scratch_codes",
                    "entity_fieldname": "totp_scratch_codes",
                    "_key": "totp_scratch_codes"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "pattern": "[\\w\\-,._@+=]{4,30}",
                    "type": "string",
                    "example": "admin",
                    "description": "A username.",
                    "x-nullable": true,
                    "api_fieldname": "username",
                    "entity_fieldname": "username",
                    "parameter_fieldname": "username",
                    "in": "body",
                    "required": false,
                    "_key": "username"
                  }
                ],
                "description": "Represents a user in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "user"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data, for example, an invalid email address.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            },
            {
              "description": "A user with the given username or email already exists.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/accounts/{account_id}/users",
          "summary": "Create a new user.",
          "return_type": "subtenant_user",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_user"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "updated_at",
            "status",
            "email_verified",
            "creation_time",
            "last_login_time",
            "password_changed_time",
            "login_history",
            "is_totp_enabled",
            "totp_scratch_codes",
            "custom_fields",
            "active_sessions"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "user_id": "id"
          },
          "operation_id": "createAccountUser",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete a user.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user to delete.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "user_id",
              "external_param": false,
              "parameter_fieldname": "user_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Bad request, for example, trying to delete an active user.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or user with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/users/{user_id}",
          "summary": "Delete a user.",
          "return_type": "subtenant_user",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_user"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "user_id": "id"
          },
          "operation_id": "deleteAccountUser",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve an array of policy groups associated with a user.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/groups \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "user_id",
              "external_param": false,
              "parameter_fieldname": "user_id",
              "_key": "id"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "subtenant_user_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "policy_groups",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "name": "after",
                    "in": "query",
                    "required": false,
                    "external_param": true,
                    "parameter_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "apikey_count",
                        "etag",
                        "id",
                        "name",
                        "object",
                        "user_count"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account this group belongs to.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 0,
                          "description": "The number of API keys in this group.",
                          "x-deprecation": {
                            "issued_at": "2020-08-01T00:00:00+00:00",
                            "end_of_life_at": "2021-08-01T00:00:00+00:00",
                            "comment": "This property is deprecated. See 'application_count' property.",
                            "links": []
                          },
                          "_key": "apikey_count"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 0,
                          "description": "The number of applications in this group.",
                          "_key": "application_count"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571dec00242ac12000600000000",
                          "description": "The ID of the group.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "Administrators",
                          "description": "The name of the group.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `group`.",
                          "enum": [
                            "group"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 1,
                          "description": "The number of users in this group.",
                          "_key": "user_count"
                        }
                      ],
                      "description": "This object contains basic information about groups.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "subtenant_policy_group"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000). Default 50.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "name": "limit",
                    "in": "query",
                    "required": false,
                    "default": 50,
                    "external_param": true,
                    "parameter_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "name": "order",
                    "in": "query",
                    "required": false,
                    "default": "ASC",
                    "external_param": true,
                    "parameter_fieldname": "order",
                    "enum_reference": "user_order_enum",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_policy_group"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or user with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/users/{user_id}/groups",
          "summary": "Get policy groups for a user.",
          "return_type": "paginated_response(subtenant_policy_group)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "subtenant_policy_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "user_id": "id"
          },
          "operation_id": "getGroupsOfAccountUser",
          "foreign_key": {
            "entity": "subtenant_policy_group"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "policy_groups"
        },
        {
          "description": "Retrieve user details.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571e2e89242ac12000600000000",
              "description": "The ID of the user.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "user_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "email",
                  "etag",
                  "id",
                  "object",
                  "status"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "array",
                    "description": "List of active user sessions.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "ip_address",
                        "login_time",
                        "object",
                        "reference_token",
                        "user_agent"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The UUID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "api_fieldname": "account_id",
                          "entity_fieldname": "account_id",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "api_fieldname": "created_at",
                          "entity_fieldname": "created_at",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "example": "127.0.0.1",
                          "description": "IP address of the client.",
                          "api_fieldname": "ip_address",
                          "entity_fieldname": "ip_address",
                          "_key": "ip_address"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T17:52:07Z",
                          "description": "The login time of the user.",
                          "api_fieldname": "login_time",
                          "entity_fieldname": "login_time",
                          "_key": "login_time"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'user-session'",
                          "enum": [
                            "user-session"
                          ],
                          "api_fieldname": "object",
                          "entity_fieldname": "object",
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk",
                          "description": "The reference token.",
                          "api_fieldname": "reference_token",
                          "entity_fieldname": "reference_token",
                          "_key": "reference_token"
                        },
                        {
                          "type": "string",
                          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                          "description": "User Agent header from the login request.",
                          "api_fieldname": "user_agent",
                          "entity_fieldname": "user_agent",
                          "_key": "user_agent"
                        }
                      ],
                      "description": "Represents an active user session.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "active_session"
                      }
                    },
                    "api_fieldname": "active_sessions",
                    "entity_fieldname": "active_sessions",
                    "_key": "active_sessions"
                  },
                  {
                    "type": "string",
                    "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
                    "description": "Address.",
                    "x-nullable": true,
                    "api_fieldname": "address",
                    "entity_fieldname": "address",
                    "parameter_fieldname": "address",
                    "in": "body",
                    "required": false,
                    "_key": "address"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727683,
                    "description": "A timestamp of the user creation in the storage, in milliseconds.",
                    "api_fieldname": "creation_time",
                    "entity_fieldname": "creation_time",
                    "_key": "creation_time"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "description": "User's account-specific custom properties. The value is a string.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "custom_fields",
                    "entity_fieldname": "custom_fields",
                    "_key": "custom_fields"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "user@arm.com",
                    "description": "The email address.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "parameter_fieldname": "email",
                    "in": "body",
                    "required": false,
                    "_key": "email"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating whether the user's email address has been verified or not.",
                    "api_fieldname": "email_verified",
                    "entity_fieldname": "email_verified",
                    "_key": "email_verified"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "User Doe",
                    "x-nullable": true,
                    "description": "The full name of the user.",
                    "api_fieldname": "full_name",
                    "entity_fieldname": "full_name",
                    "parameter_fieldname": "full_name",
                    "in": "body",
                    "required": false,
                    "_key": "full_name"
                  },
                  {
                    "type": "array",
                    "description": "A list of IDs of the groups this user belongs to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "parameter_fieldname": "groups",
                    "in": "body",
                    "required": false,
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The ID of the user.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "user_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating that the user has accepted General Terms and Conditions.",
                    "api_fieldname": "is_gtc_accepted",
                    "entity_fieldname": "is_gtc_accepted",
                    "parameter_fieldname": "is_gtc_accepted",
                    "in": "body",
                    "required": false,
                    "_key": "is_gtc_accepted"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating that the user has consented to receive marketing information.",
                    "api_fieldname": "is_marketing_accepted",
                    "entity_fieldname": "is_marketing_accepted",
                    "parameter_fieldname": "is_marketing_accepted",
                    "in": "body",
                    "required": false,
                    "_key": "is_marketing_accepted"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
                    "api_fieldname": "is_totp_enabled",
                    "entity_fieldname": "is_totp_enabled",
                    "parameter_fieldname": "is_totp_enabled",
                    "in": "body",
                    "required": false,
                    "_key": "is_totp_enabled"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "A timestamp of the latest login of the user, in milliseconds.",
                    "api_fieldname": "last_login_time",
                    "entity_fieldname": "last_login_time",
                    "_key": "last_login_time"
                  },
                  {
                    "type": "array",
                    "maxItems": 5,
                    "description": "Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.",
                    "items": {
                      "type": "object",
                      "required": [
                        "date",
                        "ip_address",
                        "success",
                        "user_agent"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T17:52:07Z",
                          "description": "UTC time RFC3339 for this login attempt.",
                          "api_fieldname": "date",
                          "entity_fieldname": "date",
                          "_key": "date"
                        },
                        {
                          "type": "string",
                          "example": "127.0.0.1",
                          "description": "IP address of the client.",
                          "api_fieldname": "ip_address",
                          "entity_fieldname": "ip_address",
                          "_key": "ip_address"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "Flag indicating whether login attempt was successful or not.",
                          "api_fieldname": "success",
                          "entity_fieldname": "success",
                          "_key": "success"
                        },
                        {
                          "type": "string",
                          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                          "description": "User Agent header from the login request.",
                          "api_fieldname": "user_agent",
                          "entity_fieldname": "user_agent",
                          "_key": "user_agent"
                        }
                      ],
                      "description": "Represents an entry in login history.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_history"
                      }
                    },
                    "api_fieldname": "login_history",
                    "entity_fieldname": "login_history",
                    "_key": "login_history"
                  },
                  {
                    "type": "array",
                    "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                    "x-nullable": true,
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "fed/user_007",
                          "description": "The ID of the user in the identity provider's service.",
                          "readOnly": true,
                          "api_fieldname": "foreign_id",
                          "entity_fieldname": "foreign_id",
                          "_key": "foreign_id"
                        },
                        {
                          "type": "string",
                          "example": "01619571f3c00242ac12000600000000",
                          "description": "ID of the identity provider.",
                          "readOnly": false,
                          "_override": true,
                          "api_fieldname": "id",
                          "entity_fieldname": "id",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "Pelion",
                          "readOnly": false,
                          "description": "Name of the identity provider.",
                          "_override": true,
                          "api_fieldname": "name",
                          "entity_fieldname": "name",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Identity provider type.",
                          "example": "NATIVE",
                          "readOnly": true,
                          "enum": [
                            "NATIVE",
                            "MBED",
                            "SAML2",
                            "OIDC"
                          ],
                          "api_fieldname": "type",
                          "entity_fieldname": "login_profile_type",
                          "_key": "type"
                        }
                      ],
                      "description": "Represents a user login profile in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_profile"
                      }
                    },
                    "api_fieldname": "login_profiles",
                    "entity_fieldname": "login_profiles",
                    "parameter_fieldname": "login_profiles",
                    "in": "body",
                    "required": false,
                    "_key": "login_profiles"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `user`.",
                    "enum": [
                      "user"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "PZf9eEUH43DAPE9ULINFeuj",
                    "description": "The password when creating a new user. It will be generated when not present in the request.",
                    "x-nullable": true,
                    "api_fieldname": "password",
                    "entity_fieldname": "password",
                    "parameter_fieldname": "password",
                    "in": "body",
                    "required": false,
                    "_key": "password"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "A timestamp of the latest change of the user password, in milliseconds.",
                    "api_fieldname": "password_changed_time",
                    "entity_fieldname": "password_changed_time",
                    "_key": "password_changed_time"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "+44 (1223) 400 400",
                    "description": "Phone number.",
                    "x-nullable": true,
                    "api_fieldname": "phone_number",
                    "entity_fieldname": "phone_number",
                    "parameter_fieldname": "phone_number",
                    "in": "body",
                    "required": false,
                    "_key": "phone_number"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the user. ENROLLING state indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately. INACTIVE users are locked out and not permitted to use the system.",
                    "enum": [
                      "ENROLLING",
                      "INVITED",
                      "ACTIVE",
                      "RESET",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "_key": "status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "A list of scratch codes for the two-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "totp_scratch_codes",
                    "entity_fieldname": "totp_scratch_codes",
                    "_key": "totp_scratch_codes"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "pattern": "[\\w\\-,._@+=]{4,30}",
                    "type": "string",
                    "example": "admin",
                    "description": "A username.",
                    "x-nullable": true,
                    "api_fieldname": "username",
                    "entity_fieldname": "username",
                    "parameter_fieldname": "username",
                    "in": "body",
                    "required": false,
                    "_key": "username"
                  }
                ],
                "description": "Represents a user in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "user"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or user with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/users/{user_id}",
          "summary": "Details of the user.",
          "return_type": "subtenant_user",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_user"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "status",
            "username",
            "password",
            "full_name",
            "email",
            "address",
            "phone_number",
            "groups",
            "is_gtc_accepted",
            "is_marketing_accepted",
            "email_verified",
            "creation_time",
            "last_login_time",
            "password_changed_time",
            "login_history",
            "is_totp_enabled",
            "login_profiles",
            "totp_scratch_codes",
            "custom_fields",
            "active_sessions"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "user_id": "id"
          },
          "operation_id": "getAccountUser",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update user details.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id} \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{\"username\": \"myusername\"}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
              "description": "Address.",
              "x-nullable": true,
              "api_fieldname": "address",
              "entity_fieldname": "address",
              "parameter_fieldname": "address",
              "in": "body",
              "required": false,
              "_key": "address"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "User Doe",
              "x-nullable": true,
              "description": "The full name of the user.",
              "api_fieldname": "full_name",
              "entity_fieldname": "full_name",
              "parameter_fieldname": "full_name",
              "in": "body",
              "required": false,
              "_key": "full_name"
            },
            {
              "type": "array",
              "description": "A list of IDs of the groups this user belongs to.",
              "items": {
                "type": "string"
              },
              "api_fieldname": "groups",
              "entity_fieldname": "groups",
              "parameter_fieldname": "groups",
              "in": "body",
              "required": false,
              "_key": "groups"
            },
            {
              "type": "string",
              "example": "01619571e2e89242ac12000600000000",
              "description": "The ID of the user.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "user_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "boolean",
              "example": true,
              "description": "A flag indicating that the user has accepted General Terms and Conditions.",
              "api_fieldname": "is_gtc_accepted",
              "entity_fieldname": "is_gtc_accepted",
              "parameter_fieldname": "is_gtc_accepted",
              "in": "body",
              "required": false,
              "_key": "is_gtc_accepted"
            },
            {
              "type": "boolean",
              "example": true,
              "description": "A flag indicating that the user has consented to receive marketing information.",
              "api_fieldname": "is_marketing_accepted",
              "entity_fieldname": "is_marketing_accepted",
              "parameter_fieldname": "is_marketing_accepted",
              "in": "body",
              "required": false,
              "_key": "is_marketing_accepted"
            },
            {
              "type": "boolean",
              "example": true,
              "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
              "api_fieldname": "is_totp_enabled",
              "entity_fieldname": "is_totp_enabled",
              "parameter_fieldname": "is_totp_enabled",
              "in": "body",
              "required": false,
              "_key": "is_totp_enabled"
            },
            {
              "type": "array",
              "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
              "x-nullable": true,
              "items": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "fed/user_007",
                    "description": "The ID of the user in the identity provider's service.",
                    "readOnly": true,
                    "api_fieldname": "foreign_id",
                    "entity_fieldname": "foreign_id",
                    "_key": "foreign_id"
                  },
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "ID of the identity provider.",
                    "readOnly": false,
                    "_override": true,
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "Pelion",
                    "readOnly": false,
                    "description": "Name of the identity provider.",
                    "_override": true,
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "example": "NATIVE",
                    "readOnly": true,
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "login_profile_type",
                    "_key": "type"
                  }
                ],
                "description": "Represents a user login profile in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "login_profile"
                }
              },
              "api_fieldname": "login_profiles",
              "entity_fieldname": "login_profiles",
              "parameter_fieldname": "login_profiles",
              "in": "body",
              "required": false,
              "_key": "login_profiles"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "+44 (1223) 400 400",
              "description": "Phone number.",
              "x-nullable": true,
              "api_fieldname": "phone_number",
              "entity_fieldname": "phone_number",
              "parameter_fieldname": "phone_number",
              "in": "body",
              "required": false,
              "_key": "phone_number"
            },
            {
              "pattern": "[\\w\\-,._@+=]{4,30}",
              "type": "string",
              "example": "admin",
              "description": "A username.",
              "x-nullable": true,
              "api_fieldname": "username",
              "entity_fieldname": "username",
              "parameter_fieldname": "username",
              "in": "body",
              "required": false,
              "_key": "username"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "email",
                  "etag",
                  "id",
                  "object",
                  "status"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "array",
                    "description": "List of active user sessions.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "ip_address",
                        "login_time",
                        "object",
                        "reference_token",
                        "user_agent"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The UUID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "api_fieldname": "account_id",
                          "entity_fieldname": "account_id",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "api_fieldname": "created_at",
                          "entity_fieldname": "created_at",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "example": "127.0.0.1",
                          "description": "IP address of the client.",
                          "api_fieldname": "ip_address",
                          "entity_fieldname": "ip_address",
                          "_key": "ip_address"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T17:52:07Z",
                          "description": "The login time of the user.",
                          "api_fieldname": "login_time",
                          "entity_fieldname": "login_time",
                          "_key": "login_time"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'user-session'",
                          "enum": [
                            "user-session"
                          ],
                          "api_fieldname": "object",
                          "entity_fieldname": "object",
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk",
                          "description": "The reference token.",
                          "api_fieldname": "reference_token",
                          "entity_fieldname": "reference_token",
                          "_key": "reference_token"
                        },
                        {
                          "type": "string",
                          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                          "description": "User Agent header from the login request.",
                          "api_fieldname": "user_agent",
                          "entity_fieldname": "user_agent",
                          "_key": "user_agent"
                        }
                      ],
                      "description": "Represents an active user session.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "active_session"
                      }
                    },
                    "api_fieldname": "active_sessions",
                    "entity_fieldname": "active_sessions",
                    "_key": "active_sessions"
                  },
                  {
                    "type": "string",
                    "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
                    "description": "Address.",
                    "x-nullable": true,
                    "api_fieldname": "address",
                    "entity_fieldname": "address",
                    "parameter_fieldname": "address",
                    "in": "body",
                    "required": false,
                    "_key": "address"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727683,
                    "description": "A timestamp of the user creation in the storage, in milliseconds.",
                    "api_fieldname": "creation_time",
                    "entity_fieldname": "creation_time",
                    "_key": "creation_time"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "description": "User's account-specific custom properties. The value is a string.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "custom_fields",
                    "entity_fieldname": "custom_fields",
                    "_key": "custom_fields"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "user@arm.com",
                    "description": "The email address.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "parameter_fieldname": "email",
                    "in": "body",
                    "required": false,
                    "_key": "email"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating whether the user's email address has been verified or not.",
                    "api_fieldname": "email_verified",
                    "entity_fieldname": "email_verified",
                    "_key": "email_verified"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "User Doe",
                    "x-nullable": true,
                    "description": "The full name of the user.",
                    "api_fieldname": "full_name",
                    "entity_fieldname": "full_name",
                    "parameter_fieldname": "full_name",
                    "in": "body",
                    "required": false,
                    "_key": "full_name"
                  },
                  {
                    "type": "array",
                    "description": "A list of IDs of the groups this user belongs to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "parameter_fieldname": "groups",
                    "in": "body",
                    "required": false,
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The ID of the user.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "user_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating that the user has accepted General Terms and Conditions.",
                    "api_fieldname": "is_gtc_accepted",
                    "entity_fieldname": "is_gtc_accepted",
                    "parameter_fieldname": "is_gtc_accepted",
                    "in": "body",
                    "required": false,
                    "_key": "is_gtc_accepted"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating that the user has consented to receive marketing information.",
                    "api_fieldname": "is_marketing_accepted",
                    "entity_fieldname": "is_marketing_accepted",
                    "parameter_fieldname": "is_marketing_accepted",
                    "in": "body",
                    "required": false,
                    "_key": "is_marketing_accepted"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
                    "api_fieldname": "is_totp_enabled",
                    "entity_fieldname": "is_totp_enabled",
                    "parameter_fieldname": "is_totp_enabled",
                    "in": "body",
                    "required": false,
                    "_key": "is_totp_enabled"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "A timestamp of the latest login of the user, in milliseconds.",
                    "api_fieldname": "last_login_time",
                    "entity_fieldname": "last_login_time",
                    "_key": "last_login_time"
                  },
                  {
                    "type": "array",
                    "maxItems": 5,
                    "description": "Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.",
                    "items": {
                      "type": "object",
                      "required": [
                        "date",
                        "ip_address",
                        "success",
                        "user_agent"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T17:52:07Z",
                          "description": "UTC time RFC3339 for this login attempt.",
                          "api_fieldname": "date",
                          "entity_fieldname": "date",
                          "_key": "date"
                        },
                        {
                          "type": "string",
                          "example": "127.0.0.1",
                          "description": "IP address of the client.",
                          "api_fieldname": "ip_address",
                          "entity_fieldname": "ip_address",
                          "_key": "ip_address"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "Flag indicating whether login attempt was successful or not.",
                          "api_fieldname": "success",
                          "entity_fieldname": "success",
                          "_key": "success"
                        },
                        {
                          "type": "string",
                          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                          "description": "User Agent header from the login request.",
                          "api_fieldname": "user_agent",
                          "entity_fieldname": "user_agent",
                          "_key": "user_agent"
                        }
                      ],
                      "description": "Represents an entry in login history.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_history"
                      }
                    },
                    "api_fieldname": "login_history",
                    "entity_fieldname": "login_history",
                    "_key": "login_history"
                  },
                  {
                    "type": "array",
                    "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                    "x-nullable": true,
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "fed/user_007",
                          "description": "The ID of the user in the identity provider's service.",
                          "readOnly": true,
                          "api_fieldname": "foreign_id",
                          "entity_fieldname": "foreign_id",
                          "_key": "foreign_id"
                        },
                        {
                          "type": "string",
                          "example": "01619571f3c00242ac12000600000000",
                          "description": "ID of the identity provider.",
                          "readOnly": false,
                          "_override": true,
                          "api_fieldname": "id",
                          "entity_fieldname": "id",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "Pelion",
                          "readOnly": false,
                          "description": "Name of the identity provider.",
                          "_override": true,
                          "api_fieldname": "name",
                          "entity_fieldname": "name",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Identity provider type.",
                          "example": "NATIVE",
                          "readOnly": true,
                          "enum": [
                            "NATIVE",
                            "MBED",
                            "SAML2",
                            "OIDC"
                          ],
                          "api_fieldname": "type",
                          "entity_fieldname": "login_profile_type",
                          "_key": "type"
                        }
                      ],
                      "description": "Represents a user login profile in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_profile"
                      }
                    },
                    "api_fieldname": "login_profiles",
                    "entity_fieldname": "login_profiles",
                    "parameter_fieldname": "login_profiles",
                    "in": "body",
                    "required": false,
                    "_key": "login_profiles"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `user`.",
                    "enum": [
                      "user"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "PZf9eEUH43DAPE9ULINFeuj",
                    "description": "The password when creating a new user. It will be generated when not present in the request.",
                    "x-nullable": true,
                    "api_fieldname": "password",
                    "entity_fieldname": "password",
                    "parameter_fieldname": "password",
                    "in": "body",
                    "required": false,
                    "_key": "password"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "A timestamp of the latest change of the user password, in milliseconds.",
                    "api_fieldname": "password_changed_time",
                    "entity_fieldname": "password_changed_time",
                    "_key": "password_changed_time"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "+44 (1223) 400 400",
                    "description": "Phone number.",
                    "x-nullable": true,
                    "api_fieldname": "phone_number",
                    "entity_fieldname": "phone_number",
                    "parameter_fieldname": "phone_number",
                    "in": "body",
                    "required": false,
                    "_key": "phone_number"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the user. ENROLLING state indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately. INACTIVE users are locked out and not permitted to use the system.",
                    "enum": [
                      "ENROLLING",
                      "INVITED",
                      "ACTIVE",
                      "RESET",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "parameter_fieldname": "status",
                    "in": "body",
                    "required": false,
                    "_key": "status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "A list of scratch codes for the two-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "totp_scratch_codes",
                    "entity_fieldname": "totp_scratch_codes",
                    "_key": "totp_scratch_codes"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "pattern": "[\\w\\-,._@+=]{4,30}",
                    "type": "string",
                    "example": "admin",
                    "description": "A username.",
                    "x-nullable": true,
                    "api_fieldname": "username",
                    "entity_fieldname": "username",
                    "parameter_fieldname": "username",
                    "in": "body",
                    "required": false,
                    "_key": "username"
                  }
                ],
                "description": "Represents a user in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "user"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data, for example, an invalid email address.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or user with the given ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            },
            {
              "description": "A user with the given username or email already exists.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/accounts/{account_id}/users/{user_id}",
          "summary": "Update user details.",
          "return_type": "subtenant_user",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_user"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "email",
            "two_factor_auth_enabled",
            "status",
            "created_at",
            "updated_at",
            "password",
            "email_verified",
            "creation_time",
            "last_login_time",
            "password_changed_time",
            "login_history",
            "totp_scratch_codes",
            "custom_fields",
            "active_sessions"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "user_id": "id"
          },
          "operation_id": "updateAccountUser",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        },
        {
          "description": "Validate user email.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/validate-email \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "user_id",
              "external_param": false,
              "parameter_fieldname": "user_id",
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "validate_email",
          "responses": [
            {
              "description": "Email validation successfully requested.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or user with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/users/{user_id}/validate-email",
          "summary": "Validate the user email.",
          "return_type": "subtenant_user",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_user"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "user_id": "id"
          },
          "operation_id": "validateAccountUserEmail",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "validate_email"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the account.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "account_id",
          "readOnly": false,
          "required": true,
          "_key": "account_id"
        },
        {
          "type": "array",
          "description": "List of active user sessions.",
          "items": {
            "type": "object",
            "required": [
              "account_id",
              "ip_address",
              "login_time",
              "object",
              "reference_token",
              "user_agent"
            ],
            "properties": [
              {
                "type": "string",
                "example": "01619571e2e90242ac12000600000000",
                "description": "The UUID of the account.",
                "pattern": "[a-f0-9]{32}",
                "api_fieldname": "account_id",
                "entity_fieldname": "account_id",
                "_key": "account_id"
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-13T09:35:20Z",
                "description": "Creation UTC time RFC3339.",
                "api_fieldname": "created_at",
                "entity_fieldname": "created_at",
                "_key": "created_at"
              },
              {
                "type": "string",
                "example": "127.0.0.1",
                "description": "IP address of the client.",
                "api_fieldname": "ip_address",
                "entity_fieldname": "ip_address",
                "_key": "ip_address"
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-14T17:52:07Z",
                "description": "The login time of the user.",
                "api_fieldname": "login_time",
                "entity_fieldname": "login_time",
                "_key": "login_time"
              },
              {
                "type": "string",
                "description": "Entity name: always 'user-session'",
                "enum": [
                  "user-session"
                ],
                "api_fieldname": "object",
                "entity_fieldname": "object",
                "_key": "object"
              },
              {
                "type": "string",
                "example": "rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk",
                "description": "The reference token.",
                "api_fieldname": "reference_token",
                "entity_fieldname": "reference_token",
                "_key": "reference_token"
              },
              {
                "type": "string",
                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                "description": "User Agent header from the login request.",
                "api_fieldname": "user_agent",
                "entity_fieldname": "user_agent",
                "_key": "user_agent"
              }
            ],
            "description": "Represents an active user session.",
            "foreign_key": {
              "group": "Accounts",
              "entity": "active_session"
            }
          },
          "api_fieldname": "active_sessions",
          "readOnly": true,
          "required": false,
          "_key": "active_sessions"
        },
        {
          "type": "string",
          "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
          "description": "Address.",
          "x-nullable": true,
          "api_fieldname": "address",
          "parameter_fieldname": "address",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "address"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "integer",
          "format": "int64",
          "example": 1518630727683,
          "description": "A timestamp of the user creation in the storage, in milliseconds.",
          "api_fieldname": "creation_time",
          "readOnly": true,
          "required": false,
          "_key": "creation_time"
        },
        {
          "type": "object",
          "x-nullable": true,
          "description": "User's account-specific custom properties. The value is a string.",
          "additionalProperties": {
            "type": "string"
          },
          "api_fieldname": "custom_fields",
          "readOnly": true,
          "required": false,
          "_key": "custom_fields"
        },
        {
          "pattern": "^(?=.{3,254}$).+\\@.+",
          "type": "string",
          "example": "user@arm.com",
          "description": "The email address.",
          "api_fieldname": "email",
          "parameter_fieldname": "email",
          "in": "body",
          "required": true,
          "readOnly": false,
          "_key": "email"
        },
        {
          "type": "boolean",
          "example": true,
          "description": "A flag indicating whether the user's email address has been verified or not.",
          "api_fieldname": "email_verified",
          "readOnly": true,
          "required": false,
          "_key": "email_verified"
        },
        {
          "type": "string",
          "maxLength": 100,
          "example": "User Doe",
          "x-nullable": true,
          "description": "The full name of the user.",
          "api_fieldname": "full_name",
          "parameter_fieldname": "full_name",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "full_name"
        },
        {
          "type": "array",
          "description": "A list of IDs of the groups this user belongs to.",
          "items": {
            "type": "string"
          },
          "api_fieldname": "groups",
          "parameter_fieldname": "groups",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "groups"
        },
        {
          "type": "string",
          "example": "01619571e2e89242ac12000600000000",
          "description": "The ID of the user.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "parameter_fieldname": "user_id",
          "in": "path",
          "required": true,
          "readOnly": false,
          "_key": "id"
        },
        {
          "type": "boolean",
          "example": true,
          "description": "A flag indicating that the user has accepted General Terms and Conditions.",
          "api_fieldname": "is_gtc_accepted",
          "parameter_fieldname": "is_gtc_accepted",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "is_gtc_accepted"
        },
        {
          "type": "boolean",
          "example": true,
          "description": "A flag indicating that the user has consented to receive marketing information.",
          "api_fieldname": "is_marketing_accepted",
          "parameter_fieldname": "is_marketing_accepted",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "is_marketing_accepted"
        },
        {
          "type": "boolean",
          "example": true,
          "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
          "api_fieldname": "is_totp_enabled",
          "parameter_fieldname": "is_totp_enabled",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "is_totp_enabled"
        },
        {
          "type": "integer",
          "format": "int64",
          "example": 1518630727688,
          "description": "A timestamp of the latest login of the user, in milliseconds.",
          "api_fieldname": "last_login_time",
          "readOnly": true,
          "required": false,
          "_key": "last_login_time"
        },
        {
          "type": "array",
          "maxItems": 5,
          "description": "Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.",
          "items": {
            "type": "object",
            "required": [
              "date",
              "ip_address",
              "success",
              "user_agent"
            ],
            "properties": [
              {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-14T17:52:07Z",
                "description": "UTC time RFC3339 for this login attempt.",
                "api_fieldname": "date",
                "entity_fieldname": "date",
                "_key": "date"
              },
              {
                "type": "string",
                "example": "127.0.0.1",
                "description": "IP address of the client.",
                "api_fieldname": "ip_address",
                "entity_fieldname": "ip_address",
                "_key": "ip_address"
              },
              {
                "type": "boolean",
                "example": true,
                "description": "Flag indicating whether login attempt was successful or not.",
                "api_fieldname": "success",
                "entity_fieldname": "success",
                "_key": "success"
              },
              {
                "type": "string",
                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                "description": "User Agent header from the login request.",
                "api_fieldname": "user_agent",
                "entity_fieldname": "user_agent",
                "_key": "user_agent"
              }
            ],
            "description": "Represents an entry in login history.",
            "foreign_key": {
              "group": "Accounts",
              "entity": "login_history"
            }
          },
          "api_fieldname": "login_history",
          "readOnly": true,
          "required": false,
          "_key": "login_history"
        },
        {
          "type": "array",
          "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
          "x-nullable": true,
          "items": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": [
              {
                "type": "string",
                "example": "fed/user_007",
                "description": "The ID of the user in the identity provider's service.",
                "readOnly": true,
                "api_fieldname": "foreign_id",
                "entity_fieldname": "foreign_id",
                "_key": "foreign_id"
              },
              {
                "type": "string",
                "example": "01619571f3c00242ac12000600000000",
                "description": "ID of the identity provider.",
                "readOnly": false,
                "_override": true,
                "api_fieldname": "id",
                "entity_fieldname": "id",
                "_key": "id"
              },
              {
                "type": "string",
                "example": "Pelion",
                "readOnly": false,
                "description": "Name of the identity provider.",
                "_override": true,
                "api_fieldname": "name",
                "entity_fieldname": "name",
                "_key": "name"
              },
              {
                "type": "string",
                "description": "Identity provider type.",
                "example": "NATIVE",
                "readOnly": true,
                "enum": [
                  "NATIVE",
                  "MBED",
                  "SAML2",
                  "OIDC"
                ],
                "api_fieldname": "type",
                "entity_fieldname": "login_profile_type",
                "_key": "type"
              }
            ],
            "description": "Represents a user login profile in Device Management.",
            "foreign_key": {
              "group": "Accounts",
              "entity": "login_profile"
            }
          },
          "api_fieldname": "login_profiles",
          "parameter_fieldname": "login_profiles",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "login_profiles"
        },
        {
          "type": "string",
          "example": "PZf9eEUH43DAPE9ULINFeuj",
          "description": "The password when creating a new user. It will be generated when not present in the request.",
          "x-nullable": true,
          "api_fieldname": "password",
          "parameter_fieldname": "password",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "password"
        },
        {
          "type": "integer",
          "format": "int64",
          "example": 1518630727688,
          "description": "A timestamp of the latest change of the user password, in milliseconds.",
          "api_fieldname": "password_changed_time",
          "readOnly": true,
          "required": false,
          "_key": "password_changed_time"
        },
        {
          "type": "string",
          "maxLength": 100,
          "example": "+44 (1223) 400 400",
          "description": "Phone number.",
          "x-nullable": true,
          "api_fieldname": "phone_number",
          "parameter_fieldname": "phone_number",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "phone_number"
        },
        {
          "type": "string",
          "example": "ACTIVE",
          "description": "The status of the user. ENROLLING state indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately. INACTIVE users are locked out and not permitted to use the system.",
          "enum": [
            "ENROLLING",
            "INVITED",
            "ACTIVE",
            "RESET",
            "INACTIVE"
          ],
          "api_fieldname": "status",
          "parameter_fieldname": "status",
          "in": "body",
          "required": false,
          "readOnly": false,
          "enum_reference": "subtenant_user_status_enum",
          "_key": "status"
        },
        {
          "type": "array",
          "x-nullable": true,
          "description": "A list of scratch codes for the two-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.",
          "items": {
            "type": "string"
          },
          "api_fieldname": "totp_scratch_codes",
          "readOnly": true,
          "required": false,
          "_key": "totp_scratch_codes"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update UTC time RFC3339.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        },
        {
          "pattern": "[\\w\\-,._@+=]{4,30}",
          "type": "string",
          "example": "admin",
          "description": "A username.",
          "x-nullable": true,
          "api_fieldname": "username",
          "parameter_fieldname": "username",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "username"
        }
      ],
      "field_renames": [],
      "tags": [
        "Tenant accounts - users"
      ],
      "group_id": "Accounts",
      "_key": "subtenant_user"
    },
    {
      "swagger_models": [
        "UserInvitationReq",
        "UserInvitationResp"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Invite a new or existing user.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/accouns/{account_id}/user-invitations \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d {\"email\": \"myemail@company.com\"}\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account the user is invited to.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "pattern": "^(?=.{3,254}$).+\\@.+",
              "type": "string",
              "example": "friend@arm.com",
              "description": "Email address of the invited user.",
              "api_fieldname": "email",
              "entity_fieldname": "email",
              "parameter_fieldname": "email",
              "in": "body",
              "required": true,
              "_key": "email"
            },
            {
              "type": "array",
              "description": "A list of IDs of the groups the user is invited to.",
              "items": {
                "type": "string"
              },
              "api_fieldname": "groups",
              "entity_fieldname": "groups",
              "parameter_fieldname": "groups",
              "in": "body",
              "required": false,
              "_key": "groups"
            },
            {
              "type": "array",
              "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
              "x-nullable": true,
              "items": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "fed/user_007",
                    "description": "The ID of the user in the identity provider's service.",
                    "readOnly": true,
                    "api_fieldname": "foreign_id",
                    "entity_fieldname": "foreign_id",
                    "_key": "foreign_id"
                  },
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "ID of the identity provider.",
                    "readOnly": false,
                    "_override": true,
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "Pelion",
                    "readOnly": false,
                    "description": "Name of the identity provider.",
                    "_override": true,
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "example": "NATIVE",
                    "readOnly": true,
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "login_profile_type",
                    "_key": "type"
                  }
                ],
                "description": "Represents a user login profile in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "login_profile"
                }
              },
              "api_fieldname": "login_profiles",
              "entity_fieldname": "login_profiles",
              "parameter_fieldname": "login_profiles",
              "in": "body",
              "required": false,
              "_key": "login_profiles"
            },
            {
              "type": "integer",
              "format": "int32",
              "maximum": 100,
              "minimum": 1,
              "default": 30,
              "description": "Specifies how many days the invitation will be valid for.",
              "name": "valid_for_days",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "valid_for_days",
              "api_fieldname": "valid_for_days",
              "external_param": true,
              "parameter_fieldname": "valid_for_days",
              "required": false,
              "_key": "valid_for_days"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "New entity created.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "email",
                  "etag",
                  "id",
                  "object",
                  "user_id"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the user is invited to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "friend@arm.com",
                    "description": "Email address of the invited user.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "parameter_fieldname": "email",
                    "in": "body",
                    "required": true,
                    "_key": "email"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Invitation expiration as UTC time RFC3339.",
                    "api_fieldname": "expiration",
                    "entity_fieldname": "expiration",
                    "_key": "expiration"
                  },
                  {
                    "type": "array",
                    "description": "A list of IDs of the groups the user is invited to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "parameter_fieldname": "groups",
                    "in": "body",
                    "required": false,
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The ID of the invitation.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "invitation_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "array",
                    "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                    "x-nullable": true,
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "fed/user_007",
                          "description": "The ID of the user in the identity provider's service.",
                          "readOnly": true,
                          "api_fieldname": "foreign_id",
                          "entity_fieldname": "foreign_id",
                          "_key": "foreign_id"
                        },
                        {
                          "type": "string",
                          "example": "01619571f3c00242ac12000600000000",
                          "description": "ID of the identity provider.",
                          "readOnly": false,
                          "_override": true,
                          "api_fieldname": "id",
                          "entity_fieldname": "id",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "Pelion",
                          "readOnly": false,
                          "description": "Name of the identity provider.",
                          "_override": true,
                          "api_fieldname": "name",
                          "entity_fieldname": "name",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Identity provider type.",
                          "example": "NATIVE",
                          "readOnly": true,
                          "enum": [
                            "NATIVE",
                            "MBED",
                            "SAML2",
                            "OIDC"
                          ],
                          "api_fieldname": "type",
                          "entity_fieldname": "login_profile_type",
                          "_key": "type"
                        }
                      ],
                      "description": "Represents a user login profile in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_profile"
                      }
                    },
                    "api_fieldname": "login_profiles",
                    "entity_fieldname": "login_profiles",
                    "parameter_fieldname": "login_profiles",
                    "in": "body",
                    "required": false,
                    "_key": "login_profiles"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'user-invitation'",
                    "enum": [
                      "user-invitation"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the invited user.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "user_id",
                    "entity_fieldname": "user_id",
                    "_key": "user_id"
                  }
                ],
                "description": "Represents an user invitation in responses.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "user_invitation"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data, for example, invalid email address.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/accounts/{account_id}/user-invitations",
          "summary": "Create a user invitation.",
          "return_type": "subtenant_user_invitation",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_user_invitation"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "updated_at",
            "user_id",
            "expiration"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "invitation_id": "id"
          },
          "operation_id": "createAccountInvitation",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete an active user invitation sent to a new or existing user.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations/{invitation_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "account_id",
              "in": "path",
              "description": "Account ID.",
              "required": true,
              "type": "string",
              "entity_fieldname": "account_id",
              "api_fieldname": "account_id",
              "external_param": false,
              "parameter_fieldname": "account_id",
              "_key": "account_id"
            },
            {
              "name": "invitation_id",
              "in": "path",
              "description": "The ID of the invitation to delete.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "invitation_id",
              "external_param": false,
              "parameter_fieldname": "invitation_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or invitation with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/user-invitations/{invitation_id}",
          "summary": "Delete a user invitation.",
          "return_type": "subtenant_user_invitation",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_user_invitation"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "invitation_id": "id"
          },
          "operation_id": "deleteAccountInvitation",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve details of an active user invitation sent for a new or existing user.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations/{invitation_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e90242ac12000600000000",
              "description": "The ID of the account the user is invited to.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "account_id",
              "entity_fieldname": "account_id",
              "parameter_fieldname": "account_id",
              "in": "path",
              "required": true,
              "_key": "account_id"
            },
            {
              "type": "string",
              "example": "01619571e2e89242ac12000600000000",
              "description": "The ID of the invitation.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "invitation_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "email",
                  "etag",
                  "id",
                  "object",
                  "user_id"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the user is invited to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "friend@arm.com",
                    "description": "Email address of the invited user.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "parameter_fieldname": "email",
                    "in": "body",
                    "required": true,
                    "_key": "email"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Invitation expiration as UTC time RFC3339.",
                    "api_fieldname": "expiration",
                    "entity_fieldname": "expiration",
                    "_key": "expiration"
                  },
                  {
                    "type": "array",
                    "description": "A list of IDs of the groups the user is invited to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "parameter_fieldname": "groups",
                    "in": "body",
                    "required": false,
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The ID of the invitation.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "parameter_fieldname": "invitation_id",
                    "in": "path",
                    "required": true,
                    "_key": "id"
                  },
                  {
                    "type": "array",
                    "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                    "x-nullable": true,
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "fed/user_007",
                          "description": "The ID of the user in the identity provider's service.",
                          "readOnly": true,
                          "api_fieldname": "foreign_id",
                          "entity_fieldname": "foreign_id",
                          "_key": "foreign_id"
                        },
                        {
                          "type": "string",
                          "example": "01619571f3c00242ac12000600000000",
                          "description": "ID of the identity provider.",
                          "readOnly": false,
                          "_override": true,
                          "api_fieldname": "id",
                          "entity_fieldname": "id",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "Pelion",
                          "readOnly": false,
                          "description": "Name of the identity provider.",
                          "_override": true,
                          "api_fieldname": "name",
                          "entity_fieldname": "name",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Identity provider type.",
                          "example": "NATIVE",
                          "readOnly": true,
                          "enum": [
                            "NATIVE",
                            "MBED",
                            "SAML2",
                            "OIDC"
                          ],
                          "api_fieldname": "type",
                          "entity_fieldname": "login_profile_type",
                          "_key": "type"
                        }
                      ],
                      "description": "Represents a user login profile in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_profile"
                      }
                    },
                    "api_fieldname": "login_profiles",
                    "entity_fieldname": "login_profiles",
                    "parameter_fieldname": "login_profiles",
                    "in": "body",
                    "required": false,
                    "_key": "login_profiles"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'user-invitation'",
                    "enum": [
                      "user-invitation"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the invited user.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "user_id",
                    "entity_fieldname": "user_id",
                    "_key": "user_id"
                  }
                ],
                "description": "Represents an user invitation in responses.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "user_invitation"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An account or invitation with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/accounts/{account_id}/user-invitations/{invitation_id}",
          "summary": "Details of a user invitation.",
          "return_type": "subtenant_user_invitation",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "subtenant_user_invitation"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "email",
            "user_id",
            "groups",
            "expiration",
            "login_profiles"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "invitation_id": "id"
          },
          "operation_id": "getAccountInvitation",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the account the user is invited to.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "account_id",
          "readOnly": false,
          "required": true,
          "_key": "account_id"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "pattern": "^(?=.{3,254}$).+\\@.+",
          "type": "string",
          "example": "friend@arm.com",
          "description": "Email address of the invited user.",
          "api_fieldname": "email",
          "parameter_fieldname": "email",
          "in": "body",
          "required": true,
          "readOnly": false,
          "_key": "email"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Invitation expiration as UTC time RFC3339.",
          "api_fieldname": "expiration",
          "readOnly": true,
          "required": false,
          "_key": "expiration"
        },
        {
          "type": "array",
          "description": "A list of IDs of the groups the user is invited to.",
          "items": {
            "type": "string"
          },
          "api_fieldname": "groups",
          "parameter_fieldname": "groups",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "groups"
        },
        {
          "type": "string",
          "example": "01619571e2e89242ac12000600000000",
          "description": "The ID of the invitation.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "parameter_fieldname": "invitation_id",
          "in": "path",
          "required": true,
          "readOnly": false,
          "_key": "id"
        },
        {
          "type": "array",
          "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
          "x-nullable": true,
          "items": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": [
              {
                "type": "string",
                "example": "fed/user_007",
                "description": "The ID of the user in the identity provider's service.",
                "readOnly": true,
                "api_fieldname": "foreign_id",
                "entity_fieldname": "foreign_id",
                "_key": "foreign_id"
              },
              {
                "type": "string",
                "example": "01619571f3c00242ac12000600000000",
                "description": "ID of the identity provider.",
                "readOnly": false,
                "_override": true,
                "api_fieldname": "id",
                "entity_fieldname": "id",
                "_key": "id"
              },
              {
                "type": "string",
                "example": "Pelion",
                "readOnly": false,
                "description": "Name of the identity provider.",
                "_override": true,
                "api_fieldname": "name",
                "entity_fieldname": "name",
                "_key": "name"
              },
              {
                "type": "string",
                "description": "Identity provider type.",
                "example": "NATIVE",
                "readOnly": true,
                "enum": [
                  "NATIVE",
                  "MBED",
                  "SAML2",
                  "OIDC"
                ],
                "api_fieldname": "type",
                "entity_fieldname": "login_profile_type",
                "_key": "type"
              }
            ],
            "description": "Represents a user login profile in Device Management.",
            "foreign_key": {
              "group": "Accounts",
              "entity": "login_profile"
            }
          },
          "api_fieldname": "login_profiles",
          "parameter_fieldname": "login_profiles",
          "in": "body",
          "required": false,
          "readOnly": false,
          "_key": "login_profiles"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update UTC time RFC3339.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        },
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the invited user.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "user_id",
          "readOnly": true,
          "required": false,
          "_key": "user_id"
        }
      ],
      "field_renames": [],
      "tags": [
        "Tenant accounts - user invitations"
      ],
      "group_id": "Accounts",
      "_key": "subtenant_user_invitation"
    },
    {
      "swagger_models": [
        "DeveloperCertificateResponseData",
        "TrustedCertificateReq",
        "TrustedCertificateResp",
        "TrustedCertificateRespList",
        "TrustedCertificateUpdateReq"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Upload new trusted certificates.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/trusted-certificates \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d {\"name\": \"myCert1\", \"description\": \"very important cert\", \"certificate\": \"certificate_data\", \"service\": \"lwm2m\"}\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
              "description": "X509.v3 trusted certificate in PEM format.",
              "api_fieldname": "certificate",
              "entity_fieldname": "certificate",
              "parameter_fieldname": "certificate",
              "in": "body",
              "required": false,
              "_key": "certificate"
            },
            {
              "type": "string",
              "maxLength": 500,
              "x-nullable": true,
              "example": "Certificate created by me.",
              "description": "Human readable description of this certificate.",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "type": "boolean",
              "example": false,
              "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
              "x-deprecation": {
                "issued_at": "2020-11-01T00:00:00+00:00",
                "end_of_life_at": "2021-11-01T00:00:00+00:00",
                "comment": "This field is deprecated, do not use it anymore.",
                "links": []
              },
              "api_fieldname": "enrollment_mode",
              "entity_fieldname": "enrollment_mode",
              "parameter_fieldname": "enrollment_mode",
              "in": "body",
              "required": false,
              "_key": "enrollment_mode"
            },
            {
              "description": "Whether or not this certificate is a developer certificate.",
              "example": true,
              "type": "boolean",
              "readOnly": true,
              "getter_custom_method": "is_developer_certificate_getter",
              "_override": true,
              "api_fieldname": "is_developer_certificate",
              "entity_fieldname": "is_developer_certificate",
              "_key": "is_developer_certificate"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "My certificate",
              "description": "Certificate name.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            },
            {
              "type": "string",
              "description": "Service name where the certificate is used.",
              "enum": [
                "lwm2m",
                "bootstrap"
              ],
              "api_fieldname": "service",
              "entity_fieldname": "service",
              "parameter_fieldname": "service",
              "in": "body",
              "required": false,
              "enum_reference": "trusted_certificate_service_enum",
              "_key": "service"
            },
            {
              "type": "string",
              "example": "ACTIVE",
              "description": "Status of the certificate.",
              "enum": [
                "ACTIVE",
                "INACTIVE"
              ],
              "api_fieldname": "status",
              "entity_fieldname": "status",
              "parameter_fieldname": "status",
              "in": "body",
              "required": false,
              "enum_reference": "trusted_certificate_status_enum",
              "_key": "status"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "New entity created.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "certificate",
                  "certificate_fingerprint",
                  "etag",
                  "id",
                  "issuer",
                  "name",
                  "object",
                  "service",
                  "subject",
                  "validity"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
                    "description": "X509.v3 trusted certificate in PEM format.",
                    "api_fieldname": "certificate",
                    "entity_fieldname": "certificate",
                    "_key": "certificate"
                  },
                  {
                    "type": "string",
                    "example": "a10fb2c8ba90e6de927bd0ae391dcc38f6115685de2d7024712af37ead0608f1",
                    "description": "A SHA-256 fingerprint of the certificate.",
                    "api_fieldname": "certificate_fingerprint",
                    "entity_fieldname": "certificate_fingerprint",
                    "_key": "certificate_fingerprint"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "x-nullable": true,
                    "example": "Certificate created by me.",
                    "description": "Human readable description of this certificate.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "Device execution mode where 1 means a developer certificate.",
                    "api_fieldname": "device_execution_mode",
                    "entity_fieldname": "device_execution_mode",
                    "_key": "device_execution_mode"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
                    "x-deprecation": {
                      "issued_at": "2020-11-01T00:00:00+00:00",
                      "end_of_life_at": "2021-11-01T00:00:00+00:00",
                      "comment": "This field is deprecated, do not use it anymore.",
                      "links": []
                    },
                    "api_fieldname": "enrollment_mode",
                    "entity_fieldname": "enrollment_mode",
                    "_key": "enrollment_mode"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "CN=issuer",
                    "description": "Issuer of the certificate.",
                    "api_fieldname": "issuer",
                    "entity_fieldname": "issuer",
                    "_key": "issuer"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "My certificate",
                    "description": "Certificate name.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'trusted-cert'",
                    "enum": [
                      "trusted-cert"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "x-nullable": true,
                    "type": "string",
                    "example": "01619571dad80242ac12000600000000",
                    "description": "The ID of the owner.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner_id",
                    "entity_fieldname": "owner_id",
                    "_key": "owner_id"
                  },
                  {
                    "type": "string",
                    "description": "Service name where the certificate is used.",
                    "enum": [
                      "lwm2m",
                      "bootstrap"
                    ],
                    "api_fieldname": "service",
                    "entity_fieldname": "service",
                    "_key": "service"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "Status of the certificate.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "example": "CN=subject",
                    "description": "Subject of the certificate.",
                    "api_fieldname": "subject",
                    "entity_fieldname": "subject",
                    "_key": "subject"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "This read-only flag indicates whether the certificate is valid or not.",
                    "readOnly": true,
                    "api_fieldname": "valid",
                    "entity_fieldname": "valid",
                    "_key": "valid"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2038-02-14T15:24:14Z",
                    "description": "Expiration time in UTC formatted as RFC3339.",
                    "api_fieldname": "validity",
                    "entity_fieldname": "validity",
                    "_key": "validity"
                  }
                ],
                "description": "Represents a trusted certificate in responses.",
                "foreign_key": {
                  "group": "Security",
                  "entity": "developer_certificate"
                }
              },
              "_key": "201"
            },
            {
              "description": "Invalid certificate data, or missing or invalid parameters.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden, only available for administrators of commercial accounts.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "Certificate with the given name or subject already exists.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/trusted-certificates",
          "summary": "Upload a new trusted certificate.",
          "return_type": "trusted_certificate",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "trusted_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "signature",
            "id",
            "created_at",
            "updated_at",
            "account_id",
            "owner_id",
            "issuer",
            "subject",
            "validity",
            "device_execution_mode",
            "certificate_fingerprint",
            "valid"
          ],
          "group_id": "Security",
          "operation_id": "addCertificate",
          "notes": "Signature is not used by the SDK as it is a deprecated field.",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete a trusted certificate.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "cert_id",
              "in": "path",
              "description": "The ID of the trusted certificate to delete.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "cert_id",
              "external_param": false,
              "parameter_fieldname": "cert_id",
              "_key": "id"
            },
            {
              "description": "Whether or not this certificate is a developer certificate.",
              "example": true,
              "type": "boolean",
              "readOnly": true,
              "getter_custom_method": "is_developer_certificate_getter",
              "_override": true,
              "api_fieldname": "is_developer_certificate",
              "entity_fieldname": "is_developer_certificate",
              "_key": "is_developer_certificate"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A certificate not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/trusted-certificates/{cert_id}",
          "summary": "Delete a trusted certificate by ID.",
          "return_type": "trusted_certificate",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "trusted_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "signature"
          ],
          "group_id": "Security",
          "operation_id": "deleteCertificate",
          "parameter_map": {
            "cert_id": "id"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Return an existing developer certificate (a certificate that can be flashed to multiple devices to connect to bootstrap server).\n\n**Example:**\n```\ncurl -X GET http://api.us-east-1.mbedcloud.com/v3/developer-certificates/THE_CERTIFICATE_ID \\\n-H \"Authorization: Bearer <access_key>\"\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "ID that uniquely identifies the developer certificate.",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "developerCertificateId",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "description": "Whether or not this certificate is a developer certificate.",
              "example": true,
              "type": "boolean",
              "readOnly": true,
              "getter_custom_method": "is_developer_certificate_getter",
              "_override": true,
              "api_fieldname": "is_developer_certificate",
              "entity_fieldname": "is_developer_certificate",
              "_key": "is_developer_certificate"
            }
          ],
          "method": "get",
          "mode": "get_developer_certificate_info",
          "responses": [
            {
              "description": "Developer certificate returned successfully.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "Account to which the developer certificate belongs.",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "description": "Description for the developer certificate.",
                    "x-nullable": true,
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "string",
                    "description": "PEM-format X.509 developer certificate.",
                    "api_fieldname": "developer_certificate",
                    "entity_fieldname": "developer_certificate",
                    "_key": "developer_certificate"
                  },
                  {
                    "type": "string",
                    "description": "PEM-format developer private key associated with the certificate.",
                    "api_fieldname": "developer_private_key",
                    "entity_fieldname": "developer_private_key",
                    "_key": "developer_private_key"
                  },
                  {
                    "type": "string",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "description": "ID that uniquely identifies the developer certificate.",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "description": "Name of the developer certificate.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `trusted-cert`.",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "Content of the `security.c` file flashed to the device to provide security credentials.",
                    "api_fieldname": "security_file_content",
                    "entity_fieldname": "security_file_content",
                    "_key": "security_file_content"
                  }
                ],
                "foreign_key": {
                  "group": "Security",
                  "entity": "developer_certificate"
                }
              },
              "examples": [
                {
                  "object": "trusted-cert",
                  "id": "015fee4431fd38c98640fbfb00000000",
                  "etag": "1",
                  "created_at": "2017-12-11T14:22:20.009Z",
                  "account_id": "015fee5d9b3538c98640fbfb00000000",
                  "name": "DeveloperCertificate",
                  "description": "This certificate applies to multiple developer devices.",
                  "developer_certificate": "-----BEGIN CERTIFICATE-----\\nMIICcDCCAhWgAwIBAgIRAPSBbBtLUE/ekQcWE4GzPJEwCgYIKoZIzj0EAwIwgaIx\\nCzAJBgNVBAYTAkdCMRcwFQYDVQQIDA5DYW1icmlkZ2VzaGlyZTESMBAGA1UEBwwJ\\nQ2FtYnJpZGdlMRAwDgYDVQQKDAdBUk0gTHRkMSkwJwYDVQQLDCAwMTU4NDNlMzJl\\nYzkwMjQyMGEwMTVlMDcwMDAwMDAwMDEpMCcGA1UEAwwgMDE2MWRiYmNkZDY2MGE1\\nODBhMDEwYzM0MDNjMDAwMDAwHhcNMTgwMjI4MDkyNzIzWhcNMjgwMjI4MDkyNzIz\\nWjCBojELMAkGA1UEBhMCR0IxFzAVBgNVBAgMDkNhbWJyaWRnZXNoaXJlMRIwEAYD\\nVQQHDAlDYW1icmlkZ2UxEDAOBgNVBAoMB0FSTSBMdGQxKTAnBgNVBAsMIDAxNTg0\\nM2UzMmVjOTAyNDIwYTAxNWUwNzAwMDAwMDAwMSkwJwYDVQQDDCAwMTYxZGJiY2Rk\\nNjYwYTU4MGEwMTBjMzQwM2MwMDAwMDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\\nBEScLDbOXvOb903AYlI9ow8E4hbLSHJPt5E2BO4Q4bHOpuWH2Oh6P+CDPte9pAv3\\nE6g90Xk/ZcZpQ+xBO6qci/ajKjAoMBIGCSsGAQQBoCCBSQQFAgNAAJEwEgYDVR0T\\nAQH/BAgwBgEB/wIBADAKBggqhkjOPQQDAgNJADBGAiEAsi9zSK8Njl22GoEHrsg8\\nQlwFnrkkP9d6FyLFtmqndt4CIQCmVHwisYNcCkqD2SWctG1xQHo0HZePAQW8PstM\\nzhNupQ==\\n-----END CERTIFICATE-----\\n",
                  "developer_private_key": "-----BEGIN PRIVATE KEY-----\\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgeKc97aC1Z4aniXVG\\njNSvvXw2hl6zwACYIs88OKQx61GgCgYIKoZIzj0DAQehRANCAAREnCw2zl7zm/dN\\nwGJSPaMPBOIWy0hyT7eRNgTuEOGxzqblh9joej/ggz7XvaQL9xOoPdF5P2XGaUPs\\nQTuqnIv2\\n-----END PRIVATE KEY-----\\n",
                  "security_file_content": "/*\\n * Copyright (c) 2017 ARM Limited. All rights reserved.\\n * SPDX-License-Identifier: Apache-2.0\\n * Licensed under the Apache License, Version 2.0 (the License); you may\\n * not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an AS IS BASIS, WITHOUT\\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n#ifndef __MBED_CLOUD_DEV_CREDENTIALS_H__\\n#define __MBED_CLOUD_DEV_CREDENTIALS_H__\\n\\n#include <inttypes.h>\\n\\nconst char MBED_CLOUD_DEV_BOOTSTRAP_ENDPOINT_NAME[] = \\\"0161dbbcdd660a580a010c3403c00000\\\";\\nconst char MBED_CLOUD_DEV_ACCOUNT_ID[] = \\\"015843e32ec902420a015e0700000000\\\";\\nconst char MBED_CLOUD_DEV_BOOTSTRAP_SERVER_URI[] = \\\"coaps://coap.us-east-1.mbedcloud.com:5684?aid=015843e32ec902420a015e0700000000\\\";\\n\\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE[] = \\n{ 0x30, 0x82, 0x02, 0x70, 0x30, 0x82, 0x02, 0x15,\\n 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x11, 0x00,\\n 0xf4, 0x81, 0x6c, 0x1b, 0x4b, 0x50, 0x4f, 0xde,\\n 0x91, 0x07, 0x16, 0x13, 0x81, 0xb3, 0x3c, 0x91,\\n 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,\\n 0x3d, 0x04, 0x03, 0x02, 0x30, 0x81, 0xa2, 0x31,\\n 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,\\n 0x13, 0x02, 0x47, 0x42, 0x31, 0x17, 0x30, 0x15,\\n 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0e, 0x43,\\n 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,\\n 0x73, 0x68, 0x69, 0x72, 0x65, 0x31, 0x12, 0x30,\\n 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09,\\n 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67,\\n 0x65, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55,\\n 0x04, 0x0a, 0x0c, 0x07, 0x41, 0x52, 0x4d, 0x20,\\n 0x4c, 0x74, 0x64, 0x31, 0x29, 0x30, 0x27, 0x06,\\n 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x20, 0x30, 0x31,\\n 0x35, 0x38, 0x34, 0x33, 0x65, 0x33, 0x32, 0x65,\\n 0x63, 0x39, 0x30, 0x32, 0x34, 0x32, 0x30, 0x61,\\n 0x30, 0x31, 0x35, 0x65, 0x30, 0x37, 0x30, 0x30,\\n 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x29,\\n 0x30, 0x27, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c,\\n 0x20, 0x30, 0x31, 0x36, 0x31, 0x64, 0x62, 0x62,\\n 0x63, 0x64, 0x64, 0x36, 0x36, 0x30, 0x61, 0x35,\\n 0x38, 0x30, 0x61, 0x30, 0x31, 0x30, 0x63, 0x33,\\n 0x34, 0x30, 0x33, 0x63, 0x30, 0x30, 0x30, 0x30,\\n 0x30, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x30,\\n 0x32, 0x32, 0x38, 0x30, 0x39, 0x32, 0x37, 0x32,\\n 0x33, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x30, 0x32,\\n 0x32, 0x38, 0x30, 0x39, 0x32, 0x37, 0x32, 0x33,\\n 0x5a, 0x30, 0x81, 0xa2, 0x31, 0x0b, 0x30, 0x09,\\n 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x47,\\n 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55,\\n 0x04, 0x08, 0x0c, 0x0e, 0x43, 0x61, 0x6d, 0x62,\\n 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x68, 0x69,\\n 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03,\\n 0x55, 0x04, 0x07, 0x0c, 0x09, 0x43, 0x61, 0x6d,\\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x31, 0x10,\\n 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c,\\n 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74, 0x64,\\n 0x31, 0x29, 0x30, 0x27, 0x06, 0x03, 0x55, 0x04,\\n 0x0b, 0x0c, 0x20, 0x30, 0x31, 0x35, 0x38, 0x34,\\n 0x33, 0x65, 0x33, 0x32, 0x65, 0x63, 0x39, 0x30,\\n 0x32, 0x34, 0x32, 0x30, 0x61, 0x30, 0x31, 0x35,\\n 0x65, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30,\\n 0x30, 0x30, 0x30, 0x31, 0x29, 0x30, 0x27, 0x06,\\n 0x03, 0x55, 0x04, 0x03, 0x0c, 0x20, 0x30, 0x31,\\n 0x36, 0x31, 0x64, 0x62, 0x62, 0x63, 0x64, 0x64,\\n 0x36, 0x36, 0x30, 0x61, 0x35, 0x38, 0x30, 0x61,\\n 0x30, 0x31, 0x30, 0x63, 0x33, 0x34, 0x30, 0x33,\\n 0x63, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x59,\\n 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,\\n 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48,\\n 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00,\\n 0x04, 0x44, 0x9c, 0x2c, 0x36, 0xce, 0x5e, 0xf3,\\n 0x9b, 0xf7, 0x4d, 0xc0, 0x62, 0x52, 0x3d, 0xa3,\\n 0x0f, 0x04, 0xe2, 0x16, 0xcb, 0x48, 0x72, 0x4f,\\n 0xb7, 0x91, 0x36, 0x04, 0xee, 0x10, 0xe1, 0xb1,\\n 0xce, 0xa6, 0xe5, 0x87, 0xd8, 0xe8, 0x7a, 0x3f,\\n 0xe0, 0x83, 0x3e, 0xd7, 0xbd, 0xa4, 0x0b, 0xf7,\\n 0x13, 0xa8, 0x3d, 0xd1, 0x79, 0x3f, 0x65, 0xc6,\\n 0x69, 0x43, 0xec, 0x41, 0x3b, 0xaa, 0x9c, 0x8b,\\n 0xf6, 0xa3, 0x2a, 0x30, 0x28, 0x30, 0x12, 0x06,\\n 0x09, 0x2b, 0x06, 0x01, 0x04, 0x01, 0xa0, 0x20,\\n 0x81, 0x49, 0x04, 0x05, 0x02, 0x03, 0x40, 0x00,\\n 0x91, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13,\\n 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01,\\n 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x0a, 0x06,\\n 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,\\n 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,\\n 0x00, 0xb2, 0x2f, 0x73, 0x48, 0xaf, 0x0d, 0x8e,\\n 0x5d, 0xb6, 0x1a, 0x81, 0x07, 0xae, 0xc8, 0x3c,\\n 0x42, 0x5c, 0x05, 0x9e, 0xb9, 0x24, 0x3f, 0xd7,\\n 0x7a, 0x17, 0x22, 0xc5, 0xb6, 0x6a, 0xa7, 0x76,\\n 0xde, 0x02, 0x21, 0x00, 0xa6, 0x54, 0x7c, 0x22,\\n 0xb1, 0x83, 0x5c, 0x0a, 0x4a, 0x83, 0xd9, 0x25,\\n 0x9c, 0xb4, 0x6d, 0x71, 0x40, 0x7a, 0x34, 0x1d,\\n 0x97, 0x8f, 0x01, 0x05, 0xbc, 0x3e, 0xcb, 0x4c,\\n 0xce, 0x13, 0x6e, 0xa5 };\\n\\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE[] = \\n{ 0x30, 0x82, 0x02, 0x35, 0x30, 0x82, 0x01, 0xdb,\\n 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x5c,\\n 0x27, 0xa5, 0x76, 0x7d, 0x58, 0x85, 0x8a, 0x43,\\n 0x91, 0xa0, 0x61, 0xab, 0xcf, 0xa6, 0x59, 0x30,\\n 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x04, 0x03, 0x02, 0x30, 0x72, 0x31, 0x0b, 0x30,\\n 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02,\\n 0x47, 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,\\n 0x55, 0x04, 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d,\\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x68,\\n 0x69, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06,\\n 0x03, 0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x61,\\n 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x31,\\n 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a,\\n 0x13, 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74,\\n 0x64, 0x31, 0x24, 0x30, 0x22, 0x06, 0x03, 0x55,\\n 0x04, 0x03, 0x13, 0x1b, 0x41, 0x52, 0x4d, 0x20,\\n 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,\\n 0x69, 0x6f, 0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x74,\\n 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x41, 0x30,\\n 0x20, 0x17, 0x0d, 0x31, 0x37, 0x30, 0x35, 0x31,\\n 0x35, 0x31, 0x39, 0x34, 0x39, 0x31, 0x31, 0x5a,\\n 0x18, 0x0f, 0x32, 0x30, 0x35, 0x32, 0x30, 0x35,\\n 0x31, 0x35, 0x31, 0x39, 0x35, 0x39, 0x31, 0x30,\\n 0x5a, 0x30, 0x72, 0x31, 0x0b, 0x30, 0x09, 0x06,\\n 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x47, 0x42,\\n 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04,\\n 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d, 0x62, 0x72,\\n 0x69, 0x64, 0x67, 0x65, 0x73, 0x68, 0x69, 0x72,\\n 0x65, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55,\\n 0x04, 0x07, 0x13, 0x09, 0x43, 0x61, 0x6d, 0x62,\\n 0x72, 0x69, 0x64, 0x67, 0x65, 0x31, 0x10, 0x30,\\n 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x07,\\n 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74, 0x64, 0x31,\\n 0x24, 0x30, 0x22, 0x06, 0x03, 0x55, 0x04, 0x03,\\n 0x13, 0x1b, 0x41, 0x52, 0x4d, 0x20, 0x49, 0x6e,\\n 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,\\n 0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,\\n 0x72, 0x61, 0x70, 0x43, 0x41, 0x30, 0x59, 0x30,\\n 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,\\n 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04,\\n 0x8b, 0x7c, 0x86, 0xc3, 0x88, 0x54, 0xe6, 0x5f,\\n 0xe0, 0x57, 0x4e, 0x1b, 0xac, 0x29, 0x82, 0xea,\\n 0x7d, 0x91, 0x00, 0x63, 0xa7, 0x4a, 0x05, 0xbc,\\n 0x54, 0xc5, 0x71, 0x27, 0x33, 0x19, 0x1b, 0x2e,\\n 0xfa, 0x41, 0xf8, 0x7a, 0x9a, 0x0c, 0x5d, 0xfc,\\n 0xb3, 0x37, 0x01, 0x99, 0xc5, 0xc9, 0xbe, 0x78,\\n 0x5b, 0x1d, 0xec, 0xb0, 0x1a, 0x1d, 0xdc, 0xe4,\\n 0x6f, 0x57, 0x04, 0xf4, 0x3a, 0xca, 0xa8, 0xd2,\\n 0xa3, 0x51, 0x30, 0x4f, 0x30, 0x0b, 0x06, 0x03,\\n 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x01,\\n 0x86, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13,\\n 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01,\\n 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,\\n 0x0e, 0x04, 0x16, 0x04, 0x14, 0x13, 0xef, 0x69,\\n 0xfa, 0x62, 0x3f, 0x00, 0x86, 0xf4, 0x05, 0xb8,\\n 0xb6, 0xe6, 0xb2, 0xf1, 0xdb, 0x69, 0x10, 0xb4,\\n 0x39, 0x30, 0x10, 0x06, 0x09, 0x2b, 0x06, 0x01,\\n 0x04, 0x01, 0x82, 0x37, 0x15, 0x01, 0x04, 0x03,\\n 0x02, 0x01, 0x00, 0x30, 0x0a, 0x06, 0x08, 0x2a,\\n 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03,\\n 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xa2,\\n 0x50, 0x88, 0x0f, 0x55, 0xe8, 0x26, 0x49, 0xe6,\\n 0xf5, 0x71, 0x86, 0x33, 0x29, 0x05, 0x4c, 0xf9,\\n 0xfd, 0x1f, 0x14, 0x98, 0x92, 0x85, 0xd9, 0x5c,\\n 0x48, 0x02, 0x9e, 0xc2, 0x79, 0xa8, 0x59, 0x02,\\n 0x20, 0x3e, 0xfe, 0x3c, 0xa0, 0xbf, 0xd3, 0x0f,\\n 0x15, 0x83, 0x56, 0xbc, 0xf2, 0xfa, 0x16, 0x26,\\n 0x7a, 0xc1, 0x68, 0xaa, 0xbc, 0x91, 0x3c, 0x69,\\n 0x44, 0x36, 0xf9, 0x74, 0xa1, 0x82, 0x76, 0x7a,\\n 0x6e };\\n\\nconst uint8_t MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE[] = \\n{ 0x30, 0x82, 0x02, 0x30, 0x30, 0x82, 0x01, 0xd5,\\n 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x26,\\n 0xf9, 0x08, 0xfc, 0xf1, 0xc0, 0x46, 0xa4, 0x4a,\\n 0x4d, 0x2c, 0xf1, 0x94, 0x27, 0xf9, 0x1f, 0x30,\\n 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x04, 0x03, 0x02, 0x30, 0x6f, 0x31, 0x0b, 0x30,\\n 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02,\\n 0x47, 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,\\n 0x55, 0x04, 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d,\\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x68,\\n 0x69, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06,\\n 0x03, 0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x61,\\n 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x31,\\n 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a,\\n 0x13, 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74,\\n 0x64, 0x31, 0x21, 0x30, 0x1f, 0x06, 0x03, 0x55,\\n 0x04, 0x03, 0x13, 0x18, 0x41, 0x52, 0x4d, 0x20,\\n 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,\\n 0x69, 0x6f, 0x6e, 0x20, 0x4c, 0x57, 0x4d, 0x32,\\n 0x4d, 0x20, 0x43, 0x41, 0x30, 0x20, 0x17, 0x0d,\\n 0x31, 0x37, 0x30, 0x32, 0x31, 0x32, 0x31, 0x30,\\n 0x33, 0x37, 0x35, 0x32, 0x5a, 0x18, 0x0f, 0x32,\\n 0x30, 0x35, 0x32, 0x30, 0x32, 0x31, 0x32, 0x31,\\n 0x30, 0x34, 0x37, 0x35, 0x32, 0x5a, 0x30, 0x6f,\\n 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,\\n 0x06, 0x13, 0x02, 0x47, 0x42, 0x31, 0x17, 0x30,\\n 0x15, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0e,\\n 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67,\\n 0x65, 0x73, 0x68, 0x69, 0x72, 0x65, 0x31, 0x12,\\n 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13,\\n 0x09, 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64,\\n 0x67, 0x65, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03,\\n 0x55, 0x04, 0x0a, 0x13, 0x07, 0x41, 0x52, 0x4d,\\n 0x20, 0x4c, 0x74, 0x64, 0x31, 0x21, 0x30, 0x1f,\\n 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x18, 0x41,\\n 0x52, 0x4d, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67,\\n 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4c,\\n 0x57, 0x4d, 0x32, 0x4d, 0x20, 0x43, 0x41, 0x30,\\n 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48,\\n 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86,\\n 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42,\\n 0x00, 0x04, 0xba, 0xea, 0x80, 0x01, 0x2d, 0xf0,\\n 0xe1, 0xb6, 0xc5, 0x5f, 0xf9, 0x76, 0x84, 0x31,\\n 0xa9, 0x29, 0xa1, 0xc7, 0xa8, 0xfd, 0xa0, 0xad,\\n 0xd9, 0x94, 0xe7, 0xec, 0x5a, 0x33, 0xa1, 0x2c,\\n 0x8e, 0x36, 0x43, 0x9b, 0x18, 0xdf, 0xce, 0x71,\\n 0x14, 0x24, 0xb1, 0xfb, 0x16, 0x34, 0x0e, 0x43,\\n 0xfc, 0x23, 0x77, 0xd4, 0x13, 0xd7, 0x11, 0xaa,\\n 0x39, 0x60, 0xab, 0xa2, 0xdf, 0x24, 0xb3, 0xeb,\\n 0xa0, 0xc5, 0xa3, 0x51, 0x30, 0x4f, 0x30, 0x0b,\\n 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03,\\n 0x02, 0x01, 0x86, 0x30, 0x0f, 0x06, 0x03, 0x55,\\n 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,\\n 0x03, 0x01, 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03,\\n 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x7b,\\n 0xa1, 0xa5, 0x94, 0xa5, 0xe5, 0x8f, 0x95, 0x5d,\\n 0xd4, 0xce, 0xdc, 0x0f, 0x8a, 0xbe, 0xad, 0x9a,\\n 0x6b, 0x66, 0x3e, 0x30, 0x10, 0x06, 0x09, 0x2b,\\n 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x01,\\n 0x04, 0x03, 0x02, 0x01, 0x00, 0x30, 0x0a, 0x06,\\n 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,\\n 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,\\n 0x00, 0xd2, 0x06, 0x28, 0xc5, 0x31, 0x3a, 0x11,\\n 0x8d, 0xb6, 0xcb, 0x2b, 0x3f, 0xdd, 0x2a, 0x9a,\\n 0x13, 0x30, 0x52, 0x77, 0xaa, 0xda, 0xda, 0xcb,\\n 0xce, 0xb9, 0x5c, 0xe4, 0x32, 0x1c, 0x02, 0xfa,\\n 0x30, 0x02, 0x21, 0x00, 0xb3, 0x82, 0x24, 0xa2,\\n 0xb1, 0x67, 0x6b, 0x69, 0x07, 0x0e, 0xcd, 0x77,\\n 0x74, 0x99, 0x06, 0x9c, 0x59, 0xb2, 0x00, 0xc0,\\n 0xb3, 0xbb, 0x37, 0x5b, 0xc0, 0x1b, 0xfb, 0xd9,\\n 0x70, 0x98, 0xb9, 0x1e };\\n\\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY[] = \\n{ 0x30, 0x81, 0x93, 0x02, 0x01, 0x00, 0x30, 0x13,\\n 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,\\n 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\\n 0x03, 0x01, 0x07, 0x04, 0x79, 0x30, 0x77, 0x02,\\n 0x01, 0x01, 0x04, 0x20, 0x78, 0xa7, 0x3d, 0xed,\\n 0xa0, 0xb5, 0x67, 0x86, 0xa7, 0x89, 0x75, 0x46,\\n 0x8c, 0xd4, 0xaf, 0xbd, 0x7c, 0x36, 0x86, 0x5e,\\n 0xb3, 0xc0, 0x00, 0x98, 0x22, 0xcf, 0x3c, 0x38,\\n 0xa4, 0x31, 0xeb, 0x51, 0xa0, 0x0a, 0x06, 0x08,\\n 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07,\\n 0xa1, 0x44, 0x03, 0x42, 0x00, 0x04, 0x44, 0x9c,\\n 0x2c, 0x36, 0xce, 0x5e, 0xf3, 0x9b, 0xf7, 0x4d,\\n 0xc0, 0x62, 0x52, 0x3d, 0xa3, 0x0f, 0x04, 0xe2,\\n 0x16, 0xcb, 0x48, 0x72, 0x4f, 0xb7, 0x91, 0x36,\\n 0x04, 0xee, 0x10, 0xe1, 0xb1, 0xce, 0xa6, 0xe5,\\n 0x87, 0xd8, 0xe8, 0x7a, 0x3f, 0xe0, 0x83, 0x3e,\\n 0xd7, 0xbd, 0xa4, 0x0b, 0xf7, 0x13, 0xa8, 0x3d,\\n 0xd1, 0x79, 0x3f, 0x65, 0xc6, 0x69, 0x43, 0xec,\\n 0x41, 0x3b, 0xaa, 0x9c, 0x8b, 0xf6 };\\n\\nconst char MBED_CLOUD_DEV_MANUFACTURER[] = \\\"dev_manufacturer\\\";\\n\\nconst char MBED_CLOUD_DEV_MODEL_NUMBER[] = \\\"dev_model_num\\\";\\n\\nconst char MBED_CLOUD_DEV_SERIAL_NUMBER[] = \\\"0\\\";\\n\\nconst char MBED_CLOUD_DEV_DEVICE_TYPE[] = \\\"dev_device_type\\\";\\n\\nconst char MBED_CLOUD_DEV_HARDWARE_VERSION[] = \\\"dev_hardware_version\\\";\\n\\nconst uint32_t MBED_CLOUD_DEV_MEMORY_TOTAL_KB = 0;\\n\\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE);\\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE);\\nconst uint32_t MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE);\\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY);\\n\\n#endif //__MBED_CLOUD_DEV_CREDENTIALS_H__\\n",
                  "_key": "Success"
                }
              ],
              "_key": "200"
            },
            {
              "description": "Bad request.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Invalid access token.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "examples": [
                {
                  "object": "error",
                  "code": 401,
                  "type": "invalid_auth",
                  "message": "Invalid access token.",
                  "request_id": "015fee4431fd38c98640fbfb00000000",
                  "_key": "Authentication Error"
                }
              ],
              "_key": "401"
            },
            {
              "description": "Developer certificate not found with given ID.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "examples": [
                {
                  "object": "error",
                  "code": 404,
                  "type": "not_found",
                  "message": "Not Found. Not found: 016006724ff53ade90ed948d03c00001",
                  "request_id": "015fee4431fd38c98640fbfb00000000",
                  "_key": "Authentication Error"
                }
              ],
              "_key": "404"
            }
          ],
          "path": "/v3/developer-certificates/{developerCertificateId}",
          "summary": "Fetch an existing developer certificate to connect to the bootstrap server.",
          "return_type": "developer_certificate",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "developer_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "signature",
            "created_at",
            "account_id",
            "name",
            "description",
            "developer_certificate",
            "developer_private_key",
            "security_file_content"
          ],
          "group_id": "Security",
          "operation_id": "getDeveloperCertificate",
          "unaggregated": true,
          "parameter_map": {
            "developerCertificateId": "id"
          },
          "foreign_key": {
            "entity": "developer_certificate",
            "group": "Security"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "get_developer_certificate_info"
        },
        {
          "description": "Retrieve an array of trusted certificates.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/trusted-certificates \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "description": "Whether or not this certificate is a developer certificate.",
              "example": true,
              "type": "boolean",
              "readOnly": true,
              "getter_custom_method": "is_developer_certificate_getter",
              "_override": true,
              "api_fieldname": "is_developer_certificate",
              "entity_fieldname": "is_developer_certificate",
              "_key": "is_developer_certificate"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "trusted_certificate_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "certificate",
                        "certificate_fingerprint",
                        "etag",
                        "id",
                        "issuer",
                        "name",
                        "object",
                        "service",
                        "subject",
                        "validity"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
                          "description": "X509.v3 trusted certificate in PEM format.",
                          "_key": "certificate"
                        },
                        {
                          "type": "string",
                          "example": "a10fb2c8ba90e6de927bd0ae391dcc38f6115685de2d7024712af37ead0608f1",
                          "description": "A SHA-256 fingerprint of the certificate.",
                          "_key": "certificate_fingerprint"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "maxLength": 500,
                          "x-nullable": true,
                          "example": "Certificate created by me.",
                          "description": "Human readable description of this certificate.",
                          "_key": "description"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 1,
                          "description": "Device execution mode where 1 means a developer certificate.",
                          "_key": "device_execution_mode"
                        },
                        {
                          "type": "boolean",
                          "example": false,
                          "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
                          "x-deprecation": {
                            "issued_at": "2020-11-01T00:00:00+00:00",
                            "end_of_life_at": "2021-11-01T00:00:00+00:00",
                            "comment": "This field is deprecated, do not use it anymore.",
                            "links": []
                          },
                          "_key": "enrollment_mode"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571d01d0242ac12000600000000",
                          "description": "Entity ID.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "CN=issuer",
                          "description": "Issuer of the certificate.",
                          "_key": "issuer"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "My certificate",
                          "description": "Certificate name.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'trusted-cert'",
                          "enum": [
                            "trusted-cert"
                          ],
                          "_key": "object"
                        },
                        {
                          "x-nullable": true,
                          "type": "string",
                          "example": "01619571dad80242ac12000600000000",
                          "description": "The ID of the owner.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "owner_id"
                        },
                        {
                          "type": "string",
                          "description": "Service name where the certificate is used.",
                          "enum": [
                            "lwm2m",
                            "bootstrap"
                          ],
                          "_key": "service"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "Status of the certificate.",
                          "enum": [
                            "ACTIVE",
                            "INACTIVE"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "string",
                          "example": "CN=subject",
                          "description": "Subject of the certificate.",
                          "_key": "subject"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "This read-only flag indicates whether the certificate is valid or not.",
                          "readOnly": true,
                          "_key": "valid"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2038-02-14T15:24:14Z",
                          "description": "Expiration time in UTC formatted as RFC3339.",
                          "_key": "validity"
                        }
                      ],
                      "description": "Represents a trusted certificate in responses.",
                      "foreign_key": {
                        "group": "Security",
                        "entity": "trusted_certificate"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000), or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Security",
                  "entity": "trusted_certificate"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/trusted-certificates",
          "summary": "Get all trusted certificates.",
          "return_type": "paginated_response(trusted_certificate)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "trusted_certificate"
          },
          "x_filter": {
            "name": [
              "eq"
            ],
            "service": [
              "eq"
            ],
            "expire": [
              "eq"
            ],
            "device_execution_mode": [
              "eq",
              "neq"
            ],
            "owner": [
              "eq"
            ],
            "enrollment_mode": [
              "eq"
            ],
            "status": [
              "eq"
            ],
            "issuer": [
              "like"
            ],
            "subject": [
              "like"
            ],
            "certificate_fingerprint": [
              "eq"
            ],
            "valid": [
              "eq"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "signature",
            "total_count",
            "has_more",
            "data",
            "name__eq",
            "service__eq",
            "expire__eq",
            "device_execution_mode__eq",
            "device_execution_mode__neq",
            "owner__eq",
            "enrollment_mode__eq",
            "status__eq",
            "issuer__like",
            "subject__like",
            "certificate_fingerprint__eq",
            "valid__eq"
          ],
          "foreign_key_priority": "self",
          "group_id": "Security",
          "operation_id": "getAllCertificates",
          "pagination": true,
          "foreign_key": {
            "group": "Security",
            "entity": "trusted_certificate"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve a trusted certificate.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "cert_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "description": "Whether or not this certificate is a developer certificate.",
              "example": true,
              "type": "boolean",
              "readOnly": true,
              "getter_custom_method": "is_developer_certificate_getter",
              "_override": true,
              "api_fieldname": "is_developer_certificate",
              "entity_fieldname": "is_developer_certificate",
              "_key": "is_developer_certificate"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "certificate",
                  "certificate_fingerprint",
                  "etag",
                  "id",
                  "issuer",
                  "name",
                  "object",
                  "service",
                  "subject",
                  "validity"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
                    "description": "X509.v3 trusted certificate in PEM format.",
                    "api_fieldname": "certificate",
                    "entity_fieldname": "certificate",
                    "_key": "certificate"
                  },
                  {
                    "type": "string",
                    "example": "a10fb2c8ba90e6de927bd0ae391dcc38f6115685de2d7024712af37ead0608f1",
                    "description": "A SHA-256 fingerprint of the certificate.",
                    "api_fieldname": "certificate_fingerprint",
                    "entity_fieldname": "certificate_fingerprint",
                    "_key": "certificate_fingerprint"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "x-nullable": true,
                    "example": "Certificate created by me.",
                    "description": "Human readable description of this certificate.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "Device execution mode where 1 means a developer certificate.",
                    "api_fieldname": "device_execution_mode",
                    "entity_fieldname": "device_execution_mode",
                    "_key": "device_execution_mode"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
                    "x-deprecation": {
                      "issued_at": "2020-11-01T00:00:00+00:00",
                      "end_of_life_at": "2021-11-01T00:00:00+00:00",
                      "comment": "This field is deprecated, do not use it anymore.",
                      "links": []
                    },
                    "api_fieldname": "enrollment_mode",
                    "entity_fieldname": "enrollment_mode",
                    "_key": "enrollment_mode"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "CN=issuer",
                    "description": "Issuer of the certificate.",
                    "api_fieldname": "issuer",
                    "entity_fieldname": "issuer",
                    "_key": "issuer"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "My certificate",
                    "description": "Certificate name.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'trusted-cert'",
                    "enum": [
                      "trusted-cert"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "x-nullable": true,
                    "type": "string",
                    "example": "01619571dad80242ac12000600000000",
                    "description": "The ID of the owner.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner_id",
                    "entity_fieldname": "owner_id",
                    "_key": "owner_id"
                  },
                  {
                    "type": "string",
                    "description": "Service name where the certificate is used.",
                    "enum": [
                      "lwm2m",
                      "bootstrap"
                    ],
                    "api_fieldname": "service",
                    "entity_fieldname": "service",
                    "_key": "service"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "Status of the certificate.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "example": "CN=subject",
                    "description": "Subject of the certificate.",
                    "api_fieldname": "subject",
                    "entity_fieldname": "subject",
                    "_key": "subject"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "This read-only flag indicates whether the certificate is valid or not.",
                    "readOnly": true,
                    "api_fieldname": "valid",
                    "entity_fieldname": "valid",
                    "_key": "valid"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2038-02-14T15:24:14Z",
                    "description": "Expiration time in UTC formatted as RFC3339.",
                    "api_fieldname": "validity",
                    "entity_fieldname": "validity",
                    "_key": "validity"
                  }
                ],
                "description": "Represents a trusted certificate in responses.",
                "foreign_key": {
                  "group": "Security",
                  "entity": "developer_certificate"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A certificate not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/trusted-certificates/{cert_id}",
          "summary": "Get a trusted certificate.",
          "return_type": "trusted_certificate",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "trusted_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "signature",
            "created_at",
            "updated_at",
            "name",
            "description",
            "account_id",
            "owner_id",
            "certificate",
            "service",
            "issuer",
            "subject",
            "validity",
            "status",
            "device_execution_mode",
            "enrollment_mode",
            "certificate_fingerprint",
            "valid"
          ],
          "group_id": "Security",
          "operation_id": "getCertificate",
          "parameter_map": {
            "cert_id": "id"
          },
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update existing trusted certificates.\n\n**Example:**\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id} \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d {\"description\": \"very important cert\"}\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
              "description": "X509.v3 trusted certificate in PEM format.",
              "api_fieldname": "certificate",
              "entity_fieldname": "certificate",
              "parameter_fieldname": "certificate",
              "in": "body",
              "required": false,
              "_key": "certificate"
            },
            {
              "type": "string",
              "maxLength": 500,
              "x-nullable": true,
              "example": "Certificate created by me.",
              "description": "Human readable description of this certificate.",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "type": "boolean",
              "example": false,
              "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
              "x-deprecation": {
                "issued_at": "2020-11-01T00:00:00+00:00",
                "end_of_life_at": "2021-11-01T00:00:00+00:00",
                "comment": "This field is deprecated, do not use it anymore.",
                "links": []
              },
              "api_fieldname": "enrollment_mode",
              "entity_fieldname": "enrollment_mode",
              "parameter_fieldname": "enrollment_mode",
              "in": "body",
              "required": false,
              "_key": "enrollment_mode"
            },
            {
              "type": "string",
              "example": "01619571d01d0242ac12000600000000",
              "description": "Entity ID.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "cert_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "description": "Whether or not this certificate is a developer certificate.",
              "example": true,
              "type": "boolean",
              "readOnly": true,
              "getter_custom_method": "is_developer_certificate_getter",
              "_override": true,
              "api_fieldname": "is_developer_certificate",
              "entity_fieldname": "is_developer_certificate",
              "_key": "is_developer_certificate"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "My certificate",
              "description": "Certificate name.",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            },
            {
              "type": "string",
              "description": "Service name where the certificate is used.",
              "enum": [
                "lwm2m",
                "bootstrap"
              ],
              "api_fieldname": "service",
              "entity_fieldname": "service",
              "parameter_fieldname": "service",
              "in": "body",
              "required": false,
              "enum_reference": "trusted_certificate_service_enum",
              "_key": "service"
            },
            {
              "type": "string",
              "example": "ACTIVE",
              "description": "Status of the certificate.",
              "enum": [
                "ACTIVE",
                "INACTIVE"
              ],
              "api_fieldname": "status",
              "entity_fieldname": "status",
              "parameter_fieldname": "status",
              "in": "body",
              "required": false,
              "enum_reference": "trusted_certificate_status_enum",
              "_key": "status"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "certificate",
                  "certificate_fingerprint",
                  "etag",
                  "id",
                  "issuer",
                  "name",
                  "object",
                  "service",
                  "subject",
                  "validity"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
                    "description": "X509.v3 trusted certificate in PEM format.",
                    "api_fieldname": "certificate",
                    "entity_fieldname": "certificate",
                    "_key": "certificate"
                  },
                  {
                    "type": "string",
                    "example": "a10fb2c8ba90e6de927bd0ae391dcc38f6115685de2d7024712af37ead0608f1",
                    "description": "A SHA-256 fingerprint of the certificate.",
                    "api_fieldname": "certificate_fingerprint",
                    "entity_fieldname": "certificate_fingerprint",
                    "_key": "certificate_fingerprint"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "string",
                    "maxLength": 500,
                    "x-nullable": true,
                    "example": "Certificate created by me.",
                    "description": "Human readable description of this certificate.",
                    "api_fieldname": "description",
                    "entity_fieldname": "description",
                    "_key": "description"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "Device execution mode where 1 means a developer certificate.",
                    "api_fieldname": "device_execution_mode",
                    "entity_fieldname": "device_execution_mode",
                    "_key": "device_execution_mode"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
                    "x-deprecation": {
                      "issued_at": "2020-11-01T00:00:00+00:00",
                      "end_of_life_at": "2021-11-01T00:00:00+00:00",
                      "comment": "This field is deprecated, do not use it anymore.",
                      "links": []
                    },
                    "api_fieldname": "enrollment_mode",
                    "entity_fieldname": "enrollment_mode",
                    "_key": "enrollment_mode"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "example": "01619571d01d0242ac12000600000000",
                    "description": "Entity ID.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "CN=issuer",
                    "description": "Issuer of the certificate.",
                    "api_fieldname": "issuer",
                    "entity_fieldname": "issuer",
                    "_key": "issuer"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "My certificate",
                    "description": "Certificate name.",
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'trusted-cert'",
                    "enum": [
                      "trusted-cert"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "x-nullable": true,
                    "type": "string",
                    "example": "01619571dad80242ac12000600000000",
                    "description": "The ID of the owner.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "owner_id",
                    "entity_fieldname": "owner_id",
                    "_key": "owner_id"
                  },
                  {
                    "type": "string",
                    "description": "Service name where the certificate is used.",
                    "enum": [
                      "lwm2m",
                      "bootstrap"
                    ],
                    "api_fieldname": "service",
                    "entity_fieldname": "service",
                    "_key": "service"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "Status of the certificate.",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "string",
                    "example": "CN=subject",
                    "description": "Subject of the certificate.",
                    "api_fieldname": "subject",
                    "entity_fieldname": "subject",
                    "_key": "subject"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "This read-only flag indicates whether the certificate is valid or not.",
                    "readOnly": true,
                    "api_fieldname": "valid",
                    "entity_fieldname": "valid",
                    "_key": "valid"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2038-02-14T15:24:14Z",
                    "description": "Expiration time in UTC formatted as RFC3339.",
                    "api_fieldname": "validity",
                    "entity_fieldname": "validity",
                    "_key": "validity"
                  }
                ],
                "description": "Represents a trusted certificate in responses.",
                "foreign_key": {
                  "group": "Security",
                  "entity": "developer_certificate"
                }
              },
              "_key": "200"
            },
            {
              "description": "Invalid certificate data, or missing or invalid parameters.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A certificate not found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            },
            {
              "description": "Certificate with the given name or subject already exists.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/trusted-certificates/{cert_id}",
          "summary": "Update trusted certificate.",
          "return_type": "trusted_certificate",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "trusted_certificate"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "signature",
            "created_at",
            "updated_at",
            "account_id",
            "owner_id",
            "issuer",
            "subject",
            "validity",
            "device_execution_mode",
            "certificate_fingerprint",
            "valid"
          ],
          "group_id": "Security",
          "operation_id": "updateCertificate",
          "parameter_map": {
            "cert_id": "id"
          },
          "notes": "Signature is not used by the SDK as it is a deprecated field.",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the account.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "account_id",
          "readOnly": true,
          "required": false,
          "_key": "account_id"
        },
        {
          "type": "string",
          "example": "-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----",
          "description": "X509.v3 trusted certificate in PEM format.",
          "api_fieldname": "certificate",
          "readOnly": false,
          "required": true,
          "_key": "certificate"
        },
        {
          "type": "string",
          "example": "a10fb2c8ba90e6de927bd0ae391dcc38f6115685de2d7024712af37ead0608f1",
          "description": "A SHA-256 fingerprint of the certificate.",
          "api_fieldname": "certificate_fingerprint",
          "readOnly": true,
          "required": false,
          "_key": "certificate_fingerprint"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "string",
          "maxLength": 500,
          "x-nullable": true,
          "example": "Certificate created by me.",
          "description": "Human readable description of this certificate.",
          "api_fieldname": "description",
          "readOnly": false,
          "required": false,
          "_key": "description"
        },
        {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Device execution mode where 1 means a developer certificate.",
          "api_fieldname": "device_execution_mode",
          "readOnly": true,
          "required": false,
          "_key": "device_execution_mode"
        },
        {
          "type": "boolean",
          "example": false,
          "description": "DEPRECATED: Certificate is used in enrollment mode. Default value is false.",
          "x-deprecation": {
            "issued_at": "2020-11-01T00:00:00+00:00",
            "end_of_life_at": "2021-11-01T00:00:00+00:00",
            "comment": "This field is deprecated, do not use it anymore.",
            "links": []
          },
          "api_fieldname": "enrollment_mode",
          "readOnly": false,
          "required": false,
          "_key": "enrollment_mode"
        },
        {
          "type": "string",
          "example": "01619571d01d0242ac12000600000000",
          "description": "Entity ID.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "description": "Whether or not this certificate is a developer certificate.",
          "example": true,
          "type": "boolean",
          "readOnly": true,
          "getter_custom_method": "is_developer_certificate_getter",
          "_override": true,
          "api_fieldname": "is_developer_certificate",
          "required": false,
          "_key": "is_developer_certificate"
        },
        {
          "type": "string",
          "example": "CN=issuer",
          "description": "Issuer of the certificate.",
          "api_fieldname": "issuer",
          "readOnly": true,
          "required": false,
          "_key": "issuer"
        },
        {
          "type": "string",
          "maxLength": 100,
          "example": "My certificate",
          "description": "Certificate name.",
          "api_fieldname": "name",
          "readOnly": false,
          "required": true,
          "_key": "name"
        },
        {
          "x-nullable": true,
          "type": "string",
          "example": "01619571dad80242ac12000600000000",
          "description": "The ID of the owner.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "owner_id",
          "readOnly": true,
          "required": false,
          "_key": "owner_id"
        },
        {
          "type": "string",
          "description": "Service name where the certificate is used.",
          "enum": [
            "lwm2m",
            "bootstrap"
          ],
          "api_fieldname": "service",
          "readOnly": false,
          "required": true,
          "enum_reference": "trusted_certificate_service_enum",
          "_key": "service"
        },
        {
          "type": "string",
          "example": "ACTIVE",
          "description": "Status of the certificate.",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "api_fieldname": "status",
          "readOnly": false,
          "required": false,
          "enum_reference": "trusted_certificate_status_enum",
          "_key": "status"
        },
        {
          "type": "string",
          "example": "CN=subject",
          "description": "Subject of the certificate.",
          "api_fieldname": "subject",
          "readOnly": true,
          "required": false,
          "_key": "subject"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update UTC time RFC3339.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        },
        {
          "type": "boolean",
          "example": true,
          "description": "This read-only flag indicates whether the certificate is valid or not.",
          "readOnly": true,
          "api_fieldname": "valid",
          "required": false,
          "_key": "valid"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2038-02-14T15:24:14Z",
          "description": "Expiration time in UTC formatted as RFC3339.",
          "api_fieldname": "validity",
          "readOnly": true,
          "required": false,
          "_key": "validity"
        }
      ],
      "field_renames": [],
      "tags": [
        "Security and identity - certificates",
        "Security and identity - developer class certificates"
      ],
      "group_id": "Security",
      "_key": "trusted_certificate"
    },
    {
      "swagger_models": [
        "CampaignDeviceMetadataPage",
        "UpdateCampaign",
        "UpdateCampaignPage",
        "UpdateCampaignPostRequest",
        "UpdateCampaignPutRequest"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Archive a campaign.\n<br>\n**Usage example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/update-campaigns/016e83ddc649000000000001001000b8/archive \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [],
          "fields": [
            {
              "description": "Helper for creating the device filter string.",
              "detail": "This helper can be used instead of setting device filter directly. This allows the campaign filter to be created in a way which is similar to the device listing filter.",
              "type": "filter",
              "foundation_reference": "devices.device.list",
              "getter_custom_method": "device_filter_helper_getter",
              "setter_custom_method": "device_filter_helper_setter",
              "_override": true,
              "api_fieldname": "device_filter_helper",
              "entity_fieldname": "device_filter_helper",
              "_key": "device_filter_helper"
            },
            {
              "description": "The campaign ID.",
              "in": "path",
              "name": "campaign_id",
              "required": true,
              "type": "string",
              "pattern": "[A-Fa-f0-9]{32}",
              "entity_fieldname": "id",
              "api_fieldname": "campaign_id",
              "external_param": false,
              "parameter_fieldname": "campaign_id",
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "archive",
          "responses": [
            {
              "description": "The campaign has been archived.",
              "_key": "202"
            },
            {
              "description": "Unable to change the phase of the campaign.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Cannot find the campaign.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            },
            {
              "description": "Cannot archive the campaign while in the current phase.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/update-campaigns/{campaign_id}/archive",
          "summary": "Archive a campaign.",
          "return_type": "update_campaign",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "update_campaign"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "state"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "campaign_id": "id"
          },
          "operation_id": "Update_Campaign_archive",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "archive"
        },
        {
          "description": "Create an update campaign.\n\nTo include a filter for targeted devices, refer to the filter using `<filter_id>` in the message body.\n<br>\n**Usage example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/update-campaigns \\\n-H 'Authorization: Bearer <api_key>' \\\n-H 'content-type: application/json;charset=UTF-8' \\\n-d '{\n  \"campaign_strategy\": \"one-shot\",\n  \"description\": \"Campaign is for ...\",\n  \"device_filter\": \"<filter_id>\",\n  \"name\": \"campaign\",\n  \"root_manifest_id\": \"56780000000000a5b70000000000bd98\"\n}'\n```\n",
          "field_renames": [],
          "fields": [
            {
              "type": "boolean",
              "description": "Flag indicating whether approval is needed to start the campaign.",
              "example": "false",
              "api_fieldname": "approval_required",
              "entity_fieldname": "approval_required",
              "parameter_fieldname": "approval_required",
              "in": "body",
              "required": false,
              "_key": "approval_required"
            },
            {
              "type": "boolean",
              "description": "Flag indicating whether the campaign should be auto-stopped on reaching a threshold.",
              "example": "false",
              "api_fieldname": "autostop",
              "entity_fieldname": "autostop",
              "parameter_fieldname": "autostop",
              "in": "body",
              "required": false,
              "_key": "autostop"
            },
            {
              "description": "Percent of successful device updates to auto stop the campaign.",
              "type": "number",
              "format": "double",
              "example": "85.00",
              "api_fieldname": "autostop_success_percent",
              "entity_fieldname": "autostop_success_percent",
              "parameter_fieldname": "autostop_success_percent",
              "in": "body",
              "required": false,
              "_key": "autostop_success_percent"
            },
            {
              "description": "How the campaign adds devices. A `one-shot` campaign does not add new devices after it has started. A `continuous` campaign means that devices may be added to the campaign after it has started. The default is `one-shot`.",
              "type": "string",
              "enum": [
                "one-shot",
                "continuous"
              ],
              "default": "one-shot",
              "api_fieldname": "campaign_strategy",
              "entity_fieldname": "campaign_strategy",
              "parameter_fieldname": "campaign_strategy",
              "in": "body",
              "required": false,
              "enum_reference": "update_campaign_strategy_enum",
              "_key": "campaign_strategy"
            },
            {
              "description": "An optional description of the campaign.",
              "type": "string",
              "maxLength": 2000,
              "example": "This campaign updates Class XX devices to version 1.34",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "description": "The filter for the devices the campaign targets. Refer to this using the filter ID.",
              "type": "string",
              "example": "state__eq=registered",
              "api_fieldname": "device_filter",
              "entity_fieldname": "device_filter",
              "parameter_fieldname": "device_filter",
              "in": "body",
              "required": false,
              "_key": "device_filter"
            },
            {
              "description": "Helper for creating the device filter string.",
              "detail": "This helper can be used instead of setting device filter directly. This allows the campaign filter to be created in a way which is similar to the device listing filter.",
              "type": "filter",
              "foundation_reference": "devices.device.list",
              "getter_custom_method": "device_filter_helper_getter",
              "setter_custom_method": "device_filter_helper_setter",
              "_override": true,
              "api_fieldname": "device_filter_helper",
              "entity_fieldname": "device_filter_helper",
              "_key": "device_filter_helper"
            },
            {
              "description": "The campaign name.",
              "type": "string",
              "maxLength": 128,
              "example": "campaign",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            },
            {
              "description": "The ID of the manifest that will be sent to the device as part of the campaign.",
              "type": "string",
              "example": "016e83dce36a00000000000100100102",
              "api_fieldname": "root_manifest_id",
              "entity_fieldname": "root_manifest_id",
              "parameter_fieldname": "root_manifest_id",
              "in": "body",
              "required": false,
              "_key": "root_manifest_id"
            },
            {
              "description": "The scheduled start time for the campaign. The campaign will start within 1 minute when then start time has elapsed.",
              "type": "string",
              "format": "date-time",
              "example": "2017-05-22T12:37:55.576563Z",
              "x-nullable": true,
              "api_fieldname": "when",
              "entity_fieldname": "when",
              "parameter_fieldname": "when",
              "in": "body",
              "required": false,
              "_key": "when"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "Update campaign created.",
              "schema": [
                {
                  "group": "Device_Update",
                  "entity": "update_campaign",
                  "_key": "foreign_key"
                },
                {
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was created.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at"
                  },
                  "etag": {
                    "type": "string",
                    "description": "API resource entity version.",
                    "example": "2017-05-22T12:37:58.753425Z",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was updated.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at"
                  },
                  "campaign_strategy": {
                    "description": "How the campaign adds devices. A `one-shot` campaign does not add new devices after it has started. A `continuous` campaign means that devices may be added to the campaign after it has started. The default is `one-shot`.",
                    "type": "string",
                    "enum": [
                      "one-shot",
                      "continuous"
                    ],
                    "default": "one-shot",
                    "api_fieldname": "campaign_strategy",
                    "entity_fieldname": "campaign_strategy"
                  },
                  "object": {
                    "description": "Entity name: always 'update-campaign'.",
                    "type": "string",
                    "example": "update-campaign",
                    "api_fieldname": "object",
                    "entity_fieldname": "object"
                  },
                  "active_at": {
                    "description": "The time the campaign entered the active state.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "active_at",
                    "entity_fieldname": "active_at"
                  },
                  "approval_required": {
                    "type": "boolean",
                    "description": "Flag indicating whether approval is needed to start the campaign.",
                    "example": "false",
                    "api_fieldname": "approval_required",
                    "entity_fieldname": "approval_required"
                  },
                  "archived_at": {
                    "description": "The time the campaign was archived.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "archived_at",
                    "entity_fieldname": "archived_at"
                  },
                  "autostop": {
                    "type": "boolean",
                    "description": "Flag indicating whether the campaign should be auto-stopped on reaching a threshold.",
                    "example": "false",
                    "api_fieldname": "autostop",
                    "entity_fieldname": "autostop"
                  },
                  "autostop_success_percent": {
                    "description": "Percent of successful device updates to auto stop the campaign.",
                    "type": "number",
                    "format": "double",
                    "example": "85.00",
                    "api_fieldname": "autostop_success_percent",
                    "entity_fieldname": "autostop_success_percent"
                  },
                  "autostop_reason": {
                    "description": "Text description of why a campaign failed to start or why a campaign stopped.",
                    "type": "string",
                    "example": "Insufficient billing credit.",
                    "api_fieldname": "autostop_reason",
                    "entity_fieldname": "autostop_reason"
                  },
                  "description": {
                    "description": "An optional description of the campaign.",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "This campaign updates Class XX devices to version 1.34",
                    "api_fieldname": "description",
                    "entity_fieldname": "description"
                  },
                  "device_filter": {
                    "description": "The filter for the devices the campaign targets. Refer to this using the filter ID.",
                    "type": "string",
                    "example": "state__eq=registered",
                    "api_fieldname": "device_filter",
                    "entity_fieldname": "device_filter"
                  },
                  "finished": {
                    "description": "The time the campaign finished.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "finished",
                    "entity_fieldname": "finished"
                  },
                  "id": {
                    "description": "The campaign ID.",
                    "type": "string",
                    "pattern": "[A-Fa-f0-9]{32}",
                    "example": "016e83ddc648000000000001001000f5",
                    "api_fieldname": "id",
                    "entity_fieldname": "id"
                  },
                  "name": {
                    "description": "The campaign name.",
                    "type": "string",
                    "maxLength": 128,
                    "example": "campaign",
                    "api_fieldname": "name",
                    "entity_fieldname": "name"
                  },
                  "root_manifest_id": {
                    "description": "The ID of the manifest that will be sent to the device as part of the campaign.",
                    "type": "string",
                    "example": "016e83dce36a00000000000100100102",
                    "api_fieldname": "root_manifest_id",
                    "entity_fieldname": "root_manifest_id"
                  },
                  "root_manifest_url": {
                    "description": "The URL for the manifest that will be sent to the device as part of the campaign.",
                    "type": "string",
                    "example": "https://api.us-east-1.mbedcloud.com/v3/firmware-manifests/016e83dce36a00000000000100100102",
                    "api_fieldname": "root_manifest_url",
                    "entity_fieldname": "root_manifest_url"
                  },
                  "starting_at": {
                    "description": "The time the campaign will be started.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "starting_at",
                    "entity_fieldname": "starting_at"
                  },
                  "started_at": {
                    "description": "The time the campaign was started.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "started_at",
                    "entity_fieldname": "started_at"
                  },
                  "stopping_at": {
                    "description": "The time the campaign will be stopped.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "stopping_at",
                    "entity_fieldname": "stopping_at"
                  },
                  "stopped_at": {
                    "description": "The time the campaign was stopped.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "stopped_at",
                    "entity_fieldname": "stopped_at"
                  },
                  "phase": {
                    "description": "The phase of the campaign.",
                    "type": "string",
                    "enum": [
                      "draft",
                      "awaiting_approval",
                      "timed",
                      "starting",
                      "active",
                      "stopping",
                      "stopped",
                      "deleted",
                      "archived"
                    ],
                    "api_fieldname": "phase",
                    "entity_fieldname": "phase"
                  },
                  "state": {
                    "description": "The state of the campaign.",
                    "type": "string",
                    "enum": [
                      "draft",
                      "scheduled",
                      "allocatingquota",
                      "allocatedquota",
                      "quotaallocationfailed",
                      "checkingmanifest",
                      "checkedmanifest",
                      "devicefetch",
                      "devicecopy",
                      "devicecheck",
                      "publishing",
                      "deploying",
                      "deployed",
                      "manifestremoved",
                      "expired",
                      "stopping",
                      "autostopped",
                      "userstopped",
                      "conflict"
                    ],
                    "x-deprecation": {
                      "issued_at": "2019-03-18T14:55:20+00:00",
                      "end_of_life_at": "2020-03-18T14:55:20+00:00",
                      "comment": "Use phase instead",
                      "links": []
                    },
                    "api_fieldname": "state",
                    "entity_fieldname": "state"
                  },
                  "when": {
                    "description": "The scheduled start time for the campaign. The campaign will start within 1 minute when then start time has elapsed.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "x-nullable": true,
                    "api_fieldname": "when",
                    "entity_fieldname": "when"
                  },
                  "_key": "properties"
                }
              ],
              "_key": "201"
            },
            {
              "description": "Validation error: The data used to create the campaign did not validate.\n",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Conflict, a campaign with the same name already exists",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/update-campaigns",
          "summary": "Create a campaign",
          "return_type": "update_campaign",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "update_campaign"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "state",
            "created_at",
            "updated_at",
            "active_at",
            "archived_at",
            "autostop_reason",
            "finished",
            "id",
            "root_manifest_url",
            "starting_at",
            "started_at",
            "stopping_at",
            "stopped_at",
            "phase"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "campaign_id": "id"
          },
          "operation_id": "Update_Campaign_create",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete an update campaign.\n<br>\n**Usage example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/update-campaigns/1123457f9012ab567890120000789012 \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [],
          "fields": [
            {
              "description": "Helper for creating the device filter string.",
              "detail": "This helper can be used instead of setting device filter directly. This allows the campaign filter to be created in a way which is similar to the device listing filter.",
              "type": "filter",
              "foundation_reference": "devices.device.list",
              "getter_custom_method": "device_filter_helper_getter",
              "setter_custom_method": "device_filter_helper_setter",
              "_override": true,
              "api_fieldname": "device_filter_helper",
              "entity_fieldname": "device_filter_helper",
              "_key": "device_filter_helper"
            },
            {
              "description": "The campaign ID.",
              "in": "path",
              "name": "campaign_id",
              "required": true,
              "type": "string",
              "pattern": "[A-Fa-f0-9]{32}",
              "entity_fieldname": "id",
              "api_fieldname": "campaign_id",
              "external_param": false,
              "parameter_fieldname": "campaign_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Update campaign deleted.",
              "_key": "204"
            },
            {
              "description": "Validation error: The data used to update the campaign did not validate.\n",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Update campaign can't be found.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            },
            {
              "description": "Conflict - Cannot delete the campaign while in the current phase.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/update-campaigns/{campaign_id}",
          "summary": "Delete a campaign",
          "return_type": "update_campaign",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "update_campaign"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "state"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "campaign_id": "id"
          },
          "operation_id": "Update_Campaign_destroy",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Get metadata for all devices in a campaign.\n<br>\n**Usage example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/update-campaigns/11234567f9012ab56790120000789012/campaign-device-metadata \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "description": "The ID of the item after which to retrieve the next page.",
              "example": "null",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "in": "query",
              "name": "after",
              "external_param": true,
              "parameter_fieldname": "after",
              "required": false,
              "_key": "after"
            },
            {
              "description": "Helper for creating the device filter string.",
              "detail": "This helper can be used instead of setting device filter directly. This allows the campaign filter to be created in a way which is similar to the device listing filter.",
              "type": "filter",
              "foundation_reference": "devices.device.list",
              "getter_custom_method": "device_filter_helper_getter",
              "setter_custom_method": "device_filter_helper_setter",
              "_override": true,
              "api_fieldname": "device_filter_helper",
              "entity_fieldname": "device_filter_helper",
              "_key": "device_filter_helper"
            },
            {
              "description": "The campaign ID.",
              "in": "path",
              "name": "campaign_id",
              "required": true,
              "type": "string",
              "pattern": "[A-Fa-f0-9]{32}",
              "entity_fieldname": "id",
              "api_fieldname": "campaign_id",
              "external_param": false,
              "parameter_fieldname": "campaign_id",
              "_key": "id"
            },
            {
              "description": "A comma-separated list of data fields to return. Currently supported: total_count.",
              "in": "query",
              "name": "include",
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "required": false,
              "_key": "include"
            },
            {
              "type": "integer",
              "description": "How many objects to retrieve in the page. The minimum limit is 2 and the maximum is 1000. Limit values outside of this range are set to the closest limit.",
              "example": "50",
              "minimum": 2,
              "maximum": 1000,
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "in": "query",
              "name": "limit",
              "external_param": true,
              "parameter_fieldname": "limit",
              "required": false,
              "_key": "limit"
            },
            {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "description": "ASC or DESC.",
              "example": "ASC",
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "in": "query",
              "name": "order",
              "external_param": true,
              "parameter_fieldname": "order",
              "required": false,
              "enum_reference": "update_campaign_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "device_metadata",
          "responses": [
            {
              "description": "Request successful.",
              "schema": {
                "type": "object",
                "properties": [
                  {
                    "type": "string",
                    "description": "The entity ID to fetch after the given one.",
                    "example": "null",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "properties": [
                        {
                          "type": "string",
                          "description": "The device's campaign ID.",
                          "example": "015bf72fccda00000000000100100280",
                          "api_fieldname": "campaign",
                          "entity_fieldname": "campaign_id",
                          "parameter_fieldname": "campaign_id",
                          "in": "path",
                          "required": true,
                          "_key": "campaign"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time the entity was created.",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "api_fieldname": "created_at",
                          "entity_fieldname": "created_at",
                          "_key": "created_at"
                        },
                        {
                          "description": "The state of the update campaign on the device.",
                          "enum": [
                            "pending",
                            "updated_connector_channel",
                            "failed_connector_channel_update",
                            "deployed",
                            "manifestremoved",
                            "deregistered"
                          ],
                          "type": "string",
                          "api_fieldname": "deployment_state",
                          "entity_fieldname": "deployment_state",
                          "_key": "deployment_state"
                        },
                        {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "Description.",
                          "example": "a description",
                          "api_fieldname": "description",
                          "entity_fieldname": "description",
                          "_key": "description"
                        },
                        {
                          "type": "string",
                          "description": "The device ID.",
                          "example": "015c2fec9bba0000000000010010036f",
                          "api_fieldname": "device_id",
                          "entity_fieldname": "device_id",
                          "_key": "device_id"
                        },
                        {
                          "type": "string",
                          "description": "API resource entity version.",
                          "example": "2017-05-22T12:37:58.753425Z",
                          "api_fieldname": "etag",
                          "entity_fieldname": "etag",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "description": "The metadata record ID.",
                          "pattern": "[A-Fa-f0-9]{32}",
                          "example": "015c3029f6f7000000000001001000c3",
                          "api_fieldname": "id",
                          "entity_fieldname": "id",
                          "parameter_fieldname": "campaign_device_metadata_id",
                          "in": "path",
                          "required": true,
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "description": "How the firmware is delivered (connector or direct).",
                          "example": "connector",
                          "api_fieldname": "mechanism",
                          "entity_fieldname": "mechanism",
                          "_key": "mechanism"
                        },
                        {
                          "type": "string",
                          "description": "The Device Management Connect URL.",
                          "api_fieldname": "mechanism_url",
                          "entity_fieldname": "mechanism_url",
                          "_key": "mechanism_url"
                        },
                        {
                          "type": "string",
                          "maxLength": 128,
                          "description": "The record name.",
                          "default": "default_object_name",
                          "api_fieldname": "name",
                          "entity_fieldname": "name",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "The entity name: always 'update-campaign-device-metadata'.",
                          "example": "update-campaign-device-metadata",
                          "api_fieldname": "object",
                          "entity_fieldname": "object",
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time the entity was updated.",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "api_fieldname": "updated_at",
                          "entity_fieldname": "updated_at",
                          "_key": "updated_at"
                        }
                      ],
                      "foreign_key": {
                        "group": "Device_Update",
                        "entity": "campaign_device_metadata"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "description": "A flag indicating whether there are more results.",
                    "example": "false",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "description": "How many objects to retrieve in the page. The minimum limit is 2 and the maximum is 1000. Limit values outside of this range are set to the closest limit.",
                    "example": "50",
                    "minimum": 2,
                    "maximum": 1000,
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "The entity name: always 'list'.",
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "description": "The order of the records to return. Acceptable values: ASC, DESC. Default: ASC.",
                    "example": "ASC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "description": "The total number or records, if requested. It may be returned also for small lists.",
                    "example": "1",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Device_Update",
                  "entity": "campaign_device_metadata"
                }
              },
              "_key": "200"
            },
            {
              "description": "Unauthorized",
              "_key": "401"
            }
          ],
          "path": "/v3/update-campaigns/{campaign_id}/campaign-device-metadata",
          "summary": "List all campaign device metadata",
          "return_type": "paginated_response(campaign_device_metadata)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "campaign_device_metadata"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "state",
            "has_more",
            "data",
            "total_count"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "campaign_id": "id"
          },
          "operation_id": "Update_Campaign_Metadata_list",
          "pagination": true,
          "foreign_key": {
            "group": "Device_Update",
            "entity": "campaign_device_metadata"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "device_metadata"
        },
        {
          "description": "Get update campaigns for devices specified by a filter.\n<br>\n**Usage example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/update-campaigns \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": null,
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "description": "The ID of the item after which to retrieve the next page.",
              "in": "query",
              "name": "after",
              "external_param": true,
              "parameter_fieldname": "after",
              "required": false,
              "_key": "after"
            },
            {
              "description": "Helper for creating the device filter string.",
              "detail": "This helper can be used instead of setting device filter directly. This allows the campaign filter to be created in a way which is similar to the device listing filter.",
              "type": "filter",
              "foundation_reference": "devices.device.list",
              "getter_custom_method": "device_filter_helper_getter",
              "setter_custom_method": "device_filter_helper_setter",
              "_override": true,
              "api_fieldname": "device_filter_helper",
              "entity_fieldname": "device_filter_helper",
              "_key": "device_filter_helper"
            },
            {
              "description": "A comma-separated list of data fields to return. Currently supported: total_count.",
              "in": "query",
              "name": "include",
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "required": false,
              "_key": "include"
            },
            {
              "type": "integer",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "description": "How many objects to retrieve in the page. The minimum limit is 2 and the maximum is 1000. Limit values outside of this range are set to the closest limit.",
              "in": "query",
              "name": "limit",
              "minimum": 2,
              "maximum": 1000,
              "external_param": true,
              "parameter_fieldname": "limit",
              "required": false,
              "_key": "limit"
            },
            {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "description": "The order of the records. Acceptable values: ASC, DESC. Default: ASC.",
              "example": "ASC",
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "in": "query",
              "name": "order",
              "external_param": true,
              "parameter_fieldname": "order",
              "required": false,
              "enum_reference": "update_campaign_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Request successful.",
              "schema": {
                "properties": [
                  {
                    "type": "string",
                    "example": null,
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "items": [
                      {
                        "group": "Device_Update",
                        "entity": "update_campaign",
                        "_key": "foreign_key"
                      },
                      {
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time the entity was created.",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "api_fieldname": "created_at",
                          "entity_fieldname": "created_at"
                        },
                        "etag": {
                          "type": "string",
                          "description": "API resource entity version.",
                          "example": "2017-05-22T12:37:58.753425Z",
                          "api_fieldname": "etag",
                          "entity_fieldname": "etag"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The time the entity was updated.",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "api_fieldname": "updated_at",
                          "entity_fieldname": "updated_at"
                        },
                        "campaign_strategy": {
                          "description": "How the campaign adds devices. A `one-shot` campaign does not add new devices after it has started. A `continuous` campaign means that devices may be added to the campaign after it has started. The default is `one-shot`.",
                          "type": "string",
                          "enum": [
                            "one-shot",
                            "continuous"
                          ],
                          "default": "one-shot"
                        },
                        "object": {
                          "description": "Entity name: always 'update-campaign'.",
                          "type": "string",
                          "example": "update-campaign"
                        },
                        "active_at": {
                          "description": "The time the campaign entered the active state.",
                          "type": "string",
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z"
                        },
                        "approval_required": {
                          "type": "boolean",
                          "description": "Flag indicating whether approval is needed to start the campaign.",
                          "example": "false"
                        },
                        "archived_at": {
                          "description": "The time the campaign was archived.",
                          "type": "string",
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z"
                        },
                        "autostop": {
                          "type": "boolean",
                          "description": "Flag indicating whether the campaign should be auto-stopped on reaching a threshold.",
                          "example": "false"
                        },
                        "autostop_success_percent": {
                          "description": "Percent of successful device updates to auto stop the campaign.",
                          "type": "number",
                          "format": "double",
                          "example": "85.00"
                        },
                        "autostop_reason": {
                          "description": "Text description of why a campaign failed to start or why a campaign stopped.",
                          "type": "string",
                          "example": "Insufficient billing credit."
                        },
                        "description": {
                          "description": "An optional description of the campaign.",
                          "type": "string",
                          "maxLength": 2000,
                          "example": "This campaign updates Class XX devices to version 1.34"
                        },
                        "device_filter": {
                          "description": "The filter for the devices the campaign targets. Refer to this using the filter ID.",
                          "type": "string",
                          "example": "state__eq=registered"
                        },
                        "finished": {
                          "description": "The time the campaign finished.",
                          "type": "string",
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z"
                        },
                        "id": {
                          "description": "The campaign ID.",
                          "type": "string",
                          "pattern": "[A-Fa-f0-9]{32}",
                          "example": "016e83ddc648000000000001001000f5"
                        },
                        "name": {
                          "description": "The campaign name.",
                          "type": "string",
                          "maxLength": 128,
                          "example": "campaign"
                        },
                        "root_manifest_id": {
                          "description": "The ID of the manifest that will be sent to the device as part of the campaign.",
                          "type": "string",
                          "example": "016e83dce36a00000000000100100102"
                        },
                        "root_manifest_url": {
                          "description": "The URL for the manifest that will be sent to the device as part of the campaign.",
                          "type": "string",
                          "example": "https://api.us-east-1.mbedcloud.com/v3/firmware-manifests/016e83dce36a00000000000100100102"
                        },
                        "starting_at": {
                          "description": "The time the campaign will be started.",
                          "type": "string",
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z"
                        },
                        "started_at": {
                          "description": "The time the campaign was started.",
                          "type": "string",
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z"
                        },
                        "stopping_at": {
                          "description": "The time the campaign will be stopped.",
                          "type": "string",
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z"
                        },
                        "stopped_at": {
                          "description": "The time the campaign was stopped.",
                          "type": "string",
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z"
                        },
                        "phase": {
                          "description": "The phase of the campaign.",
                          "type": "string",
                          "enum": [
                            "draft",
                            "awaiting_approval",
                            "timed",
                            "starting",
                            "active",
                            "stopping",
                            "stopped",
                            "deleted",
                            "archived"
                          ]
                        },
                        "state": {
                          "description": "The state of the campaign.",
                          "type": "string",
                          "enum": [
                            "draft",
                            "scheduled",
                            "allocatingquota",
                            "allocatedquota",
                            "quotaallocationfailed",
                            "checkingmanifest",
                            "checkedmanifest",
                            "devicefetch",
                            "devicecopy",
                            "devicecheck",
                            "publishing",
                            "deploying",
                            "deployed",
                            "manifestremoved",
                            "expired",
                            "stopping",
                            "autostopped",
                            "userstopped",
                            "conflict"
                          ],
                          "x-deprecation": {
                            "issued_at": "2019-03-18T14:55:20+00:00",
                            "end_of_life_at": "2020-03-18T14:55:20+00:00",
                            "comment": "Use phase instead",
                            "links": []
                          }
                        },
                        "when": {
                          "description": "The scheduled start time for the campaign. The campaign will start within 1 minute when then start time has elapsed.",
                          "type": "string",
                          "format": "date-time",
                          "example": "2017-05-22T12:37:55.576563Z",
                          "x-nullable": true
                        },
                        "_key": "properties"
                      }
                    ],
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "description": "Entity name: always 'list'.",
                    "type": "string",
                    "example": "list",
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "description": "The order of the records to return. Acceptable values: ASC, DESC. Default: ASC.",
                    "example": "ASC",
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Device_Update",
                  "entity": "update_campaign"
                }
              },
              "_key": "200"
            },
            {
              "description": "Validation error: The data used to update the campaign did not validate.\n",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Unable to find content.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/update-campaigns",
          "summary": "List all campaigns",
          "return_type": "paginated_response(update_campaign)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "update_campaign"
          },
          "x_filter": {
            "created_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "description": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "device_filter": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "finished": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "name": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "root_manifest_id": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "started_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "state": [
              "eq",
              "neq",
              "in",
              "nin"
            ],
            "updated_at": [
              "in",
              "nin",
              "lte",
              "gte"
            ],
            "when": [
              "in",
              "nin",
              "lte",
              "gte"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "state",
            "data",
            "has_more",
            "total_count",
            "created_at__in",
            "created_at__nin",
            "created_at__lte",
            "created_at__gte",
            "description__eq",
            "description__neq",
            "description__in",
            "description__nin",
            "device_filter__eq",
            "device_filter__neq",
            "device_filter__in",
            "device_filter__nin",
            "finished__in",
            "finished__nin",
            "finished__lte",
            "finished__gte",
            "id__eq",
            "id__neq",
            "id__in",
            "id__nin",
            "name__eq",
            "name__neq",
            "name__in",
            "name__nin",
            "root_manifest_id__eq",
            "root_manifest_id__neq",
            "root_manifest_id__in",
            "root_manifest_id__nin",
            "started_at__in",
            "started_at__nin",
            "started_at__lte",
            "started_at__gte",
            "state__eq",
            "state__neq",
            "state__in",
            "state__nin",
            "updated_at__in",
            "updated_at__nin",
            "updated_at__lte",
            "updated_at__gte",
            "when__in",
            "when__nin",
            "when__lte",
            "when__gte"
          ],
          "foreign_key_priority": "self",
          "group_id": "Device_Update",
          "parameter_map": {
            "campaign_id": "id"
          },
          "operation_id": "Update_Campaign_list",
          "pagination": true,
          "foreign_key": {
            "group": "Device_Update",
            "entity": "update_campaign"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Get an update campaign.\n<br>\n**Usage example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/update-campaigns/11234567f9012ab56890120000789012 \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [],
          "fields": [
            {
              "description": "Helper for creating the device filter string.",
              "detail": "This helper can be used instead of setting device filter directly. This allows the campaign filter to be created in a way which is similar to the device listing filter.",
              "type": "filter",
              "foundation_reference": "devices.device.list",
              "getter_custom_method": "device_filter_helper_getter",
              "setter_custom_method": "device_filter_helper_setter",
              "_override": true,
              "api_fieldname": "device_filter_helper",
              "entity_fieldname": "device_filter_helper",
              "_key": "device_filter_helper"
            },
            {
              "description": "The campaign ID.",
              "type": "string",
              "pattern": "[A-Fa-f0-9]{32}",
              "example": "016e83ddc648000000000001001000f5",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "campaign_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Retrieved result successfully.",
              "schema": [
                {
                  "group": "Device_Update",
                  "entity": "update_campaign",
                  "_key": "foreign_key"
                },
                {
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was created.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at"
                  },
                  "etag": {
                    "type": "string",
                    "description": "API resource entity version.",
                    "example": "2017-05-22T12:37:58.753425Z",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was updated.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at"
                  },
                  "campaign_strategy": {
                    "description": "How the campaign adds devices. A `one-shot` campaign does not add new devices after it has started. A `continuous` campaign means that devices may be added to the campaign after it has started. The default is `one-shot`.",
                    "type": "string",
                    "enum": [
                      "one-shot",
                      "continuous"
                    ],
                    "default": "one-shot",
                    "api_fieldname": "campaign_strategy",
                    "entity_fieldname": "campaign_strategy"
                  },
                  "object": {
                    "description": "Entity name: always 'update-campaign'.",
                    "type": "string",
                    "example": "update-campaign",
                    "api_fieldname": "object",
                    "entity_fieldname": "object"
                  },
                  "active_at": {
                    "description": "The time the campaign entered the active state.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "active_at",
                    "entity_fieldname": "active_at"
                  },
                  "approval_required": {
                    "type": "boolean",
                    "description": "Flag indicating whether approval is needed to start the campaign.",
                    "example": "false",
                    "api_fieldname": "approval_required",
                    "entity_fieldname": "approval_required"
                  },
                  "archived_at": {
                    "description": "The time the campaign was archived.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "archived_at",
                    "entity_fieldname": "archived_at"
                  },
                  "autostop": {
                    "type": "boolean",
                    "description": "Flag indicating whether the campaign should be auto-stopped on reaching a threshold.",
                    "example": "false",
                    "api_fieldname": "autostop",
                    "entity_fieldname": "autostop"
                  },
                  "autostop_success_percent": {
                    "description": "Percent of successful device updates to auto stop the campaign.",
                    "type": "number",
                    "format": "double",
                    "example": "85.00",
                    "api_fieldname": "autostop_success_percent",
                    "entity_fieldname": "autostop_success_percent"
                  },
                  "autostop_reason": {
                    "description": "Text description of why a campaign failed to start or why a campaign stopped.",
                    "type": "string",
                    "example": "Insufficient billing credit.",
                    "api_fieldname": "autostop_reason",
                    "entity_fieldname": "autostop_reason"
                  },
                  "description": {
                    "description": "An optional description of the campaign.",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "This campaign updates Class XX devices to version 1.34",
                    "api_fieldname": "description",
                    "entity_fieldname": "description"
                  },
                  "device_filter": {
                    "description": "The filter for the devices the campaign targets. Refer to this using the filter ID.",
                    "type": "string",
                    "example": "state__eq=registered",
                    "api_fieldname": "device_filter",
                    "entity_fieldname": "device_filter"
                  },
                  "finished": {
                    "description": "The time the campaign finished.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "finished",
                    "entity_fieldname": "finished"
                  },
                  "id": {
                    "description": "The campaign ID.",
                    "type": "string",
                    "pattern": "[A-Fa-f0-9]{32}",
                    "example": "016e83ddc648000000000001001000f5",
                    "api_fieldname": "id",
                    "entity_fieldname": "id"
                  },
                  "name": {
                    "description": "The campaign name.",
                    "type": "string",
                    "maxLength": 128,
                    "example": "campaign",
                    "api_fieldname": "name",
                    "entity_fieldname": "name"
                  },
                  "root_manifest_id": {
                    "description": "The ID of the manifest that will be sent to the device as part of the campaign.",
                    "type": "string",
                    "example": "016e83dce36a00000000000100100102",
                    "api_fieldname": "root_manifest_id",
                    "entity_fieldname": "root_manifest_id"
                  },
                  "root_manifest_url": {
                    "description": "The URL for the manifest that will be sent to the device as part of the campaign.",
                    "type": "string",
                    "example": "https://api.us-east-1.mbedcloud.com/v3/firmware-manifests/016e83dce36a00000000000100100102",
                    "api_fieldname": "root_manifest_url",
                    "entity_fieldname": "root_manifest_url"
                  },
                  "starting_at": {
                    "description": "The time the campaign will be started.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "starting_at",
                    "entity_fieldname": "starting_at"
                  },
                  "started_at": {
                    "description": "The time the campaign was started.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "started_at",
                    "entity_fieldname": "started_at"
                  },
                  "stopping_at": {
                    "description": "The time the campaign will be stopped.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "stopping_at",
                    "entity_fieldname": "stopping_at"
                  },
                  "stopped_at": {
                    "description": "The time the campaign was stopped.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "stopped_at",
                    "entity_fieldname": "stopped_at"
                  },
                  "phase": {
                    "description": "The phase of the campaign.",
                    "type": "string",
                    "enum": [
                      "draft",
                      "awaiting_approval",
                      "timed",
                      "starting",
                      "active",
                      "stopping",
                      "stopped",
                      "deleted",
                      "archived"
                    ],
                    "api_fieldname": "phase",
                    "entity_fieldname": "phase"
                  },
                  "state": {
                    "description": "The state of the campaign.",
                    "type": "string",
                    "enum": [
                      "draft",
                      "scheduled",
                      "allocatingquota",
                      "allocatedquota",
                      "quotaallocationfailed",
                      "checkingmanifest",
                      "checkedmanifest",
                      "devicefetch",
                      "devicecopy",
                      "devicecheck",
                      "publishing",
                      "deploying",
                      "deployed",
                      "manifestremoved",
                      "expired",
                      "stopping",
                      "autostopped",
                      "userstopped",
                      "conflict"
                    ],
                    "x-deprecation": {
                      "issued_at": "2019-03-18T14:55:20+00:00",
                      "end_of_life_at": "2020-03-18T14:55:20+00:00",
                      "comment": "Use phase instead",
                      "links": []
                    },
                    "api_fieldname": "state",
                    "entity_fieldname": "state"
                  },
                  "when": {
                    "description": "The scheduled start time for the campaign. The campaign will start within 1 minute when then start time has elapsed.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "x-nullable": true,
                    "api_fieldname": "when",
                    "entity_fieldname": "when"
                  },
                  "_key": "properties"
                }
              ],
              "_key": "200"
            },
            {
              "description": "Validation error: The data used to update the campaign did not validate.\n",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Unable to find campaign.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/update-campaigns/{campaign_id}",
          "summary": "Get a campaign.",
          "return_type": "update_campaign",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "update_campaign"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "state",
            "created_at",
            "updated_at",
            "campaign_strategy",
            "active_at",
            "approval_required",
            "archived_at",
            "autostop",
            "autostop_success_percent",
            "autostop_reason",
            "description",
            "device_filter",
            "finished",
            "name",
            "root_manifest_id",
            "root_manifest_url",
            "starting_at",
            "started_at",
            "stopping_at",
            "stopped_at",
            "phase",
            "when"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "campaign_id": "id"
          },
          "operation_id": "Update_Campaign_retrieve",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Start a campaign.\n<br>\n**Usage example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/update-campaigns/5d645eaec2315a8900002e655cd94fa8/start \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [],
          "fields": [
            {
              "description": "Helper for creating the device filter string.",
              "detail": "This helper can be used instead of setting device filter directly. This allows the campaign filter to be created in a way which is similar to the device listing filter.",
              "type": "filter",
              "foundation_reference": "devices.device.list",
              "getter_custom_method": "device_filter_helper_getter",
              "setter_custom_method": "device_filter_helper_setter",
              "_override": true,
              "api_fieldname": "device_filter_helper",
              "entity_fieldname": "device_filter_helper",
              "_key": "device_filter_helper"
            },
            {
              "description": "The campaign ID.",
              "in": "path",
              "name": "campaign_id",
              "required": true,
              "type": "string",
              "pattern": "[A-Fa-f0-9]{32}",
              "entity_fieldname": "id",
              "api_fieldname": "campaign_id",
              "external_param": false,
              "parameter_fieldname": "campaign_id",
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "start",
          "responses": [
            {
              "description": "The campaign is starting.",
              "_key": "202"
            },
            {
              "description": "Unable to change the phase of the campaign.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Cannot find the campaign.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            },
            {
              "description": "Cannot start the campaign while in the current phase.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/update-campaigns/{campaign_id}/start",
          "summary": "Start a campaign.",
          "return_type": "update_campaign",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "update_campaign"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "state"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "campaign_id": "id"
          },
          "operation_id": "Update_Campaign_start",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "start"
        },
        {
          "description": "Stop a campaign. Stopping is a process that requires the campaign go through several [phases](https://www.pelion.com/docs/device-management/current/updating-firmware/device-management-update-using-the-apis.html).\n<br>\n**Usage example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/update-campaigns/016e83ddc645000000000001001000b5/stop \\\n-H 'Authorization: Bearer <api_key>'\n```\n",
          "field_renames": [],
          "fields": [
            {
              "description": "Helper for creating the device filter string.",
              "detail": "This helper can be used instead of setting device filter directly. This allows the campaign filter to be created in a way which is similar to the device listing filter.",
              "type": "filter",
              "foundation_reference": "devices.device.list",
              "getter_custom_method": "device_filter_helper_getter",
              "setter_custom_method": "device_filter_helper_setter",
              "_override": true,
              "api_fieldname": "device_filter_helper",
              "entity_fieldname": "device_filter_helper",
              "_key": "device_filter_helper"
            },
            {
              "description": "The campaign ID.",
              "in": "path",
              "name": "campaign_id",
              "required": true,
              "type": "string",
              "pattern": "[A-Fa-f0-9]{32}",
              "entity_fieldname": "id",
              "api_fieldname": "campaign_id",
              "external_param": false,
              "parameter_fieldname": "campaign_id",
              "_key": "id"
            }
          ],
          "method": "post",
          "mode": "stop",
          "responses": [
            {
              "description": "The campaign is stopping.",
              "_key": "202"
            },
            {
              "description": "Unable to change the phase of the campaign.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Cannot find the campaign.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            },
            {
              "description": "Cannot stop the campaign while in the current phase.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/update-campaigns/{campaign_id}/stop",
          "summary": "Stop a campaign.",
          "return_type": "update_campaign",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "update_campaign"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "state"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "campaign_id": "id"
          },
          "operation_id": "Update_Campaign_stop",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "stop"
        },
        {
          "description": "Modify an update campaign.\n<br>\n**Usage example:**\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/update-campaigns/1123007f9012ab567890120000789012 \\\n-H 'Authorization: Bearer <api_key>' \\\nd '{\n  \"description\": \"Campaign is for ...\",\n  \"device_filter\": \"123400000000000000000000000ae45\",\n  \"name\": \"campaign\",\n  \"root_manifest_id\": \"5678000000000000000000000000bd98\",\n}'\n```\n",
          "field_renames": [],
          "fields": [
            {
              "type": "boolean",
              "description": "Flag indicating whether approval is needed to start the campaign.",
              "example": "false",
              "api_fieldname": "approval_required",
              "entity_fieldname": "approval_required",
              "parameter_fieldname": "approval_required",
              "in": "body",
              "required": false,
              "_key": "approval_required"
            },
            {
              "type": "boolean",
              "description": "Flag indicating whether the campaign should be auto-stopped on reaching a threshold.",
              "example": "false",
              "api_fieldname": "autostop",
              "entity_fieldname": "autostop",
              "parameter_fieldname": "autostop",
              "in": "body",
              "required": false,
              "_key": "autostop"
            },
            {
              "description": "Percent of successful device updates to auto stop the campaign.",
              "type": "number",
              "format": "double",
              "example": "85.00",
              "api_fieldname": "autostop_success_percent",
              "entity_fieldname": "autostop_success_percent",
              "parameter_fieldname": "autostop_success_percent",
              "in": "body",
              "required": false,
              "_key": "autostop_success_percent"
            },
            {
              "description": "An optional description of the campaign.",
              "type": "string",
              "maxLength": 2000,
              "example": "This campaign updates Class XX devices to version 1.34",
              "api_fieldname": "description",
              "entity_fieldname": "description",
              "parameter_fieldname": "description",
              "in": "body",
              "required": false,
              "_key": "description"
            },
            {
              "description": "The filter for the devices the campaign targets. Refer to this using the filter ID.",
              "type": "string",
              "example": "state__eq=registered",
              "api_fieldname": "device_filter",
              "entity_fieldname": "device_filter",
              "parameter_fieldname": "device_filter",
              "in": "body",
              "required": false,
              "_key": "device_filter"
            },
            {
              "description": "Helper for creating the device filter string.",
              "detail": "This helper can be used instead of setting device filter directly. This allows the campaign filter to be created in a way which is similar to the device listing filter.",
              "type": "filter",
              "foundation_reference": "devices.device.list",
              "getter_custom_method": "device_filter_helper_getter",
              "setter_custom_method": "device_filter_helper_setter",
              "_override": true,
              "api_fieldname": "device_filter_helper",
              "entity_fieldname": "device_filter_helper",
              "_key": "device_filter_helper"
            },
            {
              "description": "The campaign ID.",
              "type": "string",
              "pattern": "[A-Fa-f0-9]{32}",
              "example": "016e83ddc648000000000001001000f5",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "campaign_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "description": "The campaign name.",
              "type": "string",
              "maxLength": 128,
              "example": "campaign",
              "api_fieldname": "name",
              "entity_fieldname": "name",
              "parameter_fieldname": "name",
              "in": "body",
              "required": false,
              "_key": "name"
            },
            {
              "description": "The ID of the manifest that will be sent to the device as part of the campaign.",
              "type": "string",
              "example": "016e83dce36a00000000000100100102",
              "api_fieldname": "root_manifest_id",
              "entity_fieldname": "root_manifest_id",
              "parameter_fieldname": "root_manifest_id",
              "in": "body",
              "required": false,
              "_key": "root_manifest_id"
            },
            {
              "description": "The scheduled start time for the campaign. The campaign will start within 1 minute when then start time has elapsed.",
              "type": "string",
              "format": "date-time",
              "example": "2017-05-22T12:37:55.576563Z",
              "x-nullable": true,
              "api_fieldname": "when",
              "entity_fieldname": "when",
              "parameter_fieldname": "when",
              "in": "body",
              "required": false,
              "_key": "when"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Update campaign updated.",
              "schema": [
                {
                  "group": "Device_Update",
                  "entity": "update_campaign",
                  "_key": "foreign_key"
                },
                {
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was created.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at"
                  },
                  "etag": {
                    "type": "string",
                    "description": "API resource entity version.",
                    "example": "2017-05-22T12:37:58.753425Z",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the entity was updated.",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at"
                  },
                  "campaign_strategy": {
                    "description": "How the campaign adds devices. A `one-shot` campaign does not add new devices after it has started. A `continuous` campaign means that devices may be added to the campaign after it has started. The default is `one-shot`.",
                    "type": "string",
                    "enum": [
                      "one-shot",
                      "continuous"
                    ],
                    "default": "one-shot",
                    "api_fieldname": "campaign_strategy",
                    "entity_fieldname": "campaign_strategy"
                  },
                  "object": {
                    "description": "Entity name: always 'update-campaign'.",
                    "type": "string",
                    "example": "update-campaign",
                    "api_fieldname": "object",
                    "entity_fieldname": "object"
                  },
                  "active_at": {
                    "description": "The time the campaign entered the active state.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "active_at",
                    "entity_fieldname": "active_at"
                  },
                  "approval_required": {
                    "type": "boolean",
                    "description": "Flag indicating whether approval is needed to start the campaign.",
                    "example": "false",
                    "api_fieldname": "approval_required",
                    "entity_fieldname": "approval_required"
                  },
                  "archived_at": {
                    "description": "The time the campaign was archived.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "archived_at",
                    "entity_fieldname": "archived_at"
                  },
                  "autostop": {
                    "type": "boolean",
                    "description": "Flag indicating whether the campaign should be auto-stopped on reaching a threshold.",
                    "example": "false",
                    "api_fieldname": "autostop",
                    "entity_fieldname": "autostop"
                  },
                  "autostop_success_percent": {
                    "description": "Percent of successful device updates to auto stop the campaign.",
                    "type": "number",
                    "format": "double",
                    "example": "85.00",
                    "api_fieldname": "autostop_success_percent",
                    "entity_fieldname": "autostop_success_percent"
                  },
                  "autostop_reason": {
                    "description": "Text description of why a campaign failed to start or why a campaign stopped.",
                    "type": "string",
                    "example": "Insufficient billing credit.",
                    "api_fieldname": "autostop_reason",
                    "entity_fieldname": "autostop_reason"
                  },
                  "description": {
                    "description": "An optional description of the campaign.",
                    "type": "string",
                    "maxLength": 2000,
                    "example": "This campaign updates Class XX devices to version 1.34",
                    "api_fieldname": "description",
                    "entity_fieldname": "description"
                  },
                  "device_filter": {
                    "description": "The filter for the devices the campaign targets. Refer to this using the filter ID.",
                    "type": "string",
                    "example": "state__eq=registered",
                    "api_fieldname": "device_filter",
                    "entity_fieldname": "device_filter"
                  },
                  "finished": {
                    "description": "The time the campaign finished.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "finished",
                    "entity_fieldname": "finished"
                  },
                  "id": {
                    "description": "The campaign ID.",
                    "type": "string",
                    "pattern": "[A-Fa-f0-9]{32}",
                    "example": "016e83ddc648000000000001001000f5",
                    "api_fieldname": "id",
                    "entity_fieldname": "id"
                  },
                  "name": {
                    "description": "The campaign name.",
                    "type": "string",
                    "maxLength": 128,
                    "example": "campaign",
                    "api_fieldname": "name",
                    "entity_fieldname": "name"
                  },
                  "root_manifest_id": {
                    "description": "The ID of the manifest that will be sent to the device as part of the campaign.",
                    "type": "string",
                    "example": "016e83dce36a00000000000100100102",
                    "api_fieldname": "root_manifest_id",
                    "entity_fieldname": "root_manifest_id"
                  },
                  "root_manifest_url": {
                    "description": "The URL for the manifest that will be sent to the device as part of the campaign.",
                    "type": "string",
                    "example": "https://api.us-east-1.mbedcloud.com/v3/firmware-manifests/016e83dce36a00000000000100100102",
                    "api_fieldname": "root_manifest_url",
                    "entity_fieldname": "root_manifest_url"
                  },
                  "starting_at": {
                    "description": "The time the campaign will be started.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "starting_at",
                    "entity_fieldname": "starting_at"
                  },
                  "started_at": {
                    "description": "The time the campaign was started.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "started_at",
                    "entity_fieldname": "started_at"
                  },
                  "stopping_at": {
                    "description": "The time the campaign will be stopped.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "stopping_at",
                    "entity_fieldname": "stopping_at"
                  },
                  "stopped_at": {
                    "description": "The time the campaign was stopped.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "api_fieldname": "stopped_at",
                    "entity_fieldname": "stopped_at"
                  },
                  "phase": {
                    "description": "The phase of the campaign.",
                    "type": "string",
                    "enum": [
                      "draft",
                      "awaiting_approval",
                      "timed",
                      "starting",
                      "active",
                      "stopping",
                      "stopped",
                      "deleted",
                      "archived"
                    ],
                    "api_fieldname": "phase",
                    "entity_fieldname": "phase"
                  },
                  "state": {
                    "description": "The state of the campaign.",
                    "type": "string",
                    "enum": [
                      "draft",
                      "scheduled",
                      "allocatingquota",
                      "allocatedquota",
                      "quotaallocationfailed",
                      "checkingmanifest",
                      "checkedmanifest",
                      "devicefetch",
                      "devicecopy",
                      "devicecheck",
                      "publishing",
                      "deploying",
                      "deployed",
                      "manifestremoved",
                      "expired",
                      "stopping",
                      "autostopped",
                      "userstopped",
                      "conflict"
                    ],
                    "x-deprecation": {
                      "issued_at": "2019-03-18T14:55:20+00:00",
                      "end_of_life_at": "2020-03-18T14:55:20+00:00",
                      "comment": "Use phase instead",
                      "links": []
                    },
                    "api_fieldname": "state",
                    "entity_fieldname": "state"
                  },
                  "when": {
                    "description": "The scheduled start time for the campaign. The campaign will start within 1 minute when then start time has elapsed.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2017-05-22T12:37:55.576563Z",
                    "x-nullable": true,
                    "api_fieldname": "when",
                    "entity_fieldname": "when"
                  },
                  "_key": "properties"
                }
              ],
              "_key": "200"
            },
            {
              "description": "Validation error: The data used to update the campaign did not validate.\n",
              "_key": "400"
            },
            {
              "description": "Not authenticated.",
              "_key": "401"
            },
            {
              "description": "Fields apart from 'name', 'description' and 'state' cannot be modified when the state is not 'draft'.",
              "_key": "403"
            },
            {
              "description": "Update campaign can't be found.",
              "_key": "404"
            }
          ],
          "path": "/v3/update-campaigns/{campaign_id}",
          "summary": "Modify a campaign",
          "return_type": "update_campaign",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "update_campaign"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "state",
            "created_at",
            "updated_at",
            "campaign_strategy",
            "active_at",
            "archived_at",
            "autostop_reason",
            "finished",
            "root_manifest_url",
            "starting_at",
            "started_at",
            "stopping_at",
            "stopped_at",
            "phase"
          ],
          "group_id": "Device_Update",
          "parameter_map": {
            "campaign_id": "id"
          },
          "operation_id": "Update_Campaign_update",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "description": "The time the campaign entered the active state.",
          "type": "string",
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "active_at",
          "readOnly": true,
          "required": false,
          "_key": "active_at"
        },
        {
          "type": "boolean",
          "description": "Flag indicating whether approval is needed to start the campaign.",
          "example": "false",
          "api_fieldname": "approval_required",
          "readOnly": false,
          "required": false,
          "_key": "approval_required"
        },
        {
          "description": "The time the campaign was archived.",
          "type": "string",
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "archived_at",
          "readOnly": true,
          "required": false,
          "_key": "archived_at"
        },
        {
          "type": "boolean",
          "description": "Flag indicating whether the campaign should be auto-stopped on reaching a threshold.",
          "example": "false",
          "api_fieldname": "autostop",
          "readOnly": false,
          "required": false,
          "_key": "autostop"
        },
        {
          "description": "Text description of why a campaign failed to start or why a campaign stopped.",
          "type": "string",
          "example": "Insufficient billing credit.",
          "api_fieldname": "autostop_reason",
          "readOnly": true,
          "required": false,
          "_key": "autostop_reason"
        },
        {
          "description": "Percent of successful device updates to auto stop the campaign.",
          "type": "number",
          "format": "double",
          "example": "85.00",
          "api_fieldname": "autostop_success_percent",
          "readOnly": false,
          "required": false,
          "_key": "autostop_success_percent"
        },
        {
          "description": "How the campaign adds devices. A `one-shot` campaign does not add new devices after it has started. A `continuous` campaign means that devices may be added to the campaign after it has started. The default is `one-shot`.",
          "type": "string",
          "enum": [
            "one-shot",
            "continuous"
          ],
          "default": "one-shot",
          "api_fieldname": "campaign_strategy",
          "readOnly": false,
          "required": false,
          "enum_reference": "update_campaign_strategy_enum",
          "_key": "campaign_strategy"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "The time the entity was created.",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "description": "An optional description of the campaign.",
          "type": "string",
          "maxLength": 2000,
          "example": "This campaign updates Class XX devices to version 1.34",
          "api_fieldname": "description",
          "readOnly": false,
          "required": false,
          "_key": "description"
        },
        {
          "description": "The filter for the devices the campaign targets. Refer to this using the filter ID.",
          "type": "string",
          "example": "state__eq=registered",
          "api_fieldname": "device_filter",
          "readOnly": false,
          "required": true,
          "_key": "device_filter"
        },
        {
          "description": "Helper for creating the device filter string.",
          "detail": "This helper can be used instead of setting device filter directly. This allows the campaign filter to be created in a way which is similar to the device listing filter.",
          "type": "filter",
          "foundation_reference": "devices.device.list",
          "getter_custom_method": "device_filter_helper_getter",
          "setter_custom_method": "device_filter_helper_setter",
          "_override": true,
          "api_fieldname": "device_filter_helper",
          "readOnly": false,
          "required": false,
          "_key": "device_filter_helper"
        },
        {
          "description": "The time the campaign finished.",
          "type": "string",
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "finished",
          "readOnly": true,
          "required": false,
          "_key": "finished"
        },
        {
          "description": "The campaign ID.",
          "type": "string",
          "pattern": "[A-Fa-f0-9]{32}",
          "example": "016e83ddc648000000000001001000f5",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "description": "The campaign name.",
          "type": "string",
          "maxLength": 128,
          "example": "campaign",
          "api_fieldname": "name",
          "readOnly": false,
          "required": false,
          "_key": "name"
        },
        {
          "description": "The phase of the campaign.",
          "type": "string",
          "enum": [
            "draft",
            "awaiting_approval",
            "timed",
            "starting",
            "active",
            "stopping",
            "stopped",
            "deleted",
            "archived"
          ],
          "api_fieldname": "phase",
          "readOnly": true,
          "required": false,
          "enum_reference": "update_campaign_phase_enum",
          "_key": "phase"
        },
        {
          "description": "The ID of the manifest that will be sent to the device as part of the campaign.",
          "type": "string",
          "example": "016e83dce36a00000000000100100102",
          "api_fieldname": "root_manifest_id",
          "readOnly": false,
          "required": false,
          "_key": "root_manifest_id"
        },
        {
          "description": "The URL for the manifest that will be sent to the device as part of the campaign.",
          "type": "string",
          "example": "https://api.us-east-1.mbedcloud.com/v3/firmware-manifests/016e83dce36a00000000000100100102",
          "api_fieldname": "root_manifest_url",
          "readOnly": true,
          "required": false,
          "_key": "root_manifest_url"
        },
        {
          "description": "The time the campaign was started.",
          "type": "string",
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "started_at",
          "readOnly": true,
          "required": false,
          "_key": "started_at"
        },
        {
          "description": "The time the campaign will be started.",
          "type": "string",
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "starting_at",
          "readOnly": true,
          "required": false,
          "_key": "starting_at"
        },
        {
          "description": "The time the campaign was stopped.",
          "type": "string",
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "stopped_at",
          "readOnly": true,
          "required": false,
          "_key": "stopped_at"
        },
        {
          "description": "The time the campaign will be stopped.",
          "type": "string",
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "stopping_at",
          "readOnly": true,
          "required": false,
          "_key": "stopping_at"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "The time the entity was updated.",
          "example": "2017-05-22T12:37:55.576563Z",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        },
        {
          "description": "The scheduled start time for the campaign. The campaign will start within 1 minute when then start time has elapsed.",
          "type": "string",
          "format": "date-time",
          "example": "2017-05-22T12:37:55.576563Z",
          "x-nullable": true,
          "api_fieldname": "when",
          "readOnly": false,
          "required": false,
          "_key": "when"
        }
      ],
      "field_renames": [],
      "tags": [
        "Device update - campaigns"
      ],
      "group_id": "Device_Update",
      "_key": "update_campaign"
    },
    {
      "swagger_models": [
        "GroupSummaryList",
        "UserInfoReq",
        "UserInfoResp",
        "UserInfoRespList",
        "UserUpdateReq"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Create or invite a new user to the account. The invited user has to accept the invitation by clicking the link in the invitation email.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/users?action=invite \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d {\"email\": \"myemail@company.com\"}\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "action",
              "in": "query",
              "description": "Action, either `create` or `invite`.",
              "required": false,
              "type": "string",
              "default": "create",
              "entity_fieldname": "action",
              "api_fieldname": "action",
              "external_param": true,
              "parameter_fieldname": "action",
              "_key": "action"
            },
            {
              "type": "string",
              "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
              "description": "Address.",
              "x-nullable": true,
              "api_fieldname": "address",
              "entity_fieldname": "address",
              "parameter_fieldname": "address",
              "in": "body",
              "required": false,
              "_key": "address"
            },
            {
              "pattern": "^(?=.{3,254}$).+\\@.+",
              "type": "string",
              "example": "user@arm.com",
              "description": "The email address.",
              "api_fieldname": "email",
              "entity_fieldname": "email",
              "parameter_fieldname": "email",
              "in": "body",
              "required": false,
              "_key": "email"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "User Doe",
              "x-nullable": true,
              "description": "The full name of the user.",
              "api_fieldname": "full_name",
              "entity_fieldname": "full_name",
              "parameter_fieldname": "full_name",
              "in": "body",
              "required": false,
              "_key": "full_name"
            },
            {
              "type": "array",
              "description": "A list of IDs of the groups this user belongs to.",
              "items": {
                "type": "string"
              },
              "api_fieldname": "groups",
              "entity_fieldname": "groups",
              "parameter_fieldname": "groups",
              "in": "body",
              "required": false,
              "_key": "groups"
            },
            {
              "type": "boolean",
              "example": true,
              "description": "A flag indicating that the user has accepted General Terms and Conditions.",
              "api_fieldname": "is_gtc_accepted",
              "entity_fieldname": "is_gtc_accepted",
              "parameter_fieldname": "is_gtc_accepted",
              "in": "body",
              "required": false,
              "_key": "is_gtc_accepted"
            },
            {
              "type": "boolean",
              "example": true,
              "description": "A flag indicating that the user has consented to receive marketing information.",
              "api_fieldname": "is_marketing_accepted",
              "entity_fieldname": "is_marketing_accepted",
              "parameter_fieldname": "is_marketing_accepted",
              "in": "body",
              "required": false,
              "_key": "is_marketing_accepted"
            },
            {
              "type": "array",
              "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
              "x-nullable": true,
              "items": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "fed/user_007",
                    "description": "The ID of the user in the identity provider's service.",
                    "readOnly": true,
                    "api_fieldname": "foreign_id",
                    "entity_fieldname": "foreign_id",
                    "_key": "foreign_id"
                  },
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "ID of the identity provider.",
                    "readOnly": false,
                    "_override": true,
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "Pelion",
                    "readOnly": false,
                    "description": "Name of the identity provider.",
                    "_override": true,
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "example": "NATIVE",
                    "readOnly": true,
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "login_profile_type",
                    "_key": "type"
                  }
                ],
                "description": "Represents a user login profile in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "login_profile"
                }
              },
              "api_fieldname": "login_profiles",
              "entity_fieldname": "login_profiles",
              "parameter_fieldname": "login_profiles",
              "in": "body",
              "required": false,
              "_key": "login_profiles"
            },
            {
              "type": "string",
              "example": "PZf9eEUH43DAPE9ULINFeuj",
              "description": "The password when creating a new user. It will be generated when not present in the request.",
              "x-nullable": true,
              "api_fieldname": "password",
              "entity_fieldname": "password",
              "parameter_fieldname": "password",
              "in": "body",
              "required": false,
              "_key": "password"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "+44 (1223) 400 400",
              "description": "Phone number.",
              "x-nullable": true,
              "api_fieldname": "phone_number",
              "entity_fieldname": "phone_number",
              "parameter_fieldname": "phone_number",
              "in": "body",
              "required": false,
              "_key": "phone_number"
            },
            {
              "pattern": "[\\w\\-,._@+=]{4,30}",
              "type": "string",
              "example": "admin",
              "description": "A username.",
              "x-nullable": true,
              "api_fieldname": "username",
              "entity_fieldname": "username",
              "parameter_fieldname": "username",
              "in": "body",
              "required": false,
              "_key": "username"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "New entity created.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "email",
                  "etag",
                  "id",
                  "object",
                  "status"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "array",
                    "description": "List of active user sessions.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "ip_address",
                        "login_time",
                        "object",
                        "reference_token",
                        "user_agent"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The UUID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "api_fieldname": "account_id",
                          "entity_fieldname": "account_id",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "api_fieldname": "created_at",
                          "entity_fieldname": "created_at",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "example": "127.0.0.1",
                          "description": "IP address of the client.",
                          "api_fieldname": "ip_address",
                          "entity_fieldname": "ip_address",
                          "_key": "ip_address"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T17:52:07Z",
                          "description": "The login time of the user.",
                          "api_fieldname": "login_time",
                          "entity_fieldname": "login_time",
                          "_key": "login_time"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'user-session'",
                          "enum": [
                            "user-session"
                          ],
                          "api_fieldname": "object",
                          "entity_fieldname": "object",
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk",
                          "description": "The reference token.",
                          "api_fieldname": "reference_token",
                          "entity_fieldname": "reference_token",
                          "_key": "reference_token"
                        },
                        {
                          "type": "string",
                          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                          "description": "User Agent header from the login request.",
                          "api_fieldname": "user_agent",
                          "entity_fieldname": "user_agent",
                          "_key": "user_agent"
                        }
                      ],
                      "description": "Represents an active user session.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "active_session"
                      }
                    },
                    "api_fieldname": "active_sessions",
                    "entity_fieldname": "active_sessions",
                    "_key": "active_sessions"
                  },
                  {
                    "type": "string",
                    "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
                    "description": "Address.",
                    "x-nullable": true,
                    "api_fieldname": "address",
                    "entity_fieldname": "address",
                    "_key": "address"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727683,
                    "description": "A timestamp of the user creation in the storage, in milliseconds.",
                    "api_fieldname": "creation_time",
                    "entity_fieldname": "creation_time",
                    "_key": "creation_time"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "description": "User's account-specific custom properties. The value is a string.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "custom_fields",
                    "entity_fieldname": "custom_fields",
                    "_key": "custom_fields"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "user@arm.com",
                    "description": "The email address.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "_key": "email"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating whether the user's email address has been verified or not.",
                    "api_fieldname": "email_verified",
                    "entity_fieldname": "email_verified",
                    "_key": "email_verified"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "User Doe",
                    "x-nullable": true,
                    "description": "The full name of the user.",
                    "api_fieldname": "full_name",
                    "entity_fieldname": "full_name",
                    "_key": "full_name"
                  },
                  {
                    "type": "array",
                    "description": "A list of IDs of the groups this user belongs to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The ID of the user.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating that the user has accepted General Terms and Conditions.",
                    "api_fieldname": "is_gtc_accepted",
                    "entity_fieldname": "is_gtc_accepted",
                    "_key": "is_gtc_accepted"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating that the user has consented to receive marketing information.",
                    "api_fieldname": "is_marketing_accepted",
                    "entity_fieldname": "is_marketing_accepted",
                    "_key": "is_marketing_accepted"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
                    "api_fieldname": "is_totp_enabled",
                    "entity_fieldname": "is_totp_enabled",
                    "_key": "is_totp_enabled"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "A timestamp of the latest login of the user, in milliseconds.",
                    "api_fieldname": "last_login_time",
                    "entity_fieldname": "last_login_time",
                    "_key": "last_login_time"
                  },
                  {
                    "type": "array",
                    "maxItems": 5,
                    "description": "Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.",
                    "items": {
                      "type": "object",
                      "required": [
                        "date",
                        "ip_address",
                        "success",
                        "user_agent"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T17:52:07Z",
                          "description": "UTC time RFC3339 for this login attempt.",
                          "api_fieldname": "date",
                          "entity_fieldname": "date",
                          "_key": "date"
                        },
                        {
                          "type": "string",
                          "example": "127.0.0.1",
                          "description": "IP address of the client.",
                          "api_fieldname": "ip_address",
                          "entity_fieldname": "ip_address",
                          "_key": "ip_address"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "Flag indicating whether login attempt was successful or not.",
                          "api_fieldname": "success",
                          "entity_fieldname": "success",
                          "_key": "success"
                        },
                        {
                          "type": "string",
                          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                          "description": "User Agent header from the login request.",
                          "api_fieldname": "user_agent",
                          "entity_fieldname": "user_agent",
                          "_key": "user_agent"
                        }
                      ],
                      "description": "Represents an entry in login history.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_history"
                      }
                    },
                    "api_fieldname": "login_history",
                    "entity_fieldname": "login_history",
                    "_key": "login_history"
                  },
                  {
                    "type": "array",
                    "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                    "x-nullable": true,
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "fed/user_007",
                          "description": "The ID of the user in the identity provider's service.",
                          "readOnly": true,
                          "api_fieldname": "foreign_id",
                          "entity_fieldname": "foreign_id",
                          "_key": "foreign_id"
                        },
                        {
                          "type": "string",
                          "example": "01619571f3c00242ac12000600000000",
                          "description": "ID of the identity provider.",
                          "readOnly": false,
                          "_override": true,
                          "api_fieldname": "id",
                          "entity_fieldname": "id",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "Pelion",
                          "readOnly": false,
                          "description": "Name of the identity provider.",
                          "_override": true,
                          "api_fieldname": "name",
                          "entity_fieldname": "name",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Identity provider type.",
                          "example": "NATIVE",
                          "readOnly": true,
                          "enum": [
                            "NATIVE",
                            "MBED",
                            "SAML2",
                            "OIDC"
                          ],
                          "api_fieldname": "type",
                          "entity_fieldname": "login_profile_type",
                          "_key": "type"
                        }
                      ],
                      "description": "Represents a user login profile in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_profile"
                      }
                    },
                    "api_fieldname": "login_profiles",
                    "entity_fieldname": "login_profiles",
                    "_key": "login_profiles"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `user`.",
                    "enum": [
                      "user"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "PZf9eEUH43DAPE9ULINFeuj",
                    "description": "The password when creating a new user. It will be generated when not present in the request.",
                    "x-nullable": true,
                    "api_fieldname": "password",
                    "entity_fieldname": "password",
                    "_key": "password"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "A timestamp of the latest change of the user password, in milliseconds.",
                    "api_fieldname": "password_changed_time",
                    "entity_fieldname": "password_changed_time",
                    "_key": "password_changed_time"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "+44 (1223) 400 400",
                    "description": "Phone number.",
                    "x-nullable": true,
                    "api_fieldname": "phone_number",
                    "entity_fieldname": "phone_number",
                    "_key": "phone_number"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the user. ENROLLING state indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately. INACTIVE users are locked out and not permitted to use the system.",
                    "enum": [
                      "ENROLLING",
                      "INVITED",
                      "ACTIVE",
                      "RESET",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "A list of scratch codes for the two-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "totp_scratch_codes",
                    "entity_fieldname": "totp_scratch_codes",
                    "_key": "totp_scratch_codes"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "pattern": "[\\w\\-,._@+=]{4,30}",
                    "type": "string",
                    "example": "admin",
                    "description": "A username.",
                    "x-nullable": true,
                    "api_fieldname": "username",
                    "entity_fieldname": "username",
                    "_key": "username"
                  }
                ],
                "description": "Represents a user in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_user"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data, for example, an invalid email address.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A user with the given username or email already exists.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/users",
          "summary": "Create a new user.",
          "return_type": "user",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "user"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "updated_at",
            "status",
            "email_verified",
            "creation_time",
            "last_login_time",
            "password_changed_time",
            "account_id",
            "login_history",
            "is_totp_enabled",
            "totp_scratch_codes",
            "custom_fields",
            "active_sessions"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "user_id": "id"
          },
          "operation_id": "createUser",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete a user.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/users/{user_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user to delete.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "user_id",
              "external_param": false,
              "parameter_fieldname": "user_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Bad request, for example, trying to delete active user.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A user with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/users/{user_id}",
          "summary": "Delete a user.",
          "return_type": "user",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "user"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "user_id": "id"
          },
          "operation_id": "deleteUser",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve an array of users.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/users \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "user_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "email",
                        "etag",
                        "id",
                        "object",
                        "status"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "array",
                          "description": "List of active user sessions.",
                          "items": {
                            "type": "object",
                            "required": [
                              "account_id",
                              "ip_address",
                              "login_time",
                              "object",
                              "reference_token",
                              "user_agent"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "example": "01619571e2e90242ac12000600000000",
                                "description": "The UUID of the account.",
                                "pattern": "[a-f0-9]{32}",
                                "api_fieldname": "account_id",
                                "entity_fieldname": "account_id",
                                "_key": "account_id"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-13T09:35:20Z",
                                "description": "Creation UTC time RFC3339.",
                                "api_fieldname": "created_at",
                                "entity_fieldname": "created_at",
                                "_key": "created_at"
                              },
                              {
                                "type": "string",
                                "example": "127.0.0.1",
                                "description": "IP address of the client.",
                                "api_fieldname": "ip_address",
                                "entity_fieldname": "ip_address",
                                "_key": "ip_address"
                              },
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T17:52:07Z",
                                "description": "The login time of the user.",
                                "api_fieldname": "login_time",
                                "entity_fieldname": "login_time",
                                "_key": "login_time"
                              },
                              {
                                "type": "string",
                                "description": "Entity name: always 'user-session'",
                                "enum": [
                                  "user-session"
                                ],
                                "api_fieldname": "object",
                                "entity_fieldname": "object",
                                "_key": "object"
                              },
                              {
                                "type": "string",
                                "example": "rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk",
                                "description": "The reference token.",
                                "api_fieldname": "reference_token",
                                "entity_fieldname": "reference_token",
                                "_key": "reference_token"
                              },
                              {
                                "type": "string",
                                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                                "description": "User Agent header from the login request.",
                                "api_fieldname": "user_agent",
                                "entity_fieldname": "user_agent",
                                "_key": "user_agent"
                              }
                            ],
                            "description": "Represents an active user session.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "active_session"
                            }
                          },
                          "_key": "active_sessions"
                        },
                        {
                          "type": "string",
                          "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
                          "description": "Address.",
                          "x-nullable": true,
                          "_key": "address"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727683,
                          "description": "A timestamp of the user creation in the storage, in milliseconds.",
                          "_key": "creation_time"
                        },
                        {
                          "type": "object",
                          "x-nullable": true,
                          "description": "User's account-specific custom properties. The value is a string.",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "_key": "custom_fields"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "example": "user@arm.com",
                          "description": "The email address.",
                          "_key": "email"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating whether the user's email address has been verified or not.",
                          "_key": "email_verified"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "User Doe",
                          "x-nullable": true,
                          "description": "The full name of the user.",
                          "_key": "full_name"
                        },
                        {
                          "type": "array",
                          "description": "A list of IDs of the groups this user belongs to.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "groups"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e89242ac12000600000000",
                          "description": "The ID of the user.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating that the user has accepted General Terms and Conditions.",
                          "_key": "is_gtc_accepted"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating that the user has consented to receive marketing information.",
                          "_key": "is_marketing_accepted"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
                          "_key": "is_totp_enabled"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727688,
                          "description": "A timestamp of the latest login of the user, in milliseconds.",
                          "_key": "last_login_time"
                        },
                        {
                          "type": "array",
                          "maxItems": 5,
                          "description": "Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.",
                          "items": {
                            "type": "object",
                            "required": [
                              "date",
                              "ip_address",
                              "success",
                              "user_agent"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-02-14T17:52:07Z",
                                "description": "UTC time RFC3339 for this login attempt.",
                                "api_fieldname": "date",
                                "entity_fieldname": "date",
                                "_key": "date"
                              },
                              {
                                "type": "string",
                                "example": "127.0.0.1",
                                "description": "IP address of the client.",
                                "api_fieldname": "ip_address",
                                "entity_fieldname": "ip_address",
                                "_key": "ip_address"
                              },
                              {
                                "type": "boolean",
                                "example": true,
                                "description": "Flag indicating whether login attempt was successful or not.",
                                "api_fieldname": "success",
                                "entity_fieldname": "success",
                                "_key": "success"
                              },
                              {
                                "type": "string",
                                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                                "description": "User Agent header from the login request.",
                                "api_fieldname": "user_agent",
                                "entity_fieldname": "user_agent",
                                "_key": "user_agent"
                              }
                            ],
                            "description": "Represents an entry in login history.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "login_history"
                            }
                          },
                          "_key": "login_history"
                        },
                        {
                          "type": "array",
                          "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                          "x-nullable": true,
                          "items": {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "example": "fed/user_007",
                                "description": "The ID of the user in the identity provider's service.",
                                "readOnly": true,
                                "api_fieldname": "foreign_id",
                                "entity_fieldname": "foreign_id",
                                "_key": "foreign_id"
                              },
                              {
                                "type": "string",
                                "example": "01619571f3c00242ac12000600000000",
                                "description": "ID of the identity provider.",
                                "readOnly": false,
                                "_override": true,
                                "api_fieldname": "id",
                                "entity_fieldname": "id",
                                "_key": "id"
                              },
                              {
                                "type": "string",
                                "example": "Pelion",
                                "readOnly": false,
                                "description": "Name of the identity provider.",
                                "_override": true,
                                "api_fieldname": "name",
                                "entity_fieldname": "name",
                                "_key": "name"
                              },
                              {
                                "type": "string",
                                "description": "Identity provider type.",
                                "example": "NATIVE",
                                "readOnly": true,
                                "enum": [
                                  "NATIVE",
                                  "MBED",
                                  "SAML2",
                                  "OIDC"
                                ],
                                "api_fieldname": "type",
                                "entity_fieldname": "login_profile_type",
                                "_key": "type"
                              }
                            ],
                            "description": "Represents a user login profile in Device Management.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "login_profile"
                            }
                          },
                          "_key": "login_profiles"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `user`.",
                          "enum": [
                            "user"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "PZf9eEUH43DAPE9ULINFeuj",
                          "description": "The password when creating a new user. It will be generated when not present in the request.",
                          "x-nullable": true,
                          "_key": "password"
                        },
                        {
                          "type": "integer",
                          "format": "int64",
                          "example": 1518630727688,
                          "description": "A timestamp of the latest change of the user password, in milliseconds.",
                          "_key": "password_changed_time"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "+44 (1223) 400 400",
                          "description": "Phone number.",
                          "x-nullable": true,
                          "_key": "phone_number"
                        },
                        {
                          "type": "string",
                          "example": "ACTIVE",
                          "description": "The status of the user. ENROLLING state indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately. INACTIVE users are locked out and not permitted to use the system.",
                          "enum": [
                            "ENROLLING",
                            "INVITED",
                            "ACTIVE",
                            "RESET",
                            "INACTIVE"
                          ],
                          "_key": "status"
                        },
                        {
                          "type": "array",
                          "x-nullable": true,
                          "description": "A list of scratch codes for the two-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "totp_scratch_codes"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "pattern": "[\\w\\-,._@+=]{4,30}",
                          "type": "string",
                          "example": "admin",
                          "description": "A username.",
                          "x-nullable": true,
                          "_key": "username"
                        }
                      ],
                      "description": "Represents a user in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "user"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000), or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "user"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/users",
          "summary": "Get users.",
          "return_type": "paginated_response(user)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "user"
          },
          "x_filter": {
            "email": [
              "eq"
            ],
            "status": [
              "eq",
              "in",
              "nin"
            ],
            "login_profiles": [
              "eq"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data",
            "email__eq",
            "status__eq",
            "status__in",
            "status__nin",
            "login_profiles__eq"
          ],
          "foreign_key_priority": "self",
          "group_id": "Accounts",
          "parameter_map": {
            "user_id": "id"
          },
          "operation_id": "getAllUsers",
          "pagination": true,
          "foreign_key": {
            "group": "Accounts",
            "entity": "user"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve an array of policy groups associated with a user.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/users/{user_id}/groups \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "user_id",
              "external_param": false,
              "parameter_fieldname": "user_id",
              "_key": "id"
            },
            {
              "name": "include",
              "in": "query",
              "description": "Comma-separated additional data to return. Currently supported: total_count.",
              "required": false,
              "type": "string",
              "entity_fieldname": "include",
              "api_fieldname": "include",
              "external_param": true,
              "parameter_fieldname": "include",
              "_key": "include"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "user_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "policy_groups",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "apikey_count",
                        "etag",
                        "id",
                        "name",
                        "object",
                        "user_count"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account this group belongs to.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 0,
                          "description": "The number of API keys in this group.",
                          "x-deprecation": {
                            "issued_at": "2020-08-01T00:00:00+00:00",
                            "end_of_life_at": "2021-08-01T00:00:00+00:00",
                            "comment": "This property is deprecated. See 'application_count' property.",
                            "links": []
                          },
                          "_key": "apikey_count"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 0,
                          "description": "The number of applications in this group.",
                          "_key": "application_count"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "example": "01619571dec00242ac12000600000000",
                          "description": "The ID of the group.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "maxLength": 100,
                          "example": "Administrators",
                          "description": "The name of the group.",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always `group`.",
                          "enum": [
                            "group"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "integer",
                          "format": "int32",
                          "example": 1,
                          "description": "The number of users in this group.",
                          "_key": "user_count"
                        }
                      ],
                      "description": "This object contains basic information about groups.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "subtenant_policy_group"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000), or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_policy_group"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A user with the given ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/users/{user_id}/groups",
          "summary": "Get policy groups for a user.",
          "return_type": "paginated_response(policy_group)",
          "return_info": {
            "self": false,
            "custom": false,
            "type": "policy_group"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "user_id": "id"
          },
          "operation_id": "getGroupsOfUser",
          "foreign_key": {
            "entity": "policy_group"
          },
          "pagination": true,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "policy_groups"
        },
        {
          "description": "Retrieve the details of a user.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/users/{user_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e89242ac12000600000000",
              "description": "The ID of the user.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "user_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "email",
                  "etag",
                  "id",
                  "object",
                  "status"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "array",
                    "description": "List of active user sessions.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "ip_address",
                        "login_time",
                        "object",
                        "reference_token",
                        "user_agent"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The UUID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "api_fieldname": "account_id",
                          "entity_fieldname": "account_id",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "api_fieldname": "created_at",
                          "entity_fieldname": "created_at",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "example": "127.0.0.1",
                          "description": "IP address of the client.",
                          "api_fieldname": "ip_address",
                          "entity_fieldname": "ip_address",
                          "_key": "ip_address"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T17:52:07Z",
                          "description": "The login time of the user.",
                          "api_fieldname": "login_time",
                          "entity_fieldname": "login_time",
                          "_key": "login_time"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'user-session'",
                          "enum": [
                            "user-session"
                          ],
                          "api_fieldname": "object",
                          "entity_fieldname": "object",
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk",
                          "description": "The reference token.",
                          "api_fieldname": "reference_token",
                          "entity_fieldname": "reference_token",
                          "_key": "reference_token"
                        },
                        {
                          "type": "string",
                          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                          "description": "User Agent header from the login request.",
                          "api_fieldname": "user_agent",
                          "entity_fieldname": "user_agent",
                          "_key": "user_agent"
                        }
                      ],
                      "description": "Represents an active user session.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "active_session"
                      }
                    },
                    "api_fieldname": "active_sessions",
                    "entity_fieldname": "active_sessions",
                    "_key": "active_sessions"
                  },
                  {
                    "type": "string",
                    "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
                    "description": "Address.",
                    "x-nullable": true,
                    "api_fieldname": "address",
                    "entity_fieldname": "address",
                    "_key": "address"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727683,
                    "description": "A timestamp of the user creation in the storage, in milliseconds.",
                    "api_fieldname": "creation_time",
                    "entity_fieldname": "creation_time",
                    "_key": "creation_time"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "description": "User's account-specific custom properties. The value is a string.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "custom_fields",
                    "entity_fieldname": "custom_fields",
                    "_key": "custom_fields"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "user@arm.com",
                    "description": "The email address.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "_key": "email"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating whether the user's email address has been verified or not.",
                    "api_fieldname": "email_verified",
                    "entity_fieldname": "email_verified",
                    "_key": "email_verified"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "User Doe",
                    "x-nullable": true,
                    "description": "The full name of the user.",
                    "api_fieldname": "full_name",
                    "entity_fieldname": "full_name",
                    "_key": "full_name"
                  },
                  {
                    "type": "array",
                    "description": "A list of IDs of the groups this user belongs to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The ID of the user.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating that the user has accepted General Terms and Conditions.",
                    "api_fieldname": "is_gtc_accepted",
                    "entity_fieldname": "is_gtc_accepted",
                    "_key": "is_gtc_accepted"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating that the user has consented to receive marketing information.",
                    "api_fieldname": "is_marketing_accepted",
                    "entity_fieldname": "is_marketing_accepted",
                    "_key": "is_marketing_accepted"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
                    "api_fieldname": "is_totp_enabled",
                    "entity_fieldname": "is_totp_enabled",
                    "_key": "is_totp_enabled"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "A timestamp of the latest login of the user, in milliseconds.",
                    "api_fieldname": "last_login_time",
                    "entity_fieldname": "last_login_time",
                    "_key": "last_login_time"
                  },
                  {
                    "type": "array",
                    "maxItems": 5,
                    "description": "Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.",
                    "items": {
                      "type": "object",
                      "required": [
                        "date",
                        "ip_address",
                        "success",
                        "user_agent"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T17:52:07Z",
                          "description": "UTC time RFC3339 for this login attempt.",
                          "api_fieldname": "date",
                          "entity_fieldname": "date",
                          "_key": "date"
                        },
                        {
                          "type": "string",
                          "example": "127.0.0.1",
                          "description": "IP address of the client.",
                          "api_fieldname": "ip_address",
                          "entity_fieldname": "ip_address",
                          "_key": "ip_address"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "Flag indicating whether login attempt was successful or not.",
                          "api_fieldname": "success",
                          "entity_fieldname": "success",
                          "_key": "success"
                        },
                        {
                          "type": "string",
                          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                          "description": "User Agent header from the login request.",
                          "api_fieldname": "user_agent",
                          "entity_fieldname": "user_agent",
                          "_key": "user_agent"
                        }
                      ],
                      "description": "Represents an entry in login history.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_history"
                      }
                    },
                    "api_fieldname": "login_history",
                    "entity_fieldname": "login_history",
                    "_key": "login_history"
                  },
                  {
                    "type": "array",
                    "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                    "x-nullable": true,
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "fed/user_007",
                          "description": "The ID of the user in the identity provider's service.",
                          "readOnly": true,
                          "api_fieldname": "foreign_id",
                          "entity_fieldname": "foreign_id",
                          "_key": "foreign_id"
                        },
                        {
                          "type": "string",
                          "example": "01619571f3c00242ac12000600000000",
                          "description": "ID of the identity provider.",
                          "readOnly": false,
                          "_override": true,
                          "api_fieldname": "id",
                          "entity_fieldname": "id",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "Pelion",
                          "readOnly": false,
                          "description": "Name of the identity provider.",
                          "_override": true,
                          "api_fieldname": "name",
                          "entity_fieldname": "name",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Identity provider type.",
                          "example": "NATIVE",
                          "readOnly": true,
                          "enum": [
                            "NATIVE",
                            "MBED",
                            "SAML2",
                            "OIDC"
                          ],
                          "api_fieldname": "type",
                          "entity_fieldname": "login_profile_type",
                          "_key": "type"
                        }
                      ],
                      "description": "Represents a user login profile in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_profile"
                      }
                    },
                    "api_fieldname": "login_profiles",
                    "entity_fieldname": "login_profiles",
                    "_key": "login_profiles"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `user`.",
                    "enum": [
                      "user"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "PZf9eEUH43DAPE9ULINFeuj",
                    "description": "The password when creating a new user. It will be generated when not present in the request.",
                    "x-nullable": true,
                    "api_fieldname": "password",
                    "entity_fieldname": "password",
                    "_key": "password"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "A timestamp of the latest change of the user password, in milliseconds.",
                    "api_fieldname": "password_changed_time",
                    "entity_fieldname": "password_changed_time",
                    "_key": "password_changed_time"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "+44 (1223) 400 400",
                    "description": "Phone number.",
                    "x-nullable": true,
                    "api_fieldname": "phone_number",
                    "entity_fieldname": "phone_number",
                    "_key": "phone_number"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the user. ENROLLING state indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately. INACTIVE users are locked out and not permitted to use the system.",
                    "enum": [
                      "ENROLLING",
                      "INVITED",
                      "ACTIVE",
                      "RESET",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "A list of scratch codes for the two-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "totp_scratch_codes",
                    "entity_fieldname": "totp_scratch_codes",
                    "_key": "totp_scratch_codes"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "pattern": "[\\w\\-,._@+=]{4,30}",
                    "type": "string",
                    "example": "admin",
                    "description": "A username.",
                    "x-nullable": true,
                    "api_fieldname": "username",
                    "entity_fieldname": "username",
                    "_key": "username"
                  }
                ],
                "description": "Represents a user in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_user"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A user with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/users/{user_id}",
          "summary": "Details of a user.",
          "return_type": "user",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "user"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "status",
            "username",
            "password",
            "full_name",
            "email",
            "address",
            "phone_number",
            "groups",
            "is_gtc_accepted",
            "is_marketing_accepted",
            "email_verified",
            "creation_time",
            "last_login_time",
            "password_changed_time",
            "account_id",
            "login_history",
            "is_totp_enabled",
            "login_profiles",
            "totp_scratch_codes",
            "custom_fields",
            "active_sessions"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "user_id": "id"
          },
          "operation_id": "getUser",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        },
        {
          "description": "Update user details.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/{user_id} \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d '{\"username\": \"myusername\"}'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
              "description": "Address.",
              "x-nullable": true,
              "api_fieldname": "address",
              "entity_fieldname": "address",
              "parameter_fieldname": "address",
              "in": "body",
              "required": false,
              "_key": "address"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "User Doe",
              "x-nullable": true,
              "description": "The full name of the user.",
              "api_fieldname": "full_name",
              "entity_fieldname": "full_name",
              "parameter_fieldname": "full_name",
              "in": "body",
              "required": false,
              "_key": "full_name"
            },
            {
              "type": "array",
              "description": "A list of IDs of the groups this user belongs to.",
              "items": {
                "type": "string"
              },
              "api_fieldname": "groups",
              "entity_fieldname": "groups",
              "parameter_fieldname": "groups",
              "in": "body",
              "required": false,
              "_key": "groups"
            },
            {
              "type": "string",
              "example": "01619571e2e89242ac12000600000000",
              "description": "The ID of the user.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "user_id",
              "in": "path",
              "required": true,
              "_key": "id"
            },
            {
              "type": "boolean",
              "example": true,
              "description": "A flag indicating that the user has accepted General Terms and Conditions.",
              "api_fieldname": "is_gtc_accepted",
              "entity_fieldname": "is_gtc_accepted",
              "parameter_fieldname": "is_gtc_accepted",
              "in": "body",
              "required": false,
              "_key": "is_gtc_accepted"
            },
            {
              "type": "boolean",
              "example": true,
              "description": "A flag indicating that the user has consented to receive marketing information.",
              "api_fieldname": "is_marketing_accepted",
              "entity_fieldname": "is_marketing_accepted",
              "parameter_fieldname": "is_marketing_accepted",
              "in": "body",
              "required": false,
              "_key": "is_marketing_accepted"
            },
            {
              "type": "boolean",
              "example": true,
              "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
              "api_fieldname": "is_totp_enabled",
              "entity_fieldname": "is_totp_enabled",
              "parameter_fieldname": "is_totp_enabled",
              "in": "body",
              "required": false,
              "_key": "is_totp_enabled"
            },
            {
              "type": "array",
              "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
              "x-nullable": true,
              "items": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "fed/user_007",
                    "description": "The ID of the user in the identity provider's service.",
                    "readOnly": true,
                    "api_fieldname": "foreign_id",
                    "entity_fieldname": "foreign_id",
                    "_key": "foreign_id"
                  },
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "ID of the identity provider.",
                    "readOnly": false,
                    "_override": true,
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "Pelion",
                    "readOnly": false,
                    "description": "Name of the identity provider.",
                    "_override": true,
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "example": "NATIVE",
                    "readOnly": true,
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "login_profile_type",
                    "_key": "type"
                  }
                ],
                "description": "Represents a user login profile in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "login_profile"
                }
              },
              "api_fieldname": "login_profiles",
              "entity_fieldname": "login_profiles",
              "parameter_fieldname": "login_profiles",
              "in": "body",
              "required": false,
              "_key": "login_profiles"
            },
            {
              "type": "string",
              "maxLength": 100,
              "example": "+44 (1223) 400 400",
              "description": "Phone number.",
              "x-nullable": true,
              "api_fieldname": "phone_number",
              "entity_fieldname": "phone_number",
              "parameter_fieldname": "phone_number",
              "in": "body",
              "required": false,
              "_key": "phone_number"
            },
            {
              "pattern": "[\\w\\-,._@+=]{4,30}",
              "type": "string",
              "example": "admin",
              "description": "A username.",
              "x-nullable": true,
              "api_fieldname": "username",
              "entity_fieldname": "username",
              "parameter_fieldname": "username",
              "in": "body",
              "required": false,
              "_key": "username"
            }
          ],
          "method": "put",
          "mode": "update",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "email",
                  "etag",
                  "id",
                  "object",
                  "status"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "array",
                    "description": "List of active user sessions.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "ip_address",
                        "login_time",
                        "object",
                        "reference_token",
                        "user_agent"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The UUID of the account.",
                          "pattern": "[a-f0-9]{32}",
                          "api_fieldname": "account_id",
                          "entity_fieldname": "account_id",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "api_fieldname": "created_at",
                          "entity_fieldname": "created_at",
                          "_key": "created_at"
                        },
                        {
                          "type": "string",
                          "example": "127.0.0.1",
                          "description": "IP address of the client.",
                          "api_fieldname": "ip_address",
                          "entity_fieldname": "ip_address",
                          "_key": "ip_address"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T17:52:07Z",
                          "description": "The login time of the user.",
                          "api_fieldname": "login_time",
                          "entity_fieldname": "login_time",
                          "_key": "login_time"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'user-session'",
                          "enum": [
                            "user-session"
                          ],
                          "api_fieldname": "object",
                          "entity_fieldname": "object",
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "example": "rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk",
                          "description": "The reference token.",
                          "api_fieldname": "reference_token",
                          "entity_fieldname": "reference_token",
                          "_key": "reference_token"
                        },
                        {
                          "type": "string",
                          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                          "description": "User Agent header from the login request.",
                          "api_fieldname": "user_agent",
                          "entity_fieldname": "user_agent",
                          "_key": "user_agent"
                        }
                      ],
                      "description": "Represents an active user session.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "active_session"
                      }
                    },
                    "api_fieldname": "active_sessions",
                    "entity_fieldname": "active_sessions",
                    "_key": "active_sessions"
                  },
                  {
                    "type": "string",
                    "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
                    "description": "Address.",
                    "x-nullable": true,
                    "api_fieldname": "address",
                    "entity_fieldname": "address",
                    "_key": "address"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727683,
                    "description": "A timestamp of the user creation in the storage, in milliseconds.",
                    "api_fieldname": "creation_time",
                    "entity_fieldname": "creation_time",
                    "_key": "creation_time"
                  },
                  {
                    "type": "object",
                    "x-nullable": true,
                    "description": "User's account-specific custom properties. The value is a string.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "api_fieldname": "custom_fields",
                    "entity_fieldname": "custom_fields",
                    "_key": "custom_fields"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "user@arm.com",
                    "description": "The email address.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "_key": "email"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating whether the user's email address has been verified or not.",
                    "api_fieldname": "email_verified",
                    "entity_fieldname": "email_verified",
                    "_key": "email_verified"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "User Doe",
                    "x-nullable": true,
                    "description": "The full name of the user.",
                    "api_fieldname": "full_name",
                    "entity_fieldname": "full_name",
                    "_key": "full_name"
                  },
                  {
                    "type": "array",
                    "description": "A list of IDs of the groups this user belongs to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The ID of the user.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating that the user has accepted General Terms and Conditions.",
                    "api_fieldname": "is_gtc_accepted",
                    "entity_fieldname": "is_gtc_accepted",
                    "_key": "is_gtc_accepted"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating that the user has consented to receive marketing information.",
                    "api_fieldname": "is_marketing_accepted",
                    "entity_fieldname": "is_marketing_accepted",
                    "_key": "is_marketing_accepted"
                  },
                  {
                    "type": "boolean",
                    "example": true,
                    "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
                    "api_fieldname": "is_totp_enabled",
                    "entity_fieldname": "is_totp_enabled",
                    "_key": "is_totp_enabled"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "A timestamp of the latest login of the user, in milliseconds.",
                    "api_fieldname": "last_login_time",
                    "entity_fieldname": "last_login_time",
                    "_key": "last_login_time"
                  },
                  {
                    "type": "array",
                    "maxItems": 5,
                    "description": "Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.",
                    "items": {
                      "type": "object",
                      "required": [
                        "date",
                        "ip_address",
                        "success",
                        "user_agent"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T17:52:07Z",
                          "description": "UTC time RFC3339 for this login attempt.",
                          "api_fieldname": "date",
                          "entity_fieldname": "date",
                          "_key": "date"
                        },
                        {
                          "type": "string",
                          "example": "127.0.0.1",
                          "description": "IP address of the client.",
                          "api_fieldname": "ip_address",
                          "entity_fieldname": "ip_address",
                          "_key": "ip_address"
                        },
                        {
                          "type": "boolean",
                          "example": true,
                          "description": "Flag indicating whether login attempt was successful or not.",
                          "api_fieldname": "success",
                          "entity_fieldname": "success",
                          "_key": "success"
                        },
                        {
                          "type": "string",
                          "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                          "description": "User Agent header from the login request.",
                          "api_fieldname": "user_agent",
                          "entity_fieldname": "user_agent",
                          "_key": "user_agent"
                        }
                      ],
                      "description": "Represents an entry in login history.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_history"
                      }
                    },
                    "api_fieldname": "login_history",
                    "entity_fieldname": "login_history",
                    "_key": "login_history"
                  },
                  {
                    "type": "array",
                    "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                    "x-nullable": true,
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "fed/user_007",
                          "description": "The ID of the user in the identity provider's service.",
                          "readOnly": true,
                          "api_fieldname": "foreign_id",
                          "entity_fieldname": "foreign_id",
                          "_key": "foreign_id"
                        },
                        {
                          "type": "string",
                          "example": "01619571f3c00242ac12000600000000",
                          "description": "ID of the identity provider.",
                          "readOnly": false,
                          "_override": true,
                          "api_fieldname": "id",
                          "entity_fieldname": "id",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "Pelion",
                          "readOnly": false,
                          "description": "Name of the identity provider.",
                          "_override": true,
                          "api_fieldname": "name",
                          "entity_fieldname": "name",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Identity provider type.",
                          "example": "NATIVE",
                          "readOnly": true,
                          "enum": [
                            "NATIVE",
                            "MBED",
                            "SAML2",
                            "OIDC"
                          ],
                          "api_fieldname": "type",
                          "entity_fieldname": "login_profile_type",
                          "_key": "type"
                        }
                      ],
                      "description": "Represents a user login profile in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_profile"
                      }
                    },
                    "api_fieldname": "login_profiles",
                    "entity_fieldname": "login_profiles",
                    "_key": "login_profiles"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `user`.",
                    "enum": [
                      "user"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "example": "PZf9eEUH43DAPE9ULINFeuj",
                    "description": "The password when creating a new user. It will be generated when not present in the request.",
                    "x-nullable": true,
                    "api_fieldname": "password",
                    "entity_fieldname": "password",
                    "_key": "password"
                  },
                  {
                    "type": "integer",
                    "format": "int64",
                    "example": 1518630727688,
                    "description": "A timestamp of the latest change of the user password, in milliseconds.",
                    "api_fieldname": "password_changed_time",
                    "entity_fieldname": "password_changed_time",
                    "_key": "password_changed_time"
                  },
                  {
                    "type": "string",
                    "maxLength": 100,
                    "example": "+44 (1223) 400 400",
                    "description": "Phone number.",
                    "x-nullable": true,
                    "api_fieldname": "phone_number",
                    "entity_fieldname": "phone_number",
                    "_key": "phone_number"
                  },
                  {
                    "type": "string",
                    "example": "ACTIVE",
                    "description": "The status of the user. ENROLLING state indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately. INACTIVE users are locked out and not permitted to use the system.",
                    "enum": [
                      "ENROLLING",
                      "INVITED",
                      "ACTIVE",
                      "RESET",
                      "INACTIVE"
                    ],
                    "api_fieldname": "status",
                    "entity_fieldname": "status",
                    "_key": "status"
                  },
                  {
                    "type": "array",
                    "x-nullable": true,
                    "description": "A list of scratch codes for the two-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "totp_scratch_codes",
                    "entity_fieldname": "totp_scratch_codes",
                    "_key": "totp_scratch_codes"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "pattern": "[\\w\\-,._@+=]{4,30}",
                    "type": "string",
                    "example": "admin",
                    "description": "A username.",
                    "x-nullable": true,
                    "api_fieldname": "username",
                    "entity_fieldname": "username",
                    "_key": "username"
                  }
                ],
                "description": "Represents a user in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_user"
                }
              },
              "_key": "200"
            },
            {
              "description": "Error in input data, for example, an invalid email address.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "A user with the given ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            },
            {
              "description": "A user with the given username or email already exists.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "409"
            }
          ],
          "path": "/v3/users/{user_id}",
          "summary": "Update user details.",
          "return_type": "user",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "user"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "email",
            "two_factor_auth_enabled",
            "status",
            "created_at",
            "updated_at",
            "password",
            "email_verified",
            "creation_time",
            "last_login_time",
            "password_changed_time",
            "account_id",
            "login_history",
            "totp_scratch_codes",
            "custom_fields",
            "active_sessions"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "user_id": "id"
          },
          "operation_id": "updateUser",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "update"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the account.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "account_id",
          "readOnly": true,
          "required": false,
          "_key": "account_id"
        },
        {
          "type": "array",
          "description": "List of active user sessions.",
          "items": {
            "type": "object",
            "required": [
              "account_id",
              "ip_address",
              "login_time",
              "object",
              "reference_token",
              "user_agent"
            ],
            "properties": [
              {
                "type": "string",
                "example": "01619571e2e90242ac12000600000000",
                "description": "The UUID of the account.",
                "pattern": "[a-f0-9]{32}",
                "api_fieldname": "account_id",
                "entity_fieldname": "account_id",
                "_key": "account_id"
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-13T09:35:20Z",
                "description": "Creation UTC time RFC3339.",
                "api_fieldname": "created_at",
                "entity_fieldname": "created_at",
                "_key": "created_at"
              },
              {
                "type": "string",
                "example": "127.0.0.1",
                "description": "IP address of the client.",
                "api_fieldname": "ip_address",
                "entity_fieldname": "ip_address",
                "_key": "ip_address"
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-14T17:52:07Z",
                "description": "The login time of the user.",
                "api_fieldname": "login_time",
                "entity_fieldname": "login_time",
                "_key": "login_time"
              },
              {
                "type": "string",
                "description": "Entity name: always 'user-session'",
                "enum": [
                  "user-session"
                ],
                "api_fieldname": "object",
                "entity_fieldname": "object",
                "_key": "object"
              },
              {
                "type": "string",
                "example": "rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk",
                "description": "The reference token.",
                "api_fieldname": "reference_token",
                "entity_fieldname": "reference_token",
                "_key": "reference_token"
              },
              {
                "type": "string",
                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                "description": "User Agent header from the login request.",
                "api_fieldname": "user_agent",
                "entity_fieldname": "user_agent",
                "_key": "user_agent"
              }
            ],
            "description": "Represents an active user session.",
            "foreign_key": {
              "group": "Accounts",
              "entity": "active_session"
            }
          },
          "api_fieldname": "active_sessions",
          "readOnly": true,
          "required": false,
          "_key": "active_sessions"
        },
        {
          "type": "string",
          "example": "110 Fulbourn Rd, Cambridge, United Kingdom",
          "description": "Address.",
          "x-nullable": true,
          "api_fieldname": "address",
          "readOnly": false,
          "required": false,
          "_key": "address"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "type": "integer",
          "format": "int64",
          "example": 1518630727683,
          "description": "A timestamp of the user creation in the storage, in milliseconds.",
          "api_fieldname": "creation_time",
          "readOnly": true,
          "required": false,
          "_key": "creation_time"
        },
        {
          "type": "object",
          "x-nullable": true,
          "description": "User's account-specific custom properties. The value is a string.",
          "additionalProperties": {
            "type": "string"
          },
          "api_fieldname": "custom_fields",
          "readOnly": true,
          "required": false,
          "_key": "custom_fields"
        },
        {
          "pattern": "^(?=.{3,254}$).+\\@.+",
          "type": "string",
          "example": "user@arm.com",
          "description": "The email address.",
          "api_fieldname": "email",
          "readOnly": false,
          "required": true,
          "_key": "email"
        },
        {
          "type": "boolean",
          "example": true,
          "description": "A flag indicating whether the user's email address has been verified or not.",
          "api_fieldname": "email_verified",
          "readOnly": true,
          "required": false,
          "_key": "email_verified"
        },
        {
          "type": "string",
          "maxLength": 100,
          "example": "User Doe",
          "x-nullable": true,
          "description": "The full name of the user.",
          "api_fieldname": "full_name",
          "readOnly": false,
          "required": false,
          "_key": "full_name"
        },
        {
          "type": "array",
          "description": "A list of IDs of the groups this user belongs to.",
          "items": {
            "type": "string"
          },
          "api_fieldname": "groups",
          "readOnly": false,
          "required": false,
          "_key": "groups"
        },
        {
          "type": "string",
          "example": "01619571e2e89242ac12000600000000",
          "description": "The ID of the user.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "boolean",
          "example": true,
          "description": "A flag indicating that the user has accepted General Terms and Conditions.",
          "api_fieldname": "is_gtc_accepted",
          "readOnly": false,
          "required": false,
          "_key": "is_gtc_accepted"
        },
        {
          "type": "boolean",
          "example": true,
          "description": "A flag indicating that the user has consented to receive marketing information.",
          "api_fieldname": "is_marketing_accepted",
          "readOnly": false,
          "required": false,
          "_key": "is_marketing_accepted"
        },
        {
          "type": "boolean",
          "example": true,
          "description": "A flag indicating whether two-factor authentication (TOTP) has been enabled.",
          "api_fieldname": "is_totp_enabled",
          "readOnly": false,
          "required": false,
          "_key": "is_totp_enabled"
        },
        {
          "type": "integer",
          "format": "int64",
          "example": 1518630727688,
          "description": "A timestamp of the latest login of the user, in milliseconds.",
          "api_fieldname": "last_login_time",
          "readOnly": true,
          "required": false,
          "_key": "last_login_time"
        },
        {
          "type": "array",
          "maxItems": 5,
          "description": "Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.",
          "items": {
            "type": "object",
            "required": [
              "date",
              "ip_address",
              "success",
              "user_agent"
            ],
            "properties": [
              {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-14T17:52:07Z",
                "description": "UTC time RFC3339 for this login attempt.",
                "api_fieldname": "date",
                "entity_fieldname": "date",
                "_key": "date"
              },
              {
                "type": "string",
                "example": "127.0.0.1",
                "description": "IP address of the client.",
                "api_fieldname": "ip_address",
                "entity_fieldname": "ip_address",
                "_key": "ip_address"
              },
              {
                "type": "boolean",
                "example": true,
                "description": "Flag indicating whether login attempt was successful or not.",
                "api_fieldname": "success",
                "entity_fieldname": "success",
                "_key": "success"
              },
              {
                "type": "string",
                "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36",
                "description": "User Agent header from the login request.",
                "api_fieldname": "user_agent",
                "entity_fieldname": "user_agent",
                "_key": "user_agent"
              }
            ],
            "description": "Represents an entry in login history.",
            "foreign_key": {
              "group": "Accounts",
              "entity": "login_history"
            }
          },
          "api_fieldname": "login_history",
          "readOnly": true,
          "required": false,
          "_key": "login_history"
        },
        {
          "type": "array",
          "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
          "x-nullable": true,
          "items": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": [
              {
                "type": "string",
                "example": "fed/user_007",
                "description": "The ID of the user in the identity provider's service.",
                "readOnly": true,
                "api_fieldname": "foreign_id",
                "entity_fieldname": "foreign_id",
                "_key": "foreign_id"
              },
              {
                "type": "string",
                "example": "01619571f3c00242ac12000600000000",
                "description": "ID of the identity provider.",
                "readOnly": false,
                "_override": true,
                "api_fieldname": "id",
                "entity_fieldname": "id",
                "_key": "id"
              },
              {
                "type": "string",
                "example": "Pelion",
                "readOnly": false,
                "description": "Name of the identity provider.",
                "_override": true,
                "api_fieldname": "name",
                "entity_fieldname": "name",
                "_key": "name"
              },
              {
                "type": "string",
                "description": "Identity provider type.",
                "example": "NATIVE",
                "readOnly": true,
                "enum": [
                  "NATIVE",
                  "MBED",
                  "SAML2",
                  "OIDC"
                ],
                "api_fieldname": "type",
                "entity_fieldname": "login_profile_type",
                "_key": "type"
              }
            ],
            "description": "Represents a user login profile in Device Management.",
            "foreign_key": {
              "group": "Accounts",
              "entity": "login_profile"
            }
          },
          "api_fieldname": "login_profiles",
          "readOnly": false,
          "required": false,
          "_key": "login_profiles"
        },
        {
          "type": "string",
          "example": "PZf9eEUH43DAPE9ULINFeuj",
          "description": "The password when creating a new user. It will be generated when not present in the request.",
          "x-nullable": true,
          "api_fieldname": "password",
          "readOnly": false,
          "required": false,
          "_key": "password"
        },
        {
          "type": "integer",
          "format": "int64",
          "example": 1518630727688,
          "description": "A timestamp of the latest change of the user password, in milliseconds.",
          "api_fieldname": "password_changed_time",
          "readOnly": true,
          "required": false,
          "_key": "password_changed_time"
        },
        {
          "type": "string",
          "maxLength": 100,
          "example": "+44 (1223) 400 400",
          "description": "Phone number.",
          "x-nullable": true,
          "api_fieldname": "phone_number",
          "readOnly": false,
          "required": false,
          "_key": "phone_number"
        },
        {
          "type": "string",
          "example": "ACTIVE",
          "description": "The status of the user. ENROLLING state indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately. INACTIVE users are locked out and not permitted to use the system.",
          "enum": [
            "ENROLLING",
            "INVITED",
            "ACTIVE",
            "RESET",
            "INACTIVE"
          ],
          "api_fieldname": "status",
          "readOnly": false,
          "required": false,
          "enum_reference": "user_status_enum",
          "_key": "status"
        },
        {
          "type": "array",
          "x-nullable": true,
          "description": "A list of scratch codes for the two-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.",
          "items": {
            "type": "string"
          },
          "api_fieldname": "totp_scratch_codes",
          "readOnly": true,
          "required": false,
          "_key": "totp_scratch_codes"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update UTC time RFC3339.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        },
        {
          "pattern": "[\\w\\-,._@+=]{4,30}",
          "type": "string",
          "example": "admin",
          "description": "A username.",
          "x-nullable": true,
          "api_fieldname": "username",
          "readOnly": false,
          "required": false,
          "_key": "username"
        }
      ],
      "field_renames": [],
      "tags": [
        "Account - users"
      ],
      "group_id": "Accounts",
      "_key": "user"
    },
    {
      "swagger_models": [
        "UserInvitationReq",
        "UserInvitationResp",
        "UserInvitationRespList"
      ],
      "primary_key_field": "id",
      "methods": [
        {
          "description": "Invite a new or existing user.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X POST https://api.us-east-1.mbedcloud.com/v3/user-invitations \\\n-H 'Authorization: Bearer <access_key>' \\\n-H 'content-type: application/json' \\\n-d {\"email\": \"myemail@company.com\"}\n```",
          "field_renames": [],
          "fields": [
            {
              "pattern": "^(?=.{3,254}$).+\\@.+",
              "type": "string",
              "example": "friend@arm.com",
              "description": "Email address of the invited user.",
              "api_fieldname": "email",
              "entity_fieldname": "email",
              "parameter_fieldname": "email",
              "in": "body",
              "required": true,
              "_key": "email"
            },
            {
              "type": "array",
              "description": "A list of IDs of the groups the user is invited to.",
              "items": {
                "type": "string"
              },
              "api_fieldname": "groups",
              "entity_fieldname": "groups",
              "parameter_fieldname": "groups",
              "in": "body",
              "required": false,
              "_key": "groups"
            },
            {
              "type": "array",
              "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
              "x-nullable": true,
              "items": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "fed/user_007",
                    "description": "The ID of the user in the identity provider's service.",
                    "readOnly": true,
                    "api_fieldname": "foreign_id",
                    "entity_fieldname": "foreign_id",
                    "_key": "foreign_id"
                  },
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "ID of the identity provider.",
                    "readOnly": false,
                    "_override": true,
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "string",
                    "example": "Pelion",
                    "readOnly": false,
                    "description": "Name of the identity provider.",
                    "_override": true,
                    "api_fieldname": "name",
                    "entity_fieldname": "name",
                    "_key": "name"
                  },
                  {
                    "type": "string",
                    "description": "Identity provider type.",
                    "example": "NATIVE",
                    "readOnly": true,
                    "enum": [
                      "NATIVE",
                      "MBED",
                      "SAML2",
                      "OIDC"
                    ],
                    "api_fieldname": "type",
                    "entity_fieldname": "login_profile_type",
                    "_key": "type"
                  }
                ],
                "description": "Represents a user login profile in Device Management.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "login_profile"
                }
              },
              "api_fieldname": "login_profiles",
              "entity_fieldname": "login_profiles",
              "parameter_fieldname": "login_profiles",
              "in": "body",
              "required": false,
              "_key": "login_profiles"
            },
            {
              "type": "integer",
              "format": "int32",
              "maximum": 100,
              "minimum": 1,
              "default": 30,
              "description": "Specifies how many days the invitation will be valid for.",
              "name": "valid_for_days",
              "in": "body",
              "schema_param": true,
              "entity_fieldname": "valid_for_days",
              "api_fieldname": "valid_for_days",
              "external_param": true,
              "parameter_fieldname": "valid_for_days",
              "required": false,
              "_key": "valid_for_days"
            }
          ],
          "method": "post",
          "mode": "create",
          "responses": [
            {
              "description": "New entity created.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "email",
                  "etag",
                  "id",
                  "object",
                  "user_id"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the user is invited to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "friend@arm.com",
                    "description": "Email address of the invited user.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "_key": "email"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Invitation expiration as UTC time RFC3339.",
                    "api_fieldname": "expiration",
                    "entity_fieldname": "expiration",
                    "_key": "expiration"
                  },
                  {
                    "type": "array",
                    "description": "A list of IDs of the groups the user is invited to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The ID of the invitation.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "array",
                    "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                    "x-nullable": true,
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "fed/user_007",
                          "description": "The ID of the user in the identity provider's service.",
                          "readOnly": true,
                          "api_fieldname": "foreign_id",
                          "entity_fieldname": "foreign_id",
                          "_key": "foreign_id"
                        },
                        {
                          "type": "string",
                          "example": "01619571f3c00242ac12000600000000",
                          "description": "ID of the identity provider.",
                          "readOnly": false,
                          "_override": true,
                          "api_fieldname": "id",
                          "entity_fieldname": "id",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "Pelion",
                          "readOnly": false,
                          "description": "Name of the identity provider.",
                          "_override": true,
                          "api_fieldname": "name",
                          "entity_fieldname": "name",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Identity provider type.",
                          "example": "NATIVE",
                          "readOnly": true,
                          "enum": [
                            "NATIVE",
                            "MBED",
                            "SAML2",
                            "OIDC"
                          ],
                          "api_fieldname": "type",
                          "entity_fieldname": "login_profile_type",
                          "_key": "type"
                        }
                      ],
                      "description": "Represents a user login profile in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_profile"
                      }
                    },
                    "api_fieldname": "login_profiles",
                    "entity_fieldname": "login_profiles",
                    "_key": "login_profiles"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'user-invitation'",
                    "enum": [
                      "user-invitation"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the invited user.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "user_id",
                    "entity_fieldname": "user_id",
                    "_key": "user_id"
                  }
                ],
                "description": "Represents an user invitation in responses.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_user_invitation"
                }
              },
              "_key": "201"
            },
            {
              "description": "Error in input data, for example, an invalid email address.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "400"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/user-invitations",
          "summary": "Create a user invitation.",
          "return_type": "user_invitation",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "user_invitation"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "id",
            "created_at",
            "updated_at",
            "user_id",
            "account_id",
            "expiration"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "invitation_id": "id"
          },
          "operation_id": "createInvitation",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "create"
        },
        {
          "description": "Delete an active user invitation sent to a new or existing user.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X DELETE https://api.us-east-1.mbedcloud.com/v3/user-invitations/{invitation_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "name": "invitation_id",
              "in": "path",
              "description": "The ID of the invitation to delete.",
              "required": true,
              "type": "string",
              "entity_fieldname": "id",
              "api_fieldname": "invitation_id",
              "external_param": false,
              "parameter_fieldname": "invitation_id",
              "_key": "id"
            }
          ],
          "method": "delete",
          "mode": "delete",
          "responses": [
            {
              "description": "Deleted successfully.",
              "_key": "204"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An invitation with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/user-invitations/{invitation_id}",
          "summary": "Delete a user invitation.",
          "return_type": "user_invitation",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "user_invitation"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "invitation_id": "id"
          },
          "operation_id": "deleteInvitation",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "delete"
        },
        {
          "description": "Retrieve an array of active user invitations sent by email.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/user-invitations \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571f3c00242ac12000600000000",
              "description": "The entity ID to retrieve after the given one.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "after",
              "entity_fieldname": "after",
              "name": "after",
              "in": "query",
              "required": false,
              "external_param": true,
              "parameter_fieldname": "after",
              "_key": "after"
            },
            {
              "type": "integer",
              "format": "int32",
              "example": 50,
              "description": "The number of results to return (2-1000). Default 50.",
              "api_fieldname": "limit",
              "entity_fieldname": "limit",
              "name": "limit",
              "in": "query",
              "required": false,
              "default": 50,
              "external_param": true,
              "parameter_fieldname": "limit",
              "_key": "limit"
            },
            {
              "type": "string",
              "description": "Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.",
              "enum": [
                "ASC",
                "DESC"
              ],
              "api_fieldname": "order",
              "entity_fieldname": "order",
              "name": "order",
              "in": "query",
              "required": false,
              "default": "ASC",
              "external_param": true,
              "parameter_fieldname": "order",
              "enum_reference": "user_invitation_order_enum",
              "_key": "order"
            }
          ],
          "method": "get",
          "mode": "list",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "data",
                  "has_more",
                  "limit",
                  "object",
                  "total_count"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571f3c00242ac12000600000000",
                    "description": "The entity ID to retrieve after the given one.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "after",
                    "entity_fieldname": "after",
                    "_key": "after"
                  },
                  {
                    "type": "array",
                    "description": "A list of entities.",
                    "items": {
                      "type": "object",
                      "required": [
                        "account_id",
                        "email",
                        "etag",
                        "id",
                        "object",
                        "user_id"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the account the user is invited to.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "account_id"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-13T09:35:20Z",
                          "description": "Creation UTC time RFC3339.",
                          "_key": "created_at"
                        },
                        {
                          "pattern": "^(?=.{3,254}$).+\\@.+",
                          "type": "string",
                          "example": "friend@arm.com",
                          "description": "Email address of the invited user.",
                          "_key": "email"
                        },
                        {
                          "type": "string",
                          "example": "1",
                          "description": "API resource entity version.",
                          "_key": "etag"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Invitation expiration as UTC time RFC3339.",
                          "_key": "expiration"
                        },
                        {
                          "type": "array",
                          "description": "A list of IDs of the groups the user is invited to.",
                          "items": {
                            "type": "string"
                          },
                          "_key": "groups"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e89242ac12000600000000",
                          "description": "The ID of the invitation.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "id"
                        },
                        {
                          "type": "array",
                          "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                          "x-nullable": true,
                          "items": {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": [
                              {
                                "type": "string",
                                "example": "fed/user_007",
                                "description": "The ID of the user in the identity provider's service.",
                                "readOnly": true,
                                "api_fieldname": "foreign_id",
                                "entity_fieldname": "foreign_id",
                                "_key": "foreign_id"
                              },
                              {
                                "type": "string",
                                "example": "01619571f3c00242ac12000600000000",
                                "description": "ID of the identity provider.",
                                "readOnly": false,
                                "_override": true,
                                "api_fieldname": "id",
                                "entity_fieldname": "id",
                                "_key": "id"
                              },
                              {
                                "type": "string",
                                "example": "Pelion",
                                "readOnly": false,
                                "description": "Name of the identity provider.",
                                "_override": true,
                                "api_fieldname": "name",
                                "entity_fieldname": "name",
                                "_key": "name"
                              },
                              {
                                "type": "string",
                                "description": "Identity provider type.",
                                "example": "NATIVE",
                                "readOnly": true,
                                "enum": [
                                  "NATIVE",
                                  "MBED",
                                  "SAML2",
                                  "OIDC"
                                ],
                                "api_fieldname": "type",
                                "entity_fieldname": "login_profile_type",
                                "_key": "type"
                              }
                            ],
                            "description": "Represents a user login profile in Device Management.",
                            "foreign_key": {
                              "group": "Accounts",
                              "entity": "login_profile"
                            }
                          },
                          "_key": "login_profiles"
                        },
                        {
                          "type": "string",
                          "description": "Entity name: always 'user-invitation'",
                          "enum": [
                            "user-invitation"
                          ],
                          "_key": "object"
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2018-02-14T15:24:14Z",
                          "description": "Last update UTC time RFC3339.",
                          "_key": "updated_at"
                        },
                        {
                          "type": "string",
                          "example": "01619571e2e90242ac12000600000000",
                          "description": "The ID of the invited user.",
                          "pattern": "[a-f0-9]{32}",
                          "_key": "user_id"
                        }
                      ],
                      "description": "Represents an user invitation in responses.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "user_invitation"
                      }
                    },
                    "api_fieldname": "data",
                    "entity_fieldname": "data",
                    "_key": "data"
                  },
                  {
                    "type": "boolean",
                    "example": false,
                    "description": "Flag indicating whether there are more results.",
                    "api_fieldname": "has_more",
                    "entity_fieldname": "has_more",
                    "_key": "has_more"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 50,
                    "description": "The number of results to return (2-1000), or equal to `total_count`.",
                    "api_fieldname": "limit",
                    "entity_fieldname": "limit",
                    "_key": "limit"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always `list`.",
                    "enum": [
                      "list"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "api_fieldname": "order",
                    "entity_fieldname": "order",
                    "_key": "order"
                  },
                  {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "The total number of records, if requested.",
                    "api_fieldname": "total_count",
                    "entity_fieldname": "total_count",
                    "_key": "total_count"
                  }
                ],
                "pagination": true,
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "user_invitation"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            }
          ],
          "path": "/v3/user-invitations",
          "summary": "Get user invitations.",
          "return_type": "paginated_response(user_invitation)",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "user_invitation"
          },
          "x_filter": {
            "login_profiles": [
              "eq"
            ]
          },
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "total_count",
            "has_more",
            "data",
            "login_profiles__eq"
          ],
          "foreign_key_priority": "self",
          "group_id": "Accounts",
          "parameter_map": {
            "invitation_id": "id"
          },
          "operation_id": "getAllInvitations",
          "pagination": true,
          "foreign_key": {
            "group": "Accounts",
            "entity": "user_invitation"
          },
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "list"
        },
        {
          "description": "Retrieve the details of an active user invitation.\n<b>Note:</b> This endpoint is restricted to administrators.\n\n**Example:**\n```\ncurl -X GET https://api.us-east-1.mbedcloud.com/v3/user-invitations/{invitation_id} \\\n-H 'Authorization: Bearer <access_key>'\n```",
          "field_renames": [],
          "fields": [
            {
              "type": "string",
              "example": "01619571e2e89242ac12000600000000",
              "description": "The ID of the invitation.",
              "pattern": "[a-f0-9]{32}",
              "api_fieldname": "id",
              "entity_fieldname": "id",
              "parameter_fieldname": "invitation_id",
              "in": "path",
              "required": true,
              "_key": "id"
            }
          ],
          "method": "get",
          "mode": "read",
          "responses": [
            {
              "description": "Successful operation.",
              "schema": {
                "type": "object",
                "required": [
                  "account_id",
                  "email",
                  "etag",
                  "id",
                  "object",
                  "user_id"
                ],
                "properties": [
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the account the user is invited to.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "account_id",
                    "entity_fieldname": "account_id",
                    "_key": "account_id"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-13T09:35:20Z",
                    "description": "Creation UTC time RFC3339.",
                    "api_fieldname": "created_at",
                    "entity_fieldname": "created_at",
                    "_key": "created_at"
                  },
                  {
                    "pattern": "^(?=.{3,254}$).+\\@.+",
                    "type": "string",
                    "example": "friend@arm.com",
                    "description": "Email address of the invited user.",
                    "api_fieldname": "email",
                    "entity_fieldname": "email",
                    "_key": "email"
                  },
                  {
                    "type": "string",
                    "example": "1",
                    "description": "API resource entity version.",
                    "api_fieldname": "etag",
                    "entity_fieldname": "etag",
                    "_key": "etag"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Invitation expiration as UTC time RFC3339.",
                    "api_fieldname": "expiration",
                    "entity_fieldname": "expiration",
                    "_key": "expiration"
                  },
                  {
                    "type": "array",
                    "description": "A list of IDs of the groups the user is invited to.",
                    "items": {
                      "type": "string"
                    },
                    "api_fieldname": "groups",
                    "entity_fieldname": "groups",
                    "_key": "groups"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e89242ac12000600000000",
                    "description": "The ID of the invitation.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "id",
                    "entity_fieldname": "id",
                    "_key": "id"
                  },
                  {
                    "type": "array",
                    "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
                    "x-nullable": true,
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "example": "fed/user_007",
                          "description": "The ID of the user in the identity provider's service.",
                          "readOnly": true,
                          "api_fieldname": "foreign_id",
                          "entity_fieldname": "foreign_id",
                          "_key": "foreign_id"
                        },
                        {
                          "type": "string",
                          "example": "01619571f3c00242ac12000600000000",
                          "description": "ID of the identity provider.",
                          "readOnly": false,
                          "_override": true,
                          "api_fieldname": "id",
                          "entity_fieldname": "id",
                          "_key": "id"
                        },
                        {
                          "type": "string",
                          "example": "Pelion",
                          "readOnly": false,
                          "description": "Name of the identity provider.",
                          "_override": true,
                          "api_fieldname": "name",
                          "entity_fieldname": "name",
                          "_key": "name"
                        },
                        {
                          "type": "string",
                          "description": "Identity provider type.",
                          "example": "NATIVE",
                          "readOnly": true,
                          "enum": [
                            "NATIVE",
                            "MBED",
                            "SAML2",
                            "OIDC"
                          ],
                          "api_fieldname": "type",
                          "entity_fieldname": "login_profile_type",
                          "_key": "type"
                        }
                      ],
                      "description": "Represents a user login profile in Device Management.",
                      "foreign_key": {
                        "group": "Accounts",
                        "entity": "login_profile"
                      }
                    },
                    "api_fieldname": "login_profiles",
                    "entity_fieldname": "login_profiles",
                    "_key": "login_profiles"
                  },
                  {
                    "type": "string",
                    "description": "Entity name: always 'user-invitation'",
                    "enum": [
                      "user-invitation"
                    ],
                    "api_fieldname": "object",
                    "entity_fieldname": "object",
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-02-14T15:24:14Z",
                    "description": "Last update UTC time RFC3339.",
                    "api_fieldname": "updated_at",
                    "entity_fieldname": "updated_at",
                    "_key": "updated_at"
                  },
                  {
                    "type": "string",
                    "example": "01619571e2e90242ac12000600000000",
                    "description": "The ID of the invited user.",
                    "pattern": "[a-f0-9]{32}",
                    "api_fieldname": "user_id",
                    "entity_fieldname": "user_id",
                    "_key": "user_id"
                  }
                ],
                "description": "Represents an user invitation in responses.",
                "foreign_key": {
                  "group": "Accounts",
                  "entity": "subtenant_user_invitation"
                }
              },
              "_key": "200"
            },
            {
              "description": "Authentication failure.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "401"
            },
            {
              "description": "Forbidden.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "403"
            },
            {
              "description": "An invitation with the specified ID does not exist.",
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "message",
                  "object",
                  "request_id",
                  "type"
                ],
                "properties": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "description": "HTTP response code",
                    "example": 400,
                    "_key": "code"
                  },
                  {
                    "type": "array",
                    "description": "Request fields which failed validation.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "message"
                      ],
                      "properties": [
                        {
                          "type": "string",
                          "description": "Message describing the error condition.",
                          "_key": "message"
                        },
                        {
                          "type": "string",
                          "description": "Name of the field which caused the error.",
                          "_key": "name"
                        }
                      ]
                    },
                    "_key": "fields"
                  },
                  {
                    "type": "string",
                    "description": "A human readable informative explanation",
                    "example": "Validation error",
                    "_key": "message"
                  },
                  {
                    "type": "string",
                    "description": "Entity name, always `error`.",
                    "enum": [
                      "error"
                    ],
                    "_key": "object"
                  },
                  {
                    "type": "string",
                    "description": "ID of the request.",
                    "example": "0161991d63150242ac12000600000000",
                    "_key": "request_id"
                  },
                  {
                    "type": "string",
                    "description": "Error type used to categorise the error.",
                    "example": "validation_error",
                    "_key": "type"
                  }
                ]
              },
              "_key": "404"
            }
          ],
          "path": "/v3/user-invitations/{invitation_id}",
          "summary": "Details of a user invitation.",
          "return_type": "user_invitation",
          "return_info": {
            "self": true,
            "custom": false,
            "type": "user_invitation"
          },
          "x_filter": {},
          "x_deprecation": null,
          "drop_fields": [
            "object",
            "etag",
            "type",
            "filter",
            "created_at",
            "updated_at",
            "email",
            "user_id",
            "account_id",
            "groups",
            "expiration",
            "login_profiles"
          ],
          "group_id": "Accounts",
          "parameter_map": {
            "invitation_id": "id"
          },
          "operation_id": "getInvitation",
          "pagination": false,
          "request_content_type": "application/json",
          "request_body": "json",
          "_key": "read"
        }
      ],
      "fields": [
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the account the user is invited to.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "account_id",
          "readOnly": true,
          "required": false,
          "_key": "account_id"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-13T09:35:20Z",
          "description": "Creation UTC time RFC3339.",
          "api_fieldname": "created_at",
          "readOnly": true,
          "required": false,
          "_key": "created_at"
        },
        {
          "pattern": "^(?=.{3,254}$).+\\@.+",
          "type": "string",
          "example": "friend@arm.com",
          "description": "Email address of the invited user.",
          "api_fieldname": "email",
          "readOnly": false,
          "required": true,
          "_key": "email"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Invitation expiration as UTC time RFC3339.",
          "api_fieldname": "expiration",
          "readOnly": true,
          "required": false,
          "_key": "expiration"
        },
        {
          "type": "array",
          "description": "A list of IDs of the groups the user is invited to.",
          "items": {
            "type": "string"
          },
          "api_fieldname": "groups",
          "readOnly": false,
          "required": false,
          "_key": "groups"
        },
        {
          "type": "string",
          "example": "01619571e2e89242ac12000600000000",
          "description": "The ID of the invitation.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "id",
          "readOnly": false,
          "required": true,
          "_key": "id"
        },
        {
          "type": "array",
          "description": "A list of login profiles for the user. Specified as the identity providers the user is associated with.",
          "x-nullable": true,
          "items": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": [
              {
                "type": "string",
                "example": "fed/user_007",
                "description": "The ID of the user in the identity provider's service.",
                "readOnly": true,
                "api_fieldname": "foreign_id",
                "entity_fieldname": "foreign_id",
                "_key": "foreign_id"
              },
              {
                "type": "string",
                "example": "01619571f3c00242ac12000600000000",
                "description": "ID of the identity provider.",
                "readOnly": false,
                "_override": true,
                "api_fieldname": "id",
                "entity_fieldname": "id",
                "_key": "id"
              },
              {
                "type": "string",
                "example": "Pelion",
                "readOnly": false,
                "description": "Name of the identity provider.",
                "_override": true,
                "api_fieldname": "name",
                "entity_fieldname": "name",
                "_key": "name"
              },
              {
                "type": "string",
                "description": "Identity provider type.",
                "example": "NATIVE",
                "readOnly": true,
                "enum": [
                  "NATIVE",
                  "MBED",
                  "SAML2",
                  "OIDC"
                ],
                "api_fieldname": "type",
                "entity_fieldname": "login_profile_type",
                "_key": "type"
              }
            ],
            "description": "Represents a user login profile in Device Management.",
            "foreign_key": {
              "group": "Accounts",
              "entity": "login_profile"
            }
          },
          "api_fieldname": "login_profiles",
          "readOnly": false,
          "required": false,
          "_key": "login_profiles"
        },
        {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-14T15:24:14Z",
          "description": "Last update UTC time RFC3339.",
          "api_fieldname": "updated_at",
          "readOnly": true,
          "required": false,
          "_key": "updated_at"
        },
        {
          "type": "string",
          "example": "01619571e2e90242ac12000600000000",
          "description": "The ID of the invited user.",
          "pattern": "[a-f0-9]{32}",
          "api_fieldname": "user_id",
          "readOnly": true,
          "required": false,
          "_key": "user_id"
        }
      ],
      "field_renames": [],
      "tags": [
        "Account - user invitations"
      ],
      "group_id": "Accounts",
      "_key": "user_invitation"
    },
    {
      "swagger_models": [
        "CertificateIssuerVerifyResponse"
      ],
      "primary_key_field": null,
      "methods": [],
      "fields": [
        {
          "type": "string",
          "description": "Provides details in case of failure.",
          "example": "Message describing the verification failure",
          "api_fieldname": "message",
          "readOnly": true,
          "required": false,
          "_key": "message"
        },
        {
          "type": "boolean",
          "description": "Indicates whether the certificate issuer was verified successfully.",
          "example": false,
          "api_fieldname": "successful",
          "readOnly": true,
          "required": false,
          "_key": "successful"
        }
      ],
      "field_renames": [],
      "tags": [],
      "group_id": "Security",
      "_key": "verification_response"
    }
  ]
}