definitions:
  AccountCreationReq:
    description: This object represents an account creation request.
    properties:
      address_line1:
        description: Postal address line 1, not longer than 100 characters. Required
          for commercial accounts only.
        example: 110 Fulbourn Rd
        type: string
      address_line2:
        description: Postal address line 2, not longer than 100 characters.
        example: ' '
        type: string
      admin_email:
        description: The email address of the account admin, not longer than 254 characters.
        example: admin@arm.com
        type: string
      admin_full_name:
        description: The full name of the admin user to be created.
        example: Admin Doe
        type: string
      admin_name:
        description: The username of the admin user to be created, containing alphanumerical
          letters and -,._@+= characters. It must be at least 4 but not more than
          30 character long.
        example: admin
        type: string
      admin_password:
        description: The password when creating a new user. It will be generated when
          not present in the request.
        example: PZf9eEUH43DAPE9ULINFeuj
        type: string
      aliases:
        description: An array of aliases, not more than 10. An alias is not shorter
          than 8 and not longer than 100 characters.
        items:
          type: string
        type: array
      city:
        description: The city part of the postal address, not longer than 100 characters.
          Required for commercial accounts only.
        example: Cambridge
        type: string
      company:
        description: The name of the company, not longer than 100 characters. Required
          for commercial accounts only.
        example: ARM Holdings Plc
        type: string
      contact:
        description: The name of the contact person for this account, not longer than
          100 characters. Required for commercial accounts only.
        example: J. Doe
        type: string
      contract_number:
        description: Contract number of the customer.
        example: 1NX25_0001
        type: string
      country:
        description: The country part of the postal address, not longer than 100 characters.
          Required for commercial accounts only.
        example: United Kingdom
        type: string
      customer_number:
        description: Customer number of the customer.
        example: 1NC25_0001
        type: string
      display_name:
        description: The display name for the account, not longer than 100 characters.
        example: ARM
        type: string
      email:
        description: The company email address for this account, not longer than 254
          characters. Required for commercial accounts only.
        example: info@arm.com
        type: string
      end_market:
        description: The end market of the account to be created.
        example: IT
        type: string
      phone_number:
        description: The phone number of a representative of the company, not longer
          than 100 characters.
        example: +44 (1223) 400 400
        type: string
      postal_code:
        description: The postal code part of the postal address, not longer than 100
          characters.
        example: CB1 9NJ
        type: string
      state:
        description: The state part of the postal address, not longer than 100 characters.
        example: ' '
        type: string
    required:
    - end_market
    type: object
  AccountInfo:
    description: This object represents an account in requests and responses.
    properties:
      address_line1:
        description: Postal address line 1.
        example: 110 Fulbourn Rd
        type: string
      address_line2:
        description: Postal address line 2.
        example: ' '
        type: string
      admin_email:
        description: The email address of the admin user created for this account.
          Present only in the response for the account creation.
        example: admin@arm.com
        type: string
      admin_full_name:
        description: The full name of the admin user created for this account. Present
          only in the response for the account creation.
        example: Admin Doe
        type: string
      admin_id:
        description: The ID of the admin user created for this account.
        example: 01619571e2e89242ac12000600000000
        type: string
      admin_key:
        description: The admin API key created for this account. Present only in the
          response for the account creation.
        example: ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000B40IkJADMANmAscAj0Ot0n2yeQnyt9tT
        readOnly: true
        type: string
      admin_name:
        description: The username of the admin user created for this account. Present
          only in the response for the account creation.
        example: admin
        type: string
      admin_password:
        description: The password of the admin user created for this account. Present
          only in the response for the account creation.
        example: PZf9eEUH43DAPE9ULINFeuj
        type: string
      aliases:
        description: An array of aliases.
        items:
          type: string
        type: array
      city:
        description: The city part of the postal address.
        example: Cambridge
        type: string
      company:
        description: The name of the company.
        example: ARM Holdings Plc
        type: string
      contact:
        description: The name of the contact person for this account.
        example: J. Doe
        type: string
      contract_number:
        description: Contract number of the customer.
        example: 1NX25_0001
        type: string
      country:
        description: The country part of the postal address.
        example: United Kingdom
        type: string
      created_at:
        description: Creation UTC time RFC3339.
        example: '2018-02-13T09:35:20Z'
        format: date-time
        type: string
      custom_fields:
        additionalProperties:
          type: string
        description: Account's custom properties as key-value pairs.
        type: object
      customer_number:
        description: Customer number of the customer.
        example: 1NC25_0001
        type: string
      display_name:
        description: The display name for the account.
        example: ARM
        type: string
      email:
        description: The company email address for this account.
        example: info@arm.com
        type: string
      end_market:
        description: Account end market.
        example: IT
        type: string
      etag:
        description: API resource entity version.
        example: '1'
        type: string
      expiration:
        description: Expiration time of the account, as UTC time RFC3339.
        format: date-time
        type: string
      expiration_warning_threshold:
        description: Indicates how many days (1-180) before account expiration a notification
          email should be sent.
        example: '180'
        type: string
      id:
        description: Account ID.
        example: 01619571e2e90242ac12000600000000
        type: string
      idle_timeout:
        description: The reference token expiration time in minutes for this account.
        example: '30'
        type: string
      limits:
        additionalProperties:
          type: string
        description: List of limits as key-value pairs if requested.
        type: object
      mfa_status:
        description: The enforcement status of the multi-factor authentication, either
          'enforced' or 'optional'.
        enum:
        - enforced
        - optional
        type: string
      notification_emails:
        description: A list of notification email addresses.
        items:
          type: string
        type: array
      object:
        description: 'Entity name: always ''account'''
        enum:
        - account
        type: string
      parent_account:
        $ref: '#/definitions/ParentAccountInfo'
        description: Contact details of the parent account.
      parent_id:
        description: The ID of the parent account, if it has any.
        example: 01619571dad80242ac12000600000000
        type: string
      password_policy:
        $ref: '#/definitions/PasswordPolicy'
        description: The password policy for this account.
      phone_number:
        description: The phone number of a representative of the company.
        example: +44 (1223) 400 400
        type: string
      policies:
        description: List of policies if requested.
        items:
          $ref: '#/definitions/FeaturePolicy'
        type: array
      postal_code:
        description: The postal code part of the postal address.
        example: CB1 9NJ
        type: string
      reason:
        description: A reason note for updating the status of the account
        example: Subscription paid.
        type: string
      reference_note:
        description: A reference note for updating the status of the account
        example: ARM-INT-0001
        type: string
      sales_contact:
        description: Email address of the sales contact.
        example: sales@arm.com
        type: string
      state:
        description: The state part of the postal address.
        example: ' '
        type: string
      status:
        description: The status of the account.
        enum:
        - ENROLLING
        - ACTIVE
        - RESTRICTED
        - SUSPENDED
        example: ACTIVE
        type: string
      sub_accounts:
        description: List of sub accounts. Not available for developer users.
        items:
          $ref: '#/definitions/AccountInfo'
        type: array
      template_id:
        description: Account template ID.
        example: 01619571e7160242ac12000600000000
        type: string
      tier:
        description: 'The tier level of the account; ''0'': free tier, ''1'': commercial
          account, ''2'': partner tier. Other values are reserved for the future.'
        example: '1'
        type: string
      updated_at:
        description: Last update UTC time RFC3339.
        example: '2018-02-14T15:24:14Z'
        format: date-time
        type: string
      upgraded_at:
        description: Time when upgraded to commercial account in UTC format RFC3339.
        example: '2018-02-14T15:24:14Z'
        format: date-time
        type: string
    required:
    - end_market
    - etag
    - id
    - object
    - status
    - tier
    type: object
  AccountInfoList:
    properties:
      after:
        description: The entity ID to fetch after the given one.
        example: 01619571f3c00242ac12000600000000
        type: string
      data:
        description: A list of entities.
        items:
          $ref: '#/definitions/AccountInfo'
        type: array
      has_more:
        description: Flag indicating whether there is more results.
        example: false
        type: boolean
      limit:
        description: 'The number of results to return, (range: 2-1000), or equals
          to `total_count`'
        example: 50
        format: int32
        type: integer
      object:
        description: 'Entity name: always ''list'''
        enum:
        - list
        type: string
      order:
        description: 'The order of the records to return based on creation time. Available
          values: ASC, DESC; by default ASC.'
        enum:
        - ASC
        - DESC
        type: string
      total_count:
        description: The total number or records, if requested. It might be returned
          also for small lists.
        example: 20
        format: int32
        type: integer
    required:
    - data
    - has_more
    - limit
    - object
    - total_count
    type: object
  AccountUpdateReq:
    description: This object represents an account creation request.
    properties:
      address_line1:
        description: Postal address line 1, not longer than 100 characters. Required
          for commercial accounts only.
        example: 110 Fulbourn Rd
        type: string
      address_line2:
        description: Postal address line 2, not longer than 100 characters.
        example: ' '
        type: string
      aliases:
        description: An array of aliases, not more than 10. An alias is not shorter
          than 8 and not longer than 100 characters.
        items:
          type: string
        type: array
      city:
        description: The city part of the postal address, not longer than 100 characters.
          Required for commercial accounts only.
        example: Cambridge
        type: string
      company:
        description: The name of the company, not longer than 100 characters. Required
          for commercial accounts only.
        example: ARM Holdings Plc
        type: string
      contact:
        description: The name of the contact person for this account, not longer than
          100 characters. Required for commercial accounts only.
        example: J. Doe
        type: string
      country:
        description: The country part of the postal address, not longer than 100 characters.
          Required for commercial accounts only.
        example: United Kingdom
        type: string
      custom_fields:
        additionalProperties:
          type: string
        description: Account's custom properties as key-value pairs, with a maximum
          of 10 keys. The maximum length of a key is 100 characters. The values are
          handled as strings and the maximum length for a value is 1000 characters.
        type: object
      display_name:
        description: The display name for the account, not longer than 100 characters.
        example: ARM
        type: string
      email:
        description: The company email address for this account, not longer than 254
          characters. Required for commercial accounts only.
        example: info@arm.com
        type: string
      end_market:
        description: The end market for this account, not longer than 100 characters.
        example: IT
        type: string
      expiration_warning_threshold:
        description: 'Indicates how many days before account expiration a notification
          email should be sent. Valid values are: 1-180.'
        type: string
      idle_timeout:
        description: The reference token expiration time in minutes for this account.
          Between 1 and 120 minutes.
        type: string
      mfa_status:
        description: The enforcement status of setting up the multi-factor authentication.
          'Enforced' means that setting up the MFA is required after login. 'Optional'
          means that the MFA is not required.
        enum:
        - enforced
        - optional
        type: string
      notification_emails:
        description: A list of notification email addresses.
        items:
          type: string
        type: array
      password_policy:
        $ref: '#/definitions/PasswordPolicy'
        description: Password policy for this account.
      phone_number:
        description: The phone number of a representative of the company, not longer
          than 100 characters.
        example: +44 (1223) 400 400
        type: string
      postal_code:
        description: The postal code part of the postal address, not longer than 100
          characters.
        example: CB1 9NJ
        type: string
      state:
        description: The state part of the postal address, not longer than 100 characters.
        example: ' '
        type: string
    type: object
  AccountUpdateRootReq:
    description: This object represents an account update request.
    properties:
      address_line1:
        description: Postal address line 1, not longer than 100 characters. Required
          for commercial accounts only.
        example: 110 Fulbourn Rd
        type: string
      address_line2:
        description: Postal address line 2, not longer than 100 characters.
        example: ' '
        type: string
      aliases:
        description: An array of aliases, not more than 10. An alias is not shorter
          than 8 and not longer than 100 characters.
        items:
          type: string
        type: array
      city:
        description: The city part of the postal address, not longer than 100 characters.
          Required for commercial accounts only.
        example: Cambridge
        type: string
      company:
        description: The name of the company, not longer than 100 characters. Required
          for commercial accounts only.
        example: ARM Holdings Plc
        type: string
      contact:
        description: The name of the contact person for this account, not longer than
          100 characters. Required for commercial accounts only.
        example: J. Doe
        type: string
      contract_number:
        description: Contract number of the customer.
        type: string
      country:
        description: The country part of the postal address, not longer than 100 characters.
          Required for commercial accounts only.
        example: United Kingdom
        type: string
      custom_fields:
        additionalProperties:
          type: string
        description: Account's custom properties as key-value pairs, with a maximum
          of 10 keys. The maximum length of a key is 100 characters. The values are
          handled as strings and the maximum length for a value is 1000 characters.
        type: object
      customer_number:
        description: Customer number of the customer.
        type: string
      display_name:
        description: The display name for the account, not longer than 100 characters.
        example: ARM
        type: string
      email:
        description: The company email address for this account, not longer than 254
          characters. Required for commercial accounts only.
        example: info@arm.com
        type: string
      end_market:
        description: The end market for this account, not longer than 100 characters.
        example: IT
        type: string
      expiration_warning_threshold:
        description: 'Indicates how many days before account expiration a notification
          email should be sent. Valid values are: 1-180.'
        type: string
      idle_timeout:
        description: The reference token expiration time in minutes for this account.
          Between 1 and 120 minutes.
        type: string
      mfa_status:
        description: The enforcement status of setting up the multi-factor authentication.
          'Enforced' means that setting up the MFA is required after login. 'Optional'
          means that the MFA is not required.
        enum:
        - enforced
        - optional
        type: string
      notification_emails:
        description: A list of notification email addresses.
        items:
          type: string
        type: array
      password_policy:
        $ref: '#/definitions/PasswordPolicy'
        description: Password policy for this account.
      phone_number:
        description: The phone number of a representative of the company, not longer
          than 100 characters.
        example: +44 (1223) 400 400
        type: string
      postal_code:
        description: The postal code part of the postal address, not longer than 100
          characters.
        example: CB1 9NJ
        type: string
      sales_contact:
        description: Email address of the sales contact.
        type: string
      state:
        description: The state part of the postal address, not longer than 100 characters.
        example: ' '
        type: string
    type: object
  ActiveServicePackage:
    description: An active service package.
    properties:
      created:
        description: Service package creation time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      expires:
        description: Service package expiration time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      firmware_update_count:
        description: Size of firmware update quota of this service package.
        format: int32
        type: integer
      grace_period:
        description: Is this service package on grace period or not?
        type: boolean
      id:
        description: ID of this service package.
        type: string
      modified:
        description: Service package latest modified time in RFC3339 date-time with
          millisecond accuracy and UTC time zone.
        format: date-time
        type: string
      next_id:
        description: Next service package ID if this service package has a pending
          renewal or null.
        type: string
      previous_id:
        description: Previous service package ID or null.
        type: string
      start_time:
        description: Service package start time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
    required:
    - id
    - created
    - modified
    - start_time
    - expires
    - firmware_update_count
    - grace_period
    type: object
  AggregatedQuotaUsageReport:
    description: Aggregated quota usage entry.
    properties:
      account_id:
        type: string
      amount:
        description: Amount of quota usage entry. Negative if it is quota consumption.
        format: int64
        type: integer
      campaign_name:
        description: 'Campaign name of quota usage entry.

          Null if quota usage entry type is not reservation or reservation release.'
        type: string
      time:
        description: Added time of quota usage entry in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      type:
        description: Type of quota usage entry.
        enum:
        - reservation
        - reservation_release
        - reservation_termination
        - package_renewal
        - package_creation
        - package_termination
        type: string
    required:
    - account_id
    - amount
    - type
    - time
    type: object
  AllServerCredentialsResponseData:
    properties:
      bootstrap:
        $ref: '#/definitions/CredentialsResponseData'
      lwm2m:
        $ref: '#/definitions/CredentialsResponseData'
    type: object
  ApiKeyInfoReq:
    description: This object represents an API key in requests towards Device Management.
    properties:
      groups:
        description: A list of group IDs this API key belongs to.
        items:
          type: string
        type: array
      name:
        description: The display name for the API key, not longer than 100 characters.
        type: string
      owner:
        description: The owner of this API key.
        type: string
      status:
        description: The status of the API key.
        enum:
        - ACTIVE
        - INACTIVE
        type: string
    required:
    - name
    type: object
  ApiKeyInfoResp:
    description: This object represents an API key in Device Management.
    properties:
      account_id:
        description: The ID of the account.
        example: 01619571e2e90242ac12000600000000
        pattern: '[a-f0-9]{32}'
        type: string
      created_at:
        description: Creation UTC time RFC3339.
        example: '2018-02-13T09:35:20Z'
        format: date-time
        type: string
      creation_time:
        description: The timestamp of the API key creation in the storage, in milliseconds.
        example: 1518630727683
        format: int64
        type: integer
      etag:
        description: API resource entity version.
        example: '1'
        type: string
      groups:
        description: A list of group IDs this API key belongs to.
        items:
          type: string
        type: array
      id:
        description: The ID of the API key.
        example: 01619571f7020242ac12000600000000
        type: string
      key:
        description: The API key.
        example: ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000
        type: string
      last_login_time:
        description: The timestamp of the latest API key usage, in milliseconds.
        example: 1518630727688
        format: int64
        type: integer
      name:
        description: The display name for the API key.
        example: API key gorgon
        type: string
      object:
        description: 'Entity name: always ''api-key'''
        enum:
        - api-key
        type: string
      owner:
        description: The owner of this API key, who is the creator by default.
        example: 01619571e2e89242ac12000600000000
        type: string
      status:
        description: The status of the API key.
        enum:
        - ACTIVE
        - INACTIVE
        example: ACTIVE
        type: string
      updated_at:
        description: Last update UTC time RFC3339.
        example: '2018-02-14T15:24:14Z'
        format: date-time
        type: string
    required:
    - etag
    - id
    - key
    - name
    - object
    type: object
  ApiKeyInfoRespList:
    properties:
      after:
        description: The entity ID to fetch after the given one.
        example: 01619571f3c00242ac12000600000000
        type: string
      data:
        description: A list of entities.
        items:
          $ref: '#/definitions/ApiKeyInfoResp'
        type: array
      has_more:
        description: Flag indicating whether there is more results.
        example: false
        type: boolean
      limit:
        description: 'The number of results to return, (range: 2-1000), or equals
          to `total_count`'
        example: 50
        format: int32
        type: integer
      object:
        description: 'Entity name: always ''list'''
        enum:
        - list
        type: string
      order:
        description: 'The order of the records to return based on creation time. Available
          values: ASC, DESC; by default ASC.'
        enum:
        - ASC
        - DESC
        type: string
      total_count:
        description: The total number or records, if requested. It might be returned
          also for small lists.
        example: 20
        format: int32
        type: integer
    required:
    - data
    - has_more
    - limit
    - object
    - total_count
    type: object
  ApiKeyUpdateReq:
    description: This object represents an API key in requests towards Device Management.
    properties:
      groups:
        description: A list of group IDs this API key belongs to.
        items:
          type: string
        type: array
      name:
        description: The display name for the API key, not longer than 100 characters.
        type: string
      owner:
        description: The owner of this API key.
        type: string
      status:
        description: The status of the API key.
        enum:
        - ACTIVE
        - INACTIVE
        type: string
    required:
    - name
    type: object
  AsyncID:
    properties:
      async-response-id:
        description: Asynchronous response unique ID.
        example: 9e3c96b8-c4d7-496a-ab90-cc732b9b560e
        type: string
    type: object
  AsyncIDResponse:
    properties:
      ct:
        description: The content type.
        example: text/plain
        type: string
      error:
        description: An optional error message describing the error.
        example: TIMEOUT
        type: string
      id:
        description: The unique ID of the asynchronous response.
        example: 9e3c96b8-c4d7-496a-ab90-cc732b9b560e
        type: string
      max-age:
        description: Determines how long this value stays valid in the cache, in seconds.
          0 means that the value is not stored in the cache.
        example: 60
        type: string
      payload:
        description: Requested data, base64 encoded.
        example: My4zMQ==
        type: string
      status:
        description: The asynchronous response status code for a device operation
          related to a proxy request or manual subscription.
        example: 200
        type: integer
    type: object
  BadRequestErrorResponse:
    description: 400 Bad Request response.
    properties:
      code:
        description: Response code. Always set to 400.
        enum:
        - 400
        type: integer
      fields:
        items:
          $ref: '#/definitions/BadRequestErrorResponseField'
        type: array
      message:
        description: A human readable message with detailed info.
        type: string
      object:
        description: Always set to 'error'.
        enum:
        - error
        type: string
      request_id:
        description: Request ID
        type: string
      type:
        description: Error type. Always set to 'validation_error'.
        enum:
        - validation_error
        type: string
    required:
    - object
    - message
    - request_id
    - type
    - code
    - fields
    type: object
  BadRequestErrorResponseField:
    description: Single field that failed validation
    properties:
      message:
        description: A human readable message with detailed validation error.
        type: string
      name:
        description: Name of the field that failed the validation. If name is set
          to "body" then the validation failed on request body.
        type: string
    required:
    - name
    - message
    type: object
  BillingReportRawDataResponse:
    description: The response includes the URL to download the raw billing data.
    properties:
      filename:
        description: The filename of the raw billing data file to be downloaded. It
          contains the file extensions.
        type: string
      object:
        description: API Resource name.
        type: string
      url:
        description: The URL to download the raw billing data.
        type: string
    required:
    - object
    - url
    - filename
    type: object
  BrandingColor:
    properties:
      color:
        description: The color given as name (purple) or as a hex code.
        example: '#f3f93e'
        type: string
      object:
        description: 'Entity name: always ''branding_color'''
        enum:
        - branding_color
        readOnly: true
        type: string
      reference:
        description: Color name.
        enum: &id012
        - error_color
        - primary
        - secondary
        - success_color
        - warning_color
        - canvas_background
        - canvas_background_font_color
        - workspace_background
        - workspace_background_font_color
        - info_color
        - info_font_color
        - primary_font_color
        - secondary_font_color
        - error_font_color
        - success_font_color
        - warning_font_color
        type: string
      updated_at:
        description: Last update time in UTC.
        example: '2018-02-14T15:24:14Z'
        format: date-time
        readOnly: true
        type: string
    type: object
  BrandingColorList:
    properties:
      after:
        description: The entity ID to fetch after the given one.
        example: 01619571f3c00242ac12000600000000
        type: string
      data:
        description: A list of entities.
        items:
          $ref: '#/definitions/BrandingColor'
        type: array
      has_more:
        description: Flag indicating whether there is more results.
        example: false
        type: boolean
      limit:
        description: 'The number of results to return, (range: 2-1000), or equals
          to `total_count`'
        example: 50
        format: int32
        type: integer
      object:
        description: 'Entity name: always ''list'''
        enum:
        - list
        type: string
      order:
        description: 'The order of the records to return based on creation time. Available
          values: ASC, DESC; by default ASC.'
        enum:
        - ASC
        - DESC
        type: string
      total_count:
        description: The total number or records, if requested. It might be returned
          also for small lists.
        example: 20
        format: int32
        type: integer
    required:
    - data
    - has_more
    - limit
    - object
    - total_count
    type: object
  BrandingImage:
    properties:
      object:
        description: 'Entity name: always ''branding_image'''
        enum:
        - branding_image
        readOnly: true
        type: string
      reference:
        description: Name of the image.
        enum: &id013
        - brand_logo_portrait
        - brand_logo_square
        - brand_logo_landscape
        - brand_logo_email
        - desktop_background_landscape
        - desktop_background_square
        - desktop_background_portrait
        - carousel_image_portrait_0
        - carousel_image_portrait_1
        - carousel_image_portrait_2
        - carousel_image_portrait_3
        - carousel_image_portrait_4
        - carousel_image_portrait_5
        - carousel_image_portrait_6
        - carousel_image_portrait_7
        - carousel_image_portrait_8
        - carousel_image_portrait_9
        - carousel_image_square_0
        - carousel_image_square_1
        - carousel_image_square_2
        - carousel_image_square_3
        - carousel_image_square_4
        - carousel_image_square_5
        - carousel_image_square_6
        - carousel_image_square_7
        - carousel_image_square_8
        - carousel_image_square_9
        - carousel_image_landscape_0
        - carousel_image_landscape_1
        - carousel_image_landscape_2
        - carousel_image_landscape_3
        - carousel_image_landscape_4
        - carousel_image_landscape_5
        - carousel_image_landscape_6
        - carousel_image_landscape_7
        - carousel_image_landscape_8
        - carousel_image_landscape_9
        type: string
      static_uri:
        description: The static link to the image.
        example: https://static.mbed.com/123456789.jpg
        format: uri
        readOnly: true
        type: string
      updated_at:
        description: Last update time in UTC.
        example: '2018-02-14T15:24:14Z'
        format: date-time
        readOnly: true
        type: string
    type: object
  BrandingImageList:
    properties:
      after:
        description: The entity ID to fetch after the given one.
        example: 01619571f3c00242ac12000600000000
        type: string
      data:
        description: A list of entities.
        items:
          $ref: '#/definitions/BrandingImage'
        type: array
      has_more:
        description: Flag indicating whether there is more results.
        example: false
        type: boolean
      limit:
        description: 'The number of results to return, (range: 2-1000), or equals
          to `total_count`'
        example: 50
        format: int32
        type: integer
      object:
        description: 'Entity name: always ''list'''
        enum:
        - list
        type: string
      order:
        description: 'The order of the records to return based on creation time. Available
          values: ASC, DESC; by default ASC.'
        enum:
        - ASC
        - DESC
        type: string
      total_count:
        description: The total number or records, if requested. It might be returned
          also for small lists.
        example: 20
        format: int32
        type: integer
    required:
    - data
    - has_more
    - limit
    - object
    - total_count
    type: object
  BulkResponse:
    properties:
      account_id:
        description: ID
        example: 00005a4e027f0a580a01081c00000000
        type: string
      completed_at:
        description: 'The time of completing the bulk creation task.

          '
        format: date-time
        type: string
      created_at:
        description: 'The time of receiving the bulk creation task.

          '
        format: date-time
        type: string
      errors_count:
        description: 'The number of enrollment identities with failed processing.

          '
        example: 0
        type: integer
      errors_report_file:
        example: https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/errors_report.csv
        type: string
      etag:
        description: etag
        example: '1'
        pattern: '[A-Za-z0-9]{0,256}'
        type: string
      full_report_file:
        example: https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/full_report.csv
        type: string
      id:
        description: Bulk ID
        pattern: ^[A-Za-z0-9]{32}
        type: string
      object:
        enum:
        - enrollment-identity-bulk-uploads
        example: enrollment-identity-bulk-uploads
        type: string
      processed_count:
        description: 'The number of enrollment identities processed until now.

          '
        example: 0
        type: integer
      status:
        default: new
        description: 'The state of the process is ''new'' at the time of creation.
          If the creation is still in progress, the state is shown as ''processing''.
          When the request has been fully processed, the state changes to ''completed''.

          '
        enum:
        - new
        - processing
        - completed
        example: new
      total_count:
        description: 'Total number of enrollment identities found in the input CSV.

          '
        example: 10
        type: integer
    required:
    - object
    - id
    - etag
    - created_at
    - account_id
    - status
    - total_count
    - processed_count
    - errors_count
    type: object
  CampaignDeviceMetadata:
    properties:
      campaign:
        description: The device's campaign ID
        example: 015bf72fccda00000000000100100280
        type: string
      created_at:
        description: The time the campaign was created
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      deployment_state:
        description: The state of the update campaign on the device
        enum:
        - pending
        - updated_connector_channel
        - failed_connector_channel_update
        - deployed
        - manifestremoved
        - deregistered
        type: string
      description:
        description: Description
        example: ''
        maxLength: 2000
        type: string
      device_id:
        description: The device ID
        example: 015c2fec9bba0000000000010010036f
        type: string
      etag:
        description: API resource entity version
        example: '2017-05-22T12:37:58.753425Z'
        type: string
      id:
        description: The metadata record ID
        example: 015c3029f6f7000000000001001000c3
        type: string
      mechanism:
        description: How the firmware is delivered (connector or direct)
        example: connector
        type: string
      mechanism_url:
        description: The Device Management Connect URL
        example: ''
        type: string
      name:
        description: The record name
        example: default_object_name
        maxLength: 128
        type: string
      object:
        description: 'The entity name: always ''update-campaign-device-metadata'''
        example: update-campaign-device-metadata
        type: string
      updated_at:
        description: 'The record was modified in the database format: date-time'
        example: '2017-05-22T12:37:58.776736Z'
        format: date-time
        type: string
    type: object
  CampaignDeviceMetadataPage:
    properties:
      after:
        description: The entity ID to fetch after the given one
        example: 'null'
        type: string
      data:
        description: A list of entities
        items:
          $ref: '#/definitions/CampaignDeviceMetadata'
        type: array
      has_more:
        description: A flag indicating whether there are more results
        example: 'false'
        type: boolean
      limit:
        description: 'The number of results to return, (range: 2-1000), or equals
          to total_count'
        example: '50'
        type: integer
      object:
        description: 'The entity name: always ''list'''
        example: list
        type: string
      order:
        description: 'The order of the records to return. Acceptable values: ASC,
          DESC. Default: ASC'
        enum:
        - ASC
        - DESC
        example: ASC
        type: string
      total_count:
        description: The total number or records, if requested. It may be returned
          also for small lists.
        example: '1'
        type: integer
    type: object
  CampaignMetrics:
    properties:
      created_at:
        description: The time the metrics were created.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      failed_count:
        description: Running total of devices that could not be updated.
        example: '0'
        format: int32
        type: integer
      object:
        description: 'Entity name: always ''update-campaign-metrics'''
        example: update-campaign-metrics
        type: string
      pending_count:
        description: Running total of devices that have yet to receive an update or
          are applying an update.
        example: '10'
        format: int32
        type: integer
      success_count:
        description: Running total of successfully updated devices.
        example: '90'
        format: int32
        type: integer
      total_count:
        description: Number of devices in the campaign.
        example: '100'
        format: int32
        type: integer
    type: object
  CertificateEnrollment:
    properties:
      certificate_name:
        description: The certificate name.
        example: customer.dlms
        maxLength: 50
        type: string
      created_at:
        description: Creation UTC time RFC3339.
        example: '2017-01-01T00:00:00Z'
        format: date-time
        type: string
      device_id:
        description: The device ID.
        example: 01625daa23230a580a0100bd00000000
        type: string
      enroll_result:
        enum:
        - success
        - not_found
        - forbidden
        - failure
        type: string
      enroll_status:
        enum:
        - new
        - completed
        type: string
      etag:
        description: Entity instance signature.
        example: '1'
        type: string
      id:
        description: The ID of the certificate enrollment.
        example: 01612df56f3b0a580a010fc700000000
        type: string
      object:
        enum:
        - certificate-enrollment
        type: string
      updated_at:
        description: Update UTC time RFC3339.
        example: '2017-01-01T00:00:00Z'
        format: date-time
        type: string
    required:
    - created_at
    - etag
    - id
    - device_id
    - certificate_name
    type: object
  CertificateEnrollmentListResponse:
    properties:
      after:
        description: The entity ID to fetch after the given one.
        example: 01625daa23230a580a0100bd00000000
        type: string
      data:
        description: List of certificate enrollments.
        items:
          $ref: '#/definitions/CertificateEnrollment'
        type: array
      has_more:
        description: Flag indicating whether there are more results.
        type: boolean
      limit:
        description: The number of results to return.
        format: int32
        type: integer
      object:
        description: Describes the type of objects in the list.
        enum:
        - list
        type: string
      order:
        description: The order of the records to return based on creation time. By
          default ASC.
        enum:
        - ASC
        - DESC
        type: string
      total_count:
        description: The total number of records.
        format: int32
        type: integer
    type: object
  CertificateGenerationReq:
    description: This object is used for generating a new service provider certificate.
    properties:
      algorithm:
        description: The algorithm and its key size used for generating the certificate.
          Defaults to RSA2048.
        enum:
        - RSA2048
        - RSA3072
        - EC224
        - EC256
        - EC384
        - EC521
        - ECDSA224
        - ECDSA256
        - ECDSA384
        - ECDSA521
        type: string
      validity:
        description: Validity for the certificate in days. Value can be in the range
          of 1 to 3650. Defaults to 365 days.
        format: int32
        type: integer
    type: object
  CertificateIssuerConfigListResponse:
    properties:
      after: &id001
        description: An offset token for current page.
        example: '01631667477600000000000100100374'
        type: string
      data:
        description: List of certificate issuers.
        items:
          $ref: '#/definitions/CertificateIssuerConfigResponse'
        type: array
      has_more: &id002
        description: Are there more results available.
        example: false
        type: boolean
      limit: &id003
        description: How many objects to retrieve in the page. The minimum limit is
          2 and the maximum is 1000. Limit values outside of this range are set to
          the closest limit.
        example: 50
        maximum: 1000
        minimum: 2
        type: integer
      object: &id004
        description: The type of this API object is a `list`.
        example: list
        type: string
      order: &id005
        description: The creation time based order of the entries.
        example: DESC
        type: string
      total_count: &id006
        example: 1
        format: integer
        type: integer
    type: object
  CertificateIssuerConfigRequest:
    properties:
      certificate_issuer_id:
        description: 'The ID of the certificate issuer.

          For LwM2M, it may be null if Device Management internal certificate issuer
          is used.

          '
        example: 01648415a2a30242ac18000500000000
        type: string
    type: object
  CertificateIssuerConfigResponse:
    properties:
      certificate_issuer_id:
        description: 'The ID of the certificate issuer.

          Null if Device Management internal HSM is used.

          '
        example: 01648415a2a30242ac18000500000000
        type: string
      created_at:
        description: Created UTC time RFC3339.
        example: '2017-01-01T00:00:00Z'
        format: date-time
        type: string
      etag:
        description: Entity instance signature.
        example: '1'
        type: string
      id:
        description: 'The ID of the certificate issuer configuration.

          '
        example: 01648415a2a30242ac18000500000000
        type: string
      is_custom:
        example: true
        type: boolean
      object:
        enum:
        - certificate-issuer-configuration
        type: string
      reference:
        description: The certificate name to which the certificate issuer configuration
          applies.
        example: customer.dlms
        type: string
      updated_at:
        description: Updated UTC time RFC3339.
        example: '2017-02-01T00:00:00Z'
        format: date-time
        type: string
    type: object
  CertificateIssuerInfo:
    properties:
      created_at:
        description: Creation UTC time RFC3339.
        example: '2017-01-01T00:00:00Z'
        format: date-time
        type: string
      description:
        description: General description for the certificate issuer.
        example: GlobalSign sample issuer
        maxLength: 100
        type: string
      etag:
        description: Entity instance signature.
        example: '1'
        type: string
      id:
        description: The ID of the certificate issuer.
        example: 01234567890ABCDEF01234567890ABCDEF
        type: string
      issuer_attributes:
        additionalProperties: &id007
          type: string
        description: 'General attributes for connecting the certificate issuer.

          When the issuer_type is GLOBAL_SIGN, the value shall be empty.

          When the issuer_type is CFSSL_AUTH, see definition of CfsslAttributes.

          '
        example: &id008 {}
        type: object
      issuer_type:
        description: "The type of the certificate issuer.\n- GLOBAL_SIGN:\n  Certificates\
          \ are issued by GlobalSign service. The users must provide their own GlobalSign\
          \ account credentials.\n- CFSSL_AUTH:\n  Certificates are issued by CFSSL\
          \ authenticated signing service.\n  The users must provide their own CFSSL\
          \ host_url and credentials.\n"
        enum:
        - GLOBAL_SIGN
        - CFSSL_AUTH
        example: GLOBAL_SIGN
        type: string
      name:
        description: Certificate issuer name, unique per account.
        example: GS Issuer
        maxLength: 50
        type: string
      object:
        enum:
        - certificate-issuer
        type: string
    required:
    - issuer_type
    type: object
  CertificateIssuerInfoListResponse:
    properties:
      after: *id001
      data:
        description: List of certificate issuers.
        items:
          $ref: '#/definitions/CertificateIssuerInfo'
        type: array
      has_more: *id002
      limit: *id003
      object: *id004
      order: *id005
      total_count: *id006
    type: object
  CertificateIssuerRequest:
    example:
      description: Sample GlobalSign certificate issuer.
      issuer_attributes: null
      issuer_credentials:
        api_key: e510e289e6cd8947
        api_secret: a477a8393d17a55ecb2ba6a61f58feb84770b621
        client_certificate: '"-----BEGIN CERTIFICATE-----MIIC7zCCAdegAwIBAgIJANTlU4x5S74VMA0GCSqGSIb3DQEBCwUAMA4xDDAKBgNVBAoMA0FybTAeFw0xODAzMTExMzE5MTFaFw0xOTAzMTExMzE5MTFaMA4xDDAKBgNVBAoMA0FybTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJWLStsVMJULZtxdieK9qocM4ymDXMaAusmd9TZLzBgznKQe/CW2yxyA8C8K5e6MmvMYGeKDd4Lkw/ezOj2OsUj2xzNIltUxpGi/GhsNYiN/khNJa/Y1SllLoihJAPm/xbMywOBRu/dM88PiJsNZccOk0I8DYvvyAs9wCTkbKLnfHygl98DCRqXw7nBCplU6F03qpUd/4BUtMtugyqt7yboGH+4YewnUh4Yh4QNOJIvE93Ob++eKjO3pIOYEhQmUxzOLaLNuWXlv2l1WuN281hUP4XBcV8mCzRQfTBBDYTWt+5BEWoLOUkXjW0Um6EAaN3usph1IKDEH6Ia5VHP4Pj0CAwEAAaNQME4wHQYDVR0OBBYEFLsfYZxFcQTjPJKYMjHI2In316fmMB8GA1UdIwQYMBaAFLsfYZxFcQTjPJKYMjHI2In316fmMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFl08GFsIkkUs6M7QgCWmsnwP6PtD8V87wM1GAqQQlOOeztaeRR2TEOeYiKRZQugYszJ/FVfVp4ggqzepJMn6UZ42j5nmSJs+6t79i23QAzX1zNQ354lr/t7kt3fMdhuL3AP0oZGzdy+EnXXiWeAD22UwzvVmLt38ypJIl+pmTsx9jJy4PN7yoRgtP9k+50m3X6oDxVruehC/JPSeTvEhqyLW3fLcG6IoJMX3vIwfO9uXbFJumTowQeViNJJ9duWvD2KBXn/muOOBe97TPuvAms1gOtMmmPT9/jpo9b4+NsfFiAN6bMici81aIKZzLC+lLGOUmR2fFJyM5OsVLxKsko=-----END
          CERTIFICATE-----"

          '
        passphrase: helloworld
        private_key: '"-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info:
          DES-EDE3-CBC,CCAC26A4133947CB\n\np3KJ4FI3wcz3I0MtiLkrznkjWFvprVmoNywySUGb5IqZViJZqCMEsyU9a9iDsSfP\nZ07cg9GviV21WYIPSxZOQrpy1g1VWILzFnH+J6z8dSH4mxXh0PwdOzYgAeqkrIVM\nJ7KRm6t222dZFjjXK3eEcLmBLGo29XwVJxKHx+l4++gU1LZmeHZR5M8fJ4jejUly\n7sqzPlmRF0N3I4lwKVj+PfQTVz43QoCnpxOjuSEL4liBrc2agY2xH1O0PFyHimz9\n3XM9HR/iuPHW0N2D+NPjXlWKacerupH9d4i9IYIagzB+HTgej8limdo03GmmxcZ6\nYNa58n5yQSaqu0TPRU9DsrKeGjadHTlZQGdzfq1SWsROCnHLrXFKE2ozIG3+hxA5\nujBF/QWpX5+inXUwDJhBxp8isHbPEnBEUUd6ZRzCTjvN0jaUti5B9yFhO2G6mbE8\nCvhyzQK8oJqsjZXnlcpPf95LP+9XbcCDjLSIaWJstzXO9tPiv6+x1MVWmivtRHcC\nSTzpx8jAGCiG6ejLqWB87ZXiZm7ujlCBheHSf5RHwNHhUvoP2JEYalDDRxjcDMSx\n4uV42Np4yJlIQEDlGHcBlXoL7vEukFpuWgkYdpcZy/Ou9qz8mXrpLcu8C8MhLmSC\nixGoR5iRhV7cxoHLyuCzj87eYEA73Xu238DQorSEEuiVFnLzQ2+PJMs4qoI14q/L\notlBDz+Ko6DrU/EZROYmiqMkLKXR2sx9zNAJwPYRs6nSH08tZ3dwqzZbgtP3Wazi\nhLWHt5/En7wQRA5a+/dDEHXSoLvvSQ9jvhclhWf+eCYuq2eH+g54oyJGRSY+8GV7\nujhLxkzl/3OZdhZPWoz4U13KpbSTcNWu5Y7oGDoabw19UbvqmLf1PJkpDH/tQgzB\nxYtsLBRUcofpYoeIiIxfAA4do5WilJc8xqrGhkE4WcHfY24HXAiOvsjbxV+BRprX\n1jtgJpV/9nJESMap+8PxipGUFRGjB83/uwJaa6mLftEKflX8i4MZ+HnqraXERsqA\nWRUcDHIWmFfpzIB3iNuxawVvPH8NdCSPmQ9qTb8Cozl0AuOK2E9S+ke8oiYQScWR\nLdu+zhej7GjuQ9R+Ub+wPWqvOA5qLXejqnCexVScDUuN+z9JWM3N2FG1MwxhAzhP\ndEfoQHoBn6uyOmrVGP6fosV3chqhPoec42KeOAm1xDvx692isaIy1jPgIyPxeqhm\n2Tw4E+02R7dlP8Ljf7JzfLm4oKpWHWlcHeqg24x6lY/wXU1RBcWaTa0AQUwoGm2m\nIQCPfIqOEv/QC2HpO7SVCYkl65KwR0oTd1AzYxdxEq3xHQbh69EL0FGZPVxVCPI+\nhEAyifKy1/tm3l91Rf/kGpHY7nIQKCXH49tmFwix8gke2nZJmRgX7/zAdMOAKeKH\nAaIl4nQtv14EbaasMgnn9qgaDYnWzaReEob2QlQ/WYlTor61+KFpGtcf9jAkgudT\n2op+4CF7wT2+aTXdtkVWfmv++iB8GnlqZdxLvyG1cTYjjYHVFbMSWQnxzQqiE2ms\nQgp+byjWCumpsWTMdTO+d9NkDOo80vDpaRxEgebmhJ0MbX+eFjBgVg==\n-----END
          RSA PRIVATE KEY-----"'
      issuer_type: GLOBAL_SIGN
      name: GS Issuer
    properties:
      description:
        description: General description for the certificate issuer.
        maxLength: 100
        type: string
      issuer_attributes:
        additionalProperties: *id007
        description: 'General attributes for connecting the certificate issuer.

          When the issuer_type is GLOBAL_SIGN, the value shall be empty.

          When the issuer_type is CFSSL_AUTH, see definition of CfsslAttributes.

          '
        example: *id008
        type: object
      issuer_credentials:
        additionalProperties: &id009
          type: string
        description: 'The credentials required for connecting to the certificate issuer.

          When the issuer_type is GLOBAL_SIGN, see definition of GlobalSignCredentials.

          When the issuer_type is CFSSL_AUTH, see definition of CfsslAuthCredentials.

          '
        example: &id010 {}
        type: object
      issuer_type:
        description: "The type of the certificate issuer.\n- GLOBAL_SIGN:\n  Certificates\
          \ are issued by GlobalSign service. The users must provide their own GlobalSign\
          \ account credentials.\n- CFSSL_AUTH:\n  Certificates are issued by CFSSL\
          \ authenticated signing service.\n  The users must provide their own CFSSL\
          \ host_url and credentials.\n"
        enum:
        - GLOBAL_SIGN
        - CFSSL_AUTH
        type: string
      name:
        description: Certificate issuer name, unique per account.
        maxLength: 50
        type: string
    required:
    - name
    - issuer_type
    type: object
  CertificateIssuerUpdateRequest:
    example:
      description: Sample GlobalSign certificate issuer - updated.
      name: GlobalSign Issuer
    properties:
      description:
        description: General description for the certificate issuer.
        maxLength: 100
        type: string
      issuer_attributes:
        additionalProperties: *id007
        description: 'General attributes for connecting the certificate issuer.

          When the issuer_type is GLOBAL_SIGN, the value shall be empty.

          When the issuer_type is CFSSL_AUTH, see definition of CfsslAttributes.

          '
        example: *id008
        type: object
      issuer_credentials:
        additionalProperties: *id009
        description: 'The credentials required for connecting to the certificate issuer.

          When the issuer_type is GLOBAL_SIGN, see definition of GlobalSignCredentials.

          When the issuer_type is CFSSL_AUTH, see definition of CfsslAuthCredentials.

          '
        example: *id010
        type: object
      name:
        description: Certificate issuer name.
        maxLength: 50
        type: string
    type: object
  CertificateIssuerVerifyResponse:
    properties:
      message:
        description: 'Provides details in case of failure.

          '
        example: message describing the verification failure
        type: string
      successful:
        description: 'Indicates whether the certificate issuer was verified successfully.

          '
        example: false
        type: boolean
    type: object
  CfsslAttributes:
    description: 'Describes the attributes required to connect to the CFSSL server.

      '
    properties:
      cfssl_label:
        description: 'The label that is used by CFSSL when creating the certificate.

          '
        type: string
      cfssl_profile:
        description: 'The profile that is configured on the CFSSL server and is used
          by CFSSL when creating the certificate.

          '
        type: string
      host_url:
        description: 'The URL to connect to the CFSSL server.

          '
        type: string
    required:
    - host_url
    type: object
  CfsslAuthCredentials:
    description: 'Describes the credentials required when using CFSSL authenticated
      signing.

      '
    properties:
      hmac_hex_key:
        description: 'The key that is used to compute the HMAC of the request using
          the HMAC-SHA-256 algorithm.

          Must contain an even number of hexadecimal characters.

          '
        example: 0010203ABCD708EF
        maxLength: 64
        pattern: ^([a-fA-F0-9][a-fA-F0-9]){1,32}$
        type: string
    required:
    - hmac_hex_key
    type: object
  CreateCertificateIssuerConfig:
    properties:
      certificate_issuer_id:
        description: 'The ID of the certificate issuer.

          '
        example: 01648415a2a30242ac18000500000000
        maxLength: 32
        type: string
      reference:
        description: 'The certificate name, as created in the factory, to which the
          certificate issuer configuration applies.

          The following names are reserved and cannot be configured: LwM2M, BOOTSTRAP.

          '
        example: customer.dlms
        maxLength: 50
        pattern: (?!mbed\.)[\w-_.]{1,50}
        type: string
    required:
    - reference
    - certificate_issuer_id
    type: object
  CredentialsResponseData:
    properties:
      certificate:
        description: PEM format X.509 server certificate that will be used to validate
          the server certificate that will be received during the TLS/DTLS handshake.
        type: string
      url:
        description: Server URI to which the client needs to connect to.
        type: string
    type: object
  DeveloperCertificateRequestData:
    properties:
      description:
        description: Description for the developer certificate. There is a limit on
          the length of the description. Please see [TrustedCertificateReq](/docs/current/api-references/account-management-api.html#trustedcertificatereq)
        type: string
      name:
        description: Name of the developer certificate, must be unique. There is a
          limit on the length of the name. Please see [TrustedCertificateReq](/docs/current/api-references/account-management-api.html#trustedcertificatereq)
        type: string
    required:
    - name
    type: object
  DeveloperCertificateResponseData:
    properties:
      account_id:
        description: account to which the developer certificate belongs
        type: string
      created_at:
        description: Creation UTC time RFC3339.
        format: date-time
        type: string
      description:
        description: Description for the developer certificate.
        type: string
      developer_certificate:
        description: PEM format X.509 developer certificate.
        type: string
      developer_private_key:
        description: PEM format developer private key associated to the certificate.
        type: string
      etag:
        description: API resource entity version.
        type: string
      id:
        description: mUUID that uniquely identifies the developer certificate.
        type: string
      name:
        description: Name of the developer certificate.
        type: string
      object:
        description: Entity name, always 'trusted-cert'
        type: string
      security_file_content:
        description: Content of the security.c file that will be flashed into the
          device to provide the security credentials
        type: string
    type: object
  DeviceData:
    properties:
      account_id:
        description: The ID of the associated account.
        example: '00000000000000000000000000000000'
        type: string
      auto_update:
        description: 'DEPRECATED: Mark this device for automatic firmware update.'
        type: boolean
      bootstrap_expiration_date:
        description: The expiration date of the certificate used to connect to bootstrap
          server.
        format: date
        type: string
      bootstrapped_timestamp:
        description: The timestamp of the device's most recent bootstrap process.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      ca_id:
        description: The certificate issuer's ID.
        example: '00000000000000000000000000000000'
        maxLength: 500
        type: string
      connector_expiration_date:
        description: The expiration date of the certificate used to connect to LwM2M
          server.
        format: date
        type: string
      created_at:
        description: The timestamp of when the device was created in the device directory.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      custom_attributes:
        additionalProperties:
          type: string
        description: Up to five custom key-value attributes.
        example: '{ ''key'': ''value'' }'
        type: object
      deployed_state:
        description: 'DEPRECATED: The state of the device''s deployment.'
        enum:
        - development
        - production
        type: string
      deployment:
        description: 'DEPRECATED: The last deployment used on the device.'
        example: ''
        type: string
      description:
        description: The description of the device.
        example: description
        maxLength: 2000
        type: string
      device_class:
        description: An ID representing the model and hardware revision of the device.
        example: ''
        maxLength: 32
        type: string
      device_execution_mode:
        description: "The execution mode from the certificate of the device. Defaults\
          \ to inheriting from host_gateway device.\nPermitted values:\n  - 0 - unspecified\
          \ execution mode (default if host_gateway invalid or not set)\n  - 1 - development\
          \ devices\n  - 5 - production devices"
        enum:
        - 0
        - 1
        - 5
        example: 0
        type: integer
      device_key:
        description: The fingerprint of the device certificate.
        example: 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
        maxLength: 512
        type: string
      endpoint_name:
        description: The endpoint name given to the device.
        example: 00000000-0000-0000-0000-000000000000
        type: string
      endpoint_type:
        description: The endpoint type of the device. For example, the device is a
          gateway.
        example: ''
        maxLength: 64
        type: string
      enrolment_list_timestamp:
        description: The claim date/time.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      etag:
        description: The entity instance signature.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      firmware_checksum:
        description: The SHA256 checksum of the current firmware image.
        example: '0000000000000000000000000000000000000000000000000000000000000000'
        type: string
      groups: &id011
        description: An array containing an ID of each group this device belongs to.
        items:
          example: '00000000000000000000000000000000'
          type: string
        type: array
      host_gateway:
        description: The `endpoint_name` of the host gateway, if appropriate.
        example: ''
        type: string
      id:
        description: The ID of the device. The device ID is used across all Device
          Management APIs.
        example: '00000000000000000000000000000000'
        type: string
      manifest:
        description: 'DEPRECATED: The URL for the current device manifest.'
        example: ''
        type: string
      manifest_timestamp:
        description: The timestamp of the current manifest version.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      mechanism:
        description: The ID of the channel used to communicate with the device.
        enum:
        - connector
        - direct
        type: string
      mechanism_url:
        description: The address of the connector to use.
        example: ''
        type: string
      name:
        description: The name of the device.
        example: 00000000-0000-0000-0000-000000000000
        maxLength: 128
        type: string
      object:
        description: The API resource entity.
        example: device
        type: string
      serial_number:
        description: The serial number of the device.
        example: 00000000-0000-0000-0000-000000000000
        type: string
      state:
        description: The current state of the device.
        enum:
        - unenrolled
        - cloud_enrolling
        - bootstrapped
        - registered
        - deregistered
        type: string
      updated_at:
        description: The time the object was updated.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      vendor_id:
        description: The device vendor ID.
        example: 00000000-0000-0000-0000-000000000000
        type: string
  DeviceDataPatchRequest:
    properties:
      auto_update:
        description: 'DEPRECATED: Mark this device for automatic firmware update.'
        type: boolean
      ca_id:
        description: The certificate issuer's ID.
        example: '00000000000000000000000000000000'
        maxLength: 500
        type: string
      custom_attributes:
        additionalProperties:
          maxLength: 128
          type: string
        description: Up to five custom key-value attributes. Note that keys cannot
          start with a number. Both keys and values are limited to 128 characters.
        example: '{ ''key'': ''value'' }'
        type: object
      description:
        description: The description of the device.
        example: ''
        maxLength: 2000
        type: string
      device_key:
        description: The fingerprint of the device certificate.
        example: 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
        maxLength: 512
        type: string
      endpoint_name:
        description: The endpoint name given to the device.
        example: 00000000-0000-0000-0000-000000000000
        maxLength: 64
        type: string
      endpoint_type:
        description: The endpoint type of the device. For example, the device is a
          gateway.
        example: ''
        maxLength: 64
        type: string
      groups: *id011
      host_gateway:
        description: The `endpoint_name` of the host gateway, if appropriate.
        example: ''
        type: string
      name:
        description: The name of the device.
        example: 00000000-0000-0000-0000-000000000000
        maxLength: 128
        type: string
      object:
        description: The API resource entity.
        example: device
        type: string
  DeviceDataPostRequest:
    properties:
      auto_update:
        description: 'DEPRECATED: Mark this device for automatic firmware update.'
        type: boolean
      bootstrap_expiration_date:
        description: The expiration date of the certificate used to connect to bootstrap
          server.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      bootstrapped_timestamp:
        description: The timestamp of the device's most recent bootstrap process.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      ca_id:
        description: The certificate issuer's ID.
        example: '00000000000000000000000000000000'
        maxLength: 500
        type: string
      connector_expiration_date:
        description: The expiration date of the certificate used to connect to the
          LwM2M server.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      custom_attributes:
        additionalProperties:
          maxLength: 128
          type: string
        description: Up to five custom key-value attributes. Note that keys cannot
          start with a number. Both keys and values are limited to 128 characters.
        example: '{ ''key'': ''value'' }'
        type: object
      deployment:
        description: 'DEPRECATED: The last deployment used on the device.'
        example: ''
        type: string
      description:
        description: The description of the device.
        example: ''
        maxLength: 2000
        type: string
      device_class:
        description: An ID representing the model and hardware revision of the device.
        maxLength: 32
        type: string
      device_execution_mode:
        description: "The execution mode from the certificate of the device.\nPermitted\
          \ values:\n  - 0 - unspecified execution mode (default)\n  - 1 - development\
          \ devices\n  - 5 - production devices"
        type: integer
      device_key:
        description: The fingerprint of the device certificate.
        example: 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
        maxLength: 512
        type: string
      endpoint_name:
        description: The endpoint name given to the device.
        example: 00000000-0000-0000-0000-000000000000
        maxLength: 64
        type: string
      endpoint_type:
        description: The endpoint type of the device. For example, the device is a
          gateway.
        example: ''
        maxLength: 64
        type: string
      firmware_checksum:
        description: The SHA256 checksum of the current firmware image.
        example: '0000000000000000000000000000000000000000000000000000000000000000'
        maxLength: 64
        type: string
      groups: *id011
      host_gateway:
        description: The `endpoint_name` of the host gateway, if appropriate.
        example: ''
        type: string
      manifest:
        description: 'DEPRECATED: The URL for the current device manifest.'
        example: ''
        type: string
      mechanism:
        description: The ID of the channel used to communicate with the device.
        enum:
        - connector
        - direct
        type: string
      mechanism_url:
        description: The address of the connector to use.
        example: ''
        type: string
      name:
        description: The name of the device.
        example: 00000000-0000-0000-0000-000000000000
        maxLength: 128
        type: string
      object:
        description: The API resource entity.
        example: device
        type: string
      serial_number:
        description: The serial number of the device.
        example: 00000000-0000-0000-0000-000000000000
        maxLength: 64
        type: string
      state:
        description: The current state of the device.
        enum:
        - unenrolled
        - cloud_enrolling
        - bootstrapped
        - registered
        - deregistered
        type: string
      vendor_id:
        description: The device vendor ID.
        example: 00000000-0000-0000-0000-000000000000
        maxLength: 255
        type: string
  DeviceDataPutRequest:
    properties:
      auto_update:
        description: 'DEPRECATED: Mark this device for automatic firmware update.'
        type: boolean
      ca_id:
        description: The certificate issuer's ID.
        example: '00000000000000000000000000000000'
        maxLength: 500
        type: string
      custom_attributes:
        additionalProperties:
          maxLength: 128
          type: string
        description: Up to five custom key-value attributes. Note that keys cannot
          start with a number. Both keys and values are limited to 128 characters.
        example: '{ ''key'': ''value'' }'
        type: object
      description:
        description: The description of the device.
        example: ''
        maxLength: 2000
        type: string
      device_key:
        description: The fingerprint of the device certificate.
        example: 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
        maxLength: 512
        type: string
      endpoint_name:
        description: The endpoint name given to the device.
        example: 00000000-0000-0000-0000-000000000000
        maxLength: 64
        type: string
      endpoint_type:
        description: The endpoint type of the device. For example, the device is a
          gateway.
        example: ''
        maxLength: 64
        type: string
      groups: *id011
      host_gateway:
        description: The `endpoint_name` of the host gateway, if appropriate.
        example: ''
        type: string
      name:
        description: The name of the device.
        example: 00000000-0000-0000-0000-000000000000
        maxLength: 128
        type: string
      object:
        description: The API resource entity.
        example: device
        type: string
  DeviceEqNeqFilter:
    properties:
      account_id:
        type: string
      auto_update:
        type: boolean
      bootstrap_expiration_date:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      bootstrapped_timestamp:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      ca_id:
        type: string
      connector_expiration_date:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      custom_attributes:
        additionalProperties:
          type: string
        type: object
      deployed_state:
        type: string
      deployment:
        type: string
      description:
        type: string
      device_class:
        type: string
      device_execution_mode:
        type: integer
      device_key:
        type: string
      endpoint_name:
        type: string
      endpoint_type:
        type: string
      enrolment_list_timestamp:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      firmware_checksum:
        type: string
      host_gateway:
        type: string
      id:
        type: string
      manifest:
        type: string
      manifest_timestamp:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      mechanism:
        type: string
      mechanism_url:
        type: string
      name:
        type: string
      serial_number:
        type: string
      state:
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      vendor_id:
        type: string
    type: object
  DeviceEventData:
    properties:
      changes:
        additionalProperties:
          type: string
        example: {}
        type: object
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      data:
        additionalProperties:
          type: string
        description: Additional data relevant to the event.
        example:
          campaign_id: '00000000000000000000000000000000'
        type: object
      date_time:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      description:
        example: Device record created
        type: string
      device_id:
        example: '00000000000000000000000000000000'
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      event_type:
        description: Event code
        example: UPD2_100
        maxLength: 100
        type: string
      event_type_category:
        description: Category code which groups the event type by a summary category.
        example: FAIL_MANIFEST_REJECTED
        type: string
      event_type_description:
        description: Generic description of the event
        example: FAIL
        type: string
      id:
        example: '00000000000000000000000000000000'
        type: string
      object:
        description: The API resource entity.
        example: device-event
        type: string
      state_change:
        type: boolean
    required:
    - date_time
    - id
  DeviceEventEqNeqFilter:
    properties:
      date_time:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      description:
        type: string
      device_id:
        type: string
      event_type:
        type: string
      id:
        type: string
      state_change:
        type: boolean
  DeviceEventGteLteFilter:
    properties:
      date_time:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  DeviceEventInNinFilter:
    properties:
      date_time:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      description:
        type: string
      device_id:
        type: string
      event_type:
        type: string
      id:
        type: string
      state_change:
        type: boolean
  DeviceEventPage:
    properties:
      after:
        example: null
        type: string
      data:
        example: '[]'
        items:
          $ref: '#/definitions/DeviceEventData'
        type: array
      has_more:
        example: false
        type: boolean
      limit:
        example: 1000
        type: integer
      object:
        example: list
        type: string
      order:
        example: DESC
        type: string
      total_count:
        example: 1
        type: integer
  DeviceGroup:
    properties:
      created_at:
        description: The time the campaign was created.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      custom_attributes: &id015
        additionalProperties:
          type: string
        example:
          key: value
        maxProperties: 10
        type: object
      description: &id016
        description: The description of the group.
        example: Devices on the factory floor.
        maxLength: 2000
        type: string
      devices_count:
        description: The number of devices in this group.
        example: 10
        type: integer
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      id:
        description: The group ID.
        example: 015c3029f6f7000000000001001000c3
        type: string
      name: &id017
        description: Name of the group.
        example: My devices
        maxLength: 128
        type: string
      object:
        description: 'Entity name: always ''device-group''.'
        example: device-group
        type: string
      updated_at:
        description: The time the object was updated.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
    type: object
  DeviceGroupManipulation:
    properties:
      device_id:
        example: '00000000000000000000000000000000'
        type: string
    type: object
  DeviceGroupPage:
    properties:
      after:
        description: An offset token for current page.
        example: '01631667477600000000000100100374'
        type: string
      data:
        items:
          $ref: '#/definitions/DeviceGroup'
        type: array
      has_more:
        description: Are there more results available.
        example: false
        type: boolean
      limit:
        description: How many objects to retrieve in the page. The minimum limit is
          2 and the maximum is 1000. Limit values outside of this range are set to
          the closest limit.
        example: 50
        maximum: 1000
        minimum: 2
        type: integer
      object:
        description: The type of this API object is a "list".
        example: list
        type: string
      order:
        description: The creation time based order of the entries.
        example: DESC
        type: string
      total_count:
        example: 1
        format: integer
        type: integer
    type: object
  DeviceGteLteFilter:
    properties:
      bootstrap_expiration_date:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      bootstrapped_timestamp:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      connector_expiration_date:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      enrolment_list_timestamp:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      manifest_timestamp:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
    type: object
  DeviceInNinFilter:
    properties:
      account_id:
        type: string
      auto_update:
        type: boolean
      bootstrap_expiration_date:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      bootstrapped_timestamp:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      ca_id:
        type: string
      connector_expiration_date:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      custom_attributes:
        additionalProperties:
          type: string
        type: object
      deployed_state:
        type: string
      deployment:
        type: string
      description:
        type: string
      device_class:
        type: string
      device_execution_mode:
        type: integer
      device_key:
        type: string
      endpoint_name:
        type: string
      endpoint_type:
        type: string
      enrolment_list_timestamp:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      firmware_checksum:
        type: string
      host_gateway:
        type: string
      id:
        type: string
      manifest:
        type: string
      manifest_timestamp:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      mechanism:
        type: string
      mechanism_url:
        type: string
      name:
        type: string
      serial_number:
        type: string
      state:
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      vendor_id:
        type: string
    type: object
  DevicePage:
    properties:
      after:
        example: null
        type: string
      data:
        example: '[]'
        items:
          $ref: '#/definitions/DeviceData'
        type: array
      has_more:
        example: false
        type: boolean
      limit:
        example: 1000
        type: integer
      object:
        example: list
        type: string
      order:
        example: DESC
        type: string
      total_count:
        example: 1
        type: integer
  DeviceQuery:
    properties:
      created_at:
        description: The timestamp of when the device was created in the device directory.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      etag:
        description: The entity instance signature.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      id:
        description: The ID of the query.
        example: '00000000000000000000000000000000'
        type: string
      name:
        description: The name of the query.
        example: '00000000000000000000000000000000'
        type: string
      object:
        description: The API resource entity.
        example: device-query
        type: string
      query:
        description: The device query.
        example: id=00000000000000000000000000000000
        type: string
      updated_at:
        description: The time the object was updated.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
    required:
    - created_at
    - etag
    - id
    - name
    - object
    - query
    - updated_at
  DeviceQueryEqNeqFilter:
    properties:
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      id:
        type: string
      name:
        type: string
      query:
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  DeviceQueryGteLteFilter:
    properties:
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  DeviceQueryInNinFilter:
    properties:
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      id:
        type: string
      name:
        type: string
      query:
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  DeviceQueryPage:
    properties:
      after:
        example: null
        type: string
      data:
        example: '[]'
        items:
          $ref: '#/definitions/DeviceQuery'
        type: array
      has_more:
        example: false
        type: boolean
      limit:
        example: 1000
        format: integer
        type: integer
      object:
        example: list
        type: string
      order:
        example: DESC
        type: string
      total_count:
        example: 1
        format: integer
        type: integer
    required:
    - limit
    - order
    - object
    - has_more
    - total_count
    - data
  DeviceQueryPatchRequest:
    properties:
      name:
        description: The name of the query.
        maxLength: 200
        type: string
      query:
        description: The device query.
        maxLength: 1000
        type: string
  DeviceQueryPostPutRequest:
    properties:
      name:
        description: The name of the query.
        maxLength: 200
        type: string
      query:
        description: The device query.
        maxLength: 1000
        type: string
    required:
    - name
    - query
  DeviceRequest:
    properties:
      accept:
        description: The content type of an accepted response.
        example: text/plain
        type: string
      content-type:
        description: The content type of the payload.
        example: text/plain
        type: string
      method:
        description: The CoAP request method. Allowed values are GET, POST, PUT and
          DELETE.
        example: GET
        type: string
      payload-b64:
        description: The base64 encoded payload to be sent to the device.
        example: dmFsdWUxCg==
        type: string
      uri:
        description: The URI path of the requested resource.
        example: /5/0/1
        type: string
    required:
    - method
    - uri
    type: object
  Endpoint:
    properties:
      name:
        description: Unique Device Management Device ID representing the endpoint.
        example: 015f3850a657000000000001001002ab
        type: string
      q:
        description: 'Determines whether the device is in queue mode.

          <br/><br/><b>Queue mode</b><br/>

          When an endpoint is in queue mode, messages sent to the endpoint do not
          wake up the physical device. The messages are queued

          and delivered when the device wakes up and connects to Device Management
          Connect itself. You can also use the queue mode when

          the device is behind a NAT and cannot be reached directly by Device Management
          Connect.

          '
        example: false
        type: boolean
      status:
        description: Deprecated and the value is always ACTIVE. Only used for API
          backwards compatibility reasons.
        example: ACTIVE
        type: string
      type:
        description: Type of endpoint. (Free text)
        example: Light
        type: string
    type: object
  EndpointData:
    properties:
      ep:
        description: Unique Device Management device ID.
        example: 015f3850a657000000000001001002ab
        type: string
      ept:
        description: Endpoint type.
        example: Light
        type: string
      original-ep:
        description: 'In case of a self-provided endpoint name that is used to initiate
          the device registration, Device Management provides a new

          device ID to be used from that point on. The new Pelion platform provided
          Device ID is forwarded as the ''ep'' property and the

          original self-provided one as the optional ''original-ep'' property in a
          registration notification. The name and ID can then

          be mapped accordingly. Device Management saves the original endpoint name
          in the Device Directory for future device registrations so that you don''t
          need

          to do the mapping again.

          '
        example: my-device-123
        type: string
      q:
        description: Queue mode (default value is false).
        example: false
        type: boolean
      resources:
        items:
          $ref: '#/definitions/ResourcesData'
        type: array
    type: object
  EnrollmentId:
    properties:
      enrollment_identity:
        description: Enrollment identity.
        example: A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5
        pattern: ^A-[A-Za-z0-9:]{95}$
        type: string
    required:
    - enrollment_identity
    type: object
  EnrollmentIdentities:
    properties:
      after:
        description: ID
        example: 00005a4e027f0a580a01081c00000000
        pattern: ^[A-Za-z0-9]{32}
        type: string
      data:
        items:
          $ref: '#/definitions/EnrollmentIdentity'
        type: array
      has_more:
        example: true
        type: boolean
      limit:
        description: Range 2-1000, or default.
        example: 50
        maximum: 1000
        minimum: 2
        type: integer
      object:
        enum:
        - list
        example: list
        type: string
      order:
        default: ASC
        enum:
        - ASC
        - DESC
        example: ASC
        type: string
      total_count:
        example: 100
        format: int32
        minimum: 1
        type: integer
    required:
    - object
    - limit
    - after
    - order
    - has_more
    - total_count
    - data
    type: object
  EnrollmentIdentity:
    properties:
      account_id:
        description: ID
        example: 00005a4e027f0a580a01081c00000000
        type: string
      claimed_at:
        description: The time of claiming the device to be assigned to the account.
        format: date-time
        type: string
      created_at:
        description: The time of the enrollment identity creation.
        format: date-time
        type: string
      enrolled_device_id:
        description: The ID of the device in the Device Directory once it has been
          registered.
        example: 00005a4e027f0a580a01081c00000000
        pattern: ^[A-Za-z0-9]{32}
        type: string
      enrollment_identity:
        description: Enrollment identity.
        example: A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5
        pattern: ^A-[A-Za-z0-9:]{95}$
        type: string
      etag:
        example: 7642xfaxz
        pattern: '[A-Za-z0-9]{1,256}'
        type: string
      expires_at:
        description: The enrollment claim expiration time. If the device does not
          connect to Device Management before the expiration, the claim is removed
          without a separate notice
        format: date-time
        type: string
      id:
        description: Enrollment identity.
        example: 00005a4e027f0a580a01081c00000000
        pattern: ^[A-Za-z0-9]{32}
        type: string
      object:
        enum:
        - enrollment
        example: enrollment
        type: string
    required:
    - object
    - id
    - etag
    - account_id
    - created_at
    - expires_at
    - claimed_at
    - enrollment_identity
    - enrolled_device_id
    type: object
  ErrorObjectResponse:
    properties:
      code:
        description: Error code. Correlates with response status code.
        format: int32
        type: integer
      fields:
        description: A list of request fields that failed the validation.
        items:
          $ref: '#/definitions/FieldMessageEntry'
        type: array
      message:
        description: Error message.
        type: string
      object:
        description: 'entity name: ''error'''
        type: string
      request_id:
        description: Request ID from JWT.
        type: string
      type:
        description: Error type.
        type: string
    required:
    - code
    - fields
    - message
    - object
    - request_id
    - type
    type: object
  ErrorResponse:
    properties:
      code:
        description: HTTP response code
        example: 400
        format: int32
        type: integer
      fields:
        description: Request fields which failed validation.
        items:
          properties:
            message:
              description: Message describing the error condition.
              type: string
            name:
              description: Name of the field which caused the error.
              type: string
          required:
          - name
          - message
          type: object
        type: array
      message:
        description: A human readable informative explanation
        example: Validation error
        type: string
      object:
        description: Entity name, always `error`.
        enum:
        - error
        type: string
      request_id:
        description: ID of the request.
        example: 0161991d63150242ac12000600000000
        type: string
      type:
        description: Error type used to categorise the error.
        example: validation_error
        type: string
    required:
    - code
    - message
    - object
    - request_id
    - type
    type: object
  FeaturePolicy:
    description: This object represents a feature policy. Either the feature or the
      resource must be specified.
    properties:
      action:
        description: Comma separated list of actions, empty string represents all
          actions.
        example: GET
        type: string
      allow:
        description: True or false controlling whether an action is allowed or not.
        example: true
        type: boolean
      feature:
        description: Feature name corresponding to this policy.
        example: update-campaigns
        type: string
      inherited:
        description: Flag indicating whether this feature is inherited or overwritten
          specifically.
        example: false
        type: boolean
      resource:
        description: Resource that is protected by this policy.
        example: /v3/update-campaign
        type: string
    type: object
  Field:
    properties:
      message:
        description: Message describing the erroneous situation.
        type: string
      name:
        description: Name of the erroneous field.
        type: string
    required:
    - message
    - name
    type: object
  FieldMessageEntry:
    properties:
      field:
        description: Field name.
        type: string
      message:
        description: Error message related to the field.
        type: string
    type: object
  FirmwareImage:
    properties:
      created_at:
        description: The time the object was created
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      datafile:
        description: The firmware image file URL
        example: http://example.com/00000000000000000000000000000000
        type: string
      datafile_checksum:
        description: The checksum (sha256) generated for the datafile
        example: '0000000000000000000000000000000000000000000000000000000000000000'
        type: string
      datafile_size:
        description: The size of the datafile in bytes
        format: int64
        type: integer
      description:
        description: The description of the object
        example: ''
        maxLength: 2000
        type: string
      etag:
        description: The entity instance signature
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      id:
        description: The firmware image ID
        example: '00000000000000000000000000000000'
        type: string
      name:
        description: The firmware image name
        example: ''
        maxLength: 128
        type: string
      object:
        description: The API resource entity
        example: firmware-image
        type: string
      updated_at:
        description: The time the object was updated
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
    required:
    - created_at
    - datafile
    - datafile_checksum
    - description
    - etag
    - id
    - name
    - object
    - updated_at
  FirmwareImageEqNeqFilter:
    properties:
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      datafile:
        type: string
      datafile_checksum:
        type: string
      datafile_size:
        type: integer
      description:
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  FirmwareImageGteLteFilter:
    properties:
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  FirmwareImageInNinFilter:
    properties:
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      datafile:
        type: string
      datafile_checksum:
        type: string
      datafile_size:
        type: integer
      description:
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  FirmwareImagePage:
    properties:
      after:
        example: null
        type: string
      data:
        example: '[]'
        items:
          $ref: '#/definitions/FirmwareImage'
        type: array
      has_more:
        type: boolean
      limit:
        format: int32
        type: integer
      object:
        example: list
        type: string
      order:
        description: The order of the records based on creation time, `ASC` or `DESC`;
          by default `ASC`.
        enum:
        - ASC
        - DESC
        example: ASC
        type: string
      total_count:
        format: int32
        type: integer
  FirmwareManifest:
    properties:
      created_at:
        description: The time the object was created
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      datafile:
        description: The URL of the firmware manifest binary
        example: http://example.com/00000000000000000000000000000000
        type: string
      datafile_size:
        description: The size of the datafile in bytes
        format: int64
        type: integer
      description:
        description: The description of the firmware manifest
        example: ''
        maxLength: 2000
        type: string
      device_class:
        description: The class of the device
        example: 00000000-0000-0000-0000-000000000000
        type: string
      etag:
        description: The entity instance signature
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      id:
        description: The firmware manifest ID
        example: '00000000000000000000000000000000'
        type: string
      key_table:
        description: The key table of pre-shared keys for devices
        example: http://example.com
        format: uri
        type: string
      name:
        description: The name of the object
        example: ''
        maxLength: 128
        type: string
      object:
        description: The API resource entity
        example: firmware-manifest
        type: string
      timestamp:
        description: The firmware manifest version as a timestamp
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      updated_at:
        description: The time the object was updated
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
    required:
    - created_at
    - datafile
    - description
    - device_class
    - etag
    - id
    - name
    - object
    - timestamp
    - updated_at
  FirmwareManifestEqNeqFilter:
    properties:
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      datafile:
        type: string
      datafile_size:
        type: integer
      description:
        type: string
      device_class:
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      id:
        type: string
      name:
        type: string
      timestamp:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  FirmwareManifestGteLteFilter:
    properties:
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      timestamp:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  FirmwareManifestInNinFilter:
    properties:
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      datafile:
        type: string
      datafile_size:
        type: integer
      description:
        type: string
      device_class:
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      id:
        type: string
      name:
        type: string
      timestamp:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  FirmwareManifestPage:
    properties:
      after:
        example: null
        type: string
      data:
        example: '[]'
        items:
          $ref: '#/definitions/FirmwareManifest'
        type: array
      has_more:
        type: boolean
      limit:
        format: int32
        type: integer
      object:
        example: list
        type: string
      order:
        description: 'The order of the records to return. Acceptable values: ASC,
          DESC. Default: ASC'
        enum:
        - ASC
        - DESC
        example: ASC
        type: string
      total_count:
        format: int32
        type: integer
  ForbiddenErrorResponse:
    description: 403 Forbidden.
    properties:
      code:
        description: Response code. Always set to 403.
        enum:
        - 403
        type: integer
      message:
        description: A human readable message with detailed info.
        type: string
      object:
        description: Always set to 'error'.
        enum:
        - error
        type: string
      request_id:
        description: Request ID
        type: string
      type:
        description: Error type. Always set to 'forbidden'.
        enum:
        - forbidden
        type: string
    required:
    - object
    - message
    - request_id
    - type
    - code
    type: object
  GlobalSignCredentials:
    description: 'Describes the credentials required to connect to the GlobalSign
      account.

      The values should be taken from GlobalSign support upon account creation.

      '
    properties:
      api_key:
        description: 'Unique ID for API client (provided by GlobalSign).

          '
        example: e510e289e6cd8947
        maxLength: 1000
        type: string
      api_secret:
        description: 'API Secret matching the API key (provided by GlobalSign).

          '
        example: a477a8393d17a55ecb2ba6a61f58feb84770b621
        format: password
        maxLength: 250
        type: string
      client_certificate:
        description: 'The client certificate provided by GlobalSign to allow HTTPS
          connection over TLS/SSL.

          The certificate wraps a public key that matches a private key provided by
          the customer.

          The certificate must be in PEM format.

          '
        example: '"-----BEGIN CERTIFICATE-----MIIC7zCCAdegAwIBAgIJANTlU4x5S74VMA0GCSqGSIb3DQEBCwUAMA4xDDAKBgNVBAoMA0FybTAeFw0xODAzMTExMzE5MTFaFw0xOTAzMTExMzE5MTFaMA4xDDAKBgNVBAoMA0FybTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJWLStsVMJULZtxdieK9qocM4ymDXMaAusmd9TZLzBgznKQe/CW2yxyA8C8K5e6MmvMYGeKDd4Lkw/ezOj2OsUj2xzNIltUxpGi/GhsNYiN/khNJa/Y1SllLoihJAPm/xbMywOBRu/dM88PiJsNZccOk0I8DYvvyAs9wCTkbKLnfHygl98DCRqXw7nBCplU6F03qpUd/4BUtMtugyqt7yboGH+4YewnUh4Yh4QNOJIvE93Ob++eKjO3pIOYEhQmUxzOLaLNuWXlv2l1WuN281hUP4XBcV8mCzRQfTBBDYTWt+5BEWoLOUkXjW0Um6EAaN3usph1IKDEH6Ia5VHP4Pj0CAwEAAaNQME4wHQYDVR0OBBYEFLsfYZxFcQTjPJKYMjHI2In316fmMB8GA1UdIwQYMBaAFLsfYZxFcQTjPJKYMjHI2In316fmMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFl08GFsIkkUs6M7QgCWmsnwP6PtD8V87wM1GAqQQlOOeztaeRR2TEOeYiKRZQugYszJ/FVfVp4ggqzepJMn6UZ42j5nmSJs+6t79i23QAzX1zNQ354lr/t7kt3fMdhuL3AP0oZGzdy+EnXXiWeAD22UwzvVmLt38ypJIl+pmTsx9jJy4PN7yoRgtP9k+50m3X6oDxVruehC/JPSeTvEhqyLW3fLcG6IoJMX3vIwfO9uXbFJumTowQeViNJJ9duWvD2KBXn/muOOBe97TPuvAms1gOtMmmPT9/jpo9b4+NsfFiAN6bMici81aIKZzLC+lLGOUmR2fFJyM5OsVLxKsko=-----END
          CERTIFICATE-----"'
        maxLength: 3000
        type: string
      passphrase:
        description: 'The passphrase to decrypt the private key in case it is encrypted.

          Empty if the private key is not encrypted.

          '
        example: helloworld
        format: password
        maxLength: 1000
        type: string
      private_key:
        description: 'The private key that matches the client certificate to allow
          HTTPS connection over TLS/SSL.

          The private key may be encrypted using a symmetric encryption key derived
          from a passphrase.

          The private key must be in PEM format.

          '
        example: '"-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info:
          DES-EDE3-CBC,CCAC26A4133947CB\n\np3KJ4FI3wcz3I0MtiLkrznkjWFvprVmoNywySUGb5IqZViJZqCMEsyU9a9iDsSfP\nZ07cg9GviV21WYIPSxZOQrpy1g1VWILzFnH+J6z8dSH4mxXh0PwdOzYgAeqkrIVM\nJ7KRm6t222dZFjjXK3eEcLmBLGo29XwVJxKHx+l4++gU1LZmeHZR5M8fJ4jejUly\n7sqzPlmRF0N3I4lwKVj+PfQTVz43QoCnpxOjuSEL4liBrc2agY2xH1O0PFyHimz9\n3XM9HR/iuPHW0N2D+NPjXlWKacerupH9d4i9IYIagzB+HTgej8limdo03GmmxcZ6\nYNa58n5yQSaqu0TPRU9DsrKeGjadHTlZQGdzfq1SWsROCnHLrXFKE2ozIG3+hxA5\nujBF/QWpX5+inXUwDJhBxp8isHbPEnBEUUd6ZRzCTjvN0jaUti5B9yFhO2G6mbE8\nCvhyzQK8oJqsjZXnlcpPf95LP+9XbcCDjLSIaWJstzXO9tPiv6+x1MVWmivtRHcC\nSTzpx8jAGCiG6ejLqWB87ZXiZm7ujlCBheHSf5RHwNHhUvoP2JEYalDDRxjcDMSx\n4uV42Np4yJlIQEDlGHcBlXoL7vEukFpuWgkYdpcZy/Ou9qz8mXrpLcu8C8MhLmSC\nixGoR5iRhV7cxoHLyuCzj87eYEA73Xu238DQorSEEuiVFnLzQ2+PJMs4qoI14q/L\notlBDz+Ko6DrU/EZROYmiqMkLKXR2sx9zNAJwPYRs6nSH08tZ3dwqzZbgtP3Wazi\nhLWHt5/En7wQRA5a+/dDEHXSoLvvSQ9jvhclhWf+eCYuq2eH+g54oyJGRSY+8GV7\nujhLxkzl/3OZdhZPWoz4U13KpbSTcNWu5Y7oGDoabw19UbvqmLf1PJkpDH/tQgzB\nxYtsLBRUcofpYoeIiIxfAA4do5WilJc8xqrGhkE4WcHfY24HXAiOvsjbxV+BRprX\n1jtgJpV/9nJESMap+8PxipGUFRGjB83/uwJaa6mLftEKflX8i4MZ+HnqraXERsqA\nWRUcDHIWmFfpzIB3iNuxawVvPH8NdCSPmQ9qTb8Cozl0AuOK2E9S+ke8oiYQScWR\nLdu+zhej7GjuQ9R+Ub+wPWqvOA5qLXejqnCexVScDUuN+z9JWM3N2FG1MwxhAzhP\ndEfoQHoBn6uyOmrVGP6fosV3chqhPoec42KeOAm1xDvx692isaIy1jPgIyPxeqhm\n2Tw4E+02R7dlP8Ljf7JzfLm4oKpWHWlcHeqg24x6lY/wXU1RBcWaTa0AQUwoGm2m\nIQCPfIqOEv/QC2HpO7SVCYkl65KwR0oTd1AzYxdxEq3xHQbh69EL0FGZPVxVCPI+\nhEAyifKy1/tm3l91Rf/kGpHY7nIQKCXH49tmFwix8gke2nZJmRgX7/zAdMOAKeKH\nAaIl4nQtv14EbaasMgnn9qgaDYnWzaReEob2QlQ/WYlTor61+KFpGtcf9jAkgudT\n2op+4CF7wT2+aTXdtkVWfmv++iB8GnlqZdxLvyG1cTYjjYHVFbMSWQnxzQqiE2ms\nQgp+byjWCumpsWTMdTO+d9NkDOo80vDpaRxEgebmhJ0MbX+eFjBgVg==\n-----END
          RSA PRIVATE KEY-----"'
        maxLength: 3000
        type: string
    required:
    - api_key
    - api_secret
    - client_certificate
    - private_key
    type: object
  GroupCreationInfo:
    description: This object is used when creating new groups.
    properties:
      members:
        $ref: '#/definitions/SubjectList'
        description: The members of the group as arrays of user and API key IDs.
      name:
        description: The group name, not longer than 100 characters.
        type: string
    required:
    - name
    type: object
  GroupSummary:
    description: This object contains basic information about groups.
    properties:
      account_id:
        description: The ID of the account this group belongs to.
        example: 01619571e2e90242ac12000600000000
        type: string
      apikey_count:
        description: The number of API keys in this group.
        example: 0
        format: int32
        type: integer
      created_at:
        description: Creation UTC time RFC3339.
        example: '2018-02-13T09:35:20Z'
        format: date-time
        type: string
      etag:
        description: API resource entity version.
        example: '1'
        type: string
      id:
        description: The ID of the group.
        example: 01619571dec00242ac12000600000000
        type: string
      name:
        description: The name of the group.
        example: Administrators
        type: string
      object:
        description: 'Entity name: always ''group'''
        enum:
        - group
        type: string
      updated_at:
        description: Last update UTC time RFC3339.
        example: '2018-02-14T15:24:14Z'
        format: date-time
        type: string
      user_count:
        description: The number of users in this group.
        example: 1
        format: int32
        type: integer
    required:
    - account_id
    - apikey_count
    - etag
    - id
    - name
    - object
    - user_count
    type: object
  GroupSummaryList:
    properties:
      after:
        description: The entity ID to fetch after the given one.
        example: 01619571f3c00242ac12000600000000
        type: string
      data:
        description: A list of entities.
        items:
          $ref: '#/definitions/GroupSummary'
        type: array
      has_more:
        description: Flag indicating whether there is more results.
        example: false
        type: boolean
      limit:
        description: 'The number of results to return, (range: 2-1000), or equals
          to `total_count`'
        example: 50
        format: int32
        type: integer
      object:
        description: 'Entity name: always ''list'''
        enum:
        - list
        type: string
      order:
        description: 'The order of the records to return based on creation time. Available
          values: ASC, DESC; by default ASC.'
        enum:
        - ASC
        - DESC
        type: string
      total_count:
        description: The total number or records, if requested. It might be returned
          also for small lists.
        example: 20
        format: int32
        type: integer
    required:
    - data
    - has_more
    - limit
    - object
    - total_count
    type: object
  GroupUpdateInfo:
    description: This object is used when updating groups.
    properties:
      name:
        description: The group name, not longer than 100 characters.
        type: string
    required:
    - name
    type: object
  IdentityProviderCreationReq:
    description: This object is used for creating new federated identity provider
      module.
    properties:
      description:
        description: Description for the identity provider, not longer than 500 characters.
        type: string
      name:
        description: Name of the identity provider, not longer than 100 characters.
        type: string
      saml2_attributes:
        $ref: '#/definitions/SAML2Req'
        description: SAML2 specific attributes.
      status:
        description: Status of the identity provider.
        enum:
        - ACTIVE
        - SUSPENDED
        type: string
      type:
        description: Identity provider type.
        enum:
        - SAML2
        type: string
    required:
    - name
    - type
    type: object
  IdentityProviderInfo:
    properties:
      account_id:
        description: The ID of the account the identity provider belongs to.
        example: 01619571e2e90242ac12000600000000
        type: string
      created_at:
        description: Creation UTC time RFC3339.
        example: '2018-02-13T09:35:20Z'
        format: date-time
        type: string
      description:
        description: Description for the identity provider, not longer than 500 characters.
        type: string
      etag:
        description: API resource entity version.
        example: '1'
        type: string
      id:
        description: Entity ID.
        example: 01619571d01d0242ac12000600000000
        type: string
      name:
        description: Name of the identity provider, not longer than 100 characters.
        type: string
      object:
        description: 'Entity name: always ''identity-provider'''
        enum:
        - identity-provider
        type: string
      saml2_attributes:
        $ref: '#/definitions/SAML2Info'
        description: SAML2 specific attributes.
      status:
        description: Status of the identity provider.
        enum:
        - ACTIVE
        - SUSPENDED
        type: string
      type:
        description: Identity provider type.
        enum:
        - NATIVE
        - MBED
        - SAML2
        - OIDC
        type: string
      updated_at:
        description: Last update UTC time RFC3339.
        example: '2018-02-14T15:24:14Z'
        format: date-time
        type: string
    required:
    - etag
    - id
    - name
    - object
    - type
    type: object
  IdentityProviderList:
    properties:
      after:
        description: The entity ID to fetch after the given one.
        example: 01619571f3c00242ac12000600000000
        type: string
      data:
        description: A list of entities.
        items:
          $ref: '#/definitions/IdentityProviderInfo'
        type: array
      has_more:
        description: Flag indicating whether there is more results.
        example: false
        type: boolean
      limit:
        description: 'The number of results to return, (range: 2-1000), or equals
          to `total_count`'
        example: 50
        format: int32
        type: integer
      object:
        description: 'Entity name: always ''list'''
        enum:
        - list
        type: string
      order:
        description: 'The order of the records to return based on creation time. Available
          values: ASC, DESC; by default ASC.'
        enum:
        - ASC
        - DESC
        type: string
      total_count:
        description: The total number or records, if requested. It might be returned
          also for small lists.
        example: 20
        format: int32
        type: integer
    required:
    - data
    - has_more
    - limit
    - object
    - total_count
    type: object
  IdentityProviderUpdateReq:
    description: This object is used for updating existing federated identity provider
      module.
    properties:
      description:
        description: Description for the identity provider, not longer than 500 characters.
        type: string
      name:
        description: Name of the identity provider, not longer than 100 characters.
        type: string
      saml2_attributes:
        $ref: '#/definitions/SAML2Req'
        description: SAML2 specific attributes.
      status:
        description: Status of the identity provider.
        enum:
        - ACTIVE
        - SUSPENDED
        type: string
      type:
        description: Identity provider type.
        enum:
        - SAML2
        type: string
    required:
    - name
    - type
    type: object
  Image:
    format: binary
    type: string
  InternalServerErrorResponse:
    description: 500 Internal Server Error response.
    properties:
      code:
        description: Response code. Always set to 500.
        enum:
        - 500
        type: integer
      message:
        description: A human readable message with detailed info.
        type: string
      object:
        description: Always set to 'error'.
        enum:
        - error
        type: string
      request_id:
        description: Request ID
        type: string
      type:
        description: Error type. Always set to 'internal_error'.
        enum:
        - internal_error
        type: string
    required:
    - object
    - message
    - request_id
    - type
    - code
    type: object
  ListOfPreSharedKeysWithoutSecret:
    properties:
      after:
        description: An offset token for current page.
        example: 001e001000120010fac8f300487f11e8839a459edde8bd42f07fffffebf07fffffebb1219cc7862b64bbaf775dc545e274810004
        type: string
      continuation_marker:
        description: An offset token for fetching the next page. Note that exactly
          the same limit needs to be used on the request for fetching the subsequent
          pages.
        example: 001e001000120010fac8f300487f11e8839a459edde8bd42f07fffffebf07fffffebb1219cc7862b64bbaf775dc545e274810005
        type: string
      data:
        description: Array of the pre-shared key entries. The array is empty if there
          are no pre-shared keys.
        items:
          $ref: '#/definitions/PreSharedKeyWithoutSecret'
        minLength: 0
        type: array
      has_more:
        description: Are there more results available.
        example: true
        type: boolean
      limit:
        description: The value of limit query parameter from the request, or default
          if not specified.
        example: 50
        type: integer
      object:
        description: The type of this API object is a "list".
        example: list
        type: string
      order:
        description: The creation time based order of the entries.
        example: DESC
        type: string
    required:
    - object
    - limit
    - order
    - has_more
    - data
    type: object
  LoginHistory:
    description: This object represents an entry in login history.
    properties:
      date:
        description: UTC time RFC3339 for this login attempt.
        example: '2018-02-14T17:52:07Z'
        format: date-time
        type: string
      ip_address:
        description: IP address of the client.
        example: 127.0.0.1
        type: string
      success:
        description: Flag indicating whether login attempt was successful or not.
        example: true
        type: boolean
      user_agent:
        description: User Agent header from the login request.
        example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36
          (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36
        type: string
    required:
    - date
    - ip_address
    - success
    - user_agent
    type: object
  LoginProfile:
    description: This object represents a user login profile in Device Management.
    properties:
      id:
        description: ID of the identity provider.
        type: string
      name:
        description: Name of the identity provider.
        readOnly: true
        type: string
      type:
        description: Identity provider type.
        enum:
        - NATIVE
        - MBED
        - SAML2
        - OIDC
        readOnly: true
        type: string
    required:
    - id
    type: object
  NotificationData:
    properties:
      ct:
        description: Content type.
        example: text/plain
        type: string
      ep:
        description: Device Management Device ID.
        example: 015f3850a657000000000001001002ab
        type: string
      max-age:
        description: 'Max age value is an integer number of seconds between 0 and
          2^32-1 but the actual maximum cache time is limited to 3 days.

          A default value of 60 seconds is assumed in the absence of the option.

          '
        example: 60
        type: string
      path:
        description: URI path.
        example: /sen/light
        type: string
      payload:
        description: Base64 encoded payload.
        example: My4zMQ==
        type: string
    type: object
  NotificationEntry:
    description: This object represents an account notification entry.
    properties:
      account_id:
        description: The ID of the account.
        example: 01619571e2e90242ac12000600000000
        type: string
      created_at:
        description: Creation UTC time RFC3339.
        example: '2018-02-13T09:35:20Z'
        format: date-time
        type: string
      error_msg:
        description: The error message if there was an error while transmitting the
          account notification.
        example: Connection error.
        type: string
      etag:
        description: API resource entity version.
        example: '1'
        type: string
      id:
        description: Entity ID.
        example: 01619571d01d0242ac12000600000000
        type: string
      message:
        description: The message contained in this account notification entry.
        example: User limit has been reached.
        type: string
      object:
        description: 'Entity name: always ''notification-entry'''
        enum:
        - notification-entry
        type: string
      receiver:
        description: The receiver this account notification entry.
        example: example@email-receiver.test
        type: string
      subject:
        description: The subject of this account notification entry.
        example: Account locked.
        type: string
      success:
        description: A flag indiciating whether the sending of this account notification
          entry was successful, true or false.
        type: boolean
      type:
        description: The type of this account notification entry.
        example: email
        type: string
    required:
    - etag
    - id
    - object
    type: object
  NotificationEntryList:
    properties:
      after:
        description: The entity ID to fetch after the given one.
        example: 01619571f3c00242ac12000600000000
        type: string
      data:
        description: A list of entities.
        items:
          $ref: '#/definitions/NotificationEntry'
        type: array
      has_more:
        description: Flag indicating whether there is more results.
        example: false
        type: boolean
      limit:
        description: 'The number of results to return, (range: 2-1000), or equals
          to `total_count`'
        example: 50
        format: int32
        type: integer
      object:
        description: 'Entity name: always ''list'''
        enum:
        - list
        type: string
      order:
        description: 'The order of the records to return based on creation time. Available
          values: ASC, DESC; by default ASC.'
        enum:
        - ASC
        - DESC
        type: string
      total_count:
        description: The total number or records, if requested. It might be returned
          also for small lists.
        example: 20
        format: int32
        type: integer
    required:
    - data
    - has_more
    - limit
    - object
    - total_count
    type: object
  NotificationMessage:
    properties:
      async-responses:
        items:
          $ref: '#/definitions/AsyncIDResponse'
        type: array
      de-registrations:
        items:
          description: The device ID.
          example: 015f3850a657000000000001001002ab
          type: string
        type: array
      notifications:
        items:
          $ref: '#/definitions/NotificationData'
        type: array
      reg-updates:
        items:
          $ref: '#/definitions/EndpointData'
        type: array
      registrations:
        items:
          $ref: '#/definitions/EndpointData'
        type: array
      registrations-expired:
        items:
          description: The device ID.
          example: 015f3850a657000000000001001002ab
          type: string
        type: array
    type: object
  ParentAccountInfo:
    description: This object represents parent account contact details in responses.
    properties:
      admin_email:
        description: The email address of the admin user who is the contact person
          of the parent account.
        example: info@arm.com
        type: string
      admin_name:
        description: The name of the admin user who is the contact person of the parent
          account.
        example: J. Doe
        type: string
      id:
        description: The ID of the parent account
        example: 01619571dad80242ac12000600000000
        type: string
    type: object
  PasswordPolicy:
    properties:
      minimum_length:
        description: Minimum length for the password. A number between 8 and 512.
        example: '8'
        type: string
    required:
    - minimum_length
    type: object
  PendingServicePackage:
    description: A pending service package.
    properties:
      created:
        description: Service package creation time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      expires:
        description: Service package expiration time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      firmware_update_count:
        description: Size of firmware update quota of this service package.
        format: int32
        type: integer
      id:
        description: ID of this service package.
        type: string
      modified:
        description: Service package latest modified time in RFC3339 date-time with
          millisecond accuracy and UTC time zone.
        format: date-time
        type: string
      previous_id:
        description: Previous service package ID.
        type: string
      start_time:
        description: Service package start time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
    required:
    - id
    - previous_id
    - created
    - modified
    - start_time
    - expires
    - firmware_update_count
    type: object
  PreSharedKey:
    properties:
      endpoint_name:
        description: The unique endpoint identifier that this pre-shared key applies
          to. 16-64 [printable](https://en.wikipedia.org/wiki/ASCII#Printable_characters)
          (non-control) ASCII characters.
        example: my-endpoint-0001
        pattern: ^[ -~]{16,64}$
        type: string
      secret_hex:
        description: The secret of the pre-shared key in hexadecimal. It is not case
          sensitive; 4a is same as 4A, and it is allowed with or without 0x in the
          beginning. The minimum length of the secret is 128 bits and maximum 256
          bits.
        example: 4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a
        pattern: ^(0[xX])?[0-9a-fA-F]{32,64}$
        type: string
    required:
    - endpoint_name
    - secret_hex
    type: object
  PreSharedKeyWithoutSecret:
    properties:
      created_at:
        description: The date-time (RFC3339) when this pre-shared key was uploaded
          to Pelion device management.
        example: '2017-07-21T17:32:28.012Z'
        format: date-time
        type: string
      endpoint_name:
        description: The unique endpoint identifier that this pre-shared key applies
          to. 16-64 [printable](https://en.wikipedia.org/wiki/ASCII#Printable_characters)
          (non-control) ASCII characters.
        example: my-endpoint-0001
        pattern: ^[ -~]{16,64}$
        type: string
    required:
    - endpoint_name
    type: object
  Presubscription:
    properties:
      endpoint-name:
        description: The device ID.
        example: 015f3850a657000000000001001002ab
        type: string
      endpoint-type:
        example: Light
        type: string
      resource-path:
        items:
          description: A resource URI
          example: /sen/light
          type: string
        minItems: 1
        type: array
    type: object
  PresubscriptionArray:
    items:
      $ref: '#/definitions/Presubscription'
    type: array
  PreviousServicePackage:
    description: Previously active service package.
    properties:
      created:
        description: Service package creation time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      end_time:
        description: Service package end time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      expires:
        description: Service package expiration time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      firmware_update_count:
        description: Size of firmware update quota of this service package.
        format: int32
        type: integer
      id:
        description: ID of this service package.
        type: string
      modified:
        description: Service package latest modified time in RFC3339 date-time with
          millisecond accuracy and UTC time zone.
        format: date-time
        type: string
      next_id:
        description: Next service package ID if this service package has a pending
          renewal or null.
        type: string
      previous_id:
        description: Previous service package ID.
        type: string
      reason:
        description: Reason why this service package was ended
        enum:
        - renewed
        - terminated
        type: string
      start_time:
        description: Service package start time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
    required:
    - id
    - start_time
    - created
    - modified
    - expires
    - end_time
    - firmware_update_count
    - reason
    type: object
  QuotaUsageReport:
    description: Account's quota usage entry for queried month.
    properties:
      amount:
        description: Amount of quota usage entry. Negative if it is quota consumption.
        format: int64
        type: integer
      campaign_name:
        description: 'Campaign name of quota usage entry.

          Null if quota usage entry type is not reservation or reservation release.'
        type: string
      time:
        description: Added time of quota usage entry in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      type:
        description: Type of quota usage entry.
        enum:
        - reservation
        - reservation_release
        - reservation_termination
        - package_renewal
        - package_creation
        - package_termination
        type: string
    required:
    - amount
    - type
    - time
    type: object
  ReportAccountContactInfo:
    description: Account contact information.
    properties:
      address_line1:
        type: string
      address_line2:
        type: string
      city:
        type: string
      company:
        type: string
      contact:
        type: string
      country:
        type: string
      email:
        type: string
      id:
        description: Account ID.
        type: string
      phone_number:
        type: string
      postal_code:
        type: string
      state:
        type: string
    required:
    - id
    - company
    type: object
  ReportBillingData:
    properties:
      active_devices:
        format: int64
        minimum: 0
        type: integer
      firmware_updates:
        format: int64
        minimum: 0
        type: integer
      generated:
        description: Billing report generated time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      period_end:
        description: Billing report end time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      period_start:
        description: Billing report start time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
    required:
    - generated
    - period_start
    - period_end
    - active_devices
    - firmware_updates
    type: object
  ReportNotFoundErrorResponse:
    description: 404 Not Found response.
    properties:
      code:
        description: Response code. Always set to 404.
        enum:
        - 404
        type: integer
      message:
        description: A human readable message with detailed info.
        type: string
      object:
        description: Always set to 'error'.
        enum:
        - error
        type: string
      request_id:
        description: Request ID
        type: string
      type:
        description: Error type. Always set to 'report_not_found'.
        enum:
        - report_not_found
        type: string
    required:
    - object
    - message
    - request_id
    - type
    - code
    type: object
  ReportResponse:
    description: Billing report response.
    properties:
      account:
        $ref: '#/definitions/ReportAccountContactInfo'
        description: Account contact information.
      aggregated:
        $ref: '#/definitions/ReportBillingData'
        description: Aggregated report billing data including all subtenant accounts
          if any.
      billing_data:
        $ref: '#/definitions/ReportBillingData'
        description: Report billing data.
      id:
        description: Billing report ID.
        type: string
      month:
        description: Month of requested billing report
        pattern: ^\d{4}-\d{2}$
        type: string
      object:
        description: Billing report response object. Always set to 'billing-report'.
        enum:
        - billing-report
        type: string
      service_package:
        $ref: '#/definitions/ServicePackageReport'
        description: Report service package.
      subtenants:
        description: List of billing reports for subtenant accounts. Empty list if
          account does not have any subtenant account.
        items:
          $ref: '#/definitions/SubtenantAccountReport'
        type: array
    required:
    - id
    - object
    - account
    - billing_data
    - subtenants
    - aggregated
    - month
    type: object
  Resource:
    properties:
      obs:
        description: 'Observable determines whether you can subscribe to changes for
          this resource. It can have values "true" or "false".

          '
        example: true
        type: boolean
      rt:
        description: Application specific resource type that describes this resource.
          [It is created by the client side application](/docs/current/connecting/resource-setup-in-device-management-client.html).
          Not meant to be a human-readable name for the resource. Multiple resource
          types may be included, they are separated by a space.
        example: light_sensor
        type: string
      type:
        description: 'The content type of the resource.

          <br/><br/><b>Important</b><br/>

          You are encouraged to use the resource types listed in the [LwM2M specification](http://technical.openmobilealliance.org/Technical/technical-information/omna/lightweight-m2m-lwm2m-object-registry).

          '
        example: text/plain
        type: string
      uri:
        description: The URL of the resource.
        example: /sen/light
        type: string
    required:
    - uri
    type: object
  ResourcePath:
    description: A resource URI
    example: /sen/light
    type: string
  ResourcesData:
    properties:
      ct:
        description: Content type.
        example: text/plain
        type: string
      if:
        description: Interface description that defines a name or URI that indicates
          how to interact with the target resource. It describes a generic interface
          type, such as a "sensor".
        example: sensor
        type: string
      obs:
        description: Whether the resource is observable or not (true/false).
        example: true
        type: boolean
      path:
        description: Resource's URI path.
        example: /sen/light
        type: string
      rt:
        description: Application-specific resource type that describes this resource.
          [It is created by the client side application](/docs/current/connecting/resource-setup-in-device-management-client.html).
          Not meant to be a human-readable name for the resource. Multiple resource
          types may be included, they are separated by a space.
        example: light_sensor
        type: string
    type: object
  SAML2Info:
    description: This object represents SAML2 specific attributes in responses.
    properties:
      assertion_endpoint:
        description: URL of the service provider's assertion endpoint.
        type: string
      idp_entity_id:
        description: Entity ID of the identity provider.
        type: string
      idp_x509_certs:
        description: List of public X509 certificates of the identity provider in
          PEM format.
        items:
          type: string
        type: array
      slo_endpoint:
        description: URL of the identity provider's SLO endpoint.
        type: string
      sp_entity_id:
        description: Entity ID of the service provider.
        type: string
      sp_x509_cert:
        description: Public X509 certificate of the service provider in PEM format.
        type: string
      sso_endpoint:
        description: URL of the identity provider's SSO endpoint.
        type: string
    type: object
  SAML2Req:
    properties:
      entity_descriptor:
        description: Base64 encoded string representation of an XML file. Contains
          an entity descriptor document for the identity provider. Can be used as
          an alternative method to provide the identity provider's attributes.
        type: string
      idp_entity_id:
        description: Entity ID of the identity provider.
        type: string
      idp_x509_certs:
        description: List of public X509 certificates of the identity provider. Certificates
          must be in PEM format. Limit of 100 certificates.
        items:
          type: string
        type: array
      slo_endpoint:
        description: URL of the identity provider's SLO endpoint.
        type: string
      sp_entity_id:
        description: Entity ID of the service provider. We recommend that you leave
          it empty and let the system generate it.
        type: string
      sso_endpoint:
        description: URL of the identity provider's SSO endpoint.
        type: string
    type: object
  ServerCredentialsResponseData:
    properties:
      created_at:
        description: Creation UTC time RFC3339.
        format: date-time
        type: string
      etag:
        description: API resource entity version.
        type: string
      id:
        description: mUUID that uniquely identifies the entity.
        type: string
      object:
        description: Entity name, always 'server-credentials'
        type: string
      server_certificate:
        description: PEM format X.509 server certificate that will be used to validate
          the server certificate that will be received during the TLS/DTLS handshake.
        type: string
      server_uri:
        description: Server URI to which the client needs to connect to.
        type: string
    type: object
  ServicePackageMetadata:
    description: Account's service package metadata.
    properties:
      end_time:
        description: Service package end time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      remaining_quota:
        description: Current available service package quota.
        format: int64
        minimum: 0
        type: integer
      reserved_quota:
        description: Sum of all open reservations for this account.
        format: int64
        minimum: 0
        type: integer
      start_time:
        description: Service package start time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
    required:
    - start_time
    - end_time
    - remaining_quota
    - reserved_quota
    type: object
  ServicePackageQuota:
    description: Quota of the service package.
    properties:
      object:
        description: Always set to 'service-package-quota'.
        enum:
        - service-package-quota
        type: string
      quota:
        description: Available quota for the service package.
        format: int64
        minimum: 0
        type: integer
    required:
    - object
    - quota
    type: object
  ServicePackageQuotaHistoryItem:
    description: Quota history item.
    properties:
      added:
        description: Added time of quota history entry in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      amount:
        description: the amount of quota usage, negative or positive
        format: int64
        type: integer
      id:
        description: Service package quota history ID.
        maxLength: 32
        minLength: 32
        type: string
      reason:
        description: Type of quota usage entry.
        enum:
        - reservation
        - reservation_release
        - reservation_termination
        - package_creation
        - package_renewal
        - package_termination
        type: string
      reservation:
        $ref: '#/definitions/ServicePackageQuotaHistoryReservation'
        description: Reservation details if reason is reservation, reservation_release
          or reservation_termination.
        type: object
      service_package:
        $ref: '#/definitions/ServicePackageQuotaHistoryServicePackage'
        description: Service package details if reason is package_creation, package_renewal
          or package_termination
        type: object
    required:
    - id
    - added
    - amount
    - reason
    type: object
  ServicePackageQuotaHistoryReservation:
    description: Service package quota history reservation object.
    properties:
      account_id:
        description: Account ID.
        maxLength: 250
        minLength: 1
        type: string
      campaign_name:
        description: Textual campaign name for this reservation.
        maxLength: 250
        minLength: 1
        type: string
      id:
        description: Reservation ID.
        maxLength: 250
        minLength: 1
        type: string
    required:
    - id
    - account_id
    - campaign_name
  ServicePackageQuotaHistoryResponse:
    description: Quota history of the service package.
    properties:
      after:
        description: After which quota history ID this paged response is fetched.
        maxLength: 32
        minLength: 32
        type: string
      data:
        description: List of history items, empty list if no entries are available.
        items:
          $ref: '#/definitions/ServicePackageQuotaHistoryItem'
        type: array
      has_more:
        description: If there is next available quota history paged response to be
          fetched.
        type: boolean
      limit:
        description: Maximum amount of quota history entries contained in one paged
          response.
        format: int32
        maximum: 1000
        minimum: 2
        type: integer
      object:
        description: Always set to 'service-package-quota-history'.
        enum:
        - service-package-quota-history
        type: string
      total_count:
        description: Sum of all quota history entries that should be returned
        format: int32
        minimum: 0
        type: integer
    required:
    - object
    - data
    - has_more
    - limit
    - total_count
    type: object
  ServicePackageQuotaHistoryServicePackage:
    description: Service package quota history service package object.
    properties:
      expires:
        description: Service package expiration time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
      firmware_update_count:
        description: Size of firmware update quota of this service package.
        format: int32
        type: integer
      id:
        description: ID of this service package.
        type: string
      previous_id:
        description: Previous service package ID or null.
        type: string
      start_time:
        description: Service package start time in RFC3339 date-time with millisecond
          accuracy and UTC time zone.
        format: date-time
        type: string
    required:
    - id
    - start_time
    - expires
    - firmware_update_count
  ServicePackageReport:
    description: Account's current service package data included in reporting.
    properties:
      aggregated_quota_usage:
        items:
          $ref: '#/definitions/AggregatedQuotaUsageReport'
        type: array
      metadata:
        $ref: '#/definitions/ServicePackageMetadata'
      quota_usage:
        items:
          $ref: '#/definitions/QuotaUsageReport'
        type: array
    required:
    - metadata
    - quota_usage
    - aggregated_quota_usage
    type: object
  ServicePackagesResponse:
    description: 'Contains service package information for currently active service
      package,

      currently pending service package and all previous service packages this account
      has had.'
    properties:
      active:
        $ref: '#/definitions/ActiveServicePackage'
        description: Currently active service package. Can be null.
        type: object
      object:
        description: Always set to 'service-packages'.
        enum:
        - service-packages
        type: string
      pending:
        $ref: '#/definitions/PendingServicePackage'
        description: Current pending service package. Can be null.
        type: object
      previous:
        description: List of previous service packages.
        items:
          $ref: '#/definitions/PreviousServicePackage'
        type: array
    required:
    - object
    - previous
  SubjectList:
    description: This object represents arrays of user and API key IDs.
    properties:
      apikeys:
        description: An array of API key IDs.
        items:
          type: string
        type: array
      users:
        description: An array of user IDs.
        items:
          type: string
        type: array
    type: object
  SubscriptionsList:
    description: A list of resource URIs, one per line
    example: /sen/light
    type: string
  SubtenantAccountReport:
    description: Billing report for subtenant account.
    properties:
      account:
        $ref: '#/definitions/SubtenantReportAccountContactInfo'
        description: Subtenant account contact information.
      billing_data:
        $ref: '#/definitions/ReportBillingData'
        description: Report billing data.
      service_package:
        $ref: '#/definitions/SubtenantServicePackageReport'
        description: Report service package for subtenant account.
    required:
    - account
    - billing_data
    type: object
  SubtenantReportAccountContactInfo:
    description: Subtenant account contact information.
    properties:
      address_line1:
        type: string
      address_line2:
        type: string
      city:
        type: string
      company:
        type: string
      contact:
        type: string
      country:
        type: string
      customer_subtenant_id:
        description: Account subtenant ID if it is a subtenant.
        type: string
      email:
        type: string
      id:
        description: Account ID.
        type: string
      phone_number:
        type: string
      postal_code:
        type: string
      state:
        type: string
    required:
    - id
    - company
    - customer_subtenant_id
    type: object
  SubtenantServicePackageReport:
    properties:
      quota_usage:
        items:
          $ref: '#/definitions/QuotaUsageReport'
        type: array
    required:
    - quota_usage
    type: object
  TrustedCertificateReq:
    description: This object represents a trusted certificate in upload requests.
    properties:
      certificate:
        description: A chain of X509.v3 trusted certificates in PEM format. The chain
          must contain all certificates from root to leaf. Otherwise, the signature
          parameter is required.
        type: string
      description:
        description: Human readable description of this certificate, not longer than
          500 characters.
        type: string
      enrollment_mode:
        description: Certificate is used in enrollment mode. Default value is false.
        type: boolean
      name:
        description: Certificate name, not longer than 100 characters.
        type: string
      service:
        description: Service name where the certificate must be used.
        enum:
        - lwm2m
        - bootstrap
        type: string
      signature:
        description: 'DEPRECATED: Base64 encoded signature of the account ID signed
          by the certificate to be uploaded. The signature must be hashed with SHA256.'
        type: string
      status:
        description: Status of the certificate.
        enum:
        - ACTIVE
        - INACTIVE
        type: string
    required:
    - certificate
    - name
    - service
    type: object
  TrustedCertificateResp:
    description: This object represents a trusted certificate in responses.
    properties:
      account_id:
        description: The ID of the account.
        example: 01619571e2e90242ac12000600000000
        type: string
      certificate:
        description: X509.v3 trusted certificate in PEM format.
        example: '-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----'
        type: string
      certificate_fingerprint:
        description: A SHA-256 fingerprint of the certificate.
        example: a10fb2c8ba90e6de927bd0ae391dcc38f6115685de2d7024712af37ead0608f1
        type: string
      created_at:
        description: Creation UTC time RFC3339.
        example: '2018-02-13T09:35:20Z'
        format: date-time
        type: string
      description:
        description: Human readable description of this certificate.
        example: Certificate created by me.
        type: string
      device_execution_mode:
        description: Device execution mode where 1 means a developer certificate.
        example: 1
        format: int32
        type: integer
      enrollment_mode:
        description: If true, signature is not required. Default value false.
        example: false
        type: boolean
      etag:
        description: API resource entity version.
        example: '1'
        type: string
      id:
        description: Entity ID.
        example: 01619571d01d0242ac12000600000000
        type: string
      issuer:
        description: Issuer of the certificate.
        example: CN=issuer
        type: string
      name:
        description: Certificate name.
        example: My certificate
        type: string
      object:
        description: 'Entity name: always ''trusted-cert'''
        enum:
        - trusted-cert
        type: string
      owner_id:
        description: The ID of the owner.
        example: 01619571dad80242ac12000600000000
        type: string
      service:
        description: Service name where the certificate is to be used.
        enum:
        - lwm2m
        - bootstrap
        type: string
      status:
        description: Status of the certificate.
        enum:
        - ACTIVE
        - INACTIVE
        example: ACTIVE
        type: string
      subject:
        description: Subject of the certificate.
        example: CN=subject
        type: string
      updated_at:
        description: Last update UTC time RFC3339.
        example: '2018-02-14T15:24:14Z'
        format: date-time
        type: string
      validity:
        description: Expiration time in UTC formatted as RFC3339.
        example: '2038-02-14T15:24:14Z'
        format: date-time
        type: string
    required:
    - account_id
    - certificate
    - certificate_fingerprint
    - etag
    - id
    - issuer
    - name
    - object
    - service
    - subject
    - validity
    type: object
  TrustedCertificateRespList:
    properties:
      after:
        description: The entity ID to fetch after the given one.
        example: 01619571f3c00242ac12000600000000
        type: string
      data:
        description: A list of entities.
        items:
          $ref: '#/definitions/TrustedCertificateResp'
        type: array
      has_more:
        description: Flag indicating whether there is more results.
        example: false
        type: boolean
      limit:
        description: 'The number of results to return, (range: 2-1000), or equals
          to `total_count`'
        example: 50
        format: int32
        type: integer
      object:
        description: 'Entity name: always ''list'''
        enum:
        - list
        type: string
      order:
        description: 'The order of the records to return based on creation time. Available
          values: ASC, DESC; by default ASC.'
        enum:
        - ASC
        - DESC
        type: string
      total_count:
        description: The total number or records, if requested. It might be returned
          also for small lists.
        example: 20
        format: int32
        type: integer
    required:
    - data
    - has_more
    - limit
    - object
    - total_count
    type: object
  TrustedCertificateUpdateReq:
    description: This object represents a trusted certificate in update requests.
    properties:
      certificate:
        description: A chain of X509.v3 trusted certificates in PEM format. The chain
          must contain all certificates from root to leaf. Otherwise, the signature
          parameter is required.
        type: string
      description:
        description: Human readable description of this certificate, not longer than
          500 characters.
        type: string
      enrollment_mode:
        description: Certificate is used in enrollment mode. Default value is false.
        type: boolean
      name:
        description: Certificate name, not longer than 100 characters.
        type: string
      service:
        description: Service name where the certificate must be used.
        enum:
        - lwm2m
        - bootstrap
        type: string
      signature:
        description: 'DEPRECATED: Base64 encoded signature of the account ID signed
          by the certificate to be uploaded. The signature must be hashed with SHA256.'
        type: string
      status:
        description: Status of the certificate.
        enum:
        - ACTIVE
        - INACTIVE
        type: string
    type: object
  UnauthorizedErrorResponse:
    description: 401 Unauthorized response.
    properties:
      code:
        description: Response code. Always set to 401.
        enum:
        - 401
        type: integer
      message:
        description: A human readable message with detailed info.
        type: string
      object:
        description: Always set to 'error'.
        enum:
        - error
        type: string
      request_id:
        description: Request ID
        type: string
      type:
        description: Error type. Always set to 'unauthorized'.
        enum:
        - unauthorized
        type: string
    required:
    - object
    - message
    - request_id
    - type
    - code
    type: object
  UpdateCampaign:
    properties:
      autostop_reason:
        description: Text description of why a campaign failed to start or why a campaign
          stopped.
        example: Insufficient billing credit.
        type: string
      created_at:
        description: The time the update campaign was created
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      description:
        description: An optional description of the campaign
        example: ''
        maxLength: 2000
        type: string
      device_filter:
        description: The filter for the devices the campaign is targeting at
        example: id__eq=00000000000000000000000000000000
        type: string
      etag:
        description: The entity instance signature
        example: '2017-05-22T12:37:58.753425Z'
        type: string
      finished:
        description: The campaign finish timestamp
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      id:
        description: The campaign ID
        example: '00000000000000000000000000000000'
        type: string
      name:
        description: The campaign name
        example: campaign
        maxLength: 128
        type: string
      object:
        description: The API resource entity
        example: update-campaign
        type: string
      phase:
        description: The current phase of the campaign.
        readOnly: true
        type: string
      root_manifest_id:
        example: '00000000000000000000000000000000'
        type: string
      root_manifest_url:
        example: http://example.com/00000000000000000000000000000000
        type: string
      started_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      state:
        description: 'DEPRECATED: The state of the campaign (use phase instead).'
        enum:
        - draft
        - scheduled
        - allocatingquota
        - allocatedquota
        - quotaallocationfailed
        - checkingmanifest
        - checkedmanifest
        - devicefetch
        - devicecopy
        - devicecheck
        - publishing
        - deploying
        - deployed
        - manifestremoved
        - expired
        - stopping
        - autostopped
        - userstopped
        - conflict
        type: string
      updated_at:
        description: The time the object was updated
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      when:
        description: The scheduled start time for the campaign. The campaign will
          start within 1 minute when then start time has elapsed.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  UpdateCampaignEqNeqFilter:
    properties:
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      description:
        type: string
      device_filter:
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      finished:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      id:
        type: string
      name:
        type: string
      root_manifest_id:
        type: string
      started_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      state:
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      when:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  UpdateCampaignGteLteFilter:
    properties:
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      finished:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      started_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      when:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  UpdateCampaignInNinFilter:
    properties:
      created_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      description:
        type: string
      device_filter:
        type: string
      etag:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      finished:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      id:
        type: string
      name:
        type: string
      root_manifest_id:
        type: string
      started_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      state:
        type: string
      updated_at:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
      when:
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  UpdateCampaignPage:
    properties:
      after:
        example: null
        type: string
      data:
        example: '[]'
        items:
          $ref: '#/definitions/UpdateCampaign'
        type: array
      has_more:
        type: boolean
      limit:
        type: integer
      object:
        example: list
        type: string
      order:
        description: 'The order of the records to return. Acceptable values: ASC,
          DESC. Default: ASC'
        enum:
        - ASC
        - DESC
        example: ASC
        type: string
      total_count:
        type: integer
  UpdateCampaignPostRequest:
    properties:
      description:
        description: An optional description of the campaign
        example: ''
        maxLength: 2000
        type: string
      device_filter:
        description: The filter for the devices the campaign is targeting at
        example: id__eq=00000000000000000000000000000000
        type: string
      name:
        description: The name for this campaign
        example: campaign
        maxLength: 128
        type: string
      object:
        description: The API resource entity
        example: update-campaign
        type: string
      root_manifest_id:
        example: '00000000000000000000000000000000'
        maxLength: 32
        type: string
      state:
        description: 'DEPRECATED: The state of the campaign (use phase instead)'
        enum:
        - draft
        - scheduled
        - allocatingquota
        - allocatedquota
        - quotaallocationfailed
        - checkingmanifest
        - checkedmanifest
        - devicefetch
        - devicecopy
        - devicecheck
        - publishing
        - deploying
        - deployed
        - manifestremoved
        - expired
        - stopping
        - autostopped
        - userstopped
        - conflict
        type: string
      when:
        description: The scheduled start time for the update campaign. Not in use.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
    required:
    - device_filter
  UpdateCampaignPutRequest:
    properties:
      description:
        description: An optional description of the campaign
        example: ''
        maxLength: 2000
        type: string
      device_filter:
        description: The filter for the devices the campaign is targeting at
        example: id__eq=00000000000000000000000000000000
        type: string
      name:
        description: The campaign's name
        example: campaign
        maxLength: 128
        type: string
      object:
        description: The API resource entity
        example: update-campaign
        type: string
      root_manifest_id:
        example: '00000000000000000000000000000000'
        maxLength: 32
        type: string
      state:
        description: 'DEPRECATED: The state of the campaign (use phase instead).'
        enum:
        - draft
        - scheduled
        - allocatingquota
        - allocatedquota
        - quotaallocationfailed
        - checkingmanifest
        - checkedmanifest
        - devicefetch
        - devicecopy
        - devicecheck
        - publishing
        - deploying
        - deployed
        - manifestremoved
        - expired
        - stopping
        - autostopped
        - userstopped
        - conflict
        type: string
      when:
        description: The scheduled start time for the update campaign. Not in use.
        example: '2017-05-22T12:37:55.576563Z'
        format: date-time
        type: string
  UpdatedResponse:
    description: This object represents a response to an update request.
    properties:
      code:
        description: Response code.
        example: 200
        format: int32
        type: integer
      id:
        description: Entity ID.
        example: 01619571dad80242ac12000600000000
        type: string
      message:
        description: A human readable message with detailed info.
        example: success
        type: string
      object:
        description: 'Entity name: ''user'', ''api-key'', ''group'', ''policy'' or
          ''account''.'
        enum:
        - user
        - api-key
        - group
        - policy
        - account
        type: string
      request_id:
        description: Request ID.
        example: 0161991d63150242ac12000600000000
        type: string
      type:
        description: 'Response type: success.'
        enum:
        - success
        type: string
    required:
    - code
    - id
    - message
    - object
    - request_id
    - type
    type: object
  UserInfoReq:
    description: This object represents a user in requests towards Device Management.
    properties:
      address:
        description: Address, not longer than 100 characters.
        type: string
      email:
        description: The email address, not longer than 254 characters.
        type: string
      full_name:
        description: The full name of the user, not longer than 100 characters.
        type: string
      groups:
        description: A list of IDs of the groups this user belongs to.
        items:
          type: string
        type: array
      is_gtc_accepted:
        description: A flag indicating that the General Terms and Conditions has been
          accepted.
        type: boolean
      is_marketing_accepted:
        description: A flag indicating that receiving marketing information has been
          accepted.
        type: boolean
      login_profiles:
        description: A list of login profiles for the user. Specified as the identity
          providers the user should be associated with. Only the ID attribute of the
          login profile should be set in the request object. The list cannot be empty.
          A limit of 100 profiles.
        items:
          $ref: '#/definitions/LoginProfile'
        type: array
      password:
        description: The password when creating a new user. It will be generated when
          not present in the request.
        type: string
      phone_number:
        description: Phone number, not longer than 100 characters.
        type: string
      username:
        description: A username containing alphanumerical letters and -,._@+= characters.
          It must be at least 4 but not more than 30 character long.
        type: string
    required:
    - email
    type: object
  UserInfoResp:
    description: This object represents a user in Device Management.
    properties:
      account_id:
        description: The ID of the account.
        example: 01619571e2e90242ac12000600000000
        type: string
      address:
        description: Address.
        example: 110 Fulbourn Rd, Cambridge, United Kingdom
        type: string
      created_at:
        description: Creation UTC time RFC3339.
        example: '2018-02-13T09:35:20Z'
        format: date-time
        type: string
      creation_time:
        description: A timestamp of the user creation in the storage, in milliseconds.
        example: 1518630727683
        format: int64
        type: integer
      email:
        description: The email address.
        example: user@arm.com
        type: string
      email_verified:
        description: A flag indicating whether the user's email address has been verified
          or not.
        example: true
        type: boolean
      etag:
        description: API resource entity version.
        example: '1'
        type: string
      full_name:
        description: The full name of the user.
        example: User Doe
        type: string
      groups:
        description: A list of IDs of the groups this user belongs to.
        items:
          type: string
        type: array
      id:
        description: The ID of the user.
        example: 01619571e2e89242ac12000600000000
        type: string
      is_gtc_accepted:
        description: A flag indicating that the General Terms and Conditions has been
          accepted.
        example: true
        type: boolean
      is_marketing_accepted:
        description: A flag indicating that receiving marketing information has been
          accepted.
        example: true
        type: boolean
      is_totp_enabled:
        description: A flag indicating whether 2-factor authentication (TOTP) has
          been enabled.
        example: true
        type: boolean
      last_login_time:
        description: A timestamp of the latest login of the user, in milliseconds.
        example: 1518630727688
        format: int64
        type: integer
      login_history:
        description: Timestamps, succeedings, IP addresses and user agent information
          of the last five logins of the user, with timestamps in RFC3339 format.
        items:
          $ref: '#/definitions/LoginHistory'
        type: array
      login_profiles:
        description: A list of login profiles for the user. Specified as the identity
          providers the user is associated with.
        items:
          $ref: '#/definitions/LoginProfile'
        type: array
      object:
        description: 'Entity name: always ''user'''
        enum:
        - user
        type: string
      password:
        description: The password when creating a new user. It will be generated when
          not present in the request.
        example: PZf9eEUH43DAPE9ULINFeuj
        type: string
      password_changed_time:
        description: A timestamp of the latest change of the user password, in milliseconds.
        example: 1518630727688
        format: int64
        type: integer
      phone_number:
        description: Phone number.
        example: +44 (1223) 400 400
        type: string
      status:
        description: The status of the user. ENROLLING state indicates that the user
          is in the middle of the enrollment process. INVITED means that the user
          has not accepted the invitation request. RESET means that the password must
          be changed immediately. INACTIVE users are locked out and not permitted
          to use the system.
        enum:
        - ENROLLING
        - INVITED
        - ACTIVE
        - RESET
        - INACTIVE
        example: ACTIVE
        type: string
      updated_at:
        description: Last update UTC time RFC3339.
        example: '2018-02-14T15:24:14Z'
        format: date-time
        type: string
      username:
        description: A username containing alphanumerical letters and -,._@+= characters.
        example: admin
        type: string
    required:
    - account_id
    - email
    - etag
    - id
    - object
    - status
    type: object
  UserInfoRespList:
    properties:
      after:
        description: The entity ID to fetch after the given one.
        example: 01619571f3c00242ac12000600000000
        type: string
      data:
        description: A list of entities.
        items:
          $ref: '#/definitions/UserInfoResp'
        type: array
      has_more:
        description: Flag indicating whether there is more results.
        example: false
        type: boolean
      limit:
        description: 'The number of results to return, (range: 2-1000), or equals
          to `total_count`'
        example: 50
        format: int32
        type: integer
      object:
        description: 'Entity name: always ''list'''
        enum:
        - list
        type: string
      order:
        description: 'The order of the records to return based on creation time. Available
          values: ASC, DESC; by default ASC.'
        enum:
        - ASC
        - DESC
        type: string
      total_count:
        description: The total number or records, if requested. It might be returned
          also for small lists.
        example: 20
        format: int32
        type: integer
    required:
    - data
    - has_more
    - limit
    - object
    - total_count
    type: object
  UserInvitationReq:
    description: This object represents a user invitation in requests towards Device
      Management.
    properties:
      email:
        description: The email address, not longer than 254 characters.
        type: string
      groups:
        description: A list of IDs of the groups this user has been invited to.
        items:
          type: string
        type: array
      login_profiles:
        description: A list of login profiles for the user. Specified as the identity
          providers the user should be associated with. Only the ID attribute of the
          login profile should be set in the request object. The list cannot be empty.
          A limit of 100 profiles.
        items:
          $ref: '#/definitions/LoginProfile'
        type: array
      valid_for_days:
        description: Specifies how many days the invitation will be valid for. The
          default is 30 days. Value should be between 1 and 100 days.
        format: int32
        type: integer
    required:
    - email
    type: object
  UserInvitationResp:
    description: This object represents an user invitation in responses.
    properties:
      account_id:
        description: The ID of the account the user is invited to.
        example: 01619571e2e90242ac12000600000000
        type: string
      created_at:
        description: Creation UTC time RFC3339.
        example: '2018-02-13T09:35:20Z'
        format: date-time
        type: string
      email:
        description: Email address of the invited user.
        example: friend@arm.com
        type: string
      etag:
        description: API resource entity version.
        example: '1'
        type: string
      expiration:
        description: Invitation expiration as UTC time RFC3339.
        example: '2018-02-14T15:24:14Z'
        format: date-time
        type: string
      groups:
        description: A list of IDs of the groups the user is invited to.
        items:
          type: string
        type: array
      id:
        description: The ID of the invitation.
        example: 01619571e2e89242ac12000600000000
        type: string
      login_profiles:
        description: A list of login profiles for the user. Specified as the identity
          providers the user is associated with.
        items:
          $ref: '#/definitions/LoginProfile'
        type: array
      object:
        description: 'Entity name: always ''user-invitation'''
        enum:
        - user-invitation
        type: string
      updated_at:
        description: Last update UTC time RFC3339.
        example: '2018-02-14T15:24:14Z'
        format: date-time
        type: string
      user_id:
        description: The ID of the invited user.
        example: 01619571e2e90242ac12000600000000
        type: string
    required:
    - account_id
    - email
    - etag
    - id
    - object
    - user_id
    type: object
  UserInvitationRespList:
    properties:
      after:
        description: The entity ID to fetch after the given one.
        example: 01619571f3c00242ac12000600000000
        type: string
      data:
        description: A list of entities.
        items:
          $ref: '#/definitions/UserInvitationResp'
        type: array
      has_more:
        description: Flag indicating whether there is more results.
        example: false
        type: boolean
      limit:
        description: 'The number of results to return, (range: 2-1000), or equals
          to `total_count`'
        example: 50
        format: int32
        type: integer
      object:
        description: 'Entity name: always ''list'''
        enum:
        - list
        type: string
      order:
        description: 'The order of the records to return based on creation time. Available
          values: ASC, DESC; by default ASC.'
        enum:
        - ASC
        - DESC
        type: string
      total_count:
        description: The total number or records, if requested. It might be returned
          also for small lists.
        example: 20
        format: int32
        type: integer
    required:
    - data
    - has_more
    - limit
    - object
    - total_count
    type: object
  UserUpdateReq:
    description: This object represents a user in requests towards Device Management.
    properties:
      address:
        description: Address, not longer than 100 characters.
        type: string
      email:
        description: The email address, not longer than 254 characters.
        type: string
      full_name:
        description: The full name of the user, not longer than 100 characters.
        type: string
      groups:
        description: A list of group IDs this user belongs to.
        items:
          type: string
        type: array
      is_gtc_accepted:
        description: A flag indicating that the General Terms and Conditions has been
          accepted.
        type: boolean
      is_marketing_accepted:
        description: A flag indicating that receiving marketing information has been
          accepted.
        type: boolean
      is_totp_enabled:
        description: A flag indicating whether 2-factor authentication (TOTP) has
          to be enabled or disabled.
        type: boolean
      login_profiles:
        description: A list of login profiles for the user. Specified as the identity
          providers the user should be associated with. Only the ID attribute of the
          login profile should be set in the request object. The list cannot be empty.
          A limit of 100 profiles.
        items:
          $ref: '#/definitions/LoginProfile'
        type: array
      phone_number:
        description: Phone number, not longer than 100 characters.
        type: string
      status:
        description: The status of the user. ENROLLING state indicates that the user
          is in the middle of the enrollment process. INVITED means that the user
          has not accepted the invitation request. RESET means that the password must
          be changed immediately. INACTIVE users are locked out and not permitted
          to use the system.
        enum:
        - ENROLLING
        - INVITED
        - ACTIVE
        - RESET
        - INACTIVE
        example: ACTIVE
        type: string
      username:
        description: A username containing alphanumerical letters and -,._@+= characters.
          It must be at least 4 but not more than 30 character long.
        type: string
    type: object
  Webhook:
    properties:
      headers:
        additionalProperties:
          type: string
        description: The headers (key/value) sent with the notification. Optional.
        example: '{"authorization" : "f4b93d6e-4652-4874-82e4-41a3ced0cd56"}'
        type: object
      url:
        description: The URL to which the notifications are sent. We recommend that
          you serve this URL over HTTPS.
        example: https://www.example.com/my-webhook
        type: string
    required:
    - url
    type: object
  error-response:
    properties:
      code:
        description: HTTP response code.
        format: int32
        type: integer
      fields:
        description: Details of the error fields.
        items:
          $ref: '#/definitions/fields'
        type: array
      message:
        description: Description of the error.
        type: string
      object:
        description: Response type, always "error".
        type: string
      request_id:
        description: Request ID.
        type: string
      type:
        description: Type of error.
        type: string
    type: object
  fields:
    properties:
      message:
        description: Error description.
        type: string
      name:
        description: The field name in the request for which the validation has failed.
        type: string
    type: object
  metric:
    properties:
      bootstraps_failed:
        description: The number of failed bootstraps the account has performed. Bootstrap
          is the process of provisioning a Lightweight Machine to Machine Client to
          a state where it can initiate a management session to a new Lightweight
          Machine to Machine Server.
        format: int64
        type: integer
      bootstraps_pending:
        description: The number of pending bootstraps the account has performed. Bootstrap
          is the process of provisioning a Lightweight Machine to Machine Client to
          a state where it can initiate a management session to a new Lightweight
          Machine to Machine Server.
        format: int64
        type: integer
      bootstraps_successful:
        description: The number of successful bootstraps the account has performed.
          Bootstrap is the process of provisioning a Lightweight Machine to Machine
          Client to a state where it can initiate a management session to a new Lightweight
          Machine to Machine Server.
        format: int64
        type: integer
      connect_rest_api_error:
        description: The number of failed [Connect API](/docs/current/service-api-references/device-management-connect.html)
          requests that have been performed using the account. This metric does not
          consider the response from the device, it includes only the responses to
          the HTTP requests used to manage the device. This metric includes only messages
          handled by the Connect service, it does not include any HTTP errors returned
          by firewall as result of malformed messages.
        format: int64
        type: integer
      connect_rest_api_success:
        description: The number of successful [Connect API](/docs/current/service-api-references/device-management-connect.html)
          requests that have been performed using the account. This metric does not
          consider the response from the device, it includes only the responses to
          the HTTP requests used to manage the device.
        format: int64
        type: integer
      deleted_registrations:
        description: The number of deleted registrations (deregistrations) linked
          to the account. Deregistration is the process of removing the device registration
          from the Device Management Connect registry. The deregistration is usually
          initiated by the device. Device Management Connect no longer handles requests
          for a deregistered device.
        format: int64
        type: integer
      device_observations:
        description: '**(Beta)** The number of notifications received by the Device
          Management Connect service from the devices linked to the account. The device
          pushes notifications to Device Management Connect when you have successfully
          subscribed to the device resources using [Connect API](/docs/current/service-api-references/device-management-connect.html)
          endpoints.

          '
        format: int64
        type: integer
      device_proxy_request_error:
        description: '**(Beta)** The number of failed proxy requests from the Device
          Management Connect service to devices linked to the account. Device Management
          Connect makes proxy requests to devices when you try to read or write values
          to device resources using [Connect API](/docs/current/service-api-references/device-management-connect.html)
          endpoints.

          '
        format: int64
        type: integer
      device_proxy_request_success:
        description: '**(Beta)** The number of successful proxy requests from the
          Device Management Connect service to devices linked to the account. Device
          Management Connect makes proxy requests to devices when you try to read
          or write values to device resources using [Connect API](/docs/current/service-api-references/device-management-connect.html)
          endpoints.

          '
        format: int64
        type: integer
      device_subscription_request_error:
        description: '**(Beta)** The number of failed subscription requests from the
          Device Management Connect service to devices linked to the account. Device
          Management Connect makes subscription requests to devices when you try to
          subscribe to a resource path using [Connect API](/docs/current/service-api-references/device-management-connect.html)
          endpoints.

          '
        format: int64
        type: integer
      device_subscription_request_success:
        description: '**(Beta)** The number of successful subscription requests from
          the Device Management Connect service to devices linked to the account.
          Device Management Connect makes subscription requests to devices when you
          try to subscribe to a resource path using [Connect API](/docs/current/service-api-references/device-management-connect.html)
          endpoints.

          '
        format: int64
        type: integer
      expired_registrations:
        description: The number of expired registrations linked to the account. Device
          Management Connect removes the device registrations when the devices cannot
          update their registration before the expiry of the lifetime. Device Management
          Connect no longer handles requests for a device whose registration has expired
          already.
        format: int64
        type: integer
      full_registrations:
        description: The number of full registrations linked to the account. Full
          registration is the process of registering a device with Device Management
          Connect by providing its lifetime and capabilities such as the resource
          structure.The registered status of the device does not guarantee that the
          device is active and accessible from Device Management Connect at any point
          of time.
        format: int64
        type: integer
      handshakes_successful:
        description: The number of successful TLS handshakes the account has performed.
          The SSL or TLS handshake enables the SSL or TLS client and server to establish
          the secret keys with which they communicate. A successful TLS handshake
          is required for establishing a connection with Device Management Connect
          for any operaton such as registration, registration update and deregistration.
        format: int64
        type: integer
      id:
        description: A unique metric ID.
        type: string
      registration_updates:
        description: The number of registration updates linked to the account. Registration
          update is the process of updating the registration status with Device Management
          Connect to update or extend the lifetime of the device.
        format: int64
        type: integer
      timestamp:
        description: UTC time in RFC3339 format. The timestamp is the starting point
          of the interval for which the data is aggregated. Each interval includes
          data for the time greater than or equal to the timestamp and less than the
          next interval's starting point.
        format: date-time
        type: string
      transactions:
        description: The number of transaction events from or to devices linked to
          the account. A transaction is a 512-byte block of data processed by Device
          Management. It can be either sent by the device (device --> Device Management)
          or received by the device (Device Management --> device). A transaction
          does not include IP, TCP or UDP, TLS or DTLS packet overhead. It only contains
          the packet payload (full CoAP packet including CoAP headers).
        format: int64
        type: integer
    type: object
  successful-response:
    properties:
      after:
        description: The metric ID included in the request or null.
        type: string
      data:
        items:
          $ref: '#/definitions/metric'
        type: array
      has_more:
        description: Indicates whether there are more results for you to fetch in
          the next page.
        type: boolean
      limit:
        description: The limit used in the request to retrieve the results.
        type: integer
      object:
        description: API resource name.
        type: string
      total_count:
        description: The total number of records available.
        type: integer
    type: object
host: api.us-east-1.mbedcloud.com
info:
  description: The full Mbed Cloud API
  title: Mbed Cloud API
  version: '3'
paths:
  /auth/accounts/{account_id}/branding-colors/dark:
    get:
      description: Returns the branding colors of the dark theme.
      operationId: getLoginPageAllDarkColors
      parameters:
      - description: The ID of the account whose branding colors to be fetched.
        in: path
        name: account_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColorList'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding colors of the dark theme.
  /auth/accounts/{account_id}/branding-colors/dark/{reference}:
    get:
      description: Returns the requested branding color of the dark theme.
      operationId: getLoginPageDarkColor
      parameters:
      - description: The ID of the account whose branding colors to be fetched.
        in: path
        name: account_id
        required: true
        type: string
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColor'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account with the given ID not found or unknown color reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding color of the dark theme.
  /auth/accounts/{account_id}/branding-colors/light:
    get:
      description: Returns the branding colors of the light theme.
      operationId: getLoginPageAllLightColors
      parameters:
      - description: The ID of the account whose branding colors to be fetched.
        in: path
        name: account_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColorList'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding colors of the light theme.
  /auth/accounts/{account_id}/branding-colors/light/{reference}:
    get:
      description: Returns the requested branding color of the light theme.
      operationId: getLoginPageLightColor
      parameters:
      - description: The ID of the account whose branding colors to be fetched.
        in: path
        name: account_id
        required: true
        type: string
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColor'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account with the given ID not found or unknown color reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding color of the light theme.
  /auth/accounts/{account_id}/branding-images/dark:
    get:
      description: Returns the metadata of all branding images of the dark theme.
      operationId: getLoginPageAllDarkImageData
      parameters:
      - description: The ID of the account whose branding images to be fetched.
        in: path
        name: account_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingImageList'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of all images of the dark theme.
  /auth/accounts/{account_id}/branding-images/dark/{reference}:
    get:
      description: An endpoint for getting metadata of one account branding image
        of the dark theme.
      operationId: getLoginPageDarkImageData
      parameters:
      - description: The ID of the account whose branding image to be fetched.
        in: path
        name: account_id
        required: true
        type: string
      - description: Name of the picture whose metadata to be fetched.
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingImage'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account with the given ID not found or unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of an image of the dark theme.
  /auth/accounts/{account_id}/branding-images/light:
    get:
      description: Returns the metadata of all branding images of the light theme.
      operationId: getLoginPageAllLightImageData
      parameters:
      - description: The ID of the account whose branding images to be fetched.
        in: path
        name: account_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingImageList'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of all images of the light theme.
  /auth/accounts/{account_id}/branding-images/light/{reference}:
    get:
      description: An endpoint for getting metadata of one account branding image
        of the light theme.
      operationId: getLoginPageLightImageData
      parameters:
      - description: The ID of the account whose branding image to be fetched.
        in: path
        name: account_id
        required: true
        type: string
      - description: Name of the picture whose metadata to be fetched.
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingImage'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account with the given ID not found or unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of an image of the light theme.
  /v2/device-requests/{device-id}:
    post:
      consumes:
      - application/json
      description: 'This API provides an interface to asynchronously call methods
        on a device.


        The `async-id` is provided by the client, enabling the client to track the
        end-to-end flow with an identifier

        that is relevant to the end application. For example, a web application''s
        session ID along with the device ID

        and the resource path could be used as the `async-id`. This also avoids any
        race conditions with

        [the notification channel](/docs/current/integrate-web-app/event-notification.html).
        All responses are sent through the

        currently configured notification channel as an **AsyncIDResponse**.


        For `GET` methods, values may be fetched from an internal cache, instead of
        contacting the device.


        See also /v2/endpoints/{device-id}/{resourcePath}.


        ```

        Example URI:

        POST /v2/device-requests/015f2fa34d310000000000010030036c?async-id=123e4567-e89b-12d3-a456-426655440000


        Example payloads:

        { "method": "GET", "uri": "/5/0/1" }

        { "method": "PUT", "uri": "/5/0/1%20?k1=v1&k2=v2%22", "accept": "text/plain",
        "content-type": "text/plain", "payload-b64": "dmFsdWUxCg==" }


        Immediate response:

        202 Accepted


        Example AsyncIDResponse, delivered via the notification channel:

        { "async-responses": [ { "id": "123e4567-e89b-12d3-a456-426655440000", "status":
        200, "payload": "dmFsdWUxCg==", "ct": "text/plain", "max-age": 600 } ] }

        ```

        '
      operationId: createAsyncRequest
      parameters:
      - description: The device ID generated by Device Management.
        format: uuid, 32 hexadecimal characters
        in: path
        name: device-id
        required: true
        type: string
      - description: The client-generated ID for matching the correct response delivered
          via a notification.
        format: 1-40 alphanumeric characters and dashes.
        in: query
        name: async-id
        pattern: ^[\w\-]{1,40}$
        required: true
        type: string
      - description: Device request to send.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/DeviceRequest'
      produces:
      - application/json
      responses:
        202:
          description: Accepted.
        400:
          description: Bad request. Contains one of the errors RESOURCE_NOT_FOUND,
            DEVICE_NOT_CONNECTED, MALFORMED_JSON_CONTENT, MALFORMED_ASYNC_ID and TOO_MANY_REQUESTS
          schema:
            type: string
        401:
          description: Authentication failure.
        404:
          description: Device not found. Contains error DEVICE_NOT_FOUND.
          schema:
            type: string
      summary: Send an async request to device
      tags:
      - DeviceRequests
  /v2/device-shared-keys:
    get:
      consumes:
      - application/json
      description: 'List pre-shared keys with pagination and default page size of
        50 entries.


        **Example usage:**


        ```

        curl -H "authorization: Bearer ${API_TOKEN}" https://api.us-east-1.mbedcloud.com/v2/device-shared-keys

        ```

        '
      operationId: listPreSharedKeys
      parameters:
      - description: The number of entries per page
        in: query
        name: limit
        required: false
        type: integer
      - description: An offset token for fetching a specific page. Provided by the
          server.
        in: query
        name: after
        required: false
        type: string
      produces:
      - application/json
      responses:
        200:
          description: List of pre-shared keys.
          schema:
            $ref: '#/definitions/ListOfPreSharedKeysWithoutSecret'
        400:
          description: Bad request. Contains the error as a string, either TOKEN_NOT_FOUND
            or INVALID_LIMIT.
      summary: List pre-shared keys.
      tags:
      - PreSharedKeys
    post:
      consumes:
      - application/json
      description: "Upload a pre-shared key (PSK) for an endpoint to allow it to bootstrap.\
        \ The existing key will not be overwritten but needs\nto be deleted first\
        \ in case of re-setting PSK for an endpoint.\n\n**Note**: The PSK APIs are\
        \ available only to accounts that have this feature enabled.\n\n**Example\
        \ usage:**\n\n```\ncurl -H \"authorization: Bearer ${API_TOKEN}\" -H \"content-type:\
        \ application/json\" -X POST https://api.us-east-1.mbedcloud.com/v2/device-shared-keys\
        \ \\\n     -d '{\"endpoint_name\": \"my-endpoint-0001\", \"secret_hex\": \"\
        4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\" }'\n```\n"
      operationId: uploadPreSharedKey
      parameters:
      - description: Pre-shared key to be uploaded.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/PreSharedKey'
      produces:
      - application/json
      responses:
        201:
          description: Successfully created.
        400:
          description: Bad request. Contains comma-separated errors INVALID_ENDPOINT_NAME,
            INVALID_SECRET_HEX and MALFORMED_JSON_CONTENT.
          schema:
            type: string
        401:
          description: Authentication failure.
        403:
          description: Forbidden. You need to read and accept the PSK license in Pelion
            Device Management Portal.
        409:
          description: Conflict. The pre-shared key for the endpoint already exists
            and will not be overwritten. Contains error KEY_ALREADY_EXISTS_FOR_ENDPOINT.
          schema:
            type: string
      summary: Upload a pre-shared key to Pelion Device Management.
      tags:
      - PreSharedKeys
  /v2/device-shared-keys/{endpoint_name}:
    delete:
      description: 'Remove a pre-shared key.


        **Example usage:**


        ```

        curl -H "authorization: Bearer ${API_TOKEN}" -X DELETE https://api.us-east-1.mbedcloud.com/v2/device-shared-keys/my-endpoint-0001

        ```

        '
      operationId: deletePreSharedKey
      parameters:
      - description: The unique endpoint identifier that this pre-shared key applies
          to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters)
          must be percent-encoded.
        in: path
        name: endpoint_name
        required: true
        type: string
      responses:
        204:
          description: Successfully deleted. Responded even if the endpoint did not
            have a PSK associated.
        400:
          description: Bad request. Endpoint name validation failed. Contains error
            INVALID_ENDPOINT_NAME.
          schema:
            type: string
        401:
          description: Authentication failure.
      summary: Remove a pre-shared key.
      tags:
      - PreSharedKeys
    get:
      description: 'Check if a pre-shared key for an endpoint exists or not. The response
        does not contain the secret itself.


        **Example usage:**


        ```

        curl -H "authorization: Bearer ${API_TOKEN}" https://api.us-east-1.mbedcloud.com/v2/device-shared-keys/my-endpoint-0001

        ```

        '
      operationId: getPreSharedKey
      parameters:
      - description: The unique endpoint identifier that this pre-shared key applies
          to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters)
          must be percent-encoded.
        in: path
        name: endpoint_name
        required: true
        type: string
      responses:
        200:
          description: Pre-shared key for the device (does not contain secret).
          schema:
            $ref: '#/definitions/PreSharedKeyWithoutSecret'
        400:
          description: Bad request. Endpoint name validation failed. Contains error
            INVALID_ENDPOINT_NAME.
          schema:
            type: string
        401:
          description: Authentication failure.
        404:
          description: The pre-shared key does not exist.
      summary: Get a pre-shared key.
      tags:
      - PreSharedKeys
  /v2/endpoints:
    get:
      deprecated: true
      description: "Endpoints are physical devices having valid registration to Device\
        \ Management. All devices regardless of registration status can be requested\
        \ from Device Directory API ['/v3/devices/`](/docs/current/service-api-references/device-directory.html).\n\
        \n**Note:** This endpoint is deprecated and will be removed 1Q/18. You should\
        \ use the Device Directory API [`/v3/devices/`](/docs/current/service-api-references/device-directory.html).\
        \ To list only the registered devices, use filter `/v3/devices/?filter=state%3Dregistered`.\n\
        \n**Example usage:**\n\n    curl -X GET https://api.us-east-1.mbedcloud.com/v2/endpoints\
        \ -H 'authorization: Bearer {api-key}'\n"
      operationId: getConnectedEndpoints
      parameters:
      - description: Filter endpoints by endpoint-type.
        in: query
        name: type
        required: false
        type: string
      produces:
      - application/json
      responses:
        200:
          description: Successful response with a list of endpoints (Array of endpoints).
          schema:
            items:
              $ref: '#/definitions/Endpoint'
            type: array
      summary: (DEPRECATED) List registered endpoints. The number of returned endpoints
        is currently limited to 200.
      tags:
      - Endpoints
  /v2/endpoints/{device-id}:
    get:
      description: "The list of resources is cached by Device Management Connect,\
        \ so this call does not create a message to the device.\n\n**Example usage:**\n\
        \n    curl -X GET https://api.us-east-1.mbedcloud.com/v2/endpoints/{device-id}\
        \ -H 'authorization: Bearer {api-key}'\n"
      operationId: getEndpointResources
      parameters:
      - description: 'A unique device ID for an endpoint. Note that the ID needs to
          be an exact match. You cannot use wildcards here.

          '
        in: path
        name: device-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: Successful response with a list of resources (Array of resources).
          schema:
            items:
              $ref: '#/definitions/Resource'
            type: array
        404:
          description: Endpoint not found
      summary: List the resources on an endpoint
      tags:
      - Endpoints
  /v2/endpoints/{device-id}/{resourcePath}:
    delete:
      description: "A request to delete a resource path must be handled by both Device\
        \ Management Client and Device Management\nConnect.\n\nAll resource APIs are\
        \ asynchronous. These APIs respond only if the device is turned on and\nconnected\
        \ to Device Management Connect and there is an active notification channel.\n\
        \n**Example usage:**\n\n    curl -X DELETE \\\n      https://api.us-east-1.mbedcloud.com/v2/endpoints/{device-id}/{resourcePath}\
        \ \\\n      -H 'authorization: Bearer {api-key}'\n"
      operationId: deleteResourcePath
      parameters:
      - description: 'A unique Device Management device ID for the endpoint. Note
          that the ID must be an exact match. You cannot use wildcards here.

          '
        in: path
        name: device-id
        required: true
        type: string
      - description: 'The URL of the resource.

          '
        in: path
        name: resourcePath
        required: true
        type: string
      - description: 'If you make a request with `noResp=true`,

          Device Management Connect makes a CoAP non-confirmable request to the device.

          Such requests are not guaranteed to arrive in the device, and you do not
          get back an async-response-id.


          If calls with this parameter enabled succeed, they return with the status
          code

          `204 No Content`. If the underlying protocol does not support non-confirmable
          requests,

          or if the endpoint is registered in queue mode, the response is status code
          `409 Conflict`.

          '
        in: query
        name: noResp
        required: false
        type: boolean
      responses:
        202:
          description: Accepted. Returns an asynchronous response ID.
          schema:
            $ref: '#/definitions/AsyncID'
        400:
          description: Bad request.
        404:
          description: "Requested endpoint\u2019s resource is not found."
        409:
          description: Conflict. If `noResp=true`, the non-confirmable request is
            not supported by the used protocol.
        410:
          description: Gone. Endpoint not found.
        412:
          description: Precondition failed. Device responds with 4.12 CoAP response
            code. (Through AsyncIDResponse)
        413:
          description: Request entity too large. (Through AsyncIDResponse)
        415:
          description: Media type is not supported by the endpoint. (Through AsyncIDResponse)
        429:
          description: Cannot make a request at the moment; the queue is full or queue
            was cleared because endpoint made full registration.
        502:
          description: TCP or TLS connection to endpoint cannot be established.
        503:
          description: Operation cannot be executed because endpoint is currently
            unavailable. (Through AsyncIDResponse)
        504:
          description: Operation cannot be executed due to a time-out from the endpoint.
            (Through AsyncIDResponse)
      summary: Delete a resource path
      tags:
      - Resources
    get:
      description: "Requests the resource value either from the device or cache. If\
        \ the value is not in the cache, the request goes all the\nway to the device.\
        \ When the response is available, an `AsyncIDResponse` json object is received\
        \ in the notification channel. \nThe resource values can be also in cache\
        \ based on `max_age` defined by the device side. The value found from the\
        \ cache is returned \nimmediately in the response.\n\nThe preferred way to\
        \ get resource values is to use the **subscribe** and **callback** methods.\n\
        \nAll resource APIs are asynchronous. These APIs only respond if the device\
        \ is turned on and connected to Device Management.\n \nSee also how [resource\
        \ caching](/docs/current/connecting/device-guidelines.html#resource-cache)\
        \ works.\n\nPlease refer to [Lightweight Machine to Machine Technical specification](http://www.openmobilealliance.org/release/LightweightM2M/V1_0-20170208-A/OMA-TS-LightweightM2M-V1_0-20170208-A.pdf)\
        \ for more inforamtion.\n\n**Example usage:**\n\n    curl -X GET \\\n    \
        \  https://api.us-east-1.mbedcloud.com/v2/endpoints/{device-id}/{resourcePath}\
        \ \\\n      -H 'authorization: Bearer {api-key}'\n"
      operationId: getResourceValue
      parameters:
      - description: 'Unique Device Management device ID for the endpoint. Note that
          the ID needs to be an exact match. You cannot use wildcards here.

          '
        in: path
        name: device-id
        required: true
        type: string
      - description: 'The URL of the resource.

          '
        in: path
        name: resourcePath
        required: true
        type: string
      - description: 'If true, the response comes only from the cache. Default: false.
          Device Management Connect caches the received resource values for the time
          of [max_age](/docs/current/connecting/working-with-the-resources.html) defined
          in the client side.

          '
        in: query
        name: cacheOnly
        required: false
        type: boolean
      - description: 'If a request is made with `noResp=true`, Device Management Connect
          makes a CoAP

          non-confirmable request to the device. Such requests are not guaranteed
          to arrive in the device, and you do not get back

          an async-response-id.


          If calls with this parameter enabled succeed, they return with the status
          code `204 No Content`. If the underlying protocol

          does not support non-confirmable requests, or if the endpoint is registered
          in queue mode, the response is status code

          `409 Conflict`.

          '
        in: query
        name: noResp
        required: false
        type: boolean
      responses:
        200:
          description: Resource value found in cache. Returns the string value of
            the resource.
        202:
          description: Accepted. Returns an asynchronous response ID.
          schema:
            $ref: '#/definitions/AsyncID'
        205:
          description: No cache available for resource.
        400:
          description: Bad request.
        404:
          description: "Requested endpoint\u2019s resource is not found."
        409:
          description: Conflict. If `noResp=true`, the non-confirmable request is
            not supported by the used protocol.
        410:
          description: Gone. Endpoint not found.
        412:
          description: Precondition failed. Device responded with 4.12 CoAP response
            code. (Through AsyncIDResponse)
        413:
          description: Request entity too large. (Through AsyncIDResponse)
        415:
          description: Media type is not supported by the endpoint. (Through AsyncIDResponse)
        429:
          description: Cannot make a request at the moment; the queue is full or queue
            was cleared because endpoint made full registration.
        502:
          description: TCP or TLS connection to endpoint cannot be established.
        503:
          description: Operation cannot be executed because endpoint is currently
            unavailable. (Through AsyncIDResponse)
        504:
          description: Operation cannot be executed due to a time-out from the endpoint.
            (Through AsyncIDResponse)
      summary: Read from a resource
      tags:
      - Resources
    post:
      consumes:
      - text/plain
      - application/xml
      - application/octet-stream
      - application/exi
      - application/json
      - application/link-format
      - application/senml+json
      - application/nanoservice-tlv
      - application/vnd.oma.lwm2m+text
      - application/vnd.oma.lwm2m+opaq
      - application/vnd.oma.lwm2m+tlv
      - application/vnd.oma.lwm2m+json
      description: "With this API, you can [execute a function](/docs/current/connecting/handle-resource-webapp.html#the-execute-operation)\n\
        on an existing resource and create new Object instance to the device. The\
        \ resource-path does not have to exist - it can be\ncreated by the call. The\
        \ maximum length of resource-path is 255 characters.\n\nAll resource APIs\
        \ are asynchronous. These APIs respond only if the device is turned on and\n\
        connected to Device Management Connect and there is an active notification\
        \ channel.\n\nSupported content types depend on the device and its resource.\
        \ Device Management translates HTTP to equivalent CoAP content type.\n\n**Example\
        \ usage:**\n\nThis example resets the min and max values of the [temperature\
        \ sensor](http://www.openmobilealliance.org/tech/profiles/lwm2m/3303.xml)\
        \ instance 0 by executing the Resource 5605 'Reset Min and Max Measured Values'.\n\
        \n    curl -X POST \\\n      https://api.us-east-1.mbedcloud.com/v2/endpoints/{device-id}/3303/0/5605\
        \ \\\n      -H 'authorization: Bearer {api-key}'\n"
      operationId: executeOrCreateResource
      parameters:
      - description: 'A unique Device Management device ID for the endpoint. Note
          that the ID must be an exact match. You cannot use wildcards here.

          '
        in: path
        name: device-id
        required: true
        type: string
      - description: The URL of the resource.
        in: path
        name: resourcePath
        required: true
        type: string
      - description: 'This value is not needed. Most of the time resources do not
          accept a function

          but they have their own functions predefined. You can use this to trigger
          them.


          If a function is included, the body of this request is passed as a char*
          to

          the function in Device Management Client.

          '
        in: body
        name: resourceFunction
        required: false
        schema:
          type: string
      - description: 'If you make a request with `noResp=true`,

          Device Management Connect makes a CoAP non-confirmable request to the device.

          Such requests are not guaranteed to arrive in the device,

          and you do not get back an async-response-id.


          If calls with this parameter enabled succeed, they return with the status
          code

          `204 No Content`. If the underlying protocol does not support non-confirmable
          requests,

          or if the endpoint is registered in queue mode, the response is status code
          `409 Conflict`.

          '
        in: query
        name: noResp
        required: false
        type: boolean
      responses:
        202:
          description: Accepted. Returns an asynchronous response ID.
          schema:
            $ref: '#/definitions/AsyncID'
        400:
          description: Bad request.
        404:
          description: "Requested endpoint\u2019s resource is not found."
        409:
          description: Conflict. If `noResp=true`, the non-confirmable request is
            not supported by the used protocol.
        410:
          description: Gone. Endpoint not found.
        412:
          description: Precondition failed. Device responds with 4.12 CoAP response
            code. (Through AsyncIDResponse)
        413:
          description: Request entity too large. (Through AsyncIDResponse)
        415:
          description: Media type is not supported by the endpoint. (Through AsyncIDResponse)
        429:
          description: Cannot make a request at the moment; the queue is full or queue
            was cleared because endpoint made full registration.
        502:
          description: TCP or TLS connection to endpoint cannot be established.
        503:
          description: Operation cannot be executed because endpoint is currently
            unavailable. (Through AsyncIDResponse)
        504:
          description: Operation cannot be executed due to a time-out from the endpoint.
            (Through AsyncIDResponse)
      summary: Execute a function on a Resource or create new Object instance
      tags:
      - Resources
    put:
      consumes:
      - text/plain
      - application/xml
      - application/octet-stream
      - application/exi
      - application/json
      - application/link-format
      - application/senml+json
      - application/nanoservice-tlv
      - application/vnd.oma.lwm2m+text
      - application/vnd.oma.lwm2m+opaq
      - application/vnd.oma.lwm2m+tlv
      - application/vnd.oma.lwm2m+json
      description: "With this API, you can [write a new value to existing Resources](/docs/current/connecting/handle-resource-webapp.html)\n\
        or use the **write** attributes to set the [notification rules](/docs/current/connecting/resource-change-webapp.html#notification-rules)\
        \ \nfor the Resources. The notification rules only work on the device client\
        \ side and may not be supported by all clients.\n\nThis API can also be used\
        \ to transfer files to the device. Device Management Connect\nLwM2M server\
        \ implements the Option 1 from RFC7959. The maximum block size is 1024 bytes.\n\
        The block size versus transferred file size is something to note in low quality\
        \ networks.\nThe customer application needs to know what type of file is transferred\
        \ (for example txt)\nand the payload can be encrypted by the customer. The\
        \ maximum size of payload is 1048576 bytes.\n\nAll resource APIs are asynchronous.\
        \ These APIs respond only if the device is turned on and\nconnected to Device\
        \ Management Connect and there is an active notification channel.\n\nSupported\
        \ content types depend on the device and its resource. Device Management translates\
        \ HTTP to equivalent CoAP content type.\n\n**Example usage:**\n\nThis example\
        \ sets the alarm on a buzzer. The command writes the [Buzzer](http://www.openmobilealliance.org/tech/profiles/lwm2m/3338.xml)\
        \ instance 0, \"On/Off\" boolean resource to '1'.\n\n    curl -X PUT \\\n\
        \      https://api.us-east-1.mbedcloud.com/v2/endpoints/{device-id}/3338/0/5850\
        \ -H \"content-type: text/plain\" \\\n      -H 'authorization: Bearer {api-key}'\
        \ -d '1'\n"
      operationId: updateResourceValue
      parameters:
      - description: 'A unique Device Management device ID for the endpoint. Note
          that the ID must be an exact match. You cannot use wildcards here.

          '
        in: path
        name: device-id
        required: true
        type: string
      - description: Resource URL.
        in: path
        name: resourcePath
        required: true
        type: string
      - description: 'The value to be set to the resource.

          '
        in: body
        name: resourceValue
        required: true
        schema:
          type: string
      - description: 'If you make a request with `noResp=true`,

          Device Management Connect makes a CoAP non-confirmable request to the device.

          Such requests are not guaranteed to arrive in the device,

          and you do not get back an async-response-id.


          If calls with this parameter enabled succeed, they return with the status
          code

          `204 No Content`. If the underlying protocol does not support non-confirmable
          requests,

          or if the endpoint is registered in queue mode, the response is status code
          `409 Conflict`.

          '
        in: query
        name: noResp
        required: false
        type: boolean
      responses:
        202:
          description: Accepted. Returns an asynchronous response ID.
          schema:
            $ref: '#/definitions/AsyncID'
        400:
          description: Bad request.
        409:
          description: Conflict. If `noResp=true`, the non-confirmable request is
            not supported by the used protocol.
        410:
          description: Gone. Endpoint not found.
        412:
          description: Precondition failed. Device responds with 4.12 CoAP response
            code. (Through AsyncIDResponse)
        413:
          description: Request entity too large. (Through AsyncIDResponse)
        415:
          description: Media type is not supported by the endpoint. (Through AsyncIDResponse)
        429:
          description: Cannot make a request at the moment; the queue is full or queue
            was cleared because endpoint made full registration.
        502:
          description: TCP or TLS connection to endpoint cannot be established.
        503:
          description: Operation cannot be executed because endpoint is currently
            unavailable. (Through AsyncIDResponse)
        504:
          description: Operation cannot be executed due to a time-out from the endpoint.
            (Through AsyncIDResponse)
      summary: Write to a Resource or use write-attributes (notification rules) for
        a Resource
      tags:
      - Resources
  /v2/notification/callback:
    delete:
      description: "Deletes the callback URL.\n\n**Example usage:**\n\n    curl -X\
        \ DELETE https://api.us-east-1.mbedcloud.com/v2/notification/callback -H 'authorization:\
        \ Bearer {api-key}'\n"
      operationId: deregisterWebhook
      responses:
        204:
          description: Successfully deleted.
        401:
          description: Unauthorized.
        403:
          description: Forbidden, the authorization token used is not an API key.
        404:
          description: Callback URL does not exists.
      summary: Delete callback URL
      tags:
      - Notifications
    get:
      description: "Shows the current callback URL if it exists.\n\n**Example usage:**\n\
        \n    curl -X GET https://api.us-east-1.mbedcloud.com/v2/notification/callback\
        \ -H 'authorization: Bearer {api-key}'\n"
      operationId: getWebhook
      produces:
      - application/json
      responses:
        200:
          description: URL found.
          schema:
            $ref: '#/definitions/Webhook'
        401:
          description: Unauthorized.
        403:
          description: Forbidden, the authorization token used is not an API key.
        404:
          description: The callback URL does not exist.
      summary: Check callback URL
      tags:
      - Notifications
    put:
      consumes:
      - application/json
      description: "Register a URL to which the server should deliver notifications\
        \ of the subscribed resource changes. To get notifications\npushed, you also\
        \ need to place the subscriptions. The maximum length of the URL, header keys\
        \ and values, all combined,\nis 400 characters. Notifications are delivered\
        \ as PUT messages to the HTTP server defined by the client with a subscription\n\
        server message. The given URL should be accessible and respond to the PUT\
        \ request with response code of 200 or 204.\nDevice Management Connect tests\
        \ the callback URL with an empty payload when the URL is registered. For more\
        \ information on callback\nnotification, see [NotificationMessage](/docs/current/service-api-references/mbed-cloud-connect.html#models).\n\
        \n**Optional headers in a callback message:**\n\nYou can set optional headers\
        \ to a callback in a **Webhook** object.\nDevice Management Connect will include\
        \ the header and key pairs to the notification messages send them to callback\
        \ URL. As the callback\nURL's are API key specific also the headers are.\n\
        \nOne possible use for the additional headers is to check the origin of a\
        \ PUT request and also distinguish the application (API key)\nto which the\
        \ notification belongs to.\n\n**Note**: Only one callback URL per an API key\
        \ can be active. If you register a new URL while another one is already active,\n\
        it replaces the active one. There can be only one notification channel at\
        \ a time. If the Long Poll notification is already present,\nyou need to delete\
        \ it before setting the callback URL.\n\n**Expiration of a callback URL:**\n\
        \nA callback can expire when Device Management cannot deliver a notification\
        \ due to a connection timeout or an\nerror response (4xx or 5xx). After each\
        \ delivery failure, Device Management sets an exponential back off time and\
        \ makes a retry attempt\nafter that. The first retry delay is 1 second, then\
        \ 2s, 4s, 8s, ..., 2min, 2min. The maximum retry delay is 2 minutes.\nThe\
        \ callback URL will be removed if all retries fail withing 24 hours. More\
        \ about [notification sending logic](/docs/current/integrate-web-app/event-notification.html#notification-sending-logic).\n\
        \n**Supported callback URL protocols:**\n\nCurrently, only HTTP and HTTPS\
        \ protocols are supported.\n\n**HTTPS callback URLs:**\n\nWhen delivering\
        \ a notification to an HTTPS based callback URL, Device Management Connect\
        \ will present a valid client certificate to identify\nitself. The certificate\
        \ is signed by a trusted certificate authorithy (GlobalSign) with a Common\
        \ Name (CN) set to notifications.mbedcloud.com.\n\n**Example usage:**\n\n\
        This example command shows how to set your callback URL and API key. It also\
        \ sets an optional header authorization. When Device Management\nConnect calls\
        \ your callback URL, the call contains the authorization header with the defined\
        \ value.\n\n    curl -X PUT \\\n      https://api.us-east-1.mbedcloud.com/v2/notification/callback\
        \ \\\n      -H 'authorization: Bearer {api-key}' \\\n      -H 'content-type:\
        \ application/json' \\\n      -d '{\n      \"url\": \"{callback-url}\",\n\
        \      \"headers\": {\"authorization\" : \"f4b93d6e-4652-4874-82e4-41a3ced0cd56\"\
        }\n      }'\n"
      operationId: registerWebhook
      parameters:
      - description: 'A json object that contains the optional headers and the URL
          to which the notifications need to be sent.

          '
        in: body
        name: webhook
        required: true
        schema:
          $ref: '#/definitions/Webhook'
      responses:
        204:
          description: Successfully subscribed.
        400:
          description: Given URL is not accessible or the Long Polling channel already
            exists.
        401:
          description: Unauthorized.
        403:
          description: Forbidden, the authorization token used is not an API key.
        415:
          description: Unsupported Media Type.
      summary: Register a callback URL
      tags:
      - Notifications
  /v2/notification/pull:
    delete:
      deprecated: true
      description: "To delete a notification Long Poll channel. This is required to\
        \ change the channel from Long Poll to a callback.\nYou should not make a\
        \ GET `/v2/notification/pull` call for 2 minutes after channel was deleted,\
        \ because it can\nimplicitly recreate the pull channel. You can also have\
        \ some random responses with payload or 410 GONE with\n\"CHANNEL_DELETED\"\
        \ as a payload or 200/204 until the old channel is purged.\n\n**Example usage:**\n\
        \    curl -X DELETE https://api.us-east-1.mbedcloud.com/v2/notification/pull\
        \ -H 'authorization: Bearer {api-key}'\n"
      operationId: deleteLongPollChannel
      responses:
        200:
          description: Success. The body can contain "REMOVED" if it was deleted by
            this call or "ALREADY_DELETED" if it was deleted before and not purged
            yet.
        401:
          description: Unauthorized.
      summary: Delete notification Long Poll channel
      tags:
      - Notifications
    get:
      deprecated: true
      description: "In this case, notifications are delivered through HTTP long poll\
        \ requests. The HTTP request is kept open\nuntil an event notification or\
        \ a batch of event notifications are delivered to the client or the request\
        \ times out\n(response code 204). In both cases, the client should open a\
        \ new polling connection after the previous one closes.\nOnly a single long\
        \ polling connection per API key can be ongoing at any given time.\nYou must\
        \ have a persistent connection (Connection keep-alive header in the request)\
        \ to avoid excess\nTLS handshakes.\n\nThe pull channel is implicitly created\
        \ by the first GET call to `/v2/notification/pull`. It is refreshed on each\
        \ GET call.\nIf the channel is not polled for a long time (10 minutes) - it\
        \ expires and will be deleted. This means that no notifications\nwill stay\
        \ in the queue between polls. A channel can be also deleted explicitly by\
        \ a DELETE call.\n\n**Note:** If you cannot have a public facing callback\
        \ URL, for example when developing on your local\nmachine, you can use long\
        \ polling to check for new messages. However, **long polling is deprecated**\
        \ and will likely be\nreplaced in future. It is meant only for experimentation\
        \ and not for commercial usage. The proper method\nto receive notifications\
        \ is a **notification callback**.\nThere can only be one notification channel\
        \ per API key at a time in Device Management Connect. If a callback notification\n\
        channel already exists, you need to delete it before creating a long poll\
        \ notification channel, and vice-versa.\n\n**Example usage:**\n\n    curl\
        \ -X GET https://api.us-east-1.mbedcloud.com/v2/notification/pull -H 'authorization:\
        \ Bearer {api-key}'\n"
      operationId: longPollNotifications
      produces:
      - application/json
      responses:
        200:
          description: Success.
          schema:
            $ref: '#/definitions/NotificationMessage'
        204:
          description: No new notifications.
        400:
          description: Callback notification channel already exists.
        401:
          description: Unauthorized.
        410:
          description: 'Pull channnel was deleted and waiting to be purged. This code
            is a result of incorrect client behavior (delete channel and then pull),
            which can prevent

            the creation of callback channel after the pull channel was deleted. The
            channel can be (randomly) recreated by this call when it was deleted and
            still

            not purged. This client behaviour can set the channel in an undefined
            state for some time. The channel may respond with 410 GONE or 200/204
            codes randomly for

            some time. Finally, the channel will enter in a valid "channel exists"
            state.

            '
      summary: Get notifications using Long Poll
      tags:
      - Notifications
  /v2/subscriptions:
    delete:
      description: "Removes pre-subscriptions.\n\n**Example usage:**\n\n    curl -X\
        \ DELETE https://api.us-east-1.mbedcloud.com/v2/subscriptions -H 'authorization:\
        \ Bearer {api-key}'\n"
      operationId: deletePreSubscriptions
      responses:
        204:
          description: Successfully removed subscriptions.
        401:
          description: Unauthorized.
        403:
          description: Forbidden, the authorization token used is not an API key.
      summary: Remove pre-subscriptions
      tags:
      - Subscriptions
    get:
      description: "You can retrieve the pre-subscription data with the GET operation.\
        \ The server returns with the same JSON structure\nas described above. If\
        \ there are no pre-subscribed resources, it returns with an empty array.\n\
        \n**Example usage:**\n\n    curl -X GET https://api.us-east-1.mbedcloud.com/v2/subscriptions\
        \ -H 'authorization: Bearer {api-key}'\n"
      operationId: getPreSubscriptions
      produces:
      - application/json
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/PresubscriptionArray'
        401:
          description: Unauthorized.
        403:
          description: Forbidden, the authorization token used is not an API key.
      summary: Get pre-subscriptions
      tags:
      - Subscriptions
    put:
      consumes:
      - application/json
      description: "Pre-subscription is a set of rules and patterns put by the application.\
        \ When an endpoint registers\nand its ID, type and registered resources match\
        \ the pre-subscription data, Device Management Connect sends\nsubscription\
        \ requests to the device automatically. The pattern may include the endpoint\
        \ ID\n(optionally having an `*` character at the end), endpoint type, a list\
        \ of resources or expressions\nwith an `*` character at the end. Subscriptions\
        \ based on pre-subscriptions are done when device registers or\ndoes register\
        \ update. To remove the pre-subscription data, put an empty array as a rule.\n\
        \n**Notification rules**\n\nA web application can place dynamic observation\
        \ rules for individual Object Instances and Resources\nto define when the\
        \ device sends observations. More information in [Notification rules](/docs/current/connecting/resource-change-webapp.html).\n\
        \n**Limits**:\n\n- The maximum length of the endpoint name and endpoint type\
        \ is 64 characters.\n- The maximum length of the resource path is 128 characters.\n\
        - You can listen to 256 separate resource paths.\n- The maximum number of\
        \ pre-subscription entries is 1024.\n\n**Example request:**\n\n```\ncurl -X\
        \ PUT \\\n  https://api.us-east-1.mbedcloud.com/v2/subscriptions \\\n  -H\
        \ 'authorization: Bearer {api-key}' \\\n  -H 'content-type: application/json'\
        \ \\\n  -d '[\n         {\n           \"endpoint-name\": \"node-001\",\n \
        \          \"resource-path\": [\"/dev\"]\n         },\n         {\n      \
        \     \"endpoint-type\": \"Light\",\n           \"resource-path\": [\"/sen/*\"\
        ]\n         },\n         {\n           \"endpoint-name\": \"node*\"\n    \
        \     },\n         {\n           \"endpoint-type\": \"Sensor\"\n         },\n\
        \         {\n           \"resource-path\": [\"/dev/temp\",\"/dev/hum\"]\n\
        \         }\n      ]'\n```\n\n- Subscribe to `/dev` resource of endpoint named\
        \ `node-001`.\n- Subscribe to `Light` type of endpoints and their resources\
        \ prefixed with `/sen/`.\n- Subscribe to all observable resources of endpoint\
        \ names prefixed with `node`.\n- Subscribe to all observable resources of\
        \ `Sensor` type endpoints.\n- Subscribe to `/dev/temp` and `/dev/hum` resources\
        \ of all endpoints.\n\n**Note**: For efficiency reasons, you should use resource\
        \ path patterns in the pre-subscription data. This prevents the notification\
        \ flow from unwanted resources.\n"
      operationId: updatePreSubscriptions
      parameters:
      - description: Array of pre-subscriptions.
        in: body
        name: presubsription
        required: true
        schema:
          $ref: '#/definitions/PresubscriptionArray'
      produces:
      - text/plain
      responses:
        204:
          description: Successfully created.
        400:
          description: Bad request, malformed content.
        401:
          description: Unauthorized.
        403:
          description: Forbidden, the authorization token used is not an API key.
      summary: Set pre-subscriptions
      tags:
      - Subscriptions
  /v2/subscriptions/{device-id}:
    delete:
      description: "Deletes all resource subscriptions in a single endpoint.\n\n**Example\
        \ usage:**\n\n    curl -X DELETE \\\n      https://api.us-east-1.mbedcloud.com/v2/subscriptions/{device-id}\
        \ \\\n      -H 'authorization: Bearer {api-key}'\n"
      operationId: deleteEndpointSubscriptions
      parameters:
      - description: 'A unique Device Management device ID for the endpoint. Note
          that the ID must be an exact match. You cannot use wildcards here.

          '
        in: path
        name: device-id
        required: true
        type: string
      responses:
        204:
          description: Successfully removed.
      summary: Delete subscriptions from an endpoint
      tags:
      - Subscriptions
    get:
      description: "Lists all subscribed resources from a single endpoint.\n\n**Example\
        \ usage:**\n\n    curl -X GET \\\n      https://api.us-east-1.mbedcloud.com/v2/subscriptions/{device-id}\
        \ \\\n      -H 'authorization: Bearer {api-key}'\n"
      operationId: getEndpointSubscriptions
      parameters:
      - description: 'A unique Device Management device ID for the endpoint. Note
          that ID must be an exact match. You cannot use wildcards here.

          '
        in: path
        name: device-id
        required: true
        type: string
      produces:
      - text/uri-list
      responses:
        200:
          description: List of subscribed resources.
          schema:
            description: A list of resource URIs, one per line
            example: /sen/light
            type: string
        404:
          description: Endpoint not found or there are no subscriptions for that endpoint.
      summary: Read endpoints subscriptions
      tags:
      - Subscriptions
  /v2/subscriptions/{device-id}/{resourcePath}:
    delete:
      description: "To remove an existing subscription from a resource path.\n\n**Example\
        \ usage:**\n\n    curl -X DELETE \\\n      https://api.us-east-1.mbedcloud.com/v2/subscriptions/{device-id}/{resourcePath}\
        \ \\\n      -H 'authorization: Bearer {api-key}'\n"
      operationId: deleteResourceSubscription
      parameters:
      - description: 'A unique Device Management device ID for the endpoint. Note
          that the ID must be an exact match. You cannot use wildcards here.

          '
        in: path
        name: device-id
        required: true
        type: string
      - description: 'The URL of the resource.

          '
        in: path
        name: resourcePath
        required: true
        type: string
      responses:
        204:
          description: Successfully removed subscription.
        404:
          description: Endpoint or its resource not found.
      summary: Remove a subscription
      tags:
      - Subscriptions
    get:
      operationId: checkResourceSubscription
      parameters:
      - description: 'A unique Device Management device ID for the endpoint. Note
          that the ID must be an exact match. You cannot use wildcards here.

          '
        in: path
        name: device-id
        required: true
        type: string
      - description: 'The URL of the resource.

          '
        in: path
        name: resourcePath
        required: true
        type: string
      responses:
        200:
          description: Resource is subscribed.
        404:
          description: Resource is not subscribed.
      summary: Read subscription status
      tags:
      - Subscriptions
    put:
      description: "The Device Management Connect eventing model consists of observable\
        \ resources.\n\nThis means that endpoints can deliver updated resource content,\
        \ periodically or with a more sophisticated\nsolution-dependent logic. The\
        \ OMA LwM2M resource model including objects, object instances,\nresources\
        \ and resource instances is also supported.\n\nApplications can subscribe\
        \ to objects, object instances or individual resources to make the device\n\
        to provide value change notifications to Device Management Connect service.\
        \ An application needs to call a\n`/notification/callback` method to get Device\
        \ Management Connect to push notifications of the resource changes.\n\n**Notification\
        \ rules**\n\nA web application can place dynamic observation rules for individual\
        \ Object Instances and Resources\nto define when the device sends observations.\
        \ More information in [Notification rules](/docs/current/connecting/resource-change-webapp.html).\n\
        \nAll manual subscriptions are removed during a full device registration and\
        \ applications need to\nre-subscribe at that point. To avoid this, you can\
        \ use `/subscriptions` to set a pre-subscription.\n\n**Example usage:**\n\n\
        \    curl -X PUT \\\n      https://api.us-east-1.mbedcloud.com/v2/subscriptions/{device-id}/{resourcePath}\
        \ \\\n      -H 'authorization: Bearer {api-key}'\n"
      operationId: addResourceSubscription
      parameters:
      - description: 'A unique Device Management device ID for the endpoint. Note
          that the ID must be an exact match. You cannot use wildcards here.

          '
        in: path
        name: device-id
        required: true
        type: string
      - description: 'The URL of the resource.

          '
        in: path
        name: resourcePath
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: Successfully subscribed.
        202:
          description: Accepted. Returns an asynchronous response ID that is used
            to reference the future asynchronous response.
          schema:
            $ref: '#/definitions/AsyncID'
        404:
          description: Endpoint or its resource not found.
        412:
          description: Precondition failed. Cannot make a subscription for a non-observable
            resource. (Through AsyncIDResponse)
        429:
          description: Cannot make a request at the moment; the queue is full or it
            was cleared because the endpoint made a full registration.
        502:
          description: Subscription failed, endpoint not connected.
        503:
          description: Subscription could not be established because the endpoint
            is currently unavailable. (Through AsyncIDResponse)
        504:
          description: Subscription could not be established due to a time-out from
            the endpoint. (Through AsyncIDResponse)
      summary: Subscribe to a resource path
      tags:
      - Subscriptions
  /v3/accounts:
    get:
      description: 'Returns an array of account objects, optionally filtered by status
        and tier level.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts -H ''Authorization:
        Bearer API_KEY''`.'
      operationId: getAllAccounts
      parameters:
      - description: An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED
          or SUSPENDED.
        in: query
        name: status__eq
        required: false
        type: string
      - description: An optional filter for getting accounts with a specified set
          of statuses.
        in: query
        name: status__in
        required: false
        type: string
      - description: An optional filter for excluding accounts with a specified set
          of statuses.
        in: query
        name: status__nin
        required: false
        type: string
      - description: An optional filter for tier level, must be 0, 1, 2, 98, 99 or
          omitted.
        in: query
        name: tier__eq
        required: false
        type: string
      - description: An optional filter for parent account ID.
        in: query
        name: parent__eq
        required: false
        type: string
      - description: An optional filter for account end market.
        in: query
        name: end_market__eq
        required: false
        type: string
      - description: 'An optional filter for account country. Finds all matches where
          the filter value is a case insensitive substring of the result. Example:
          country__like=LAND matches Ireland.'
        in: query
        name: country__like
        required: false
        type: string
      - default: 1000
        description: The number of results to return (2-1000), default is 1000.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC.
          Default value is ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          limits, policies, sub_accounts'
        in: query
        name: include
        required: false
        type: string
      - description: 'Format information for the response to the query, supported:
          format=breakdown.'
        in: query
        name: format
        required: false
        type: string
      - description: Property name to be returned from account specific properties.
        in: query
        name: properties
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AccountInfoList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all accounts.
      tags:
      - Aggregator Account Admin
    post:
      consumes:
      - application/json
      description: 'An endpoint for creating a new account.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts -d ''{"display_name":
        "MyAccount1", "admin_name": "accountAdmin1", "email": "example_admin@myaccount.info",
        "country": "United Kingdom", "end_market": "Smart City", "address_line1":
        "110 Fulbourn Rd", "city": "Cambridge", "contact": "J. Doe", "company": "Arm"}''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: createAccount
      parameters:
      - description: Details of the account to be created.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/AccountCreationReq'
      - default: create
        description: Action, either 'create' or 'enroll'. <ul><li>'create' creates
          the account where its admin user has ACTIVE status if admin_password was
          defined in the request, or RESET status if no admin_password was defined.
          If the user already exists, its status is not modified. </li><li>'enroll'
          creates the account where its admin user has ENROLLING status. If the user
          already exists, its status is not modified. Email to finish the enrollment
          or to notify the existing user about the new account is sent to the admin_email
          defined in the request. </li></ul>
        in: query
        name: action
        required: false
        type: string
      produces:
      - application/json
      responses:
        '201':
          description: Successful operation.
          schema:
            $ref: '#/definitions/AccountInfo'
        '400':
          description: Error in input data, for example invalid username.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new account.
      tags:
      - Aggregator Account Admin
  /v3/accounts/me:
    get:
      description: 'Returns detailed information about the account.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/me?include=policies
        -H ''Authorization: Bearer API_KEY''`.'
      operationId: getMyAccountInfo
      parameters:
      - description: 'Comma separated additional data to return. Currently supported:
          limits, policies, sub_accounts.'
        in: query
        name: include
        required: false
        type: string
      - description: Property name to be returned from account specific properties.
        in: query
        name: properties
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/AccountInfo'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get account info.
      tags:
      - Developer
    put:
      consumes:
      - application/json
      description: 'An endpoint for updating the account.


        **Example usage:**

        `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/me -d ''{"phone_number":
        "12345678"}'' -H ''content-type: application/json'' -H ''Authorization: Bearer
        API_KEY''`'
      operationId: updateMyAccount
      parameters:
      - description: Details of the account to be updated.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/AccountUpdateReq'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AccountInfo'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Updates attributes of the account.
      tags:
      - Account Admin
  /v3/accounts/me/notifications:
    get:
      description: Endpoint for retrieving notifications.
      operationId: getNofificationEntries
      parameters:
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/NotificationEntryList'
        '400':
          description: Error in input data, missing or invalid parameters.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the notification events of an account.
      tags:
      - Account Admin
  /v3/accounts/{account_id}:
    get:
      description: 'Returns detailed information about the account.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id} -H ''Authorization:
        Bearer API_KEY''`.'
      operationId: getAccountInfo
      parameters:
      - description: The ID of the account to be fetched.
        in: path
        name: account_id
        required: true
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          limits, policies, sub_accounts'
        in: query
        name: include
        required: false
        type: string
      - description: Property name to be returned from account specific properties.
        in: query
        name: properties
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AccountInfo'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get account info.
      tags:
      - Aggregator Account Admin
    put:
      consumes:
      - application/json
      description: 'An endpoint for updating an account.


        **Example usage:**

        `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}
        -d ''{"phone_number": "12345678"}'' -H ''content-type: application/json''
        -H ''Authorization: Bearer API_KEY''`'
      operationId: updateAccount
      parameters:
      - description: The ID of the account to be updated.
        in: path
        name: account_id
        required: true
        type: string
      - description: Details of the account to be updated.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/AccountUpdateRootReq'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AccountInfo'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update attributes of an existing account.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/api-keys:
    get:
      description: 'An endpoint for retrieving the API keys in an array, optionally
        filtered by the owner.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getAllAccountApiKeys
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: API key filter. Do not include the private part of the API key
          (the last 32 characters).
        in: query
        name: key__eq
        required: false
        type: string
      - description: Owner name filter.
        in: query
        name: owner__eq
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiKeyInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all API keys.
      tags:
      - Aggregator Account Admin
    post:
      consumes:
      - application/json
      description: 'An endpoint for creating a new API key. There is no default value
        for the owner ID and it must be from the same account where the new API key
        is created.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys
        -d ''{"name": "MyKey1"}'' -H ''content-type: application/json'' -H ''Authorization:
        Bearer API_KEY''`'
      operationId: createAccountApiKey
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: Details of the API key to be created.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ApiKeyInfoReq'
      produces:
      - application/json
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data, for example missing display name.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new API key.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/api-keys/{apikey_id}:
    delete:
      description: 'An endpoint for deleting an API key.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: deleteAccountApiKey
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the API key to be deleted.
        in: path
        name: apikey_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete the API key.
      tags:
      - Aggregator Account Admin
    get:
      description: 'An endpoint for retrieving API key details.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getAccountApiKey
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the API key to be retrieved.
        in: path
        name: apikey_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get API key details.
      tags:
      - Aggregator Account Admin
    put:
      description: 'An endpoint for updating API key details.


        **Example usage:**

        `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}
        -d ''{"name": "TestApiKey25"}'' -H ''content-type: application/json'' -H ''Authorization:
        Bearer API_KEY''`'
      operationId: updateAccountApiKey
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the API key to be updated.
        in: path
        name: apikey_id
        required: true
        type: string
      - description: New API key attributes to be stored.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ApiKeyUpdateReq'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data, for example missing display name.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account ID or API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update API key details.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/api-keys/{apikey_id}/groups:
    delete:
      consumes:
      - application/json
      description: 'An endpoint for removing API key from groups.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}/groups
        -d ''["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: removeAccountApiKeyFromGroups
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the API key to be removed from the group.
        in: path
        name: apikey_id
        required: true
        type: string
      - description: A list of IDs of the groups to be updated.
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or an API key with the specified ID does not exist
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove API key from groups.
      tags:
      - Aggregator Account Admin
    get:
      description: 'An endpoint for retrieving groups of the API key.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}/groups
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getGroupsOfAccountApikey
      parameters:
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the API key whose details are retrieved.
        in: path
        name: apikey_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or an API key with the specified ID does not exist
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get groups of the API key.
      tags:
      - Aggregator Account Admin
    post:
      consumes:
      - application/json
      description: 'An endpoint for adding API key to groups.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}/groups
        -d ''["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: addAccountApiKeyToGroups
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the API key to be added to the group.
        in: path
        name: apikey_id
        required: true
        type: string
      - description: A list of IDs of the groups to be updated.
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or an API key with the specified ID does not exist
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add API key to a list of groups.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/api-keys/{apikey_id}/reset-secret:
    post:
      description: 'An endpoint for resetting the secret key of the API key.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}/reset-secret
        -H ''Authorization: Bearer API_KEY''`'
      operationId: resetAccountApiKeySecret
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the API key to be reset.
        in: path
        name: apikey_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Reset the secret key.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/branding-colors/dark:
    get:
      description: "Returns the branding colors of the dark theme. \n\n**Example usage:**\n\
        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/dark\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getAccountDarkColors
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColorList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding colors of the dark theme.
      tags:
      - Aggregator Account Admin
    put:
      consumes:
      - application/json
      description: "An endpoint for updating an array of branding colors in the dark\
        \ theme. \n\n**Example usage:**\n`curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id)/branding-colors/dark\
        \ '[{ \"reference\": \"primary\",\n   \"color\": \"#f3f93e\" }]' -H 'content-type:\
        \ application/json' -H 'Authorization: Bearer API_KEY'`"
      operationId: bulkSetAccountDarkColors
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: List of branding colors.
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/BrandingColor'
          type: array
      produces:
      - application/json
      responses:
        '204':
          description: Colors have been set successfully.
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Updates an array of branding colors in the dark theme.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/branding-colors/dark/{reference}:
    delete:
      description: "Resets the branding color to its default in the dark theme. \n\
        \n**Example usage:**\n`curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/light/{reference}\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: resetAccountDarkColor
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColor'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Reset branding color to default.
      tags:
      - Aggregator Account Admin
    get:
      description: "Returns the requested branding color of the dark theme. \n\n**Example\
        \ usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/dark/{reference}\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getAccountDarkColor
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColor'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding color of the dark theme.
      tags:
      - Aggregator Account Admin
    put:
      consumes:
      - application/json
      description: "An endpoint for updating a branding color in the dark theme. \n\
        \n**Example usage:**\n`curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id)/branding-colors/dark/primary\
        \ -d '{ \"color\": \"#f3f93e\" }' -H 'content-type: application/json' -H 'Authorization:\
        \ Bearer API_KEY'`"
      operationId: setAccountDarkColor
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      - description: The branding color.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/BrandingColor'
      produces:
      - application/json
      responses:
        '200':
          description: Color has been set successfully.
          schema:
            $ref: '#/definitions/BrandingColor'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Updates a branding color in the dark theme.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/branding-colors/light:
    get:
      description: "Returns the branding colors of the light theme. \n\n**Example\
        \ usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/light\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getAccountLightColors
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColorList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding colors of the light theme.
      tags:
      - Aggregator Account Admin
    put:
      consumes:
      - application/json
      description: "An endpoint for updating an array of branding colors in the light\
        \ theme. \n\n**Example usage:**\n`curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id)/branding-colors/light\
        \ '[{ \"reference\": \"primary\",\n   \"color\": \"purple\" }]' -H 'content-type:\
        \ application/json' -H 'Authorization: Bearer API_KEY'`"
      operationId: bulkSetAccountLightColors
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: List of branding colors.
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/BrandingColor'
          type: array
      produces:
      - application/json
      responses:
        '204':
          description: Colors have been set successfully.
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Updates an array of branding colors in the light theme.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/branding-colors/light/{reference}:
    delete:
      description: "Resets the branding color to its default in the light theme. \n\
        \n**Example usage:**\n`curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/light/{reference}\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: resetAccountLightColor
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColor'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Reset branding color to default.
      tags:
      - Aggregator Account Admin
    get:
      description: "Returns the requested branding color of the light theme. \n\n\
        **Example usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/light/{reference}\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getAccountLightColor
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColor'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding color of the light theme.
      tags:
      - Aggregator Account Admin
    put:
      consumes:
      - application/json
      description: "An endpoint for updating a branding color in the light theme.\
        \ \n\n**Example usage:**\n`curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id)/branding-colors/light/primary\
        \ -d '{ \"color\": \"purple\" }' -H 'content-type: application/json' -H 'Authorization:\
        \ Bearer API_KEY'`"
      operationId: setAccountLightColor
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      - description: The branding color.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/BrandingColor'
      produces:
      - application/json
      responses:
        '200':
          description: Color has been set successfully.
          schema:
            $ref: '#/definitions/BrandingColor'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Updates a branding color in the light theme.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/branding-images/dark:
    get:
      description: "Returns the metadata of all branding images in the dark theme.\
        \ \n\n**Example usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getAllAccountDarkImageData
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingImageList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of all images in the dark theme.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/branding-images/dark/{reference}:
    get:
      description: "An endpoint for getting metadata of one account branding image\
        \ in the dark theme. \n\n**Example usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark/{reference}\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getAccountDarkImageData
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: Name of the branding images (icon or picture).
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingImage'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of an image in the dark theme.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/branding-images/dark/{reference}/clear:
    post:
      description: "An endpoint for reverting an account branding image to default\
        \ in the dark theme. \n\n**Example usage:**\n`curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark/{reference}/clear\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: clearAccountDarkImage
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: Name of the branding images (icon or picture).
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Image has been reverted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Revert an image to default in the dark theme.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/branding-images/dark/{reference}/upload:
    post:
      consumes:
      - image/png
      - image/jpeg
      description: "An endpoint for uploading a new account branding image in the\
        \ dark theme in PNG or JPEG format. \n\n**Example usage:**\n`curl -X POST\
        \ https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark/{reference}/upload\
        \ -H 'content-type: image/png' -H 'Authorization: Bearer API_KEY' --data-binary\
        \ 'myimage.png'`"
      operationId: uploadAccountDarkImage
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: Name of the branding images (icon or picture).
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      - description: The image in PNG or JPEG format.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Image'
      produces:
      - application/json
      responses:
        '201':
          description: Image has been uploaded successfully.
          headers:
            Content-Location:
              description: Location of the image metadata.
              type: string
            Location:
              description: Location of the image binary.
              type: string
          schema:
            $ref: '#/definitions/BrandingImage'
        '400':
          description: Error in input data format, e.g. image is too large.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Upload an image in the dark theme.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/branding-images/light:
    get:
      description: "Returns the metadata of all branding images in the light theme.\
        \ \n\n**Example usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getAllAccountLightImageData
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingImageList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of all images in the light theme.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/branding-images/light/{reference}:
    get:
      description: "An endpoint for getting metadata of one account branding image\
        \ in the light theme. \n\n**Example usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light/{reference}\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getAccountLightImageData
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: Name of the branding images (icon or picture).
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingImage'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of an image in the light theme.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/branding-images/light/{reference}/clear:
    post:
      description: "An endpoint for reverting an account branding image to default\
        \ in the light theme. \n\n**Example usage:**\n`curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light/{reference}/clear\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: clearAccountLightImage
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: Name of the branding images (icon or picture).
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Image has been reverted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Revert an image to default in the light theme.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/branding-images/light/{reference}/upload:
    post:
      consumes:
      - image/png
      - image/jpeg
      description: "An endpoint for uploading a new account branding image in the\
        \ light theme in PNG or JPEG format. \n\n**Example usage:**\n`curl -X POST\
        \ https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light/{reference}/upload\
        \ -H 'content-type: image/png' -H 'Authorization: Bearer API_KEY' --data-binary\
        \ 'myimage.png'`"
      operationId: uploadAccountLightImage
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: Name of the branding images (icon or picture).
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      - description: The image in PNG or JPEG format.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Image'
      produces:
      - application/json
      responses:
        '201':
          description: Image has been uploaded successfully.
          headers:
            Content-Location:
              description: Location of the image metadata.
              type: string
            Location:
              description: Location of the image binary.
              type: string
          schema:
            $ref: '#/definitions/BrandingImage'
        '400':
          description: Error in input data format, e.g. image is too large.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Upload an image in the light theme.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/identity-providers:
    get:
      consumes:
      - application/json
      description: An endpoint for retrieving identity providers in an array.
      operationId: getAllAccountIdentityProviders
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          default ASC.
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count.'
        in: query
        name: include
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all identity providers.
      tags:
      - Aggregator Account Admin
    post:
      consumes:
      - application/json
      description: An endpoint for creating a new identity provider.
      operationId: createAccountIdentityProvider
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: Details of the identity provider to be created.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/IdentityProviderCreationReq'
      produces:
      - application/json
      responses:
        '201':
          description: New entity created.
          headers:
            Content-Location:
              description: /v3/accounts/{account_id}/identity-providers/{identity_provider_id}
              type: string
            Location:
              description: /v3/accounts/{account_id}/identity-providers/{identity_provider_id}
              type: string
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: Error in input data, for example too long name.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new identity provider.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/identity-providers/{identity_provider_id}:
    delete:
      description: An endpoint for deleting an identity provider by ID.
      operationId: deleteAccountIdentityProvider
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the identity provider to be deleted.
        in: path
        name: identity_provider_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden or identity provider is in use.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account or identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete an identity provider by ID.
      tags:
      - Aggregator Account Admin
    get:
      description: An endpoint for retrieving an identity provider by ID.
      operationId: getAccountIdentityProvider
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the identity provider to be retrieved.
        in: path
        name: identity_provider_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account or identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get identity provider by ID.
      tags:
      - Aggregator Account Admin
    put:
      consumes:
      - application/json
      description: An endpoint for updating an existing identity provider.
      operationId: updateAccountIdentityProvider
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the identity provider to be updated.
        in: path
        name: identity_provider_id
        required: true
        type: string
      - description: Details of the identity provider to be updated.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/IdentityProviderUpdateReq'
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: Error in input data, for example missing name.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account or identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update an existing identity provider.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/identity-providers/{identity_provider_id}/generate-sp-certificate:
    post:
      consumes:
      - application/json
      description: An endpoint for generating a new service provider certificate.
      operationId: generateAccountSpCertificate
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the identity provider to which the certificate should
          be generated for.
        in: path
        name: identity_provider_id
        required: true
        type: string
      - description: Details of the service provider certificate to be generated.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CertificateGenerationReq'
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: Error in input data, for example invalid certificate validity
            value.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account or identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Generate a new service provider certificate.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/notifications:
    get:
      description: Endpoint for retrieving notifications.
      operationId: getAccountNofificationEntries
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/NotificationEntryList'
        '400':
          description: Error in input data, missing or invalid parameters.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the notification events of an account.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/policy-groups:
    get:
      description: 'An endpoint for retrieving all group information.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getAllAccountGroups
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: Filter for group name
        in: query
        name: name__eq
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all group information.
      tags:
      - Aggregator Account Admin
    post:
      consumes:
      - application/json
      description: 'An endpoint for creating a new group.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups
        -d ''{"name": "MyGroup1"}'' -H ''content-type: application/json'' -H ''Authorization:
        Bearer API_KEY''`'
      operationId: createAccountGroup
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: Details of the group to be created.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GroupCreationInfo'
      produces:
      - application/json
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: Error in input data, for example invalid group name.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A group with that name already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new group.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/policy-groups/{group_id}:
    delete:
      description: 'An endpoint for deleting a group.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: deleteAccountGroup
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the group to be deleted.
        in: path
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden or Administrators group cannot be removed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a group.
      tags:
      - Aggregator Account Admin
    get:
      description: 'An endpoint for getting general information about the group.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getAccountGroupSummary
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the group to be retrieved.
        in: path
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/GroupSummary'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or a group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get group information.
      tags:
      - Aggregator Account Admin
    post:
      consumes:
      - application/json
      description: 'An endpoint for adding users and API keys to groups.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}
        -d ''{"users": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]}''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: addSubjectsToAccountGroup
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the group to be updated.
        in: path
        name: group_id
        required: true
        type: string
      - description: A list of users and API keys to be added to the group.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/SubjectList'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data, for example the user or API key does not
            exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or a group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user of this API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add members to a group.
      tags:
      - Aggregator Account Admin
    put:
      consumes:
      - application/json
      description: 'An endpoint for updating a group name.


        **Example usage:**

        `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/
        -d ''{"name": "TestGroup2"}'' -H ''content-type: application/json'' -H ''Authorization:
        Bearer API_KEY''`'
      operationId: updateAccountGroupName
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the group to be updated.
        in: path
        name: group_id
        required: true
        type: string
      - description: Details of the group to be created.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GroupUpdateInfo'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data, for example the group name is too long.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update the group name.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/policy-groups/{group_id}/api-keys:
    delete:
      consumes:
      - application/json
      description: 'An endpoint for removing API keys from groups.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys
        -d ''{"apikeys": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]}''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: removeApiKeysFromAccountGroup
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the group from which the API keys are to be removed.
        in: path
        name: group_id
        required: true
        type: string
      - description: A list of API keys to be removed from the group.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/SubjectList'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data, for example the array of API keys is missing.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or a group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove API keys from a group.
      tags:
      - Aggregator Account Admin
    get:
      description: 'An endpoint for listing the API keys of the group with details.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getApiKeysOfAccountGroup
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the group whose API keys are retrieved.
        in: path
        name: group_id
        required: true
        type: string
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiKeyInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or a group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get API keys of a group.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/policy-groups/{group_id}/users:
    delete:
      consumes:
      - application/json
      description: 'An endpoint for removing users from groups.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/users
        -d ''{"users": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]}''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: removeUsersFromAccountGroup
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the group from which the users are to be removed.
        in: path
        name: group_id
        required: true
        type: string
      - description: A list of users to be removed from the group.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/SubjectList'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data, for example the last user to be removed
            from Administrators group.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or a group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove users from a group.
      tags:
      - Aggregator Account Admin
    get:
      description: 'An endpoint for listing users of the group with details.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/users
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getUsersOfAccountGroup
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the group whose users are retrieved.
        in: path
        name: group_id
        required: true
        type: string
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: An optional filter for getting users by status.
        in: query
        name: status__eq
        required: false
        type: string
      - description: An optional filter for getting users with a specified set of
          statuses.
        in: query
        name: status__in
        required: false
        type: string
      - description: An optional filter for excluding users with a specified set of
          statuses.
        in: query
        name: status__nin
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UserInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or a group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get users of a group.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/trusted-certificates:
    get:
      description: 'An endpoint for retrieving trusted certificates in an array.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getAllAccountCertificates
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: Filter for certificate name
        in: query
        name: name__eq
        required: false
        type: string
      - description: Filter for service
        in: query
        name: service__eq
        required: false
        type: string
      - description: Filter for expire
        format: int32
        in: query
        name: expire__eq
        required: false
        type: integer
      - description: Filter for developer certificates
        format: int32
        in: query
        name: device_execution_mode__eq
        required: false
        type: integer
      - description: Filter for not developer certificates
        format: int32
        in: query
        name: device_execution_mode__neq
        required: false
        type: integer
      - description: Owner name filter
        in: query
        name: owner__eq
        required: false
        type: string
      - description: Enrollment mode filter
        in: query
        name: enrollment_mode__eq
        required: false
        type: boolean
      - description: Filter for certificate status
        in: query
        name: status__eq
        required: false
        type: string
      - description: 'Filter for issuer. Finds all matches where the filter value
          is a case insensitive substring of the result. Example: issuer__like=cn=iss
          matches CN=issuer.'
        in: query
        name: issuer__like
        required: false
        type: string
      - description: 'Filter for subject. Finds all matches where the filter value
          is a case insensitive substring of the result. Example: subject__like=cn=su
          matches CN=subject.'
        in: query
        name: subject__like
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/TrustedCertificateRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden, only available for admins of commercial accounts.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all trusted certificates.
      tags:
      - Aggregator Account Admin
    post:
      consumes:
      - application/json
      description: 'An endpoint for uploading new trusted certificates.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates
        -d {"name": "myCert1", "description": "very important cert", "certificate":
        "certificate_data", "service": "lwm2m"} -H ''content-type: application/json''
        -H ''Authorization: Bearer API_KEY''`'
      operationId: addAccountCertificate
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: A trusted certificate object with attributes, signature is optional.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/TrustedCertificateReq'
      produces:
      - application/json
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '400':
          description: Invalid certificate data, certificate validation failed, certificate
            already expired or certificate uses unsupported, weak cipher.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden, only available for admins of commercial accounts.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Upload new trusted certificate.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/trusted-certificates/{cert_id}:
    delete:
      description: 'An endpoint for deleting the trusted certificate.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: deleteAccountCertificate
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the trusted certificate to be deleted.
        in: path
        name: cert_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden, only available for admins of commercial accounts.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account or certificate with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete trusted certificate by ID.
      tags:
      - Aggregator Account Admin
    get:
      description: 'An endpoint for retrieving a trusted certificate by ID.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getAccountCertificate
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the trusted certificate to be retrieved.
        in: path
        name: cert_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden, only available for admins of commercial accounts.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account or certificate with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get trusted certificate by ID.
      tags:
      - Aggregator Account Admin
    put:
      consumes:
      - application/json
      description: 'An endpoint for updating existing trusted certificates.


        **Example usage:**

        `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id}
        -d {"description": "very important cert"} -H ''content-type: application/json''
        -H ''Authorization: Bearer API_KEY''`'
      operationId: updateAccountCertificate
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the trusted certificate to be updated.
        in: path
        name: cert_id
        required: true
        type: string
      - description: A trusted certificate object with attributes.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/TrustedCertificateUpdateReq'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '400':
          description: Invalid certificate data, certificate validation failed, certificate
            already expired or certificate uses unsupported, weak cipher.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden, only available for admins of commercial accounts.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or certificate with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update trusted certificate.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/user-invitations:
    get:
      description: 'An endpoint for retrieving the details of all the active user
        invitations sent for new or existing users to join the account.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getAllAccountInvitations
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: Filter for getting user invitations by a specified login profile.
        in: query
        name: login_profile__eq
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInvitationRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the details of all the user invitations.
      tags:
      - Aggregator Account Admin
    post:
      consumes:
      - application/json
      description: 'An endpoint for inviting a new or an existing user to join the
        account.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accouns/{account_id}/user-invitations
        -d {"email": "myemail@company.com"} -H ''content-type: application/json''
        -H ''Authorization: Bearer API_KEY''`'
      operationId: createAccountInvitation
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: A user invitation object with attributes.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UserInvitationReq'
      produces:
      - application/json
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/UserInvitationResp'
        '400':
          description: Error in input data, for example an invalid email address.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a user invitation.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/user-invitations/{invitation_id}:
    delete:
      description: 'An endpoint for deleting an active user invitation which has been
        sent for a new or an existing user to join the account.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations/{invitation_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: deleteAccountInvitation
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the invitation to be deleted.
        in: path
        name: invitation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or an invitation with the specified ID does not
            exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a user invitation.
      tags:
      - Aggregator Account Admin
    get:
      description: 'An endpoint for retrieving the details of an active user invitation
        sent for a new or an existing user to join the account.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations/{invitation_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getAccountInvitation
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the invitation to be retrieved.
        in: path
        name: invitation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInvitationResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or an invitation with the specified ID does not
            exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Details of a user invitation.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/users:
    get:
      description: 'An endpoint for retrieving details of all users.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users -H
        ''Authorization: Bearer API_KEY''`'
      operationId: getAllAccountUsers
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: Filter for email address
        in: query
        name: email__eq
        required: false
        type: string
      - description: Filter for status
        in: query
        name: status__eq
        required: false
        type: string
      - description: An optional filter for getting users with a specified set of
          statuses.
        in: query
        name: status__in
        required: false
        type: string
      - description: An optional filter for excluding users with a specified set of
          statuses.
        in: query
        name: status__nin
        required: false
        type: string
      - description: An optional filter for getting users with a specified login profile.
        in: query
        name: login_profile__eq
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UserInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all user details.
      tags:
      - Aggregator Account Admin
    post:
      consumes:
      - application/json
      description: 'An endpoint for creating or inviting a new user to the account.
        In case of invitation email address is used only, other attributes are set
        in the 2nd step.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users
        -d {"email": "myemail@company.com"} -H ''content-type: application/json''
        -H ''Authorization: Bearer API_KEY''`'
      operationId: createAccountUser
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: A user object with attributes.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UserInfoReq'
      - default: create
        description: Create or invite user.
        in: query
        name: action
        required: false
        type: string
      produces:
      - application/json
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: Error in input data, for example an invalid email address.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A user with the given username or email already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new user.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/users/{user_id}:
    delete:
      description: 'An endpoint for deleting a user.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: deleteAccountUser
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the user to be deleted.
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Deleted successfully.
        '400':
          description: Bad request, for example trying to delete an active user.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or a user with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a user.
      tags:
      - Aggregator Account Admin
    get:
      description: 'An endpoint for retrieving details of the user.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getAccountUser
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the user to be retrieved.
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UserInfoResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or user with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Details of the user.
      tags:
      - Aggregator Account Admin
    put:
      consumes:
      - application/json
      description: 'An endpoint for updating user details.


        **Example usage:**

        `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}
        -d ''{"username": "myusername"}'' -H ''content-type: application/json'' -H
        ''Authorization: Bearer API_KEY''`'
      operationId: updateAccountUser
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the user to be updated.
        in: path
        name: user_id
        required: true
        type: string
      - description: A user object with attributes.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UserUpdateReq'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: Error in input data, for example an invalid email address.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or a user with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A user with the given username or email already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update user details.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/users/{user_id}/groups:
    delete:
      consumes:
      - application/json
      description: 'An endpoint for removing user from groups.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/groups
        -d ''["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: removeAccountUserFromGroups
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the user to be removed from the group.
        in: path
        name: user_id
        required: true
        type: string
      - description: A list of IDs of the groups to be updated.
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account, a user or a group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove user from groups.
      tags:
      - Aggregator Account Admin
    get:
      description: 'An endpoint for retrieving groups of the user.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/groups
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getGroupsOfAccountUser
      parameters:
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the user whose details are retrieved.
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or a user with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get groups of the user.
      tags:
      - Aggregator Account Admin
    post:
      consumes:
      - application/json
      description: 'An endpoint for adding user to groups.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/groups
        -d ''["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: addAccountUserToGroups
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the user to be added to the group.
        in: path
        name: user_id
        required: true
        type: string
      - description: A list of IDs of the groups to be updated.
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account, a user or a group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add user to a list of groups.
      tags:
      - Aggregator Account Admin
  /v3/accounts/{account_id}/users/{user_id}/validate-email:
    post:
      description: 'An endpoint for validating the user email.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/validate-email
        -H ''Authorization: Bearer API_KEY''`'
      operationId: validateAccountUserEmail
      parameters:
      - description: Account ID.
        in: path
        name: account_id
        required: true
        type: string
      - description: The ID of the user whose email is validated.
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Email validation successfully requested.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or a user with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Validate the user email.
      tags:
      - Aggregator Account Admin
  /v3/api-keys:
    get:
      description: 'An endpoint for retrieving API keys in an array, optionally filtered
        by the owner.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/api-keys -H ''Authorization:
        Bearer API_KEY''`'
      operationId: getAllApiKeys
      parameters:
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: API key filter. Do not include the private part of the API key
          (the last 32 characters).
        in: query
        name: key__eq
        required: false
        type: string
      - description: Owner name filter.
        in: query
        name: owner__eq
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all API keys
      tags:
      - Developer
    post:
      consumes:
      - application/json
      description: 'An endpoint for creating a new API key.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d ''{"name":
        "MyKey1"}'' -H ''content-type: application/json'' -H ''Authorization: Bearer
        API_KEY''`'
      operationId: createApiKey
      parameters:
      - description: The details of the API key to be created.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ApiKeyInfoReq'
      produces:
      - application/json
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data, for example missing display name.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new API key.
      tags:
      - Developer
  /v3/api-keys/me:
    get:
      description: 'An endpoint for retrieving API key details.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me -H ''Authorization:
        Bearer API_KEY''`'
      operationId: getMyApiKey
      parameters: []
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get API key details.
      tags:
      - Developer
    put:
      description: 'An endpoint for updating API key details.


        **Example usage:**

        `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/me -d ''{"name":
        "TestApiKey25"}'' -H ''content-type: application/json'' -H ''Authorization:
        Bearer API_KEY''`'
      operationId: updateMyApiKey
      parameters:
      - description: New API key attributes to be stored.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ApiKeyUpdateReq'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data, for example missing display name.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update API key details.
      tags:
      - Developer
  /v3/api-keys/me/groups:
    delete:
      consumes:
      - application/json
      description: 'An endpoint for removing API key from groups.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups
        -d ''["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: removeMyApiKeyFromGroups
      parameters:
      - description: A list of IDs of the groups to be updated.
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove API key from groups.
      tags:
      - Developer
    get:
      description: 'An endpoint for retrieving groups of the API key.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups -H ''Authorization:
        Bearer API_KEY''`'
      operationId: getGroupsOfMyApiKey
      parameters:
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get groups of the API key.
      tags:
      - Developer
    post:
      consumes:
      - application/json
      description: 'An endpoint for adding API key to groups.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups -d
        ''["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: addMyApiKeyToGroups
      parameters:
      - description: A list of IDs of the groups to be updated.
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add API key to a list of groups.
      tags:
      - Developer
  /v3/api-keys/{apikey_id}:
    delete:
      description: 'An endpoint for deleting the API key.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: deleteApiKey
      parameters:
      - description: The ID of the API key to be deleted.
        in: path
        name: apikey_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete API key.
      tags:
      - Developer
    get:
      description: 'An endpoint for retrieving API key details.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} -H ''Authorization:
        Bearer API_KEY''`'
      operationId: getApiKey
      parameters:
      - description: The ID of the API key to be retrieved.
        in: path
        name: apikey_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get API key details.
      tags:
      - Developer
    put:
      description: 'An endpoint for updating API key details.


        **Example usage:**

        `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} -d
        ''{"name": "TestApiKey25"}'' -H ''content-type: application/json'' -H ''Authorization:
        Bearer API_KEY''`'
      operationId: updateApiKey
      parameters:
      - description: The ID of the API key to be updated.
        in: path
        name: apikey_id
        required: true
        type: string
      - description: New API key attributes to be stored.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ApiKeyUpdateReq'
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data, for example missing display name.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update API key details.
      tags:
      - Developer
  /v3/api-keys/{apikey_id}/groups:
    delete:
      consumes:
      - application/json
      description: 'An endpoint for removing API key from groups.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id}/groups
        -d ''["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: removeApiKeyFromGroups
      parameters:
      - description: The ID of the API key to be removed from the group.
        in: path
        name: apikey_id
        required: true
        type: string
      - description: A list of IDs of the groups to be updated.
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data,.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An API key with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove API key from groups.
      tags:
      - Account Admin
    get:
      description: 'An endpoint for retrieving groups of the API key.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id}/groups -H
        ''Authorization: Bearer API_KEY''`'
      operationId: getGroupsOfApikey
      parameters:
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: The ID of the API key whose details are retrieved.
        in: path
        name: apikey_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An API key with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get groups of the API key.
      tags:
      - Account Admin
    post:
      consumes:
      - application/json
      description: 'An endpoint for adding API key to groups.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id}/groups
        -d ''["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: addApiKeyToGroups
      parameters:
      - description: The ID of the API key to be added to the group.
        in: path
        name: apikey_id
        required: true
        type: string
      - description: A list of IDs of the groups to be updated.
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group or an API key with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add API key to a list of groups.
      tags:
      - Account Admin
  /v3/billing-report:
    get:
      description: "Fetch the billing report generated for the currently authenticated\
        \ commercial non-subtenant account.\nBilling reports for subtenant accounts\
        \ are included in their aggregator's billing report response.\n\n**Example\
        \ usage:**\n\n    curl -X GET https://api.us-east-1.mbedcloud.com/v3/billing-report?month=2018-07\
        \ -H 'authorization: Bearer {api-key}'"
      operationId: getBillingReport
      parameters:
      - description: Queried year and month of billing report.
        in: query
        name: month
        pattern: ^\d{4}-\d{2}$
        required: true
        type: string
      responses:
        200:
          description: Billing report response object.
          examples:
            application/json:
              account:
                address_line1: null
                address_line2: null
                city: null
                company: example-company
                contact: null
                country: null
                email: null
                id: example-account
                phone_number: null
                postal_code: null
                state: null
              aggregated:
                active_devices: 600
                firmware_updates: 600
                generated: '2016-09-21T14:11:34.131Z'
                period_end: '2016-09-30T23:59:59.999Z'
                period_start: 2016-09-01T00:00.000Z
              billing_data:
                active_devices: 100
                firmware_updates: 100
                generated: '2016-09-21T14:11:34.131Z'
                period_end: '2016-09-30T23:59:59.999Z'
                period_start: 2016-09-01T00:00.000Z
              id: 6cae0aec221911e88f227f51b2f005c0
              month: 2016-09
              object: billing-report
              service_package:
                aggregated_quota_usage:
                - account_id: example-account
                  amount: 1000
                  campaign_name: null
                  time: 2016-09-01T00:00.000Z
                  type: package_creation
                - account_id: example-account
                  amount: -50
                  campaign_name: example-account-campaign-name
                  time: 2016-09-02T00:00.000Z
                  type: reservation
                - account_id: example-subtenant-account-1
                  amount: -20
                  campaign_name: example-subtenant-account-1-campaign-name
                  time: 2016-09-03T00:00.000Z
                  type: reservation
                - account_id: example-subtenant-account-2
                  amount: -30
                  campaign_name: example-subtenant-account-2-campaign-name
                  time: 2016-09-04T00:00.000Z
                  type: reservation
                metadata:
                  end_time: null
                  remaining_quota: 1000
                  reserved_quota: 100
                  start_time: 2016-09-01T00:00.000Z
                quota_usage:
                - amount: 1000
                  campaign_name: null
                  time: 2016-09-01T00:00.000Z
                  type: package_creation
                - amount: -50
                  campaign_name: example-account-campaign-name
                  time: 2016-09-02T00:00.000Z
                  type: reservation
              subtenants:
              - account:
                  address_line1: null
                  address_line2: null
                  city: null
                  company: example-subtenant-company-1
                  contact: null
                  country: null
                  customer_subtenant_id: example-customer-subtenant-id-1
                  email: null
                  id: example-subtenant-account-1
                  phone_number: null
                  postal_code: null
                  state: null
                billing_data:
                  active_devices: 200
                  firmware_updates: 200
                  generated: '2016-09-21T14:11:34.131Z'
                  period_end: '2016-09-30T23:59:59.999Z'
                  period_start: 2016-09-01T00:00.000Z
                service_package:
                  quota_usage:
                  - amount: -20
                    campaign_name: example-subtenant-account-1-campaign-name
                    time: 2016-09-03T00:00.000Z
                    type: reservation
              - account:
                  address_line1: null
                  address_line2: null
                  city: null
                  company: example-subtenant-company-2
                  contact: null
                  country: null
                  customer_subtenant_id: example-customer-subtenant-id-2
                  email: null
                  id: example-subtenant-account-2
                  phone_number: null
                  postal_code: null
                  state: null
                billing_data:
                  active_devices: 300
                  firmware_updates: 300
                  generated: '2016-09-21T14:11:34.131Z'
                  period_end: '2016-09-30T23:59:59.999Z'
                  period_start: 2016-09-01T00:00.000Z
                service_package:
                  quota_usage:
                  - amount: -30
                    campaign_name: example-subtenant-account-2-campaign-name
                    time: 2016-09-04T00:00.000Z
                    type: reservation
          schema:
            $ref: '#/definitions/ReportResponse'
        400:
          description: Bad Request.
          examples:
            application/json:
              code: 400
              fields:
              - message: Parameter missing.
                name: month
              message: One of the request fields has failed validation.
              object: error
              request_id: example-request-id
              type: validation_error
          schema:
            $ref: '#/definitions/BadRequestErrorResponse'
        401:
          description: Unauthorized access.
          examples:
            application/json:
              code: 401
              message: Access is denied.
              object: error
              request_id: example-request-id
              type: unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedErrorResponse'
        403:
          description: Access forbidden if account is not commercial or subtenant.
          examples:
            application/json:
              code: 403
              message: Account is not a commercial account.
              object: error
              request_id: example-request-id
              type: forbidden
          schema:
            $ref: '#/definitions/ForbiddenErrorResponse'
        404:
          description: Billing report must not be found if requested month is current
            or is in future. Also could not be available for previous months in special
            cases.
          examples:
            application/json:
              code: 404
              message: Billing report not yet available.
              object: error
              request_id: example-request-id
              type: report_not_found
          schema:
            $ref: '#/definitions/ReportNotFoundErrorResponse'
        500:
          description: Internal Server Error.
          examples:
            application/json:
              code: 500
              message: Unexpected internal server error.
              object: error
              request_id: example-request-id
              type: internal_error
          schema:
            $ref: '#/definitions/InternalServerErrorResponse'
      summary: Get billing report.
  /v3/billing-report-active-devices:
    get:
      description: "Fetch the raw billing data of the active devices for the currently\
        \ authenticated commercial non-subtenant account.\nThis is supplementary data\
        \ for the billing report. The raw billing data of the active devices for subtenant\
        \ accounts\nare included in their aggregator's raw billing data of the active\
        \ devices.\nThe endpoint returns the URL to download the gzipped CSV file.\
        \ The first line is the header providing information on the active devices.\n\
        For example, the ID of an active device.\n\n**Example usage:**\n\n    curl\
        \ -X GET https://api.us-east-1.mbedcloud.com/v3/billing-report-active-devices?month=2018-07\
        \ -H 'authorization: Bearer {api-key}'"
      operationId: getBillingReportActiveDevices
      parameters:
      - description: Queried year and month of billing report.
        in: query
        name: month
        pattern: ^\d{4}-\d{2}$
        required: true
        type: string
      responses:
        200:
          description: The response includes the URL to download the raw billing data
            of the active devices.
          examples:
            application/json:
              filename: example.csv.gz
              object: billing-report-active-devices
              url: https://example.com/example.csv.gz
          schema:
            $ref: '#/definitions/BillingReportRawDataResponse'
        400:
          description: Bad Request.
          examples:
            application/json:
              code: 400
              fields:
              - message: Parameter missing.
                name: month
              message: One of the request fields has failed validation.
              object: error
              request_id: example-request-id
              type: validation_error
          schema:
            $ref: '#/definitions/BadRequestErrorResponse'
        401:
          description: Unauthorized access.
          examples:
            application/json:
              code: 401
              message: Access is denied.
              object: error
              request_id: example-request-id
              type: unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedErrorResponse'
        403:
          description: Access forbidden if account is not commercial or subtenant.
          examples:
            application/json:
              code: 403
              message: Account is not a commercial account.
              object: error
              request_id: example-request-id
              type: forbidden
          schema:
            $ref: '#/definitions/ForbiddenErrorResponse'
        404:
          description: Active devices billing data not found.
          examples:
            application/json:
              code: 404
              message: Active devices billing data not yet available.
              object: error
              request_id: example-request-id
              type: report_not_found
          schema:
            $ref: '#/definitions/ReportNotFoundErrorResponse'
        500:
          description: Internal Server Error.
          examples:
            application/json:
              code: 500
              message: Unexpected internal server error.
              object: error
              request_id: example-request-id
              type: internal_error
          schema:
            $ref: '#/definitions/InternalServerErrorResponse'
      summary: Get raw billing data of the active devices for the month.
  /v3/billing-report-firmware-updates:
    get:
      description: "Fetch raw billing data of the firmware updates for the currently\
        \ authenticated commercial non-subtenant account.\nThis is supplementary data\
        \ for the billing report. The raw billing data of the firmware updates for\
        \ subtenant accounts\nare included in their aggregator's raw billing data\
        \ of the firmware updates.\nThe endpoint returns the URL to download the gzipped\
        \ CSV file. The first line is the header providing information on the firmware\
        \ updates.\nFor example, the ID of an firmware update.\n\n**Example usage:**\n\
        \n    curl -X GET https://api.us-east-1.mbedcloud.com/v3/billing-report-firmware-updates?month=2018-07\
        \ -H 'authorization: Bearer {api-key}'"
      operationId: getBillingReportFirmwareUpdates
      parameters:
      - description: Queried year and month of billing report.
        in: query
        name: month
        pattern: ^\d{4}-\d{2}$
        required: true
        type: string
      responses:
        200:
          description: The response includes the URL to download the raw billing data
            of the firmware updates.
          examples:
            application/json:
              filename: example.csv.gz
              object: billing-report-firmware-updates
              url: https://example.com/example.csv.gz
          schema:
            $ref: '#/definitions/BillingReportRawDataResponse'
        400:
          description: Bad Request.
          examples:
            application/json:
              code: 400
              fields:
              - message: Parameter missing.
                name: month
              message: One of the request fields has failed validation.
              object: error
              request_id: example-request-id
              type: validation_error
          schema:
            $ref: '#/definitions/BadRequestErrorResponse'
        401:
          description: Unauthorized access.
          examples:
            application/json:
              code: 401
              message: Access is denied.
              object: error
              request_id: example-request-id
              type: unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedErrorResponse'
        403:
          description: Access forbidden if account is not commercial or subtenant.
          examples:
            application/json:
              code: 403
              message: Account is not a commercial account.
              object: error
              request_id: example-request-id
              type: forbidden
          schema:
            $ref: '#/definitions/ForbiddenErrorResponse'
        404:
          description: Firmware updates billing data not found.
          examples:
            application/json:
              code: 404
              message: Firmware updates billing data not yet available.
              object: error
              request_id: example-request-id
              type: report_not_found
          schema:
            $ref: '#/definitions/ReportNotFoundErrorResponse'
        500:
          description: Internal Server Error.
          examples:
            application/json:
              code: 500
              message: Unexpected internal server error.
              object: error
              request_id: example-request-id
              type: internal_error
          schema:
            $ref: '#/definitions/InternalServerErrorResponse'
      summary: Get raw billing data of the firmware updates for the month.
  /v3/branding-colors/dark:
    get:
      description: "Returns the branding colors of the dark theme. \n\n**Example usage:**\n\
        `curl https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark -H 'Authorization:\
        \ Bearer API_KEY'`"
      operationId: getDarkColors
      parameters: []
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColorList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding colors of the dark theme.
      tags:
      - Developer
    put:
      consumes:
      - application/json
      description: "An endpoint for updating an array of branding colors in the dark\
        \ theme. \n\n**Example usage:**\n`curl -X PUT https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark\
        \ '[{ \"reference\": \"primary\",\n   \"color\": \"#f3f93e\" }]' -H 'content-type:\
        \ application/json' -H 'Authorization: Bearer API_KEY'`"
      operationId: bulkSetDarkColors
      parameters:
      - description: List of branding colors.
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/BrandingColor'
          type: array
      produces:
      - application/json
      responses:
        '204':
          description: Colors have been set successfully.
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Updates an array of branding colors in the dark theme.
      tags:
      - Account Admin
  /v3/branding-colors/dark/{reference}:
    delete:
      description: "Resets the branding color to its default in the dark theme. \n\
        \n**Example usage:**\n`curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/{reference}\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: resetDarkColor
      parameters:
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColor'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Reset branding color to default.
      tags:
      - Account Admin
    get:
      description: "Returns the requested branding color of the dark theme. \n\n**Example\
        \ usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark/{reference}\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getDarkColor
      parameters:
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColor'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding color of the dark theme.
      tags:
      - Developer
    put:
      consumes:
      - application/json
      description: "An endpoint for updating a branding color in the dark theme. \n\
        \n**Example usage:**\n`curl -X PUT https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark/primary\
        \ -d '{ \"color\": \"#f3f93e\" }' -H 'content-type: application/json' -H 'Authorization:\
        \ Bearer API_KEY'`"
      operationId: setDarkColor
      parameters:
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      - description: The branding color.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/BrandingColor'
      produces:
      - application/json
      responses:
        '200':
          description: Color has been set successfully.
          schema:
            $ref: '#/definitions/BrandingColor'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Updates a branding color in the dark theme.
      tags:
      - Account Admin
  /v3/branding-colors/light:
    get:
      description: "Returns the branding colors of the light theme. \n\n**Example\
        \ usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/branding-colors/light\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getLightColors
      parameters: []
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColorList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding colors of the light theme.
      tags:
      - Developer
    put:
      consumes:
      - application/json
      description: "An endpoint for updating an array of branding colors in the light\
        \ theme. \n\n**Example usage:**\n`curl -X PUT https://api.us-east-1.mbedcloud.com/v3/branding-colors/light\
        \ '[{ \"reference\": \"primary\",\n   \"color\": \"purple\" }]' -H 'content-type:\
        \ application/json' -H 'Authorization: Bearer API_KEY'`"
      operationId: bulkSetLightColors
      parameters:
      - description: List of branding colors.
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/BrandingColor'
          type: array
      produces:
      - application/json
      responses:
        '204':
          description: Colors have been set successfully.
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Updates an array of branding colors in the light theme.
      tags:
      - Account Admin
  /v3/branding-colors/light/{reference}:
    delete:
      description: "Resets the branding color to its default in the light theme. \n\
        \n**Example usage:**\n`curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/{reference}\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: resetLightColor
      parameters:
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColor'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Reset branding color to default.
      tags:
      - Account Admin
    get:
      description: "Returns the requested branding color of the light theme. \n\n\
        **Example usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/{reference}\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getLightColor
      parameters:
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingColor'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding color of the light theme.
      tags:
      - Developer
    put:
      consumes:
      - application/json
      description: "An endpoint for updating a branding color in the light theme.\
        \ \n\n**Example usage:**\n`curl -X PUT https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/primary\
        \ -d '{ \"color\": \"purple\" }' -H 'content-type: application/json' -H 'Authorization:\
        \ Bearer API_KEY'`"
      operationId: setLightColor
      parameters:
      - description: The name of the branding color.
        enum: *id012
        in: path
        name: reference
        required: true
        type: string
      - description: The branding color.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/BrandingColor'
      produces:
      - application/json
      responses:
        '200':
          description: Color has been set successfully.
          schema:
            $ref: '#/definitions/BrandingColor'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Updates a branding color in the light theme.
      tags:
      - Account Admin
  /v3/branding-images/dark:
    get:
      description: "Returns the metadata of all branding images in the dark theme.\
        \ \n\n**Example usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/branding-images/dark\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getAllDarkImageData
      parameters: []
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingImageList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of all images in the dark theme.
      tags:
      - Developer
  /v3/branding-images/dark/{reference}:
    get:
      description: "An endpoint for getting metadata of one account branding image\
        \ in the dark theme. \n\n**Example usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/branding-images/dark/{reference}\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getDarkImageData
      parameters:
      - description: Name of the branding images (icon or picture).
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingImage'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of an image in the dark theme.
      tags:
      - Developer
  /v3/branding-images/dark/{reference}/clear:
    post:
      description: "An endpoint for reverting an account branding image to default\
        \ in the dark theme. \n\n**Example usage:**\n`curl -X POST https://api.us-east-1.mbedcloud.com/v3/branding-images/dark/{reference}/clear\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: clearDarkImage
      parameters:
      - description: Name of the branding images (icon or picture).
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Image has been reverted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Revert an image to default in the dark theme.
      tags:
      - Account Admin
  /v3/branding-images/dark/{reference}/upload:
    post:
      consumes:
      - image/png
      - image/jpeg
      description: "An endpoint for uploading a new account branding image in the\
        \ dark theme in PNG or JPEG format. \n\n**Example usage:**\n`curl -X POST\
        \ https://api.us-east-1.mbedcloud.com/v3/branding-images/dark/{reference}/upload\
        \ -H 'content-type: image/png' -H 'Authorization: Bearer API_KEY' --data-binary\
        \ 'myimage.png'`"
      operationId: uploadDarkImage
      parameters:
      - description: Name of the branding images (icon or picture).
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      - description: The image in PNG or JPEG format.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Image'
      produces:
      - application/json
      responses:
        '201':
          description: Image has been uploaded successfully.
          headers:
            Content-Location:
              description: Location of the image metadata.
              type: string
            Location:
              description: Location of the image binary.
              type: string
          schema:
            $ref: '#/definitions/BrandingImage'
        '400':
          description: Error in input data format, e.g. image is too large.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Upload an image in the dark theme.
      tags:
      - Account Admin
  /v3/branding-images/light:
    get:
      description: "Returns the metadata of all branding images in the light theme.\
        \ \n\n**Example usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/branding-images/light\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getAllLightImageData
      parameters: []
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingImageList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of all images in the light theme.
      tags:
      - Developer
  /v3/branding-images/light/{reference}:
    get:
      description: "An endpoint for getting metadata of one account branding image\
        \ in the light theme. \n\n**Example usage:**\n`curl https://api.us-east-1.mbedcloud.com/v3/branding-images/light/{reference}\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: getLightImageData
      parameters:
      - description: Name of the branding images (icon or picture).
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BrandingImage'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of an image in the light theme.
      tags:
      - Developer
  /v3/branding-images/light/{reference}/clear:
    post:
      description: "An endpoint for reverting an account branding image to default\
        \ in the light theme. \n\n**Example usage:**\n`curl -X POST https://api.us-east-1.mbedcloud.com/v3/branding-images/light/{reference}/clear\
        \ -H 'Authorization: Bearer API_KEY'`"
      operationId: clearLightImage
      parameters:
      - description: Name of the branding images (icon or picture).
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Image has been reverted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Revert an image to default in the light theme.
      tags:
      - Account Admin
  /v3/branding-images/light/{reference}/upload:
    post:
      consumes:
      - image/png
      - image/jpeg
      description: "An endpoint for uploading a new account branding image in the\
        \ light theme in PNG or JPEG format. \n\n**Example usage:**\n`curl -X POST\
        \ https://api.us-east-1.mbedcloud.com/v3/branding-images/light/{reference}/upload\
        \ -H 'content-type: image/png' -H 'Authorization: Bearer API_KEY' --data-binary\
        \ 'myimage.png'`"
      operationId: uploadLightImage
      parameters:
      - description: Name of the branding images (icon or picture).
        enum: *id013
        in: path
        name: reference
        required: true
        type: string
      - description: The image in PNG or JPEG format.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Image'
      produces:
      - application/json
      responses:
        '201':
          description: Image has been uploaded successfully.
          headers:
            Content-Location:
              description: Location of the image metadata.
              type: string
            Location:
              description: Location of the image binary.
              type: string
          schema:
            $ref: '#/definitions/BrandingImage'
        '400':
          description: Error in input data format, e.g. image is too large.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Upload an image in the light theme.
      tags:
      - Account Admin
  /v3/certificate-enrollments:
    get:
      description: '

        Get certificate enrollments list, optionally filtered.


        **Example usage:**


        ```

        curl -H ''authorization: Bearer <valid access token>''

        https://api.us-east-1.mbedcloud.com/v3/certificate-enrollments

        ```

        ```

        curl -H ''authorization: Bearer <valid access token>''

        https://api.us-east-1.mbedcloud.com/v3/certificate-enrollments?device_id__eq=01612df56f3b0a580a010fc700000000

        ```

        '
      operationId: getCertificateEnrollments
      parameters:
      - description: 'An optional filter for the device ID.

          '
        in: query
        name: device_id__eq
        pattern: '[0-9a-fA-F]{32}'
        required: false
        type: string
      - description: 'An optional filter for a certificate.

          '
        in: query
        name: certificate_name__eq
        required: false
        type: string
      - description: 'The number of results to be returned. Between 2 and 1000, inclusive.

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: 'The ID of the item after which to retrieve the next page.

          '
        in: query
        name: after
        pattern: '[0-9a-fA-F]{32}'
        required: false
        type: string
      - description: 'The order of results.

          '
        enum:
        - ASC
        - DESC
        in: query
        name: order
        required: false
        type: string
      - description: 'a comma-separated list of data fields to return.

          '
        enum:
        - total_count
        in: query
        name: include
        required: false
        type: string
      - description: 'An optional filter for the non-equal certificate enrollment
          status.

          '
        enum:
        - new
        - completed
        in: query
        name: enroll_status__neq
        required: false
        type: string
      - description: 'An optional filter for the certificate enrollment status.

          '
        enum:
        - new
        - completed
        in: query
        name: enroll_status__eq
        required: false
        type: string
      - description: 'An optional filter for the non-equal certificate enrollment
          result.

          '
        in: query
        name: enroll_result__neq
        required: false
        type: string
      - description: 'An optional filter for the certificate enrollment result.

          '
        in: query
        name: enroll_result__eq
        required: false
        type: string
      - description: 'An optional filter for the date-time, less than or equal, of
          the certificate enrollment requests creation. Must be in RFC3339 format
          (for example, 2018-01-30T10:03:50.106Z).

          '
        format: data-time
        in: query
        name: created_at__lte
        required: false
        type: string
      - description: 'An optional filter for the date-time, greater than or equal,
          of the certificate enrollment requests creation. Must be in RFC3339 format
          (for example, 2018-01-30T10:03:50.106Z).

          '
        format: data-time
        in: query
        name: created_at__gte
        required: false
        type: string
      - description: 'An optional filter for the date-time, less than or equal, of
          the certificate enrollment requests update. Must be in RFC3339 format (for
          example, 2018-01-30T10:03:50.106Z).

          '
        format: data-time
        in: query
        name: updated_at__lte
        required: false
        type: string
      - description: 'An optional filter for the date-time, greater than or equal,
          of the certificate enrollment requests update. Must be in RFC3339 format
          (for example, 2018-01-30T10:03:50.106Z).

          '
        format: data-time
        in: query
        name: updated_at__gte
        required: false
        type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CertificateEnrollmentListResponse'
        '400':
          description: 'Validation error

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Get certificate enrollments list.
      tags:
      - Certificate Enrollments
  /v3/certificate-enrollments/{certificate-enrollment-id}:
    get:
      description: 'Get a certificate enrollment by ID.


        **Example usage:**


        ```

        curl -H ''authorization: Bearer <valid access token>''

        https://api.us-east-1.mbedcloud.com/v3/certificate-enrollments/01612df56f3b0a580a010fc700000000

        ```

        '
      operationId: getCertificateEnrollment
      parameters:
      - description: 'The ID of the certificate enrollment.

          '
        in: path
        name: certificate-enrollment-id
        pattern: '[0-9a-fA-F]{32}'
        required: true
        type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CertificateEnrollment'
        '400':
          description: 'Validation error

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '404':
          description: Not found.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Get a certificate enrollment by ID.
      tags:
      - Certificate Enrollments
  /v3/certificate-issuer-configurations:
    get:
      description: 'Get certificate issuer configurations, optionally filtered by
        reference.

        <br>

        **Example usage:**


        ```

        curl \

        -H ''authorization: <valid access token>'' \

        -H ''content-type: application/json;charset=UTF-8'' \

        https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \

        ```

        ```

        curl \

        -H ''authorization: <valid access token>'' \

        -H ''content-type: application/json;charset=UTF-8'' \

        https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations?reference__eq=dlms
        \

        ```

        Note: This endpoint does not implement pagination and therefore, list control
        parameters such as `limit` or `after` will be ignored by the system.

        '
      operationId: getCertificateIssuerConfigs
      parameters:
      - description: How many objects to retrieve in the page. The minimum limit is
          2 and the maximum is 1000. Limit values outside of this range are set to
          the closest limit.
        in: query
        maximum: 1000
        minimum: 2
        name: limit
        type: integer
      - description: The order of the records based on creation time, `ASC` or `DESC`;
          by default `ASC`.
        in: query
        name: order
        type: string
      - description: The ID of The item after which to retrieve the next page.
        in: query
        name: after
        type: string
      - description: 'Comma-separated list of data fields to return. Currently supported:
          `total_count`'
        in: query
        name: include
        type: string
      - description: The certificate name to which the certificate issuer configuration
          applies.
        in: query
        name: reference__eq
        required: false
        type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CertificateIssuerConfigListResponse'
        '400':
          description: Validation error.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Get certificate issuer configurations.
      tags:
      - Certificate Issuers Activation
    post:
      description: "Configure the certificate issuer to be used when creating the\
        \ device custom certificates.\n<br>\n**Example usage:**\n\n```\ncurl -X POST\
        \ \\\n-H 'authorization: <valid access token>' \\\n-H 'content-type: application/json;charset=UTF-8'\
        \ \\\nhttps://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations\
        \ \\\n-d '{\n  \"reference\": \"customer.dlms\",\n  \"certificate_issuer_id\"\
        : \"01621a36719d507b9d48a91b00000000\"\n}'\n```\n"
      operationId: createCertificateIssuerConfig
      parameters:
      - description: Certificate issuer configuration request
        in: body
        name: CreateCertificateIssuerConfig
        required: true
        schema:
          $ref: '#/definitions/CreateCertificateIssuerConfig'
      responses:
        '201':
          description: OK.
          schema:
            $ref: '#/definitions/CertificateIssuerConfigResponse'
        '400':
          description: Validation error.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '409':
          description: 'A certificate issuer configuration with this reference already
            exists.

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Create certificate issuer configuration.
      tags:
      - Certificate Issuers Activation
  /v3/certificate-issuer-configurations/lwm2m:
    get:
      description: 'Provides the configured certificate issuer to be used when creating
        device

        certificates for LwM2M communication.<br>

        '
      operationId: getCertificateIssuerConfig
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CertificateIssuerConfigResponse'
        '400':
          description: Validation error.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Get certificate issuer configuration.
      tags:
      - Certificate Issuers Activation
    put:
      description: "Configure the certificate issuer to be used when creating device\
        \ certificates\nfor LwM2M communication.\n<br>\n**Example usage:**\n\n```\n\
        curl -X PUT \\\n-H 'authorization: <valid access token>' \\\n-H 'content-type:\
        \ application/json;charset=UTF-8' \\\nhttps://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations/lwm2m\
        \ \\\n-d '{\n  \"certificate_issuer_id\": \"01621a36719d507b9d48a91b00000000\"\
        \n}'\n```\n"
      operationId: updateCertificateIssuerConfig
      parameters:
      - description: Certificate Issuer Configuration Request
        in: body
        name: CertificateIssuerConfigRequest
        required: true
        schema:
          $ref: '#/definitions/CertificateIssuerConfigRequest'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CertificateIssuerConfigResponse'
        '400':
          description: Validation error.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '404':
          description: Not found.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Update certificate issuer configuration.
      tags:
      - Certificate Issuers Activation
  /v3/certificate-issuer-configurations/{certificate-issuer-configuration-id}:
    delete:
      description: 'Delete the configured certificate issuer configuration.

        You can only delete the configurations of custom certificates.

        '
      operationId: deleteCertificateIssuerConfigByID
      parameters:
      - &id014
        description: 'The ID of the certificate issuer configuration.

          '
        in: path
        name: certificate-issuer-configuration-id
        required: true
        type: string
      responses:
        '204':
          description: No content.
        '400':
          description: Validation error.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '404':
          description: Not found.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Delete certificate issuer configuration.
      tags:
      - Certificate Issuers Activation
    get:
      description: 'Provides the configured certificate issuer.

        '
      operationId: getCertificateIssuerConfigByID
      parameters:
      - *id014
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CertificateIssuerConfigResponse'
        '400':
          description: Validation error.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '404':
          description: Not found.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Get certificate issuer configuration.
      tags:
      - Certificate Issuers Activation
    put:
      description: 'Update the configured certificate issuer configuration.

        '
      operationId: updateCertificateIssuerConfigByID
      parameters:
      - description: Certificate issuer configuration request
        in: body
        name: CertificateIssuerConfigRequest
        required: true
        schema:
          $ref: '#/definitions/CertificateIssuerConfigRequest'
      - *id014
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CertificateIssuerConfigResponse'
        '400':
          description: Validation error.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '404':
          description: Not found.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Update certificate issuer configuration.
      tags:
      - Certificate Issuers Activation
  /v3/certificate-issuers:
    get:
      description: 'Note: This endpoint does not implement pagination and therefore,
        list control parameters such as `limit` or `after` will be ignored by the
        system.

        '
      operationId: getCertificateIssuers
      parameters:
      - description: How many objects to retrieve in the page. The minimum limit is
          2 and the maximum is 1000. Limit values outside of this range are set to
          the closest limit.
        in: query
        maximum: 1000
        minimum: 2
        name: limit
        type: integer
      - description: The order of the records based on creation time, `ASC` or `DESC`;
          by default `ASC`.
        in: query
        name: order
        type: string
      - description: The ID of The item after which to retrieve the next page.
        in: query
        name: after
        type: string
      - description: 'Comma-separated list of data fields to return. Currently supported:
          `total_count`'
        in: query
        name: include
        type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CertificateIssuerInfoListResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Get certificate issuers list.
      tags:
      - Certificate Issuers
    post:
      description: "Create a certificate issuer.\nThe maximum number of issuers is\
        \ limited to 20 per account.\nMultiple certificate issuers of the same issuer\
        \ type can be created, provided they have a different name. This allows verification\
        \ of the certificate issuer configuration before activating it.\n<br>\n**Example\
        \ usage:**\n\n```\ncurl -X POST \\\n-H 'authorization: Bearer <valid access\
        \ token>' \\\n-H 'content-type: application/json;charset=UTF-8' \\\nhttps://api.us-east-1.mbedcloud.com/v3/certificate-issuers\
        \ \\\n-d '{\n  \"issuer_type\": \"GLOBAL_SIGN\",\n  \"name\": \"GS Issuer\"\
        ,\n  \"description\": \"Sample GlobalSign certificate issuer\",\n  \"issuer_attributes\"\
        : null,\n  \"issuer_credentials\": {\n      \"api_key\": \"e510e289e6cd8947\"\
        ,\n      \"api_secret\": \"a477a8393d17a55ecb2ba6a61f58feb84770b621\",\n \
        \     \"client_certificate\": \"-----BEGIN CERTIFICATE-----MIIC7zCCAdegAwIBAgIJANTlU4x5S74VMA0GCSqGSIb3DQEBCwUAMA4xDDAKBgNVBAoMA0FybTAeFw0xODAzMTExMzE5MTFaFw0xOTAzMTExMzE5MTFaMA4xDDAKBgNVBAoMA0FybTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJWLStsVMJULZtxdieK9qocM4ymDXMaAusmd9TZLzBgznKQe/CW2yxyA8C8K5e6MmvMYGeKDd4Lkw/ezOj2OsUj2xzNIltUxpGi/GhsNYiN/khNJa/Y1SllLoihJAPm/xbMywOBRu/dM88PiJsNZccOk0I8DYvvyAs9wCTkbKLnfHygl98DCRqXw7nBCplU6F03qpUd/4BUtMtugyqt7yboGH+4YewnUh4Yh4QNOJIvE93Ob++eKjO3pIOYEhQmUxzOLaLNuWXlv2l1WuN281hUP4XBcV8mCzRQfTBBDYTWt+5BEWoLOUkXjW0Um6EAaN3usph1IKDEH6Ia5VHP4Pj0CAwEAAaNQME4wHQYDVR0OBBYEFLsfYZxFcQTjPJKYMjHI2In316fmMB8GA1UdIwQYMBaAFLsfYZxFcQTjPJKYMjHI2In316fmMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFl08GFsIkkUs6M7QgCWmsnwP6PtD8V87wM1GAqQQlOOeztaeRR2TEOeYiKRZQugYszJ/FVfVp4ggqzepJMn6UZ42j5nmSJs+6t79i23QAzX1zNQ354lr/t7kt3fMdhuL3AP0oZGzdy+EnXXiWeAD22UwzvVmLt38ypJIl+pmTsx9jJy4PN7yoRgtP9k+50m3X6oDxVruehC/JPSeTvEhqyLW3fLcG6IoJMX3vIwfO9uXbFJumTowQeViNJJ9duWvD2KBXn/muOOBe97TPuvAms1gOtMmmPT9/jpo9b4+NsfFiAN6bMici81aIKZzLC+lLGOUmR2fFJyM5OsVLxKsko=-----END\
        \ CERTIFICATE-----\",\n        \"private_key\":\"-----BEGIN RSA PRIVATE KEY-----\\\
        nProc-Type: 4,ENCRYPTED\\nDEK-Info: DES-EDE3-CBC,CCAC26A4133947CB\\n\\np3KJ4FI3wcz3I0MtiLkrznkjWFvprVmoNywySUGb5IqZViJZqCMEsyU9a9iDsSfP\\\
        nZ07cg9GviV21WYIPSxZOQrpy1g1VWILzFnH+J6z8dSH4mxXh0PwdOzYgAeqkrIVM\\nJ7KRm6t222dZFjjXK3eEcLmBLGo29XwVJxKHx+l4++gU1LZmeHZR5M8fJ4jejUly\\\
        n7sqzPlmRF0N3I4lwKVj+PfQTVz43QoCnpxOjuSEL4liBrc2agY2xH1O0PFyHimz9\\n3XM9HR/iuPHW0N2D+NPjXlWKacerupH9d4i9IYIagzB+HTgej8limdo03GmmxcZ6\\\
        nYNa58n5yQSaqu0TPRU9DsrKeGjadHTlZQGdzfq1SWsROCnHLrXFKE2ozIG3+hxA5\\nujBF/QWpX5+inXUwDJhBxp8isHbPEnBEUUd6ZRzCTjvN0jaUti5B9yFhO2G6mbE8\\\
        nCvhyzQK8oJqsjZXnlcpPf95LP+9XbcCDjLSIaWJstzXO9tPiv6+x1MVWmivtRHcC\\nSTzpx8jAGCiG6ejLqWB87ZXiZm7ujlCBheHSf5RHwNHhUvoP2JEYalDDRxjcDMSx\\\
        n4uV42Np4yJlIQEDlGHcBlXoL7vEukFpuWgkYdpcZy/Ou9qz8mXrpLcu8C8MhLmSC\\nixGoR5iRhV7cxoHLyuCzj87eYEA73Xu238DQorSEEuiVFnLzQ2+PJMs4qoI14q/L\\\
        notlBDz+Ko6DrU/EZROYmiqMkLKXR2sx9zNAJwPYRs6nSH08tZ3dwqzZbgtP3Wazi\\nhLWHt5/En7wQRA5a+/dDEHXSoLvvSQ9jvhclhWf+eCYuq2eH+g54oyJGRSY+8GV7\\\
        nujhLxkzl/3OZdhZPWoz4U13KpbSTcNWu5Y7oGDoabw19UbvqmLf1PJkpDH/tQgzB\\nxYtsLBRUcofpYoeIiIxfAA4do5WilJc8xqrGhkE4WcHfY24HXAiOvsjbxV+BRprX\\\
        n1jtgJpV/9nJESMap+8PxipGUFRGjB83/uwJaa6mLftEKflX8i4MZ+HnqraXERsqA\\nWRUcDHIWmFfpzIB3iNuxawVvPH8NdCSPmQ9qTb8Cozl0AuOK2E9S+ke8oiYQScWR\\\
        nLdu+zhej7GjuQ9R+Ub+wPWqvOA5qLXejqnCexVScDUuN+z9JWM3N2FG1MwxhAzhP\\ndEfoQHoBn6uyOmrVGP6fosV3chqhPoec42KeOAm1xDvx692isaIy1jPgIyPxeqhm\\\
        n2Tw4E+02R7dlP8Ljf7JzfLm4oKpWHWlcHeqg24x6lY/wXU1RBcWaTa0AQUwoGm2m\\nIQCPfIqOEv/QC2HpO7SVCYkl65KwR0oTd1AzYxdxEq3xHQbh69EL0FGZPVxVCPI+\\\
        nhEAyifKy1/tm3l91Rf/kGpHY7nIQKCXH49tmFwix8gke2nZJmRgX7/zAdMOAKeKH\\nAaIl4nQtv14EbaasMgnn9qgaDYnWzaReEob2QlQ/WYlTor61+KFpGtcf9jAkgudT\\\
        n2op+4CF7wT2+aTXdtkVWfmv++iB8GnlqZdxLvyG1cTYjjYHVFbMSWQnxzQqiE2ms\\nQgp+byjWCumpsWTMdTO+d9NkDOo80vDpaRxEgebmhJ0MbX+eFjBgVg==\\\
        n-----END RSA PRIVATE KEY-----\",\n      \"passphrase\": \"helloworld\"\n\
        \  }\n}'\n```\n"
      operationId: createCertificateIssuer
      parameters:
      - description: Certificate issuer request.
        in: body
        name: CertificateIssuerRequest
        required: true
        schema:
          $ref: '#/definitions/CertificateIssuerRequest'
      responses:
        '201':
          description: Created.
          schema:
            $ref: '#/definitions/CertificateIssuerInfo'
        '400':
          description: 'Validation error: The data used to create the certificate
            issuer failed validation.

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: You are not authorized to view the resource.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '409':
          description: 'Conflict. A certificate issuer with this name already exists.

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '424':
          description: 'The request failed due to customer configured external service.

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Create certificate issuer.
      tags:
      - Certificate Issuers
  /v3/certificate-issuers/{certificate-issuer-id}:
    delete:
      description: 'Delete a certificate issuer by ID.

        <br>

        **Example usage:**


        ```

        curl -X DELETE \

        -H ''authorization: <valid access token>'' \

        https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/0162155dc77d507b9d48a91b00000000

        ```

        '
      operationId: deleteCertificateIssuer
      parameters:
      - description: 'Certificate issuer ID. <br> The ID of the certificate issuer.

          An active certificate issuer may not be deleted.

          '
        in: path
        name: certificate-issuer-id
        required: true
        type: string
      responses:
        '204':
          description: Certificate issuer deleted.
        '400':
          description: 'Validation error: An active certificate issuer cannot be deleted.

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '404':
          description: Not found.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Delete certificate issuer.
      tags:
      - Certificate Issuers
    get:
      operationId: getCertificateIssuer
      parameters:
      - description: 'Certificate issuer ID.

          The ID of the certificate issuer.

          '
        in: path
        name: certificate-issuer-id
        required: true
        type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CertificateIssuerInfo'
        '400':
          description: 'Validation error: The data used to get the certificate issuer
            failed validation.

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '404':
          description: Not found.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Get certificate issuer by ID.
      tags:
      - Certificate Issuers
    put:
      description: "Update a certificate issuer.\n<br>\n**Example usage:**\n\n```\n\
        curl -X PUT \\\n-H 'authorization: <valid access token>' \\\n-H 'content-type:\
        \ application/json;charset=UTF-8' \\\nhttps://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621560be51507b9d48a91b00000000\
        \ \\\n-d '{\n  \"description\": \"Sample GlobalSign certificate issuer - updated.\"\
        ,\n  \"name\": \"GlobalSign Issuer\"\n}'\n```\n"
      operationId: updateCertificateIssuer
      parameters:
      - description: 'Certificate issuer ID. <br> The ID of the certificate issuer.

          '
        in: path
        name: certificate-issuer-id
        required: true
        type: string
      - description: Certificate issuer update request.
        in: body
        name: CertificateIssuerUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/CertificateIssuerUpdateRequest'
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CertificateIssuerInfo'
        '400':
          description: 'Validation error: The data used to update the certificate
            issuer failed validation.

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '404':
          description: Not found.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '409':
          description: 'Conflict. A certificate issuer with this name already exists.

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '424':
          description: 'The request failed due to customer configured external service.

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Update certificate issuer.
      tags:
      - Certificate Issuers
  /v3/certificate-issuers/{certificate-issuer-id}/verify:
    post:
      description: 'A utility API that can be used to validate the user configuration
        before activating a certificate issuer.

        Verifies that the certificate issuer is accessible and can be used to generate
        certificates by Device Management.

        <br>

        **Note:**

        The API requests the 3rd party CA to sign a test certificate.

        For some 3rd party CAs, this operation may make use of the account quota.

        <br>

        **Example usage:**


        ```

        curl -X POST \

        -H ''authorization: <valid access token>'' \

        -H ''content-type: application/json;charset=UTF-8'' \

        https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621a36719d507b9d48a91b00000000/verify

        ```

        '
      operationId: verifyCertificateIssuer
      parameters:
      - description: 'Certificate issuer ID. <br> The ID of the certificate issuer.

          '
        in: path
        name: certificate-issuer-id
        required: true
        type: string
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/CertificateIssuerVerifyResponse'
        '400':
          description: Validation error
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '404':
          description: Not found.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '424':
          description: 'The request failed due to customer configured external service.

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Verify certificate issuer.
      tags:
      - Certificate Issuers
  /v3/developer-certificates:
    post:
      description: 'This REST API is intended to be used by customers to get a developer
        certificate (a certificate that can be flashed into multiple devices to connect
        to bootstrap server).


        **Note:** The number of developer certificates allowed per account is limited.
        Please see [Using your own certificate authority](/docs/current/mbed-cloud-deploy/instructions-for-factory-setup-and-device-provision.html#using-your-own-certificate-authority-with-mbed-cloud).


        **Example usage:**

        curl -X POST "http://api.us-east-1.mbedcloud.com/v3/developer-certificates"
        -H "accept: application/json" -H "Authorization: Bearer THE_ACCESS_TOKEN"
        -H "content-type: application/json" -d "{ \"name\": \"THE_CERTIFICATE_NAME\",
        \"description\": \"THE_CERTIFICATE_DESCRIPTION\"}"

        '
      operationId: createDeveloperCertificate
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/DeveloperCertificateRequestData'
      produces:
      - application/json
      responses:
        201:
          description: Developer certificate created successfully.
          examples:
            Success:
              account_id: 015fee5d9b3538c98640fbfb00000000
              created_at: '2017-12-11T14:22:20.009Z'
              description: This certificate will be used with multiple developer devices
              developer_certificate: '-----BEGIN CERTIFICATE-----\nMIICcDCCAhWgAwIBAgIRAPSBbBtLUE/ekQcWE4GzPJEwCgYIKoZIzj0EAwIwgaIx\nCzAJBgNVBAYTAkdCMRcwFQYDVQQIDA5DYW1icmlkZ2VzaGlyZTESMBAGA1UEBwwJ\nQ2FtYnJpZGdlMRAwDgYDVQQKDAdBUk0gTHRkMSkwJwYDVQQLDCAwMTU4NDNlMzJl\nYzkwMjQyMGEwMTVlMDcwMDAwMDAwMDEpMCcGA1UEAwwgMDE2MWRiYmNkZDY2MGE1\nODBhMDEwYzM0MDNjMDAwMDAwHhcNMTgwMjI4MDkyNzIzWhcNMjgwMjI4MDkyNzIz\nWjCBojELMAkGA1UEBhMCR0IxFzAVBgNVBAgMDkNhbWJyaWRnZXNoaXJlMRIwEAYD\nVQQHDAlDYW1icmlkZ2UxEDAOBgNVBAoMB0FSTSBMdGQxKTAnBgNVBAsMIDAxNTg0\nM2UzMmVjOTAyNDIwYTAxNWUwNzAwMDAwMDAwMSkwJwYDVQQDDCAwMTYxZGJiY2Rk\nNjYwYTU4MGEwMTBjMzQwM2MwMDAwMDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\nBEScLDbOXvOb903AYlI9ow8E4hbLSHJPt5E2BO4Q4bHOpuWH2Oh6P+CDPte9pAv3\nE6g90Xk/ZcZpQ+xBO6qci/ajKjAoMBIGCSsGAQQBoCCBSQQFAgNAAJEwEgYDVR0T\nAQH/BAgwBgEB/wIBADAKBggqhkjOPQQDAgNJADBGAiEAsi9zSK8Njl22GoEHrsg8\nQlwFnrkkP9d6FyLFtmqndt4CIQCmVHwisYNcCkqD2SWctG1xQHo0HZePAQW8PstM\nzhNupQ==\n-----END
                CERTIFICATE-----\n'
              developer_private_key: '-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgeKc97aC1Z4aniXVG\njNSvvXw2hl6zwACYIs88OKQx61GgCgYIKoZIzj0DAQehRANCAAREnCw2zl7zm/dN\nwGJSPaMPBOIWy0hyT7eRNgTuEOGxzqblh9joej/ggz7XvaQL9xOoPdF5P2XGaUPs\nQTuqnIv2\n-----END
                PRIVATE KEY-----\n'
              etag: '1'
              id: 015fee4431fd38c98640fbfb00000000
              name: DeveloperCertificate
              object: trusted-cert
              security_file_content: '/*\n * Copyright (c) 2017 ARM Limited. All rights
                reserved.\n * SPDX-License-Identifier: Apache-2.0\n * Licensed under
                the Apache License, Version 2.0 (the License); you may\n * not use
                this file except in compliance with the License.\n * You may obtain
                a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n
                *\n * Unless required by applicable law or agreed to in writing, software\n
                * distributed under the License is distributed on an AS IS BASIS,
                WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or
                implied.\n * See the License for the specific language governing permissions
                and\n * limitations under the License.\n */\n#ifndef __MBED_CLOUD_DEV_CREDENTIALS_H__\n#define
                __MBED_CLOUD_DEV_CREDENTIALS_H__\n\n#include <inttypes.h>\n\nconst
                char MBED_CLOUD_DEV_BOOTSTRAP_ENDPOINT_NAME[] = \"0161dbbcdd660a580a010c3403c00000\";\nconst
                char MBED_CLOUD_DEV_ACCOUNT_ID[] = \"015843e32ec902420a015e0700000000\";\nconst
                char MBED_CLOUD_DEV_BOOTSTRAP_SERVER_URI[] = \"coaps://coap-integration-lab.dev.mbed.com:5684?aid=015843e32ec902420a015e0700000000\";\n\nconst
                uint8_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE[] = \n{ 0x30,
                0x82, 0x02, 0x70, 0x30, 0x82, 0x02, 0x15,\n 0xa0, 0x03, 0x02, 0x01,
                0x02, 0x02, 0x11, 0x00,\n 0xf4, 0x81, 0x6c, 0x1b, 0x4b, 0x50, 0x4f,
                0xde,\n 0x91, 0x07, 0x16, 0x13, 0x81, 0xb3, 0x3c, 0x91,\n 0x30, 0x0a,
                0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,\n 0x3d, 0x04, 0x03, 0x02, 0x30,
                0x81, 0xa2, 0x31,\n 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,\n
                0x13, 0x02, 0x47, 0x42, 0x31, 0x17, 0x30, 0x15,\n 0x06, 0x03, 0x55,
                0x04, 0x08, 0x0c, 0x0e, 0x43,\n 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64,
                0x67, 0x65,\n 0x73, 0x68, 0x69, 0x72, 0x65, 0x31, 0x12, 0x30,\n 0x10,
                0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09,\n 0x43, 0x61, 0x6d, 0x62,
                0x72, 0x69, 0x64, 0x67,\n 0x65, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03,
                0x55,\n 0x04, 0x0a, 0x0c, 0x07, 0x41, 0x52, 0x4d, 0x20,\n 0x4c, 0x74,
                0x64, 0x31, 0x29, 0x30, 0x27, 0x06,\n 0x03, 0x55, 0x04, 0x0b, 0x0c,
                0x20, 0x30, 0x31,\n 0x35, 0x38, 0x34, 0x33, 0x65, 0x33, 0x32, 0x65,\n
                0x63, 0x39, 0x30, 0x32, 0x34, 0x32, 0x30, 0x61,\n 0x30, 0x31, 0x35,
                0x65, 0x30, 0x37, 0x30, 0x30,\n 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
                0x31, 0x29,\n 0x30, 0x27, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c,\n 0x20,
                0x30, 0x31, 0x36, 0x31, 0x64, 0x62, 0x62,\n 0x63, 0x64, 0x64, 0x36,
                0x36, 0x30, 0x61, 0x35,\n 0x38, 0x30, 0x61, 0x30, 0x31, 0x30, 0x63,
                0x33,\n 0x34, 0x30, 0x33, 0x63, 0x30, 0x30, 0x30, 0x30,\n 0x30, 0x30,
                0x1e, 0x17, 0x0d, 0x31, 0x38, 0x30,\n 0x32, 0x32, 0x38, 0x30, 0x39,
                0x32, 0x37, 0x32,\n 0x33, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x30, 0x32,\n
                0x32, 0x38, 0x30, 0x39, 0x32, 0x37, 0x32, 0x33,\n 0x5a, 0x30, 0x81,
                0xa2, 0x31, 0x0b, 0x30, 0x09,\n 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
                0x02, 0x47,\n 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55,\n 0x04,
                0x08, 0x0c, 0x0e, 0x43, 0x61, 0x6d, 0x62,\n 0x72, 0x69, 0x64, 0x67,
                0x65, 0x73, 0x68, 0x69,\n 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06,
                0x03,\n 0x55, 0x04, 0x07, 0x0c, 0x09, 0x43, 0x61, 0x6d,\n 0x62, 0x72,
                0x69, 0x64, 0x67, 0x65, 0x31, 0x10,\n 0x30, 0x0e, 0x06, 0x03, 0x55,
                0x04, 0x0a, 0x0c,\n 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74, 0x64,\n
                0x31, 0x29, 0x30, 0x27, 0x06, 0x03, 0x55, 0x04,\n 0x0b, 0x0c, 0x20,
                0x30, 0x31, 0x35, 0x38, 0x34,\n 0x33, 0x65, 0x33, 0x32, 0x65, 0x63,
                0x39, 0x30,\n 0x32, 0x34, 0x32, 0x30, 0x61, 0x30, 0x31, 0x35,\n 0x65,
                0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30,\n 0x30, 0x30, 0x30, 0x31,
                0x29, 0x30, 0x27, 0x06,\n 0x03, 0x55, 0x04, 0x03, 0x0c, 0x20, 0x30,
                0x31,\n 0x36, 0x31, 0x64, 0x62, 0x62, 0x63, 0x64, 0x64,\n 0x36, 0x36,
                0x30, 0x61, 0x35, 0x38, 0x30, 0x61,\n 0x30, 0x31, 0x30, 0x63, 0x33,
                0x34, 0x30, 0x33,\n 0x63, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x59,\n
                0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,\n 0x3d, 0x02, 0x01,
                0x06, 0x08, 0x2a, 0x86, 0x48,\n 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
                0x42, 0x00,\n 0x04, 0x44, 0x9c, 0x2c, 0x36, 0xce, 0x5e, 0xf3,\n 0x9b,
                0xf7, 0x4d, 0xc0, 0x62, 0x52, 0x3d, 0xa3,\n 0x0f, 0x04, 0xe2, 0x16,
                0xcb, 0x48, 0x72, 0x4f,\n 0xb7, 0x91, 0x36, 0x04, 0xee, 0x10, 0xe1,
                0xb1,\n 0xce, 0xa6, 0xe5, 0x87, 0xd8, 0xe8, 0x7a, 0x3f,\n 0xe0, 0x83,
                0x3e, 0xd7, 0xbd, 0xa4, 0x0b, 0xf7,\n 0x13, 0xa8, 0x3d, 0xd1, 0x79,
                0x3f, 0x65, 0xc6,\n 0x69, 0x43, 0xec, 0x41, 0x3b, 0xaa, 0x9c, 0x8b,\n
                0xf6, 0xa3, 0x2a, 0x30, 0x28, 0x30, 0x12, 0x06,\n 0x09, 0x2b, 0x06,
                0x01, 0x04, 0x01, 0xa0, 0x20,\n 0x81, 0x49, 0x04, 0x05, 0x02, 0x03,
                0x40, 0x00,\n 0x91, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13,\n 0x01,
                0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01,\n 0x01, 0xff, 0x02, 0x01,
                0x00, 0x30, 0x0a, 0x06,\n 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04,
                0x03,\n 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,\n 0x00, 0xb2,
                0x2f, 0x73, 0x48, 0xaf, 0x0d, 0x8e,\n 0x5d, 0xb6, 0x1a, 0x81, 0x07,
                0xae, 0xc8, 0x3c,\n 0x42, 0x5c, 0x05, 0x9e, 0xb9, 0x24, 0x3f, 0xd7,\n
                0x7a, 0x17, 0x22, 0xc5, 0xb6, 0x6a, 0xa7, 0x76,\n 0xde, 0x02, 0x21,
                0x00, 0xa6, 0x54, 0x7c, 0x22,\n 0xb1, 0x83, 0x5c, 0x0a, 0x4a, 0x83,
                0xd9, 0x25,\n 0x9c, 0xb4, 0x6d, 0x71, 0x40, 0x7a, 0x34, 0x1d,\n 0x97,
                0x8f, 0x01, 0x05, 0xbc, 0x3e, 0xcb, 0x4c,\n 0xce, 0x13, 0x6e, 0xa5
                };\n\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE[]
                = \n{ 0x30, 0x82, 0x02, 0x35, 0x30, 0x82, 0x01, 0xdb,\n 0xa0, 0x03,
                0x02, 0x01, 0x02, 0x02, 0x10, 0x5c,\n 0x27, 0xa5, 0x76, 0x7d, 0x58,
                0x85, 0x8a, 0x43,\n 0x91, 0xa0, 0x61, 0xab, 0xcf, 0xa6, 0x59, 0x30,\n
                0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\n 0x04, 0x03, 0x02,
                0x30, 0x72, 0x31, 0x0b, 0x30,\n 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,
                0x13, 0x02,\n 0x47, 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,\n 0x55,
                0x04, 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d,\n 0x62, 0x72, 0x69, 0x64,
                0x67, 0x65, 0x73, 0x68,\n 0x69, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10,
                0x06,\n 0x03, 0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x61,\n 0x6d, 0x62,
                0x72, 0x69, 0x64, 0x67, 0x65, 0x31,\n 0x10, 0x30, 0x0e, 0x06, 0x03,
                0x55, 0x04, 0x0a,\n 0x13, 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74,\n
                0x64, 0x31, 0x24, 0x30, 0x22, 0x06, 0x03, 0x55,\n 0x04, 0x03, 0x13,
                0x1b, 0x41, 0x52, 0x4d, 0x20,\n 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
                0x61, 0x74,\n 0x69, 0x6f, 0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x74,\n 0x73,
                0x74, 0x72, 0x61, 0x70, 0x43, 0x41, 0x30,\n 0x20, 0x17, 0x0d, 0x31,
                0x37, 0x30, 0x35, 0x31,\n 0x35, 0x31, 0x39, 0x34, 0x39, 0x31, 0x31,
                0x5a,\n 0x18, 0x0f, 0x32, 0x30, 0x35, 0x32, 0x30, 0x35,\n 0x31, 0x35,
                0x31, 0x39, 0x35, 0x39, 0x31, 0x30,\n 0x5a, 0x30, 0x72, 0x31, 0x0b,
                0x30, 0x09, 0x06,\n 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x47, 0x42,\n
                0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04,\n 0x08, 0x13, 0x0e,
                0x43, 0x61, 0x6d, 0x62, 0x72,\n 0x69, 0x64, 0x67, 0x65, 0x73, 0x68,
                0x69, 0x72,\n 0x65, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55,\n 0x04,
                0x07, 0x13, 0x09, 0x43, 0x61, 0x6d, 0x62,\n 0x72, 0x69, 0x64, 0x67,
                0x65, 0x31, 0x10, 0x30,\n 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13,
                0x07,\n 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74, 0x64, 0x31,\n 0x24, 0x30,
                0x22, 0x06, 0x03, 0x55, 0x04, 0x03,\n 0x13, 0x1b, 0x41, 0x52, 0x4d,
                0x20, 0x49, 0x6e,\n 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,\n
                0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,\n 0x72, 0x61, 0x70,
                0x43, 0x41, 0x30, 0x59, 0x30,\n 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48,
                0xce, 0x3d,\n 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,\n 0x3d,
                0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04,\n 0x8b, 0x7c, 0x86, 0xc3,
                0x88, 0x54, 0xe6, 0x5f,\n 0xe0, 0x57, 0x4e, 0x1b, 0xac, 0x29, 0x82,
                0xea,\n 0x7d, 0x91, 0x00, 0x63, 0xa7, 0x4a, 0x05, 0xbc,\n 0x54, 0xc5,
                0x71, 0x27, 0x33, 0x19, 0x1b, 0x2e,\n 0xfa, 0x41, 0xf8, 0x7a, 0x9a,
                0x0c, 0x5d, 0xfc,\n 0xb3, 0x37, 0x01, 0x99, 0xc5, 0xc9, 0xbe, 0x78,\n
                0x5b, 0x1d, 0xec, 0xb0, 0x1a, 0x1d, 0xdc, 0xe4,\n 0x6f, 0x57, 0x04,
                0xf4, 0x3a, 0xca, 0xa8, 0xd2,\n 0xa3, 0x51, 0x30, 0x4f, 0x30, 0x0b,
                0x06, 0x03,\n 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x01,\n 0x86,
                0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13,\n 0x01, 0x01, 0xff, 0x04,
                0x05, 0x30, 0x03, 0x01,\n 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03, 0x55,
                0x1d,\n 0x0e, 0x04, 0x16, 0x04, 0x14, 0x13, 0xef, 0x69,\n 0xfa, 0x62,
                0x3f, 0x00, 0x86, 0xf4, 0x05, 0xb8,\n 0xb6, 0xe6, 0xb2, 0xf1, 0xdb,
                0x69, 0x10, 0xb4,\n 0x39, 0x30, 0x10, 0x06, 0x09, 0x2b, 0x06, 0x01,\n
                0x04, 0x01, 0x82, 0x37, 0x15, 0x01, 0x04, 0x03,\n 0x02, 0x01, 0x00,
                0x30, 0x0a, 0x06, 0x08, 0x2a,\n 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,
                0x02, 0x03,\n 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xa2,\n 0x50,
                0x88, 0x0f, 0x55, 0xe8, 0x26, 0x49, 0xe6,\n 0xf5, 0x71, 0x86, 0x33,
                0x29, 0x05, 0x4c, 0xf9,\n 0xfd, 0x1f, 0x14, 0x98, 0x92, 0x85, 0xd9,
                0x5c,\n 0x48, 0x02, 0x9e, 0xc2, 0x79, 0xa8, 0x59, 0x02,\n 0x20, 0x3e,
                0xfe, 0x3c, 0xa0, 0xbf, 0xd3, 0x0f,\n 0x15, 0x83, 0x56, 0xbc, 0xf2,
                0xfa, 0x16, 0x26,\n 0x7a, 0xc1, 0x68, 0xaa, 0xbc, 0x91, 0x3c, 0x69,\n
                0x44, 0x36, 0xf9, 0x74, 0xa1, 0x82, 0x76, 0x7a,\n 0x6e };\n\nconst
                uint8_t MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE[] = \n{ 0x30,
                0x82, 0x02, 0x30, 0x30, 0x82, 0x01, 0xd5,\n 0xa0, 0x03, 0x02, 0x01,
                0x02, 0x02, 0x10, 0x26,\n 0xf9, 0x08, 0xfc, 0xf1, 0xc0, 0x46, 0xa4,
                0x4a,\n 0x4d, 0x2c, 0xf1, 0x94, 0x27, 0xf9, 0x1f, 0x30,\n 0x0a, 0x06,
                0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\n 0x04, 0x03, 0x02, 0x30, 0x6f,
                0x31, 0x0b, 0x30,\n 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02,\n
                0x47, 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,\n 0x55, 0x04, 0x08,
                0x13, 0x0e, 0x43, 0x61, 0x6d,\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
                0x73, 0x68,\n 0x69, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06,\n 0x03,
                0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x61,\n 0x6d, 0x62, 0x72, 0x69,
                0x64, 0x67, 0x65, 0x31,\n 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04,
                0x0a,\n 0x13, 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74,\n 0x64, 0x31,
                0x21, 0x30, 0x1f, 0x06, 0x03, 0x55,\n 0x04, 0x03, 0x13, 0x18, 0x41,
                0x52, 0x4d, 0x20,\n 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,\n
                0x69, 0x6f, 0x6e, 0x20, 0x4c, 0x57, 0x4d, 0x32,\n 0x4d, 0x20, 0x43,
                0x41, 0x30, 0x20, 0x17, 0x0d,\n 0x31, 0x37, 0x30, 0x32, 0x31, 0x32,
                0x31, 0x30,\n 0x33, 0x37, 0x35, 0x32, 0x5a, 0x18, 0x0f, 0x32,\n 0x30,
                0x35, 0x32, 0x30, 0x32, 0x31, 0x32, 0x31,\n 0x30, 0x34, 0x37, 0x35,
                0x32, 0x5a, 0x30, 0x6f,\n 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
                0x04,\n 0x06, 0x13, 0x02, 0x47, 0x42, 0x31, 0x17, 0x30,\n 0x15, 0x06,
                0x03, 0x55, 0x04, 0x08, 0x13, 0x0e,\n 0x43, 0x61, 0x6d, 0x62, 0x72,
                0x69, 0x64, 0x67,\n 0x65, 0x73, 0x68, 0x69, 0x72, 0x65, 0x31, 0x12,\n
                0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13,\n 0x09, 0x43, 0x61,
                0x6d, 0x62, 0x72, 0x69, 0x64,\n 0x67, 0x65, 0x31, 0x10, 0x30, 0x0e,
                0x06, 0x03,\n 0x55, 0x04, 0x0a, 0x13, 0x07, 0x41, 0x52, 0x4d,\n 0x20,
                0x4c, 0x74, 0x64, 0x31, 0x21, 0x30, 0x1f,\n 0x06, 0x03, 0x55, 0x04,
                0x03, 0x13, 0x18, 0x41,\n 0x52, 0x4d, 0x20, 0x49, 0x6e, 0x74, 0x65,
                0x67,\n 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4c,\n 0x57, 0x4d,
                0x32, 0x4d, 0x20, 0x43, 0x41, 0x30,\n 0x59, 0x30, 0x13, 0x06, 0x07,
                0x2a, 0x86, 0x48,\n 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86,\n
                0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42,\n 0x00, 0x04, 0xba,
                0xea, 0x80, 0x01, 0x2d, 0xf0,\n 0xe1, 0xb6, 0xc5, 0x5f, 0xf9, 0x76,
                0x84, 0x31,\n 0xa9, 0x29, 0xa1, 0xc7, 0xa8, 0xfd, 0xa0, 0xad,\n 0xd9,
                0x94, 0xe7, 0xec, 0x5a, 0x33, 0xa1, 0x2c,\n 0x8e, 0x36, 0x43, 0x9b,
                0x18, 0xdf, 0xce, 0x71,\n 0x14, 0x24, 0xb1, 0xfb, 0x16, 0x34, 0x0e,
                0x43,\n 0xfc, 0x23, 0x77, 0xd4, 0x13, 0xd7, 0x11, 0xaa,\n 0x39, 0x60,
                0xab, 0xa2, 0xdf, 0x24, 0xb3, 0xeb,\n 0xa0, 0xc5, 0xa3, 0x51, 0x30,
                0x4f, 0x30, 0x0b,\n 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03,\n
                0x02, 0x01, 0x86, 0x30, 0x0f, 0x06, 0x03, 0x55,\n 0x1d, 0x13, 0x01,
                0x01, 0xff, 0x04, 0x05, 0x30,\n 0x03, 0x01, 0x01, 0xff, 0x30, 0x1d,
                0x06, 0x03,\n 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x7b,\n 0xa1,
                0xa5, 0x94, 0xa5, 0xe5, 0x8f, 0x95, 0x5d,\n 0xd4, 0xce, 0xdc, 0x0f,
                0x8a, 0xbe, 0xad, 0x9a,\n 0x6b, 0x66, 0x3e, 0x30, 0x10, 0x06, 0x09,
                0x2b,\n 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x01,\n 0x04, 0x03,
                0x02, 0x01, 0x00, 0x30, 0x0a, 0x06,\n 0x08, 0x2a, 0x86, 0x48, 0xce,
                0x3d, 0x04, 0x03,\n 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,\n
                0x00, 0xd2, 0x06, 0x28, 0xc5, 0x31, 0x3a, 0x11,\n 0x8d, 0xb6, 0xcb,
                0x2b, 0x3f, 0xdd, 0x2a, 0x9a,\n 0x13, 0x30, 0x52, 0x77, 0xaa, 0xda,
                0xda, 0xcb,\n 0xce, 0xb9, 0x5c, 0xe4, 0x32, 0x1c, 0x02, 0xfa,\n 0x30,
                0x02, 0x21, 0x00, 0xb3, 0x82, 0x24, 0xa2,\n 0xb1, 0x67, 0x6b, 0x69,
                0x07, 0x0e, 0xcd, 0x77,\n 0x74, 0x99, 0x06, 0x9c, 0x59, 0xb2, 0x00,
                0xc0,\n 0xb3, 0xbb, 0x37, 0x5b, 0xc0, 0x1b, 0xfb, 0xd9,\n 0x70, 0x98,
                0xb9, 0x1e };\n\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY[]
                = \n{ 0x30, 0x81, 0x93, 0x02, 0x01, 0x00, 0x30, 0x13,\n 0x06, 0x07,
                0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,\n 0x01, 0x06, 0x08, 0x2a, 0x86,
                0x48, 0xce, 0x3d,\n 0x03, 0x01, 0x07, 0x04, 0x79, 0x30, 0x77, 0x02,\n
                0x01, 0x01, 0x04, 0x20, 0x78, 0xa7, 0x3d, 0xed,\n 0xa0, 0xb5, 0x67,
                0x86, 0xa7, 0x89, 0x75, 0x46,\n 0x8c, 0xd4, 0xaf, 0xbd, 0x7c, 0x36,
                0x86, 0x5e,\n 0xb3, 0xc0, 0x00, 0x98, 0x22, 0xcf, 0x3c, 0x38,\n 0xa4,
                0x31, 0xeb, 0x51, 0xa0, 0x0a, 0x06, 0x08,\n 0x2a, 0x86, 0x48, 0xce,
                0x3d, 0x03, 0x01, 0x07,\n 0xa1, 0x44, 0x03, 0x42, 0x00, 0x04, 0x44,
                0x9c,\n 0x2c, 0x36, 0xce, 0x5e, 0xf3, 0x9b, 0xf7, 0x4d,\n 0xc0, 0x62,
                0x52, 0x3d, 0xa3, 0x0f, 0x04, 0xe2,\n 0x16, 0xcb, 0x48, 0x72, 0x4f,
                0xb7, 0x91, 0x36,\n 0x04, 0xee, 0x10, 0xe1, 0xb1, 0xce, 0xa6, 0xe5,\n
                0x87, 0xd8, 0xe8, 0x7a, 0x3f, 0xe0, 0x83, 0x3e,\n 0xd7, 0xbd, 0xa4,
                0x0b, 0xf7, 0x13, 0xa8, 0x3d,\n 0xd1, 0x79, 0x3f, 0x65, 0xc6, 0x69,
                0x43, 0xec,\n 0x41, 0x3b, 0xaa, 0x9c, 0x8b, 0xf6 };\n\nconst char
                MBED_CLOUD_DEV_MANUFACTURER[] = \"dev_manufacturer\";\n\nconst char
                MBED_CLOUD_DEV_MODEL_NUMBER[] = \"dev_model_num\";\n\nconst char MBED_CLOUD_DEV_SERIAL_NUMBER[]
                = \"0\";\n\nconst char MBED_CLOUD_DEV_DEVICE_TYPE[] = \"dev_device_type\";\n\nconst
                char MBED_CLOUD_DEV_HARDWARE_VERSION[] = \"dev_hardware_version\";\n\nconst
                uint32_t MBED_CLOUD_DEV_MEMORY_TOTAL_KB = 0;\n\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE_SIZE
                = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE);\nconst uint32_t
                MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE);\nconst
                uint32_t MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE);\nconst
                uint32_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY);\n\n#endif
                //__MBED_CLOUD_DEV_CREDENTIALS_H__\n'
          schema:
            $ref: '#/definitions/DeveloperCertificateResponseData'
        400:
          description: Bad request.
          examples:
            Bad Request Error:
              code: 400
              fields:
                message: Missing certificate name
                name: name
              message: Bad Request. Missing certificate name
              object: error
              request_id: 015fee4431fd38c98640fbfb00000000
              type: validation_error
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: The provided access token is not valid.
          examples:
            Authentication Error:
              code: 401
              message: Provided access token is not valid.
              object: error
              request_id: 015fee4431fd38c98640fbfb00000000
              type: invalid_auth
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: The maximum number of developer certificates for the given
            account has already been reached.
          examples:
            Account Limit Exceeded Error:
              code: 403
              fields:
                message: '10'
                name: cert-count
              message: Forbidden. Limit for the number of certificates exceeded.
              object: error
              request_id: 015fee4431fd38c98640fbfb00000000
              type: account_limit_exceeded
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: Certificate with the given name already exists.
          examples:
            Duplicate Error:
              code: 409
              fields:
                message: Certificate already exists
                name: certificate
              message: Conflict. Certificate already exists.
              object: error
              request_id: 015fee4431fd38c98640fbfb00000000
              type: duplicate
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new developer certificate to connect to the bootstrap server.
      tags:
      - Developer certificate
  /v3/developer-certificates/{developerCertificateId}:
    get:
      description: 'This REST API is intended to be used by customers to fetch an
        existing developer certificate (a certificate that can be flashed into multiple
        devices to connect to bootstrap server).


        **Example usage:**

        curl -X GET "http://api.us-east-1.mbedcloud.com/v3/developer-certificates/THE_CERTIFICATE_ID"
        -H "accept: application/json" -H "Authorization: Bearer THE_ACCESS_TOKEN"

        '
      operationId: getDeveloperCertificate
      parameters:
      - description: 'A unique identifier for the developer certificate.

          '
        in: path
        name: developerCertificateId
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: Developer certificate fetched successfully.
          examples:
            Success:
              account_id: 015fee5d9b3538c98640fbfb00000000
              created_at: '2017-12-11T14:22:20.009Z'
              description: This certificate will be used with multiple developer devices
              developer_certificate: '-----BEGIN CERTIFICATE-----\nMIICcDCCAhWgAwIBAgIRAPSBbBtLUE/ekQcWE4GzPJEwCgYIKoZIzj0EAwIwgaIx\nCzAJBgNVBAYTAkdCMRcwFQYDVQQIDA5DYW1icmlkZ2VzaGlyZTESMBAGA1UEBwwJ\nQ2FtYnJpZGdlMRAwDgYDVQQKDAdBUk0gTHRkMSkwJwYDVQQLDCAwMTU4NDNlMzJl\nYzkwMjQyMGEwMTVlMDcwMDAwMDAwMDEpMCcGA1UEAwwgMDE2MWRiYmNkZDY2MGE1\nODBhMDEwYzM0MDNjMDAwMDAwHhcNMTgwMjI4MDkyNzIzWhcNMjgwMjI4MDkyNzIz\nWjCBojELMAkGA1UEBhMCR0IxFzAVBgNVBAgMDkNhbWJyaWRnZXNoaXJlMRIwEAYD\nVQQHDAlDYW1icmlkZ2UxEDAOBgNVBAoMB0FSTSBMdGQxKTAnBgNVBAsMIDAxNTg0\nM2UzMmVjOTAyNDIwYTAxNWUwNzAwMDAwMDAwMSkwJwYDVQQDDCAwMTYxZGJiY2Rk\nNjYwYTU4MGEwMTBjMzQwM2MwMDAwMDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\nBEScLDbOXvOb903AYlI9ow8E4hbLSHJPt5E2BO4Q4bHOpuWH2Oh6P+CDPte9pAv3\nE6g90Xk/ZcZpQ+xBO6qci/ajKjAoMBIGCSsGAQQBoCCBSQQFAgNAAJEwEgYDVR0T\nAQH/BAgwBgEB/wIBADAKBggqhkjOPQQDAgNJADBGAiEAsi9zSK8Njl22GoEHrsg8\nQlwFnrkkP9d6FyLFtmqndt4CIQCmVHwisYNcCkqD2SWctG1xQHo0HZePAQW8PstM\nzhNupQ==\n-----END
                CERTIFICATE-----\n'
              developer_private_key: '-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgeKc97aC1Z4aniXVG\njNSvvXw2hl6zwACYIs88OKQx61GgCgYIKoZIzj0DAQehRANCAAREnCw2zl7zm/dN\nwGJSPaMPBOIWy0hyT7eRNgTuEOGxzqblh9joej/ggz7XvaQL9xOoPdF5P2XGaUPs\nQTuqnIv2\n-----END
                PRIVATE KEY-----\n'
              etag: '1'
              id: 015fee4431fd38c98640fbfb00000000
              name: DeveloperCertificate
              object: trusted-cert
              security_file_content: '/*\n * Copyright (c) 2017 ARM Limited. All rights
                reserved.\n * SPDX-License-Identifier: Apache-2.0\n * Licensed under
                the Apache License, Version 2.0 (the License); you may\n * not use
                this file except in compliance with the License.\n * You may obtain
                a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n
                *\n * Unless required by applicable law or agreed to in writing, software\n
                * distributed under the License is distributed on an AS IS BASIS,
                WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or
                implied.\n * See the License for the specific language governing permissions
                and\n * limitations under the License.\n */\n#ifndef __MBED_CLOUD_DEV_CREDENTIALS_H__\n#define
                __MBED_CLOUD_DEV_CREDENTIALS_H__\n\n#include <inttypes.h>\n\nconst
                char MBED_CLOUD_DEV_BOOTSTRAP_ENDPOINT_NAME[] = \"0161dbbcdd660a580a010c3403c00000\";\nconst
                char MBED_CLOUD_DEV_ACCOUNT_ID[] = \"015843e32ec902420a015e0700000000\";\nconst
                char MBED_CLOUD_DEV_BOOTSTRAP_SERVER_URI[] = \"coaps://coap.us-east-1.mbedcloud.com:5684?aid=015843e32ec902420a015e0700000000\";\n\nconst
                uint8_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE[] = \n{ 0x30,
                0x82, 0x02, 0x70, 0x30, 0x82, 0x02, 0x15,\n 0xa0, 0x03, 0x02, 0x01,
                0x02, 0x02, 0x11, 0x00,\n 0xf4, 0x81, 0x6c, 0x1b, 0x4b, 0x50, 0x4f,
                0xde,\n 0x91, 0x07, 0x16, 0x13, 0x81, 0xb3, 0x3c, 0x91,\n 0x30, 0x0a,
                0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,\n 0x3d, 0x04, 0x03, 0x02, 0x30,
                0x81, 0xa2, 0x31,\n 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,\n
                0x13, 0x02, 0x47, 0x42, 0x31, 0x17, 0x30, 0x15,\n 0x06, 0x03, 0x55,
                0x04, 0x08, 0x0c, 0x0e, 0x43,\n 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64,
                0x67, 0x65,\n 0x73, 0x68, 0x69, 0x72, 0x65, 0x31, 0x12, 0x30,\n 0x10,
                0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x09,\n 0x43, 0x61, 0x6d, 0x62,
                0x72, 0x69, 0x64, 0x67,\n 0x65, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03,
                0x55,\n 0x04, 0x0a, 0x0c, 0x07, 0x41, 0x52, 0x4d, 0x20,\n 0x4c, 0x74,
                0x64, 0x31, 0x29, 0x30, 0x27, 0x06,\n 0x03, 0x55, 0x04, 0x0b, 0x0c,
                0x20, 0x30, 0x31,\n 0x35, 0x38, 0x34, 0x33, 0x65, 0x33, 0x32, 0x65,\n
                0x63, 0x39, 0x30, 0x32, 0x34, 0x32, 0x30, 0x61,\n 0x30, 0x31, 0x35,
                0x65, 0x30, 0x37, 0x30, 0x30,\n 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
                0x31, 0x29,\n 0x30, 0x27, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c,\n 0x20,
                0x30, 0x31, 0x36, 0x31, 0x64, 0x62, 0x62,\n 0x63, 0x64, 0x64, 0x36,
                0x36, 0x30, 0x61, 0x35,\n 0x38, 0x30, 0x61, 0x30, 0x31, 0x30, 0x63,
                0x33,\n 0x34, 0x30, 0x33, 0x63, 0x30, 0x30, 0x30, 0x30,\n 0x30, 0x30,
                0x1e, 0x17, 0x0d, 0x31, 0x38, 0x30,\n 0x32, 0x32, 0x38, 0x30, 0x39,
                0x32, 0x37, 0x32,\n 0x33, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x30, 0x32,\n
                0x32, 0x38, 0x30, 0x39, 0x32, 0x37, 0x32, 0x33,\n 0x5a, 0x30, 0x81,
                0xa2, 0x31, 0x0b, 0x30, 0x09,\n 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
                0x02, 0x47,\n 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55,\n 0x04,
                0x08, 0x0c, 0x0e, 0x43, 0x61, 0x6d, 0x62,\n 0x72, 0x69, 0x64, 0x67,
                0x65, 0x73, 0x68, 0x69,\n 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06,
                0x03,\n 0x55, 0x04, 0x07, 0x0c, 0x09, 0x43, 0x61, 0x6d,\n 0x62, 0x72,
                0x69, 0x64, 0x67, 0x65, 0x31, 0x10,\n 0x30, 0x0e, 0x06, 0x03, 0x55,
                0x04, 0x0a, 0x0c,\n 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74, 0x64,\n
                0x31, 0x29, 0x30, 0x27, 0x06, 0x03, 0x55, 0x04,\n 0x0b, 0x0c, 0x20,
                0x30, 0x31, 0x35, 0x38, 0x34,\n 0x33, 0x65, 0x33, 0x32, 0x65, 0x63,
                0x39, 0x30,\n 0x32, 0x34, 0x32, 0x30, 0x61, 0x30, 0x31, 0x35,\n 0x65,
                0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30,\n 0x30, 0x30, 0x30, 0x31,
                0x29, 0x30, 0x27, 0x06,\n 0x03, 0x55, 0x04, 0x03, 0x0c, 0x20, 0x30,
                0x31,\n 0x36, 0x31, 0x64, 0x62, 0x62, 0x63, 0x64, 0x64,\n 0x36, 0x36,
                0x30, 0x61, 0x35, 0x38, 0x30, 0x61,\n 0x30, 0x31, 0x30, 0x63, 0x33,
                0x34, 0x30, 0x33,\n 0x63, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x59,\n
                0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,\n 0x3d, 0x02, 0x01,
                0x06, 0x08, 0x2a, 0x86, 0x48,\n 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
                0x42, 0x00,\n 0x04, 0x44, 0x9c, 0x2c, 0x36, 0xce, 0x5e, 0xf3,\n 0x9b,
                0xf7, 0x4d, 0xc0, 0x62, 0x52, 0x3d, 0xa3,\n 0x0f, 0x04, 0xe2, 0x16,
                0xcb, 0x48, 0x72, 0x4f,\n 0xb7, 0x91, 0x36, 0x04, 0xee, 0x10, 0xe1,
                0xb1,\n 0xce, 0xa6, 0xe5, 0x87, 0xd8, 0xe8, 0x7a, 0x3f,\n 0xe0, 0x83,
                0x3e, 0xd7, 0xbd, 0xa4, 0x0b, 0xf7,\n 0x13, 0xa8, 0x3d, 0xd1, 0x79,
                0x3f, 0x65, 0xc6,\n 0x69, 0x43, 0xec, 0x41, 0x3b, 0xaa, 0x9c, 0x8b,\n
                0xf6, 0xa3, 0x2a, 0x30, 0x28, 0x30, 0x12, 0x06,\n 0x09, 0x2b, 0x06,
                0x01, 0x04, 0x01, 0xa0, 0x20,\n 0x81, 0x49, 0x04, 0x05, 0x02, 0x03,
                0x40, 0x00,\n 0x91, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13,\n 0x01,
                0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01,\n 0x01, 0xff, 0x02, 0x01,
                0x00, 0x30, 0x0a, 0x06,\n 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04,
                0x03,\n 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,\n 0x00, 0xb2,
                0x2f, 0x73, 0x48, 0xaf, 0x0d, 0x8e,\n 0x5d, 0xb6, 0x1a, 0x81, 0x07,
                0xae, 0xc8, 0x3c,\n 0x42, 0x5c, 0x05, 0x9e, 0xb9, 0x24, 0x3f, 0xd7,\n
                0x7a, 0x17, 0x22, 0xc5, 0xb6, 0x6a, 0xa7, 0x76,\n 0xde, 0x02, 0x21,
                0x00, 0xa6, 0x54, 0x7c, 0x22,\n 0xb1, 0x83, 0x5c, 0x0a, 0x4a, 0x83,
                0xd9, 0x25,\n 0x9c, 0xb4, 0x6d, 0x71, 0x40, 0x7a, 0x34, 0x1d,\n 0x97,
                0x8f, 0x01, 0x05, 0xbc, 0x3e, 0xcb, 0x4c,\n 0xce, 0x13, 0x6e, 0xa5
                };\n\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE[]
                = \n{ 0x30, 0x82, 0x02, 0x35, 0x30, 0x82, 0x01, 0xdb,\n 0xa0, 0x03,
                0x02, 0x01, 0x02, 0x02, 0x10, 0x5c,\n 0x27, 0xa5, 0x76, 0x7d, 0x58,
                0x85, 0x8a, 0x43,\n 0x91, 0xa0, 0x61, 0xab, 0xcf, 0xa6, 0x59, 0x30,\n
                0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\n 0x04, 0x03, 0x02,
                0x30, 0x72, 0x31, 0x0b, 0x30,\n 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,
                0x13, 0x02,\n 0x47, 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,\n 0x55,
                0x04, 0x08, 0x13, 0x0e, 0x43, 0x61, 0x6d,\n 0x62, 0x72, 0x69, 0x64,
                0x67, 0x65, 0x73, 0x68,\n 0x69, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10,
                0x06,\n 0x03, 0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x61,\n 0x6d, 0x62,
                0x72, 0x69, 0x64, 0x67, 0x65, 0x31,\n 0x10, 0x30, 0x0e, 0x06, 0x03,
                0x55, 0x04, 0x0a,\n 0x13, 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74,\n
                0x64, 0x31, 0x24, 0x30, 0x22, 0x06, 0x03, 0x55,\n 0x04, 0x03, 0x13,
                0x1b, 0x41, 0x52, 0x4d, 0x20,\n 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
                0x61, 0x74,\n 0x69, 0x6f, 0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x74,\n 0x73,
                0x74, 0x72, 0x61, 0x70, 0x43, 0x41, 0x30,\n 0x20, 0x17, 0x0d, 0x31,
                0x37, 0x30, 0x35, 0x31,\n 0x35, 0x31, 0x39, 0x34, 0x39, 0x31, 0x31,
                0x5a,\n 0x18, 0x0f, 0x32, 0x30, 0x35, 0x32, 0x30, 0x35,\n 0x31, 0x35,
                0x31, 0x39, 0x35, 0x39, 0x31, 0x30,\n 0x5a, 0x30, 0x72, 0x31, 0x0b,
                0x30, 0x09, 0x06,\n 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x47, 0x42,\n
                0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04,\n 0x08, 0x13, 0x0e,
                0x43, 0x61, 0x6d, 0x62, 0x72,\n 0x69, 0x64, 0x67, 0x65, 0x73, 0x68,
                0x69, 0x72,\n 0x65, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55,\n 0x04,
                0x07, 0x13, 0x09, 0x43, 0x61, 0x6d, 0x62,\n 0x72, 0x69, 0x64, 0x67,
                0x65, 0x31, 0x10, 0x30,\n 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13,
                0x07,\n 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74, 0x64, 0x31,\n 0x24, 0x30,
                0x22, 0x06, 0x03, 0x55, 0x04, 0x03,\n 0x13, 0x1b, 0x41, 0x52, 0x4d,
                0x20, 0x49, 0x6e,\n 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,\n
                0x6e, 0x20, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,\n 0x72, 0x61, 0x70,
                0x43, 0x41, 0x30, 0x59, 0x30,\n 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48,
                0xce, 0x3d,\n 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,\n 0x3d,
                0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04,\n 0x8b, 0x7c, 0x86, 0xc3,
                0x88, 0x54, 0xe6, 0x5f,\n 0xe0, 0x57, 0x4e, 0x1b, 0xac, 0x29, 0x82,
                0xea,\n 0x7d, 0x91, 0x00, 0x63, 0xa7, 0x4a, 0x05, 0xbc,\n 0x54, 0xc5,
                0x71, 0x27, 0x33, 0x19, 0x1b, 0x2e,\n 0xfa, 0x41, 0xf8, 0x7a, 0x9a,
                0x0c, 0x5d, 0xfc,\n 0xb3, 0x37, 0x01, 0x99, 0xc5, 0xc9, 0xbe, 0x78,\n
                0x5b, 0x1d, 0xec, 0xb0, 0x1a, 0x1d, 0xdc, 0xe4,\n 0x6f, 0x57, 0x04,
                0xf4, 0x3a, 0xca, 0xa8, 0xd2,\n 0xa3, 0x51, 0x30, 0x4f, 0x30, 0x0b,
                0x06, 0x03,\n 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x01,\n 0x86,
                0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13,\n 0x01, 0x01, 0xff, 0x04,
                0x05, 0x30, 0x03, 0x01,\n 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03, 0x55,
                0x1d,\n 0x0e, 0x04, 0x16, 0x04, 0x14, 0x13, 0xef, 0x69,\n 0xfa, 0x62,
                0x3f, 0x00, 0x86, 0xf4, 0x05, 0xb8,\n 0xb6, 0xe6, 0xb2, 0xf1, 0xdb,
                0x69, 0x10, 0xb4,\n 0x39, 0x30, 0x10, 0x06, 0x09, 0x2b, 0x06, 0x01,\n
                0x04, 0x01, 0x82, 0x37, 0x15, 0x01, 0x04, 0x03,\n 0x02, 0x01, 0x00,
                0x30, 0x0a, 0x06, 0x08, 0x2a,\n 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,
                0x02, 0x03,\n 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xa2,\n 0x50,
                0x88, 0x0f, 0x55, 0xe8, 0x26, 0x49, 0xe6,\n 0xf5, 0x71, 0x86, 0x33,
                0x29, 0x05, 0x4c, 0xf9,\n 0xfd, 0x1f, 0x14, 0x98, 0x92, 0x85, 0xd9,
                0x5c,\n 0x48, 0x02, 0x9e, 0xc2, 0x79, 0xa8, 0x59, 0x02,\n 0x20, 0x3e,
                0xfe, 0x3c, 0xa0, 0xbf, 0xd3, 0x0f,\n 0x15, 0x83, 0x56, 0xbc, 0xf2,
                0xfa, 0x16, 0x26,\n 0x7a, 0xc1, 0x68, 0xaa, 0xbc, 0x91, 0x3c, 0x69,\n
                0x44, 0x36, 0xf9, 0x74, 0xa1, 0x82, 0x76, 0x7a,\n 0x6e };\n\nconst
                uint8_t MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE[] = \n{ 0x30,
                0x82, 0x02, 0x30, 0x30, 0x82, 0x01, 0xd5,\n 0xa0, 0x03, 0x02, 0x01,
                0x02, 0x02, 0x10, 0x26,\n 0xf9, 0x08, 0xfc, 0xf1, 0xc0, 0x46, 0xa4,
                0x4a,\n 0x4d, 0x2c, 0xf1, 0x94, 0x27, 0xf9, 0x1f, 0x30,\n 0x0a, 0x06,
                0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,\n 0x04, 0x03, 0x02, 0x30, 0x6f,
                0x31, 0x0b, 0x30,\n 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02,\n
                0x47, 0x42, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03,\n 0x55, 0x04, 0x08,
                0x13, 0x0e, 0x43, 0x61, 0x6d,\n 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
                0x73, 0x68,\n 0x69, 0x72, 0x65, 0x31, 0x12, 0x30, 0x10, 0x06,\n 0x03,
                0x55, 0x04, 0x07, 0x13, 0x09, 0x43, 0x61,\n 0x6d, 0x62, 0x72, 0x69,
                0x64, 0x67, 0x65, 0x31,\n 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04,
                0x0a,\n 0x13, 0x07, 0x41, 0x52, 0x4d, 0x20, 0x4c, 0x74,\n 0x64, 0x31,
                0x21, 0x30, 0x1f, 0x06, 0x03, 0x55,\n 0x04, 0x03, 0x13, 0x18, 0x41,
                0x52, 0x4d, 0x20,\n 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,\n
                0x69, 0x6f, 0x6e, 0x20, 0x4c, 0x57, 0x4d, 0x32,\n 0x4d, 0x20, 0x43,
                0x41, 0x30, 0x20, 0x17, 0x0d,\n 0x31, 0x37, 0x30, 0x32, 0x31, 0x32,
                0x31, 0x30,\n 0x33, 0x37, 0x35, 0x32, 0x5a, 0x18, 0x0f, 0x32,\n 0x30,
                0x35, 0x32, 0x30, 0x32, 0x31, 0x32, 0x31,\n 0x30, 0x34, 0x37, 0x35,
                0x32, 0x5a, 0x30, 0x6f,\n 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
                0x04,\n 0x06, 0x13, 0x02, 0x47, 0x42, 0x31, 0x17, 0x30,\n 0x15, 0x06,
                0x03, 0x55, 0x04, 0x08, 0x13, 0x0e,\n 0x43, 0x61, 0x6d, 0x62, 0x72,
                0x69, 0x64, 0x67,\n 0x65, 0x73, 0x68, 0x69, 0x72, 0x65, 0x31, 0x12,\n
                0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13,\n 0x09, 0x43, 0x61,
                0x6d, 0x62, 0x72, 0x69, 0x64,\n 0x67, 0x65, 0x31, 0x10, 0x30, 0x0e,
                0x06, 0x03,\n 0x55, 0x04, 0x0a, 0x13, 0x07, 0x41, 0x52, 0x4d,\n 0x20,
                0x4c, 0x74, 0x64, 0x31, 0x21, 0x30, 0x1f,\n 0x06, 0x03, 0x55, 0x04,
                0x03, 0x13, 0x18, 0x41,\n 0x52, 0x4d, 0x20, 0x49, 0x6e, 0x74, 0x65,
                0x67,\n 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4c,\n 0x57, 0x4d,
                0x32, 0x4d, 0x20, 0x43, 0x41, 0x30,\n 0x59, 0x30, 0x13, 0x06, 0x07,
                0x2a, 0x86, 0x48,\n 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86,\n
                0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42,\n 0x00, 0x04, 0xba,
                0xea, 0x80, 0x01, 0x2d, 0xf0,\n 0xe1, 0xb6, 0xc5, 0x5f, 0xf9, 0x76,
                0x84, 0x31,\n 0xa9, 0x29, 0xa1, 0xc7, 0xa8, 0xfd, 0xa0, 0xad,\n 0xd9,
                0x94, 0xe7, 0xec, 0x5a, 0x33, 0xa1, 0x2c,\n 0x8e, 0x36, 0x43, 0x9b,
                0x18, 0xdf, 0xce, 0x71,\n 0x14, 0x24, 0xb1, 0xfb, 0x16, 0x34, 0x0e,
                0x43,\n 0xfc, 0x23, 0x77, 0xd4, 0x13, 0xd7, 0x11, 0xaa,\n 0x39, 0x60,
                0xab, 0xa2, 0xdf, 0x24, 0xb3, 0xeb,\n 0xa0, 0xc5, 0xa3, 0x51, 0x30,
                0x4f, 0x30, 0x0b,\n 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03,\n
                0x02, 0x01, 0x86, 0x30, 0x0f, 0x06, 0x03, 0x55,\n 0x1d, 0x13, 0x01,
                0x01, 0xff, 0x04, 0x05, 0x30,\n 0x03, 0x01, 0x01, 0xff, 0x30, 0x1d,
                0x06, 0x03,\n 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x7b,\n 0xa1,
                0xa5, 0x94, 0xa5, 0xe5, 0x8f, 0x95, 0x5d,\n 0xd4, 0xce, 0xdc, 0x0f,
                0x8a, 0xbe, 0xad, 0x9a,\n 0x6b, 0x66, 0x3e, 0x30, 0x10, 0x06, 0x09,
                0x2b,\n 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x01,\n 0x04, 0x03,
                0x02, 0x01, 0x00, 0x30, 0x0a, 0x06,\n 0x08, 0x2a, 0x86, 0x48, 0xce,
                0x3d, 0x04, 0x03,\n 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,\n
                0x00, 0xd2, 0x06, 0x28, 0xc5, 0x31, 0x3a, 0x11,\n 0x8d, 0xb6, 0xcb,
                0x2b, 0x3f, 0xdd, 0x2a, 0x9a,\n 0x13, 0x30, 0x52, 0x77, 0xaa, 0xda,
                0xda, 0xcb,\n 0xce, 0xb9, 0x5c, 0xe4, 0x32, 0x1c, 0x02, 0xfa,\n 0x30,
                0x02, 0x21, 0x00, 0xb3, 0x82, 0x24, 0xa2,\n 0xb1, 0x67, 0x6b, 0x69,
                0x07, 0x0e, 0xcd, 0x77,\n 0x74, 0x99, 0x06, 0x9c, 0x59, 0xb2, 0x00,
                0xc0,\n 0xb3, 0xbb, 0x37, 0x5b, 0xc0, 0x1b, 0xfb, 0xd9,\n 0x70, 0x98,
                0xb9, 0x1e };\n\nconst uint8_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY[]
                = \n{ 0x30, 0x81, 0x93, 0x02, 0x01, 0x00, 0x30, 0x13,\n 0x06, 0x07,
                0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,\n 0x01, 0x06, 0x08, 0x2a, 0x86,
                0x48, 0xce, 0x3d,\n 0x03, 0x01, 0x07, 0x04, 0x79, 0x30, 0x77, 0x02,\n
                0x01, 0x01, 0x04, 0x20, 0x78, 0xa7, 0x3d, 0xed,\n 0xa0, 0xb5, 0x67,
                0x86, 0xa7, 0x89, 0x75, 0x46,\n 0x8c, 0xd4, 0xaf, 0xbd, 0x7c, 0x36,
                0x86, 0x5e,\n 0xb3, 0xc0, 0x00, 0x98, 0x22, 0xcf, 0x3c, 0x38,\n 0xa4,
                0x31, 0xeb, 0x51, 0xa0, 0x0a, 0x06, 0x08,\n 0x2a, 0x86, 0x48, 0xce,
                0x3d, 0x03, 0x01, 0x07,\n 0xa1, 0x44, 0x03, 0x42, 0x00, 0x04, 0x44,
                0x9c,\n 0x2c, 0x36, 0xce, 0x5e, 0xf3, 0x9b, 0xf7, 0x4d,\n 0xc0, 0x62,
                0x52, 0x3d, 0xa3, 0x0f, 0x04, 0xe2,\n 0x16, 0xcb, 0x48, 0x72, 0x4f,
                0xb7, 0x91, 0x36,\n 0x04, 0xee, 0x10, 0xe1, 0xb1, 0xce, 0xa6, 0xe5,\n
                0x87, 0xd8, 0xe8, 0x7a, 0x3f, 0xe0, 0x83, 0x3e,\n 0xd7, 0xbd, 0xa4,
                0x0b, 0xf7, 0x13, 0xa8, 0x3d,\n 0xd1, 0x79, 0x3f, 0x65, 0xc6, 0x69,
                0x43, 0xec,\n 0x41, 0x3b, 0xaa, 0x9c, 0x8b, 0xf6 };\n\nconst char
                MBED_CLOUD_DEV_MANUFACTURER[] = \"dev_manufacturer\";\n\nconst char
                MBED_CLOUD_DEV_MODEL_NUMBER[] = \"dev_model_num\";\n\nconst char MBED_CLOUD_DEV_SERIAL_NUMBER[]
                = \"0\";\n\nconst char MBED_CLOUD_DEV_DEVICE_TYPE[] = \"dev_device_type\";\n\nconst
                char MBED_CLOUD_DEV_HARDWARE_VERSION[] = \"dev_hardware_version\";\n\nconst
                uint32_t MBED_CLOUD_DEV_MEMORY_TOTAL_KB = 0;\n\nconst uint32_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE_SIZE
                = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_CERTIFICATE);\nconst uint32_t
                MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_SERVER_ROOT_CA_CERTIFICATE);\nconst
                uint32_t MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE_SIZE = sizeof(MBED_CLOUD_DEV_LWM2M_SERVER_ROOT_CA_CERTIFICATE);\nconst
                uint32_t MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY_SIZE = sizeof(MBED_CLOUD_DEV_BOOTSTRAP_DEVICE_PRIVATE_KEY);\n\n#endif
                //__MBED_CLOUD_DEV_CREDENTIALS_H__\n'
          schema:
            $ref: '#/definitions/DeveloperCertificateResponseData'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: The provided access token is not valid.
          examples:
            Authentication Error:
              code: 401
              message: Provided access token is not valid.
              object: error
              request_id: 015fee4431fd38c98640fbfb00000000
              type: invalid_auth
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Developer certificate not found with given id.
          examples:
            Authentication Error:
              code: 404
              message: 'Not Found. Not found: 016006724ff53ade90ed948d03c00001'
              object: error
              request_id: 015fee4431fd38c98640fbfb00000000
              type: not_found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Fetch an existing developer certificate to connect to the bootstrap
        server.
      tags:
      - Developer certificate
  /v3/device-enrollments:
    get:
      description: 'Provides a list of pending and claimed enrollments.

        **Example usage:**

        ```

        curl -X GET \

        -H ''Authorization: Bearer <valid access token>'' \

        https://api.us-east-1.mbedcloud.com/v3/device-enrollments

        ```

        With query parameters:

        ```

        curl -X GET \

        -H ''Authorization: Bearer <valid access token>'' \

        ''https://api.us-east-1.mbedcloud.com/v3/device-enrollments?limit=10''

        ```

        '
      operationId: getDeviceEnrollments
      parameters:
      - description: Number of results to be returned. Between 2 and 1000, inclusive.
        in: query
        maximum: 1000
        minimum: 2
        name: limit
        required: false
        type: integer
      - description: Entity ID to fetch after.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: ASC or DESC
        enum:
        - ASC
        - DESC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma-separated additional data to return. Currently supported:
          total_count.'
        in: query
        name: include
        required: false
        type: string
      produces:
      - application/json
      responses:
        200:
          description: OK.
          examples:
            Success:
              after: 2d238a89038b4ddb84699dd36a901063
              data:
              - account_id: 015fee5d9b3538c98640fbfb00000000
                claimed_at: '2017-12-13T14:35:10.000Z'
                created_at: '2017-12-11T14:35:20.009Z'
                enrolled_device_id: 2d238a89038b4ddb84699dd36a901063
                enrollment_identity: A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5
                etag: '1'
                expires_at: '2018-01-11T14:35:20.009Z'
                id: sckv52bebji8dxnxuw3zvnon95u8gshm
                object: enrollment
              - account_id: 015fee5d9b3538c98640fbfb00000000
                created_at: '2017-12-11T14:36:20.009Z'
                enrolled_device_id: 2d238a89038b4ddb84699dd36a901063
                enrollment_identity: A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5
                etag: '1'
                expires_at: '2018-01-11T14:35:20.009Z'
                id: 000v52bebji8dxnxuw3zvnon95u8gshm
                object: enrollment
              has_more: true
              limit: 2
              object: list
              order: ASC
              total_count: 55
          schema:
            $ref: '#/definitions/EnrollmentIdentities'
        400:
          description: Bad request. The access token could not be read.
          examples:
            Error:
              code: 400
              message: JWT couldn't be read
              object: error
              type: validation_error
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: The provided access token is not valid.
          examples:
            Error:
              code: 401
              message: The provided JWT was not valid
              object: error
              type: invalid_auth
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get enrollment list.
      tags:
      - Public API
    post:
      description: 'When the device connects to the bootstrap server and provides
        the enrollment ID, it will be assigned to your account.

        <br>

        **Example usage:**

        ```

        curl -X POST \

        -H ''Authorization: Bearer <valid access token>'' \

        -H ''content-type: application/json'' \

        https://api.us-east-1.mbedcloud.com/v3/device-enrollments \

        -d ''{"enrollment_identity": "A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5"}''

        ```

        '
      operationId: createDeviceEnrollment
      parameters:
      - in: body
        name: enrollment_identity
        required: true
        schema:
          $ref: '#/definitions/EnrollmentId'
      responses:
        201:
          description: Created. The enrollment claim has been created and is waiting
            for the device to connect.
          examples:
            Success:
              account_id: 015fee5d9b3538c98640fbfb00000000
              claimed_at: '2017-12-13T14:35:10.000Z'
              created_at: '2017-12-11T14:22:20.009Z'
              enrolled_device_id: 00005a4e027f0a580a01081c00000000
              enrollment_identity: A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5
              etag: '1'
              expires_at: '2018-01-11T14:22:20.009Z'
              id: 015fee4431fd38c98640fbfb00000000
              object: enrollment
          schema:
            $ref: '#/definitions/EnrollmentIdentity'
        400:
          description: Bad request. The enrollment identity is not valid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: The provided access token is not valid.
          examples:
            Authentication Error:
              code: 401
              message: Provided access token is not valid.
              object: error
              request_id: 015fee4431fd38c98640fbfb00000000
              type: invalid_auth
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: 'Conflict. The identity requested to be added already exists
            either on this or another account.

            '
          examples:
            Already claimed:
              code: 409
              fields:
              - enrollment_identity: Enrollment identity already claimed
              message: The requested enrollment identity has already been claimed.
              object: error
              request_id: 015fee4431fd38c98640fbfb00000000
              type: duplicate
            Conflict:
              code: 409
              fields:
              - enrollment_identity: Enrollment identity already exists
              message: The requested enrollment identity already exists.
              object: error
              request_id: 015fee4431fd38c98640fbfb00000000
              type: duplicate
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Place an enrollment claim for one or several devices.
      tags:
      - Public API
  /v3/device-enrollments-bulk-deletes:
    post:
      consumes:
      - multipart/form-data
      description: "With bulk delete, you can upload a `CSV` file containing a number\
        \ of enrollment IDs to be deleted.\n\n**Example usage:**\n```\ncurl -X POST\
        \ \\\n-H 'Authorization: Bearer <valid access token>' \\\n-F 'enrollment_identities=@/path/to/enrollments/enrollments.csv'\
        \ \\\nhttps://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes\n\
        \n```\n**The validation rules for an CSV file.**\n1. The first line in the\
        \ uploaded CSV file is assumed to be the header and is ignored.\n1. Each line\
        \ can contain comma-separated values, where the first value is always assumed\
        \ to be the Enrollment ID. Everything after the first comma is ignored.\n\
        1. Valid enrollments begin with A followed by a - and 95 characters in the\
        \ format as below.\n1. Up to one enrollment ID is expected per line. Empty\
        \ lines are ignored.\n1. Trailing comma at the end of the line is optional.\n\
        1. Lines are terminated with either a line feed \\n, a carriage return \\\
        r, or both together \\r\\n.\n1. Leading and trailing whitespace characters\
        \ (Unicode U+0000 - U+0020) are removed from the identity before validation.\n\
        1. Empty identities are ignored.\n1. Valid enrollment identities may be enclosed\
        \ within quotes. Whitespace inside quotes is not trimmed and will fail validation.\
        \ Empty quotes are also considered to be an invalid enrollment identity.\n\
        1. UTF-8 encoding is expected.\n\n\n**A valid enrollment file:**\n```\n\"\
        Examples of valid identites, notes\"\n\"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\"\
        ,\n\"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\"\
        \nA-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\n\
        A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:24:44:71:22:15:43:23:12,\
        \ This text is ignored,\n A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:60:25:48:44:71:22:15:43:23:12\
        \       , Whitespace is trimmed before validation\n  \"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:60:25:48:44:71:22:15:43:23:12\"\
        \       , Whitespace around quotes is also trimmed\n\n```\n\n**A file containing\
        \ invalid identities:**\n```\n\"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\"\
        , First line is ignored\nA_4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12,\
        \ Invalid version identifier\nA-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12,\
        \ Too short identity\n\"\", Empty quotes are an invalid identity\n\" A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\
        \ \", Whitespace inside quotes is not trimmed causing an error\n\n```\n\n\
        **An empty file:**\n```\n\"Examples of blank lines that are ignored\"\n\n\
        ,,\n, This is also considered to a blank line\n```\n"
      operationId: deleteBulkDeviceEnrollment
      parameters:
      - description: 'The `CSV` file containing the enrollment IDs. The maximum file
          size is 10MB.

          '
        in: formData
        name: enrollment_identities
        required: true
        type: file
      responses:
        201:
          description: 'Bulk delete data has been received and asynchronous processing
            has been started.

            '
          examples:
            BulkCreateResponse:
              properties:
                account_id: 00005a4e027f0a580a01081c00000000
                completed_at: null
                created_at: '2018-06-26T07:41:47.217Z'
                errors_count: 0
                errors_report_file: null
                etag: '1'
                full_report_file: null
                id: 00005a4e027f0a580a04567c00000000
                object: enrollment-identity-bulk-deletes
                processed_count: 0
                status: new
                total_count: 10
          schema:
            $ref: '#/definitions/BulkResponse'
        400:
          description: Bad request.
          examples:
            Bad request:
              code: 400
              message: Invalid request. Check your request parameters and URL.
              object: error
              request_id: 73fb0bd3ec1d452383255dd9a336668c
              type: bad_request
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: The provided access token is not valid.
          examples:
            Error:
              code: 401
              message: The provided JWT was not valid
              object: error
              type: invalid_auth
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Bulk delete
      tags:
      - Public API
  /v3/device-enrollments-bulk-deletes/{id}:
    get:
      description: 'Provides information on bulk delete for the given ID. For example,
        the bulk status and the number of processed enrollment identities. Also links
        to the bulk delete reports are provided.

        **Report file format:**

        The report files have a header line and the value are separated by commas.
        The lines are delimited by a line break (CRLF). The report file is compliant
        with IETF Informal CSV common format [RFC 4180](https://tools.ietf.org/html/rfc4180).

        An example of a full report file:

        ```

        "entity__id","entity__deleted_at","error__code","error__type","error__message","error__fields"

        "A-F9:AA:AA:AA:DE:31:C7:30:72:55:27:AE:8B:E1:1C:6F:42:7D:06:CF:FB:18:6F:59:48:29:B3:98:4B:76:8F:9E","2018-09-07T12:10:58.428Z","","","",""

        "A-FF:AA:AA:AA:3B:43:EB:D7:C7:30:03:5F:C8:D0:15:91:70:C2:5D:4F:EB:24:E9:3A:BB:D8:3C:FE:20:EA:B1:72","2018-09-07T12:10:58.428Z","","","",""

        ```

        An example of an error report file:

        ```

        "entity__id","error__code","error__type","error__message","error__fields"

        "A-F9:AA:AA:AA:DE:31:C7:30:72:55:27:AE:8B:E1:1C:6F:42:7D:06:CF:FB:18:6F:59:48:29:B3:98:4B:76:8F:9E","409","duplicate","Enrollment
        identity is already claimed in the mbed Cloud.",""

        "A-FF:AA:AA:AA:3B:43:EB:D7:C7:30:03:5F:C8:D0:15:91:70:C2:5D:4F:EB:24:E9:3A:BB:D8:3C:FE:20:EA:B1:72","409","duplicate","Enrollment
        identity is already claimed in the mbed Cloud.",""

        ```

        **Example usage:**

        ```

        curl -X GET \

        -H ''Authorization: Bearer <valid access token>'' \

        https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes/{id}

        ```

        '
      operationId: getBulkDeviceEnrollmentDelete
      parameters:
      - description: Bulk delete task entity ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/csv
      - application/json
      responses:
        200:
          description: Bulk delete entity found
          examples:
            BulkResponse:
              account_id: 00005a4e027f0a580a01081c00000000
              completed_at: '2018-06-26T09:13:21.308Z'
              created_at: '2018-06-26T09:12:21.308Z'
              errors_count: 1
              errors_report_file: https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes/2d238a89038b4ddb84699dd36a901063/errors_report.csv
              etag: '1'
              full_report_file: https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes/2d238a89038b4ddb84699dd36a901063/full_report.csv
              id: 2d238a89038b4ddb84699dd36a901063
              object: enrollment-identity-bulk-deletes
              processed_count: 10
              status: completed
              total_count: 10
          schema:
            $ref: '#/definitions/BulkResponse'
        400:
          description: Bad request. The bulk identity is not valid.
          examples:
            Bad request:
              code: 400
              fields:
              - bulk_id: Invalid bulk identity
              message: An error description.
              object: error
              request_id: 73fb0bd3ec1d452383255dd9a336668c
              type: validation_error
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: The provided access token is not valid.
          examples:
            Error:
              code: 401
              message: The provided JWT was not valid
              object: error
              type: invalid_auth
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Not found.
          examples:
            Not found:
              code: 404
              fields: []
              message: The requested resource could not be found
              object: error
              request_id: 73fb0bd3ec1d452383255dd9a336668c
              type: not_found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get bulk delete entity
      tags:
      - Public API
  /v3/device-enrollments-bulk-uploads:
    post:
      consumes:
      - multipart/form-data
      description: "With bulk upload, you can upload a `CSV` file containing a number\
        \ of enrollment IDs.\n\n**Example usage:**\n```\ncurl -X POST \\\n-H 'Authorization:\
        \ Bearer <valid access token>' \\\n-F 'enrollment_identities=@/path/to/enrollments/enrollments.csv'\
        \ \\\nhttps://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads\n\
        \n```\n**The validation rules for an CSV file.**\n1. The first line in the\
        \ uploaded CSV file is assumed to be the header and is ignored.\n1. Each line\
        \ can contain comma-separated values, where the first value is always assumed\
        \ to be the Enrollment ID. Everything after the first comma is ignored.\n\
        1. Valid enrollments begin with A followed by a - and 95 characters in the\
        \ format as below.\n1. Up to one enrollment ID is expected per line. Empty\
        \ lines are ignored.\n1. Trailing comma at the end of the line is optional.\n\
        1. Lines are terminated with either a line feed \\n, a carriage return \\\
        r, or both together \\r\\n.\n1. Leading and trailing whitespace characters\
        \ (Unicode U+0000 - U+0020) are removed from the identity before validation.\n\
        1. Empty identities are ignored.\n1. Valid enrollment identities may be enclosed\
        \ within quotes. Whitespace inside quotes is not trimmed and will fail validation.\
        \ Empty quotes are also considered to be an invalid enrollment identity.\n\
        1. UTF-8 encoding is expected.\n\n\n**A valid enrollment file:**\n```\n\"\
        Examples of valid identites, notes\"\n\"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\"\
        ,\n\"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\"\
        \nA-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\n\
        A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:24:44:71:22:15:43:23:12,\
        \ This text is ignored,\n A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:60:25:48:44:71:22:15:43:23:12\
        \       , Whitespace is trimmed before validation\n  \"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:60:25:48:44:71:22:15:43:23:12\"\
        \       , Whitespace around quotes is also trimmed\n\n```\n\n**A file containing\
        \ invalid identities:**\n```\n\"A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\"\
        , First line is ignored\nA_4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12,\
        \ Invalid version identifier\nA-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12,\
        \ Too short identity\n\"\", Empty quotes are an invalid identity\n\" A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\
        \ \", Whitespace inside quotes is not trimmed causing an error\n\n```\n\n\
        **An empty file:**\n```\n\"Examples of blank lines that are ignored\"\n\n\
        ,,\n, This is also considered to a blank line\n```\n"
      operationId: createBulkDeviceEnrollment
      parameters:
      - description: 'The `CSV` file containing the enrollment IDs. The maximum file
          size is 10MB.

          '
        in: formData
        name: enrollment_identities
        required: true
        type: file
      responses:
        201:
          description: 'Bulk upload data has been received and asynchronous processing
            has been started.

            '
          examples:
            BulkResponse:
              account_id: 00005a4e027f0a580a01081c00000000
              completed_at: null
              created_at: '2018-06-26T09:12:21.308Z'
              errors_count: 0
              errors_report_file: null
              etag: '1'
              full_report_file: null
              id: 00005a4e017f0a667a01081c00000000
              object: enrollment-identity-bulk-uploads
              processed_count: 0
              status: new
              total_count: 10
          schema:
            $ref: '#/definitions/BulkResponse'
        400:
          description: Bad request.
          examples:
            Bad request:
              code: 400
              message: Invalid request. Check your request parameters and URL.
              object: error
              request_id: 73fb0bd3ec1d452383255dd9a336668c
              type: bad_request
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: The provided access token is not valid.
          examples:
            Error:
              code: 401
              message: The provided JWT was not valid
              object: error
              type: invalid_auth
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Bulk upload
      tags:
      - Public API
  /v3/device-enrollments-bulk-uploads/{id}:
    get:
      description: 'Provides information on bulk upload for the given ID. For example,
        the bulk status and the number of processed enrollment identities. Also links
        to the bulk upload reports are provided.

        **Report file format:**

        The report files have a header line and the value are separated by commas.
        The lines are delimited by a line break (CRLF). The report file is compliant
        with IETF Informal CSV common format [RFC 4180](https://tools.ietf.org/html/rfc4180).

        An example of a full report file:

        ```

        "entity__id","entity__created_at","error__code","error__type","error__message","error__fields"

        "A-F9:AA:AA:AA:DE:31:C7:30:72:55:27:AE:8B:E1:1C:6F:42:7D:06:CF:FB:18:6F:59:48:29:B3:98:4B:76:8F:9E","2018-09-07T12:10:58.428Z","","","",""

        "A-FF:AA:AA:AA:3B:43:EB:D7:C7:30:03:5F:C8:D0:15:91:70:C2:5D:4F:EB:24:E9:3A:BB:D8:3C:FE:20:EA:B1:72","2018-09-07T12:10:58.428Z","","","",""

        ```

        An example of an error report file:

        ```

        "entity__id","error__code","error__type","error__message","error__fields"

        "A-F9:AA:AA:AA:DE:31:C7:30:72:55:27:AE:8B:E1:1C:6F:42:7D:06:CF:FB:18:6F:59:48:29:B3:98:4B:76:8F:9E","409","duplicate","Enrollment
        identity is already claimed in the mbed Cloud.",""

        "A-FF:AA:AA:AA:3B:43:EB:D7:C7:30:03:5F:C8:D0:15:91:70:C2:5D:4F:EB:24:E9:3A:BB:D8:3C:FE:20:EA:B1:72","409","duplicate","Enrollment
        identity is already claimed in the mbed Cloud.",""

        ```

        **Example usage:**

        ```

        curl -X GET \

        -H ''Authorization: Bearer <valid access token>'' \

        https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/{id}

        ```

        '
      operationId: getBulkDeviceEnrollment
      parameters:
      - description: Bulk create task entity ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/csv
      - application/json
      responses:
        200:
          description: Bulk upload entity found
          examples:
            BulkResponse:
              account_id: 00005a4e027f0a580a01081c00000000
              completed_at: '2018-06-26T09:13:21.308Z'
              created_at: '2018-06-26T09:12:21.308Z'
              errors_count: 1
              errors_report_file: https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/errors_report.csv
              etag: '1'
              full_report_file: https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/2d238a89038b4ddb84699dd36a901063/full_report.csv
              id: 2d238a89038b4ddb84699dd36a901063
              object: enrollment-identity-bulk-uploads
              processed_count: 10
              status: completed
              total_count: 10
          schema:
            $ref: '#/definitions/BulkResponse'
        400:
          description: Bad request. The bulk identity is not valid.
          examples:
            Bad request:
              code: 400
              fields:
              - bulk_id: Invalid bulk identity
              message: An error description.
              object: error
              request_id: 73fb0bd3ec1d452383255dd9a336668c
              type: validation_error
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: The provided access token is not valid.
          examples:
            Error:
              code: 401
              message: The provided JWT was not valid
              object: error
              type: invalid_auth
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Not found.
          examples:
            Not found:
              code: 404
              fields: []
              message: The requested resource could not be found
              object: error
              request_id: 73fb0bd3ec1d452383255dd9a336668c
              type: not_found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get bulk upload entity
      tags:
      - Public API
  /v3/device-enrollments/{id}:
    delete:
      description: 'To free a device from your account you can delete the enrollment
        claim. To bypass the device ownership, you need to delete the enrollment and
        do a factory reset for the device. For more information, see [Transferring
        the ownership using First-to-Claim](/docs/current/connecting/device-ownership-first-to-claim-by-enrollment-list.html).

        <br>

        **Example usage:**

        ```

        curl -X DELETE \

        -H ''Authorization: Bearer <valid access token>'' \

        https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id}

        ```

        '
      operationId: deleteDeviceEnrollment
      parameters:
      - description: Enrollment identity.
        in: path
        name: id
        required: true
        type: string
      responses:
        204:
          description: No content. The enrollment claim has been deleted.
        400:
          description: Bad request. The enrollment identity is not valid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Not found.
          examples:
            Not found:
              code: 404
              fields: []
              message: Enrollment identity not found
              object: error
              request_id: 73fb0bd3ec1d452383255dd9a336668c
              type: not_found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete an enrollment by ID.
      tags:
      - Public API
    get:
      description: 'To check the enrollment info in detail, for example date of claim
        and expiration date.

        **Example usage:**

        ```

        curl -X GET \

        -H ''Authorization: Bearer <valid access token>'' \

        https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id}

        ```

        '
      operationId: getDeviceEnrollment
      parameters:
      - description: Enrollment identity.
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: OK. Pending enrollment data.
          schema:
            $ref: '#/definitions/EnrollmentIdentity'
        400:
          description: Bad request. The enrollment identity is not valid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Not found.
          examples:
            Not found:
              code: 404
              fields: []
              message: Enrollment identity not found
              object: error
              request_id: 73fb0bd3ec1d452383255dd9a336668c
              type: not_found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get details of an enrollment by ID.
      tags:
      - Public API
  /v3/device-events/:
    get:
      description: List all device events for an account.
      operationId: Device_Event_list
      parameters:
      - description: How many objects to retrieve in the page. The minimum limit is
          2 and the maximum is 1000. Limit values outside of this range are set to
          the closest limit.
        in: query
        maximum: 1000
        minimum: 2
        name: limit
        type: integer
      - description: The order of the records based on creation time, `ASC` or `DESC`;
          by default `ASC`.
        in: query
        name: order
        type: string
      - description: The ID of The item after which to retrieve the next page.
        in: query
        name: after
        type: string
      - description: 'Comma-separated list of data fields to return. Currently supported:
          `total_count`'
        in: query
        name: include
        type: string
      - description: "URL encoded query string parameter to filter returned data.\n\
          \n##### Filtering\n\n```?filter={URL encoded query string}```\n\nThe query\
          \ string is made up of key/value pairs separated by ampersands. So for a\
          \ query of\n```key1=value1&key2=value2&key3=value3``` this would be encoded\
          \ as follows:\n```?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3```\n\
          \n###### Filterable fields:\n\nThe below table lists all the fields that\
          \ can be filtered on with certain filters:\n\n<table>\n  <thead>\n    <tr>\n\
          \      <th>Field</th>\n      <th>= / __eq / __neq</th>\n      <th>__in /\
          \  __nin</th>\n      <th>__lte / __gte</th>\n    <tr>\n  <thead>\n  <tbody>\n\
          \    <tr>\n      <td>date_time</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>\u2713</td>\n    </tr>\n    <tr>\n      <td>description</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>id</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>device_id</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>event_type</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n   \
          \   <td>state_change</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n\
          \      <td>&nbsp;</td>\n    </tr>\n  </tbody>\n</table>\n&nbsp;\n\nThe examples\
          \ below show the queries in *unencoded* form.\n\n###### By id:\n\n```id={id}```\n\
          \n###### By state change:\n\n```state_change=[True|False]```\n\n###### By\
          \ event type:\n\n```event_type={value}```\n\n###### On date-time fields:\n\
          \nDate-time fields should be specified in UTC RFC3339 format ```YYYY-MM-DDThh:mm:ss.msZ```.\
          \ There are three permitted\nvariations:\n\n* UTC RFC3339 with milliseconds\
          \ e.g. 2016-11-30T16:25:12.1234Z\n* UTC RFC3339 without milliseconds e.g.\
          \ 2016-11-30T16:25:12Z\n* UTC RFC3339 shortened - without milliseconds and\
          \ punctuation e.g. 20161130T162512Z\n\nDate-time filtering supports three\
          \ operators:\n\n* equality\n* greater than or equal to &ndash; field name\
          \ suffixed with ```__gte```\n* less than or equal to &ndash; field name\
          \ suffixed with ```__lte```\nLower and upper limits to a date-time range\
          \ may be specified by including both the ```__gte``` and ```__lte``` forms\
          \ in\nthe filter.\n```{field name}[|__lte|__gte]={UTC RFC3339 date-time}```\n\
          \n##### Multi-field example\n\n```id=0158d38771f70000000000010010038c&state_change=True&date_time__gte=2016-11-30T16:25:12.1234Z```\n\
          \nEncoded:\n\n```?filter=id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z```\n\
          \n##### Filtering with filter operators\n\nString field filtering supports\
          \ the following operators:\n\n* equality: `__eq`\n* non-equality: `__neq`\n\
          * in : `__in`\n* not in: `__nin`\n\nFor `__in` and `__nin` filters list\
          \ of parameters must be comma-separated:\n`event_type__in=update.device.device-created,update.device.device-updated`"
        in: query
        name: filter
        type: string
      responses:
        '200':
          description: Request successful.
          schema:
            $ref: '#/definitions/DeviceEventPage'
        '400':
          description: Bad Request.
        '401':
          description: Not authenticated.
        '404':
          description: Unable to find page.
      summary: List all device events.
  /v3/device-events/{device_event_id}/:
    get:
      description: Retrieve a specific device event.
      operationId: Device_Event_retrieve
      parameters:
      - in: path
        name: device_event_id
        required: true
        type: string
      responses:
        '200':
          description: Retrieved result successfully.
          schema:
            $ref: '#/definitions/DeviceEventData'
        '400':
          description: Bad Request.
        '401':
          description: Not authenticated.
        '404':
          description: Unable to find device.
      summary: Retrieve a device event.
  /v3/device-groups/:
    get:
      description: List all groups.
      operationId: Group_list
      parameters:
      - description: How many objects to retrieve in the page. The minimum limit is
          2 and the maximum is 1000. Limit values outside of this range are set to
          the closest limit.
        in: query
        maximum: 1000
        minimum: 2
        name: limit
        type: integer
      - description: The order of the records based on creation time, `ASC` or `DESC`;
          by default `ASC`.
        in: query
        name: order
        type: string
      - description: The ID of The item after which to retrieve the next page.
        in: query
        name: after
        type: string
      - description: 'Comma-separated list of data fields to return. Currently supported:
          `total_count`.'
        in: query
        name: include
        type: string
      - description: "URL encoded query string parameter to filter returned data.\n\
          \n##### Filtering\n\n```?filter={URL encoded query string}```\n\nThe query\
          \ string is made up of key/value pairs separated by ampersands. So for a\
          \ query of\n\n```key1=value1&key2=value2&key3=value3``` this would be encoded\
          \ as follows:\n```?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3```\n\
          \n###### Filterable fields:\n\nThe table lists all the fields that can be\
          \ filtered on with certain filters:\n\n<table>\n  <thead>\n    <tr>\n  \
          \    <th>Field</th>\n      <th>= / __eq / __neq</th>\n      <th>__in / \
          \ __nin</th>\n      <th>__lte / __gte</th>\n    <tr>\n  <thead>\n  <tbody>\n\
          \    <tr>\n      <td>id</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n\
          \      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>devices_count</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n \
          \   </tr>\n    <tr>\n      <td>name</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>custom_attributes</td>\n\
          \      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n   \
          \   <td>created_at</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n    </tr>\n    <tr>\n      <td>updated_at</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n \
          \   </tr>\n    <tr>\n      <td>etag</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>\u2713</td>\n    </tr>\n  </tbody>\n</table>\n&nbsp;\n\n\
          The examples below show the queries in *unencoded* form.\n\n###### By device\
          \ group properties:\n```name__eq=mygroup```\n\n###### On date-time fields:\n\
          \nDate-time fields should be specified in UTC RFC3339 format ```YYYY-MM-DDThh:mm:ss.msZ```.\
          \ There are three permitted\nvariations:\n\n* UTC RFC3339 with milliseconds\
          \ e.g. 2016-11-30T16:25:12.1234Z\n* UTC RFC3339 without milliseconds e.g.\
          \ 2016-11-30T16:25:12Z\n* UTC RFC3339 shortened - without milliseconds and\
          \ punctuation e.g. 20161130T162512Z\n\nDate-time filtering supports three\
          \ operators:\n\n* equality\n* greater than or equal to &ndash; field name\
          \ suffixed with ```__gte```\n* less than or equal to &ndash; field name\
          \ suffixed with ```__lte```\n\nLower and upper limits to a date-time range\
          \ may be specified by including both the ```__gte``` and ```__lte``` forms\
          \ in\nthe filter.\n```{field name}[|__lte|__gte]={UTC RFC3339 date-time}```\n\
          \n###### By device group custom attributes:\n\n```custom_attributes__{param}={value}```\n\
          ```custom_attributes__tag=TAG1```\n\n##### Multi-field example\n\n```name__eq=mygroup&created_at__gte=2016-11-30T16:25:12.1234Z&created_at__lte=2016-12-30T00:00:00Z```\n\
          \nEncoded:\n\n```?filter=name__eq%3Dmygroup%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-12-30T00%3A00%3A00Z```\n\
          \n##### Filtering with filter operators\n\nString field filtering supports\
          \ the following operators:\n\n* equality: `__eq`\n* non-equality: `__neq`\n\
          * in : `__in`\n* not in: `__nin`\n\nFor `__in` and `__nin` filters list\
          \ of parameters must be comma-separated:\n`name__in=group1,group2`"
        in: query
        name: filter
        type: string
      responses:
        '200':
          description: Ok.
          schema:
            $ref: '#/definitions/DeviceGroupPage'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List all groups.
    post:
      description: Create a group.
      operationId: Group_create
      parameters:
      - description: Group
        in: body
        name: group
        required: true
        schema:
          properties:
            custom_attributes: *id015
            description: *id016
            name: *id017
          type: object
      responses:
        '201':
          description: Created.
          schema:
            $ref: '#/definitions/DeviceGroup'
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Conflict - Group name already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a group
  /v3/device-groups/{device-group-id}/:
    delete:
      description: Delete a group.
      operationId: Group_delete
      parameters:
      - description: The ID of the group
        in: path
        name: device-group-id
        required: true
        type: string
      responses:
        '204':
          description: Success - group deleted.
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a group
    get:
      description: Get a group.
      operationId: Group_retrieve
      parameters:
      - description: The group ID
        in: path
        name: device-group-id
        required: true
        type: string
      responses:
        '200':
          description: Ok.
          schema:
            $ref: '#/definitions/DeviceGroup'
        '400':
          description: Bad request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a group.
    put:
      description: Modify the attributes of a group.
      operationId: Group_update
      parameters:
      - in: path
        name: device-group-id
        required: true
        type: string
      - description: Group
        in: body
        name: group
        required: true
        schema:
          properties:
            custom_attributes: *id015
            description: *id016
            name: *id017
          type: object
      responses:
        '200':
          description: Ok.
          schema:
            $ref: '#/definitions/DeviceGroup'
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Modify the attributes of a group.
  /v3/device-groups/{device-group-id}/devices/:
    get:
      description: Get a page of devices.
      operationId: Group_members_retrieve
      parameters:
      - in: path
        name: device-group-id
        required: true
        type: string
      - description: How many objects to retrieve in the page. The minimum limit is
          2 and the maximum is 1000. Limit values outside of this range are set to
          the closest limit.
        in: query
        maximum: 1000
        minimum: 2
        name: limit
        type: integer
      - description: The order of the records based on creation time, `ASC` or `DESC`;
          by default `ASC`.
        in: query
        name: order
        type: string
      - description: The ID of The item after which to retrieve the next page.
        in: query
        name: after
        type: string
      - description: 'Comma-separated list of data fields to return. Currently supported:
          `total_count`.'
        in: query
        name: include
        type: string
      - description: "URL encoded query string parameter to filter returned data.\n\
          \n##### Filtering\n\n```?filter={URL encoded query string}```\n\nThe query\
          \ string is made up of key/value pairs separated by ampersands. So for a\
          \ query of\n\n```key1=value1&key2=value2&key3=value3``` this would be encoded\
          \ as follows:\n```?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3```\n\
          \n###### Filterable fields:\n\nThe table lists all the fields that can be\
          \ filtered on with certain filters:\n\n<table>\n  <thead>\n    <tr>\n  \
          \    <th>Field</th>\n      <th>= / __eq / __neq</th>\n      <th>__in / \
          \ __nin</th>\n      <th>__lte / __gte</th>\n    <tr>\n  <thead>\n  <tbody>\n\
          \    <tr>\n      <td>id</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n\
          \      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>devices_count</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n \
          \   </tr>\n    <tr>\n      <td>name</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>description</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>custom_attributes</td>\n      <td>\u2713\
          </td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>created_at</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n \
          \   </tr>\n    <tr>\n      <td>updated_at</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n    </tr>\n    <tr>\n   \
          \   <td>etag</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n    </tr>\n  </tbody>\n</table>\n&nbsp;\n\nThe examples below show\
          \ the queries in *unencoded* form.\n\n###### By device properties (all properties\
          \ are filterable):\n\n```state=[unenrolled|cloud_enrolling|bootstrapped|registered]```\n\
          ```device_class={value}```\n\n###### On date-time fields:\n\nDate-time fields\
          \ should be specified in UTC RFC3339 format ```YYYY-MM-DDThh:mm:ss.msZ```.\
          \ There are three permitted\nvariations:\n\n* UTC RFC3339 with milliseconds\
          \ e.g. 2016-11-30T16:25:12.1234Z\n* UTC RFC3339 without milliseconds e.g.\
          \ 2016-11-30T16:25:12Z\n* UTC RFC3339 shortened - without milliseconds and\
          \ punctuation e.g. 20161130T162512Z\n\nDate-time filtering supports three\
          \ operators:\n\n* equality\n* greater than or equal to &ndash; field name\
          \ suffixed with ```__gte```\n* less than or equal to &ndash; field name\
          \ suffixed with ```__lte```\n\nLower and upper limits to a date-time range\
          \ may be specified by including both the ```__gte``` and ```__lte``` forms\
          \ in\nthe filter.\n```{field name}[|__lte|__gte]={UTC RFC3339 date-time}```\n\
          \n###### On device custom attributes:\n\n```custom_attributes__{param}={value}```\n\
          ```custom_attributes__tag=TAG1```\n\n##### Multi-field example\n\n```state=bootstrapped&created_at__gte=2016-11-30T16:25:12.1234Z&created_at__lte=2016-12-30T00:00:00Z```\n\
          \nEncoded:\n\n```?filter=state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z```\n\
          \n##### Filtering with filter operators\n\nString field filtering supports\
          \ the following operators:\n\n* equality: `__eq`\n* non-equality: `__neq`\n\
          * in : `__in`\n* not in: `__nin`\n\nFor `__in` and `__nin` filters list\
          \ of parameters must be comma-separated:\n`state__nin=unenrolled,dergistered`"
        in: query
        name: filter
        type: string
      responses:
        204:
          description: Ok.
        400:
          description: Bad Request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get a page of devices
  /v3/device-groups/{device-group-id}/devices/add/:
    post:
      description: Add one device to a group.
      operationId: Group_members_add
      parameters:
      - description: The ID of the group.
        in: path
        name: device-group-id
        required: true
        type: string
      - description: Body of the request.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/DeviceGroupManipulation'
      responses:
        '204':
          description: Success - device added.
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add a device to a group
  /v3/device-groups/{device-group-id}/devices/remove/:
    post:
      description: Remove one device from a group.
      operationId: Group_members_remove
      parameters:
      - description: The ID of the group.
        in: path
        name: device-group-id
        required: true
        type: string
      - description: Body of the request.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/DeviceGroupManipulation'
      responses:
        '204':
          description: Success - device removed.
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Not Found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove a device from a group
  /v3/device-queries/:
    get:
      description: List all device queries. The result will be paged into pages of
        100.
      operationId: Device_Query_list
      parameters:
      - description: How many objects to retrieve in the page. The minimum limit is
          2 and the maximum is 1000. Limit values outside of this range are set to
          the closest limit.
        in: query
        maximum: 1000
        minimum: 2
        name: limit
        type: integer
      - description: The order of the records based on creation time, `ASC` or `DESC`;
          by default `ASC`.
        in: query
        name: order
        type: string
      - description: The ID of The item after which to retrieve the next page.
        in: query
        name: after
        type: string
      - description: 'Comma-separated list of data fields to return. Currently supported:
          `total_count`.'
        in: query
        name: include
        type: string
      - description: "URL encoded query string parameter to filter returned data.\n\
          \n##### Filtering\n\n```?filter={URL encoded query string}```\n\nThe query\
          \ string is made up of key/value pairs separated by ampersands. So for a\
          \ query of\n```key1=value1&key2=value2&key3=value3``` this would be encoded\
          \ as follows:\n```?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3```\n\
          \nThe below table lists all the fields that can be filtered on with certain\
          \ filters:\n\n<table>\n  <thead>\n    <tr>\n      <th>Field</th>\n     \
          \ <th>= / __eq / __neq</th>\n      <th>__in /  __nin</th>\n      <th>__lte\
          \ / __gte</th>\n    <tr>\n  <thead>\n  <tbody>\n    <tr>\n      <td>created_at</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n \
          \   </tr>\n    <tr>\n      <td>etag</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>\u2713</td>\n    </tr>\n    <tr>\n      <td>id</td>\n \
          \     <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n  \
          \  </tr>\n    <tr>\n      <td>name</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>query</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>updated_at</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n    </tr>\n  </tbody>\n</table>\n\
          &nbsp;\n\nThe examples below show the queries in *unencoded* form.\n\n######\
          \ By device query properties (all properties are filterable):\n\nFor example:\n\
          ```description={value}```\n\n###### On date-time fields:\n\nDate-time fields\
          \ should be specified in UTC RFC3339 format ```YYYY-MM-DDThh:mm:ss.msZ```.\
          \ There are three permitted\nvariations:\n\n* UTC RFC3339 with milliseconds\
          \ e.g. 2016-11-30T16:25:12.1234Z\n* UTC RFC3339 without milliseconds e.g.\
          \ 2016-11-30T16:25:12Z\n* UTC RFC3339 shortened - without milliseconds and\
          \ punctuation e.g. 20161130T162512Z\n\nDate-time filtering supports three\
          \ operators:\n\n* equality\n* greater than or equal to &ndash; field name\
          \ suffixed with ```__gte```\n* less than or equal to &ndash; field name\
          \ suffixed with ```__lte```\n\nLower and upper limits to a date-time range\
          \ may be specified by including both the ```__gte``` and ```__lte``` forms\
          \ in\nthe filter.\n```{field name}[|__lte|__gte]={UTC RFC3339 date-time}```\n\
          \n##### Multi-field example\n\n```query_id=0158d38771f70000000000010010038c&created_at__gte=2016-11-30T16:25:12.1234Z&created_at__lte=2016-12-30T00:00:00Z```\n\
          \nEncoded:\n\n```filter=query_id%3D0158d38771f70000000000010010038c%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z```\n\
          \n##### Filtering with filter operators\n\nString field filtering supports\
          \ the following operators:\n\n* equality: `__eq`\n* non-equality: `__neq`\n\
          * in : `__in`\n* not in: `__nin`\n\nFor `__in` and `__nin` filters list\
          \ of parameters must be comma-separated:\n`name__nin=query1,query2`"
        in: query
        name: filter
        type: string
      responses:
        '200':
          description: Request successful.
          schema:
            $ref: '#/definitions/DeviceQueryPage'
        '400':
          description: Bad Request.
        '401':
          description: Not authenticated.
        '404':
          description: Unable to find page.
      summary: List device queries.
    post:
      description: Create a new device query.
      operationId: Device_Query_create
      parameters:
      - in: body
        name: Device
        required: true
        schema:
          $ref: '#/definitions/DeviceQueryPostPutRequest'
      responses:
        '201':
          description: Update device query created.
          schema:
            $ref: '#/definitions/DeviceQuery'
        '400':
          description: 'Validation error: The data used to create the device query
            did not validate.

            '
        '401':
          description: Not authenticated.
      summary: Create a device query
  /v3/device-queries/{query_id}/:
    delete:
      description: Delete a device query.
      operationId: Device_Query_destroy
      parameters:
      - in: path
        name: query_id
        required: true
        type: string
      responses:
        '204':
          description: Update device query deleted.
        '400':
          description: 'Validation error: The data used to create the device query
            did not validate

            '
        '401':
          description: Not authenticated.
        '404':
          description: Unable to delete update device query because it can't be found.
      summary: Delete a device query
    get:
      description: Retrieve a specific device query.
      operationId: Device_Query_retrieve
      parameters:
      - in: path
        name: query_id
        required: true
        type: string
      responses:
        '200':
          description: Retrieved result successfully.
          schema:
            $ref: '#/definitions/DeviceQuery'
        '400':
          description: 'Validation error: The data used to create the device query
            did not validate.

            '
        '401':
          description: Not authenticated.
        '404':
          description: Unable to find device query.
      summary: Retrieve a device query.
    put:
      description: Update a specifc device query.
      operationId: Device_Query_update
      parameters:
      - in: path
        name: query_id
        required: true
        type: string
      - description: Device query update object.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/DeviceQueryPostPutRequest'
      responses:
        '200':
          description: Device updated.
          schema:
            $ref: '#/definitions/DeviceQuery'
        '400':
          description: 'Validation error: The data used to update the device query
            did not validate.

            '
        '401':
          description: Not authenticated.
        '404':
          description: Unable to update device query because it can't be found.
      summary: Update a device query
  /v3/devicelog/:
    get:
      deprecated: true
      description: 'DEPRECATED: List all device events. Use `/v3/device-events/` instead.'
      operationId: Device_Log_list
      parameters:
      - description: How many objects to retrieve in the page. The minimum limit is
          2 and the maximum is 1000. Limit values outside of this range are set to
          the closest limit.
        in: query
        maximum: 1000
        minimum: 2
        name: limit
        type: integer
      - description: The order of the records based on creation time, `ASC` or `DESC`;
          by default `ASC`.
        in: query
        name: order
        type: string
      - description: The ID of The item after which to retrieve the next page.
        in: query
        name: after
        type: string
      - description: 'Comma-separated list of data fields to return. Currently supported:
          `total_count`.'
        in: query
        name: include
        type: string
      - description: "URL encoded query string parameter to filter returned data.\n\
          \n##### Filtering\n\n```?filter={URL encoded query string}```\n\nThe query\
          \ string is made up of key/value pairs separated by ampersands. So for a\
          \ query of\n```key1=value1&key2=value2&key3=value3``` this would be encoded\
          \ as follows:\n```?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3```\n\
          \n###### Filterable fields:\n\nThe below table lists all the fields that\
          \ can be filtered on with certain filters:\n\n<table>\n  <thead>\n    <tr>\n\
          \      <th>Field</th>\n      <th>= / __eq / __neq</th>\n      <th>__in /\
          \  __nin</th>\n      <th>__lte / __gte</th>\n    <tr>\n  <thead>\n  <tbody>\n\
          \    <tr>\n      <td>date_time</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>\u2713</td>\n    </tr>\n    <tr>\n      <td>description</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>id</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>device_id</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>event_type</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n   \
          \   <td>state_change</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n\
          \      <td>&nbsp;</td>\n    </tr>\n  </tbody>\n</table>\n&nbsp;\n\nThe examples\
          \ below show the queries in *unencoded* form.\n\n###### By id:\n\n```id={id}```\n\
          \n###### By state change:\n\n```state_change=[True|False]```\n\n###### By\
          \ event type:\n\n```event_type={value}```\n\n###### On date-time fields:\n\
          \nDate-time fields should be specified in UTC RFC3339 format ```YYYY-MM-DDThh:mm:ss.msZ```.\
          \ There are three permitted\nvariations:\n\n* UTC RFC3339 with milliseconds\
          \ e.g. 2016-11-30T16:25:12.1234Z\n* UTC RFC3339 without milliseconds e.g.\
          \ 2016-11-30T16:25:12Z\n* UTC RFC3339 shortened - without milliseconds and\
          \ punctuation e.g. 20161130T162512Z\n\nDate-time filtering supports three\
          \ operators:\n\n* equality\n* greater than or equal to &ndash; field name\
          \ suffixed with ```__gte```\n* less than or equal to &ndash; field name\
          \ suffixed with ```__lte```\n\nLower and upper limits to a date-time range\
          \ may be specified by including both the ```__gte``` and ```__lte``` forms\
          \ in\nthe filter.\n```{field name}[|__lte|__gte]={UTC RFC3339 date-time}```\n\
          \n##### Multi-field example\n```id=0158d38771f70000000000010010038c&state_change=True&date_time__gte=2016-11-30T16:25:12.1234Z```\n\
          \nEncoded:\n\n```?filter=id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z```\n\
          \n##### Filtering with filter operators\n\nString field filtering supports\
          \ the following operators:\n\n* equality: `__eq`\n* non-equality: `__neq`\n\
          * in : `__in`\n* not in: `__nin`\n\nFor `__in` and `__nin` filters list\
          \ of parameters must be comma-separated:\n`event_type__in=update.device.device-created,update.device.device-updated`"
        in: query
        name: filter
        type: string
      responses:
        '200':
          description: Request successful
          schema:
            $ref: '#/definitions/DeviceEventPage'
        '400':
          description: Bad Request
        '401':
          description: Not authenticated
        '404':
          description: Unable to find page
      summary: 'DEPRECATED: List all device events.'
  /v3/devicelog/{device_event_id}/:
    get:
      deprecated: true
      description: Retrieve device event (deprecated, use /v3/device-events/{device_event_id}/
        instead).
      operationId: Device_Log_retrieve
      parameters:
      - in: path
        name: device_event_id
        required: true
        type: string
      responses:
        '200':
          description: Retrieved result successfully.
          schema:
            $ref: '#/definitions/DeviceEventData'
        '400':
          description: Bad Request.
        '401':
          description: Not authenticated.
        '404':
          description: Unable to find device.
      summary: 'DEPRECATED: Retrieve a device event.'
  /v3/devices/:
    get:
      description: List all devices.
      operationId: Device_list
      parameters:
      - description: How many objects to retrieve in the page. The minimum limit is
          2 and the maximum is 1000. Limit values outside of this range are set to
          the closest limit.
        in: query
        maximum: 1000
        minimum: 2
        name: limit
        type: integer
      - description: The order of the records based on creation time, `ASC` or `DESC`;
          by default `ASC`.
        in: query
        name: order
        type: string
      - description: The ID of The item after which to retrieve the next page.
        in: query
        name: after
        type: string
      - description: 'Comma-separated list of data fields to return. Currently supported:
          `total_count`.'
        in: query
        name: include
        type: string
      - description: "URL encoded query string parameter to filter returned data.\n\
          \n##### Filtering\n\n```?filter={URL encoded query string}```\n\nThe query\
          \ string is made up of key/value pairs separated by ampersands. So for a\
          \ query of\n```key1=value1&key2=value2&key3=value3``` this would be encoded\
          \ as follows:\n```?filter=key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3```\n\
          \n###### Filterable fields:\n\nThe below table lists all the fields that\
          \ can be filtered on with certain filters:\n\n<table>\n  <thead>\n    <tr>\n\
          \      <th>Field</th>\n      <th>= / __eq / __neq</th>\n      <th>__in /\
          \  __nin</th>\n      <th>__lte / __gte</th>\n    <tr>\n  <thead>\n  <tbody>\n\
          \    <tr>\n      <td>account_id</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>auto_update</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>bootstrap_expiration_date</td>\n      <td>\u2713\
          </td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n    </tr>\n    <tr>\n\
          \      <td>bootstrapped_timestamp</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>\u2713</td>\n    </tr>\n    <tr>\n      <td>ca_id</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>connector_expiration_date</td>\n      <td>\u2713\
          </td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n    </tr>\n    <tr>\n\
          \      <td>created_at</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n    </tr>\n    <tr>\n      <td>custom_attributes</td>\n\
          \      <td>\u2713</td>\n      <td>&nbsp;</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>deployed_state</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n   \
          \   <td>deployment</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n\
          \      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>description</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>device_class</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n   \
          \   <td>device_execution_mode</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>device_key</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>endpoint_name</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n   \
          \   <td>endpoint_type</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n\
          \      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>enrolment_list_timestamp</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n \
          \   </tr>\n    <tr>\n      <td>etag</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>\u2713</td>\n    </tr>\n    <tr>\n      <td>firmware_checksum</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>host_gateway</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n   \
          \   <td>id</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n\
          \    </tr>\n    <tr>\n      <td>manifest</td>\n      <td>\u2713</td>\n \
          \     <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n    \
          \  <td>manifest_timestamp</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>\u2713</td>\n    </tr>\n    <tr>\n      <td>mechanism</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>mechanism_url</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n   \
          \   <td>name</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n\
          \    </tr>\n    <tr>\n      <td>serial_number</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n   \
          \   <td>state</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n     \
          \ <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>updated_at</td>\n    \
          \  <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n    </tr>\n\
          \    <tr>\n      <td>vendor_id</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>&nbsp;</td>\n    </tr>\n  </tbody>\n</table>\n&nbsp;\n\n\
          The examples below show the queries in *unencoded* form.\n\n###### By device\
          \ properties (all properties are filterable):\n\n```state=[unenrolled|cloud_enrolling|bootstrapped|registered]```\n\
          ```device_class={value}```\n\n###### On date-time fields:\n\nDate-time fields\
          \ should be specified in UTC RFC3339 format ```YYYY-MM-DDThh:mm:ss.msZ```.\
          \ There are three permitted\nvariations:\n\n* UTC RFC3339 with milliseconds\
          \ e.g. 2016-11-30T16:25:12.1234Z\n* UTC RFC3339 without milliseconds e.g.\
          \ 2016-11-30T16:25:12Z\n* UTC RFC3339 shortened - without milliseconds and\
          \ punctuation e.g. 20161130T162512Z\n\nDate-time filtering supports three\
          \ operators:\n\n* equality\n* greater than or equal to &ndash; field name\
          \ suffixed with ```__gte```\n* less than or equal to &ndash; field name\
          \ suffixed with ```__lte```\n\nLower and upper limits to a date-time range\
          \ may be specified by including both the ```__gte``` and ```__lte``` forms\
          \ in\nthe filter.\n```{field name}[|__lte|__gte]={UTC RFC3339 date-time}```\n\
          \n###### On device custom attributes:\n\n```custom_attributes__{param}={value}```\n\
          ```custom_attributes__tag=TAG1```\n\n##### Multi-field example\n\n```state=bootstrapped&created_at__gte=2016-11-30T16:25:12.1234Z&created_at__lte=2016-12-30T00:00:00Z```\n\
          \nEncoded:\n\n```?filter=state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z```\n\
          \n##### Filtering with filter operators\n\nString field filtering supports\
          \ the following operators:\n\n* equality: `__eq`\n* non-equality: `__neq`\n\
          * in : `__in`\n* not in: `__nin`\n\nFor `__in` and `__nin` filters list\
          \ of parameters must be comma-separated:\n`state__nin=unenrolled,dergistered`"
        in: query
        name: filter
        type: string
      responses:
        '200':
          description: Request successful.
          schema:
            $ref: '#/definitions/DevicePage'
        '400':
          description: Bad Request.
        '401':
          description: Not authenticated.
        '404':
          description: Unable to find page.
      summary: List all devices.
    post:
      description: Create a new device.
      operationId: Device_create
      parameters:
      - in: body
        name: Device
        required: true
        schema:
          $ref: '#/definitions/DeviceDataPostRequest'
      responses:
        '201':
          description: Device created.
          schema:
            $ref: '#/definitions/DeviceData'
        '400':
          description: 'Validation error: The data used to create the device did not
            validate.

            '
        '401':
          description: Not authenticated.
        '403':
          description: Account limit reached. Could not create device.
        '409':
          description: Unique-constrained fields are used by other resources.
      summary: Create a device
  /v3/devices/{device-id}/certificates/{certificate-name}/renew:
    post:
      description: 'Request a certificate renewal.


        **Example usage:**


        ```

        curl -X POST

        -H ''authorization: Bearer <valid access token>''

        -H ''content-length: 0''

        https://api.us-east-1.mbedcloud.com/v3/devices/01612df56f3b0a580a010fc700000000/certificates/customer.dlms/renew

        ```

        '
      operationId: RequestCertificateRenewal
      parameters:
      - description: The device ID.
        in: path
        name: device-id
        pattern: '[0-9a-fA-F]{32}'
        required: true
        type: string
      - description: The certificate name.
        in: path
        name: certificate-name
        pattern: '[\w-]{1,10}\.[\w-.]{1,10}'
        required: true
        type: string
      responses:
        '201':
          description: Created.
          schema:
            $ref: '#/definitions/CertificateEnrollment'
        '400':
          description: 'Validation error: There is no certificate issuer configured
            for this certificate.

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '401':
          description: You are not authorized to perform the action.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '404':
          description: The device ID or certificate name is not found.
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '409':
          description: 'Conflict. A renewal request for this certificate is in process.

            '
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
        '423':
          description: "Either:\n- Operation not supported for this device\n- The\
            \ device is not connected \n"
          schema:
            $ref: '#/definitions/ErrorObjectResponse'
      summary: Request certificate renewal.
      tags:
      - Certificate Renewal
  /v3/devices/{id}/:
    delete:
      description: Delete device. Only available for devices with a developer certificate.
        Attempts to delete a device with a production certicate will return a 400
        response.
      operationId: Device_destroy
      parameters:
      - in: path
        name: id
        required: true
        type: string
      responses:
        '204':
          description: Device deleted.
        '400':
          description: Bad Request.
        '401':
          description: Not authenticated.
        '404':
          description: Unable to delete device because it can't be found.
      summary: Delete a device.
    get:
      description: Retrieve information about a specific device.
      operationId: Device_retrieve
      parameters:
      - in: path
        name: id
        required: true
        type: string
      responses:
        '200':
          description: Retrieved result successfully.
          schema:
            $ref: '#/definitions/DeviceData'
        '400':
          description: Bad Request.
        '401':
          description: Not authenticated.
        '404':
          description: Unable to find device.
      summary: Get a device
    put:
      description: Update a specific device.
      operationId: Device_update
      parameters:
      - description: The ID of the device.
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: Device
        required: true
        schema:
          $ref: '#/definitions/DeviceDataPutRequest'
      responses:
        '200':
          description: Device updated.
          schema:
            $ref: '#/definitions/DeviceData'
        '400':
          description: 'Validation error: The data used to update the device did not
            validate.

            '
        '401':
          description: Not authenticated.
        '404':
          description: Unable to update device because it can't be found.
      summary: Update a device
  /v3/firmware-images/:
    get:
      description: List all firmware images.
      operationId: Firmware_Image_list
      parameters:
      - description: How many firmware images to retrieve
        in: query
        name: limit
        type: integer
      - description: ASC or DESC
        in: query
        name: order
        type: string
      - description: The ID of the the item after which to retrieve the next page
        in: query
        name: after
        type: string
      - description: 'A comma-separated list of data fields to return. Currently supported:
          total_count'
        in: query
        name: include
        type: string
      - description: "URL-encoded query string parameter to filter returned data\n\
          \n`?filter={URL-encoded query string}`\n\n###### Filterable fields:\n\n\
          The table lists all the fields that can be filtered on with certain filters:\n\
          \n<table>\n  <thead>\n    <tr>\n      <th>Field</th>\n      <th>= / __eq\
          \ / __neq</th>\n      <th>__in /  __nin</th>\n      <th>__lte / __gte</th>\n\
          \    <tr>\n  <thead>\n  <tbody>\n    <tr>\n      <td>created_at</td>\n \
          \     <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n  \
          \  </tr>\n    <tr>\n      <td>datafile</td>\n      <td>\u2713</td>\n   \
          \   <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>datafile_checksum</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>datafile_size</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n   \
          \   <td>description</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n\
          \      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>etag</td>\n     \
          \ <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n    </tr>\n\
          \    <tr>\n      <td>id</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n\
          \      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>name</td>\n     \
          \ <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n\
          \    <tr>\n      <td>timestamp</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>\u2713</td>\n    </tr>\n    <tr>\n      <td>updated_at</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n \
          \   </tr>\n  </tbody>\n</table>\n&nbsp;\n\nThe query string is made up of\
          \ key-value pairs separated by ampersands. For example, this query:\n`key1=value1&key2=value2&key3=value3`\n\
          \nwould be URL-encoded as:\n`?filter=key1__eq%3Dvalue1%26key2__eq%3Dvalue2%26key3__eq%3Dvalue3`\n\
          \n\n**Filtering by properties**\n`name__eq=myimage`\n\n**Filtering on date-time\
          \ fields**\n\nDate-time fields should be specified in UTC RFC3339 format,\
          \ `YYYY-MM-DDThh:mm:ss.msZ`. There are three permitted variations:\n\n*\
          \ UTC RFC3339 with milliseconds. Example: `2016-11-30T16:25:12.1234Z`\n\
          * UTC RFC3339 without milliseconds. Example: `2016-11-30T16:25:12Z`\n* UTC\
          \ RFC3339 shortened without milliseconds and punctuation. Example: `20161130T162512Z`\n\
          \nDate-time filtering supports three operators:\n\n* equality by appending\
          \ `__eq` to the field name\n* greater than or equal to by appending `__gte`\
          \ to the field name\n* less than or equal to by appending `__lte` to the\
          \ field name\n\n`{field name}[|__eq|__lte|__gte]={UTC RFC3339 date-time}`\n\
          \nTime ranges may be specified by including both the `__gte` and `__lte`\
          \ forms in the filter. For example:\n\n`created_at__gte=2016-11-30T16:25:12.1234Z&created_at__lte=2016-12-30T00:00:00Z`\n\
          \n**Filtering on multiple fields**\n\n`name__eq=myimage&created_at__gte=2016-11-30T16:25:12.1234Z&created_at__lte=2016-12-30T00:00:00Z`\n\
          \n**Filtering with filter operators**\n\nString field filtering supports\
          \ the following operators:\n\n* equality: `__eq`\n* non-equality: `__neq`\n\
          * in : `__in`\n* not in: `__nin`\n\nFor `__in` and `__nin` filters list\
          \ of parameters must be comma-separated:\n\n`name__in=fw-image1,fw-image2`"
        in: query
        name: filter
        type: string
      responses:
        '200':
          description: Request successful
          schema:
            $ref: '#/definitions/FirmwareImagePage'
        '400':
          description: Bad Request
        '401':
          description: Not authenticated
        '404':
          description: Unable to find content
      summary: List all images
    post:
      consumes:
      - multipart/form-data
      description: Create a firmware image.
      operationId: Firmware_Image_create
      parameters:
      - description: The firmware image file to upload
        in: formData
        name: datafile
        required: true
        type: file
      - description: The description of the firmware image
        in: formData
        name: description
        required: false
        type: string
      - description: The name of the firmware image
        in: formData
        maxLength: 128
        name: name
        required: true
        type: string
      responses:
        '201':
          description: Firmware image created. The API gateway enforces the account-specific
            file size.
          schema:
            $ref: '#/definitions/FirmwareImage'
        '400':
          description: 'Validation error: Cannot validate the data used to create
            the firmware image

            '
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
      summary: Create an image
  /v3/firmware-images/{image_id}/:
    delete:
      description: Delete a firmware image.
      operationId: Firmware_Image_destroy
      parameters:
      - description: The firmware image ID
        in: path
        name: image_id
        required: true
        type: string
      responses:
        '204':
          description: Firmware image deleted
        '400':
          description: Bad Request
        '401':
          description: Not authenticated
        '404':
          description: Firmware image not found
      summary: Delete an image
    get:
      description: Retrieve a firmware image.
      operationId: Firmware_Image_retrieve
      parameters:
      - description: The firmware image ID
        in: path
        name: image_id
        required: true
        type: string
      responses:
        '200':
          description: Retrieved result successfully
          schema:
            $ref: '#/definitions/FirmwareImage'
        '400':
          description: Bad Request
        '401':
          description: Not authenticated
        '404':
          description: Firmware image can't be found
      summary: Get an image
  /v3/firmware-manifests/:
    get:
      description: List firmware manifests.
      operationId: Firmware_Manifest_list
      parameters:
      - description: How many firmware manifests to retrieve
        in: query
        name: limit
        type: integer
      - description: ASC or DESC
        in: query
        name: order
        type: string
      - description: The ID of the the item after which to retrieve the next page
        in: query
        name: after
        type: string
      - description: 'A comma-separated list of data fields to return. Currently supported:
          total_count'
        in: query
        name: include
        type: string
      - description: "URL-encoded query string parameter to filter returned data\n\
          \n`?filter={URL-encoded query string}`\n\n###### Filterable fields:\n\n\
          The table lists all the fields that can be filtered on with certain filters:\n\
          \n<table>\n  <thead>\n    <tr>\n      <th>Field</th>\n      <th>= / __eq\
          \ / __neq</th>\n      <th>__in /  __nin</th>\n      <th>__lte / __gte</th>\n\
          \    <tr>\n  <thead>\n  <tbody>\n    <tr>\n      <td>created_at</td>\n \
          \     <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n  \
          \  </tr>\n    <tr>\n      <td>datafile</td>\n      <td>\u2713</td>\n   \
          \   <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>datafile_size</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>description</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n   \
          \   <td>device_class</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n\
          \      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>etag</td>\n     \
          \ <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n    </tr>\n\
          \    <tr>\n      <td>id</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n\
          \      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>name</td>\n     \
          \ <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n\
          \    <tr>\n      <td>timestamp</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>\u2713</td>\n    </tr>\n    <tr>\n      <td>updated_at</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n \
          \   </tr>\n  </tbody>\n</table>\n&nbsp;\n\nThe query string is made up of\
          \ key-value pairs separated by ampersands. For example, this query:\n`key1__eq=value1&key2__eq=value2&key3__eq=value3`\n\
          \nwould be URL-encoded as:\n`?filter=key1__eq%3Dvalue1%26key2__eq%3Dvalue2%26key3__eq%3Dvalue3`\n\
          \n\n**Filtering by properties**\n`name__eq=mymanifest`\n\n**Filtering on\
          \ date-time fields**\n\nDate-time fields should be specified in UTC RFC3339\
          \ format, `YYYY-MM-DDThh:mm:ss.msZ`. There are three permitted variations:\n\
          \n* UTC RFC3339 with milliseconds. Example: `2016-11-30T16:25:12.1234Z`\n\
          * UTC RFC3339 without milliseconds. Example: `2016-11-30T16:25:12Z`\n* UTC\
          \ RFC3339 shortened without milliseconds and punctuation. Example: `20161130T162512Z`\n\
          \nDate-time filtering supports three operators:\n\n* equality by appending\
          \ `__eq` to the field name\n* greater than or equal to by appending `__gte`\
          \ to the field name\n* less than or equal to by appending `__lte` to the\
          \ field name\n\n`{field name}[|__eq|__lte|__gte]={UTC RFC3339 date-time}`\n\
          \nTime ranges may be specified by including both the `__gte` and `__lte`\
          \ forms in the filter. For example:\n\n`created_at__gte=2016-11-30T16:25:12.1234Z&created_at__lte=2016-12-30T00:00:00Z`\n\
          \n**Filtering on multiple fields**\n\n`name__eq=mymanifest&created_at__gte=2016-11-30T16:25:12.1234Z&created_at__lte=2016-12-30T00:00:00Z`\n\
          \n**Filtering with filter operators**\n\nString field filtering supports\
          \ the following operators:\n\n* equality: `__eq`\n* non-equality: `__neq`\n\
          * in : `__in`\n* not in: `__nin`\n\nFor `__in` and `__nin` filters list\
          \ of parameters must be comma-separated:\n\n`name__in=fw-manifest1,fw-manifest2`"
        in: query
        name: filter
        type: string
      responses:
        '200':
          description: Request successful
          schema:
            $ref: '#/definitions/FirmwareManifestPage'
        '400':
          description: Bad Request
        '401':
          description: Not authenticated
        '404':
          description: Unable to find content
      summary: List manifests
    post:
      consumes:
      - multipart/form-data
      description: Upload a firmware manifest. The API enforces a maximum size of
        manifests of 2 KB.
      operationId: Firmware_Manifest_create
      parameters:
      - description: The manifest file to create. The API gateway enforces the account-specific
          file size.
        in: formData
        name: datafile
        required: true
        type: file
      - description: The description of the firmware manifest
        in: formData
        name: description
        required: false
        type: string
      - description: The key table of pre-shared keys for devices
        in: formData
        name: key_table
        required: false
        type: file
      - description: The name of the firmware manifest
        in: formData
        maxLength: 128
        name: name
        required: true
        type: string
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/FirmwareManifest'
        '400':
          description: 'Validation error. The data used to create the firmware manifest
            did not validate and/or the manifest uploaded exceeded 2 KB in size.

            '
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
      summary: Upload a manifest
  /v3/firmware-manifests/{manifest_id}/:
    delete:
      description: Delete a firmware manifest.
      operationId: Firmware_Manifest_destroy
      parameters:
      - description: The firmware manifest ID
        in: path
        name: manifest_id
        required: true
        type: string
      responses:
        '204':
          description: Firmware manifest deleted
        '400':
          description: Bad Request
        '401':
          description: Not authenticated
        '404':
          description: Firmware manifest not found
      summary: Delete a manifest
    get:
      description: Retrieve a firmware manifest.
      operationId: Firmware_Manifest_retrieve
      parameters:
      - description: The firmware manifest ID
        in: path
        name: manifest_id
        required: true
        type: string
      responses:
        '200':
          description: Retrieved result successfully
          schema:
            $ref: '#/definitions/FirmwareManifest'
        '400':
          description: Bad request
        '401':
          description: Not authenticated
        '404':
          description: Firmware manifest can't be found
      summary: Get a manifest
  /v3/identity-providers:
    get:
      consumes:
      - application/json
      description: An endpoint for retrieving identity providers in an array.
      operationId: getAllIdentityProviders
      parameters:
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          default ASC.
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count.'
        in: query
        name: include
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all identity providers.
      tags:
      - Account Admin
    post:
      consumes:
      - application/json
      description: An endpoint for creating a new identity provider.
      operationId: createIdentityProvider
      parameters:
      - description: Details of the identity provider to be created.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/IdentityProviderCreationReq'
      produces:
      - application/json
      responses:
        '201':
          description: New entity created.
          headers:
            Content-Location:
              description: /v3/identity-providers/{identity_provider_id}
              type: string
            Location:
              description: /v3/identity-providers/{identity_provider_id}
              type: string
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: Error in input data, for example too long name.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new identity provider.
      tags:
      - Account Admin
  /v3/identity-providers/{identity_provider_id}:
    delete:
      description: An endpoint for deleting an identity provider by ID.
      operationId: deleteIdentityProvider
      parameters:
      - description: The ID of the identity provider to be deleted.
        in: path
        name: identity_provider_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden or identity provider is in use.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete an identity provider by ID.
      tags:
      - Account Admin
    get:
      description: An endpoint for retrieving an identity provider by ID.
      operationId: getIdentityProvider
      parameters:
      - description: The ID of the identity provider to be retrieved.
        in: path
        name: identity_provider_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get identity provider by ID.
      tags:
      - Account Admin
    put:
      consumes:
      - application/json
      description: An endpoint for updating an existing identity provider.
      operationId: updateIdentityProvider
      parameters:
      - description: The ID of the identity provider to be updated.
        in: path
        name: identity_provider_id
        required: true
        type: string
      - description: Details of the identity provider to be updated.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/IdentityProviderUpdateReq'
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: Error in input data, for example missing name.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update an existing identity provider.
      tags:
      - Account Admin
  /v3/identity-providers/{identity_provider_id}/generate-sp-certificate:
    post:
      consumes:
      - application/json
      description: An endpoint for generating a new service provider certificate.
      operationId: generateSpCertificate
      parameters:
      - description: The ID of the identity provider to which the certificate should
          be generated for.
        in: path
        name: identity_provider_id
        required: true
        type: string
      - description: Details of the service provider certificate to be generated.
        in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/CertificateGenerationReq'
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: Error in input data, for example invalid certificate validity
            value.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Generate a new service provider certificate.
      tags:
      - Account Admin
  /v3/metrics:
    get:
      description: This REST API is used to get account-specific statistics.
      operationId: getMetrics
      parameters:
      - description: "A comma-separated list of requested metrics and total_count\
          \ (if included, the response will contain total_count to specify the total\
          \ number of records available). Supported values are:\n\n- `transactions`\n\
          - `full_registrations`\n- `registration_updates`\n- `deleted_registrations`\n\
          - `expired_registrations`\n- `bootstraps_successful`\n- `bootstraps_failed`\n\
          - `bootstraps_pending`\n- `handshakes_successful`\n- `connect_rest_api_success`\n\
          - `connect_rest_api_error`\n- `device_proxy_request_success`\n- `device_proxy_request_error`\n\
          - `device_subscription_request_success`\n- `device_subscription_request_error`\n\
          - `device_observations`\n- `total_count`\n\n**Note:**\n\nThe metrics device_proxy_request_success,\
          \ device_proxy_request_error, device_subscription_request_success, device_subscription_request_error\
          \ and device_observations monitor only the response from the device to Device\
          \ Management Connect and they do not confirm that the response is delivered\
          \ to client callback URLs used when you try to access device resources using\
          \  [Connect API](/docs/current/service-api-references/device-management-connect.html)\
          \ endpoints. New metrics will be added to monitor the response delivery\
          \ to client callback URLs later.\n\n**Example usage:**\n\n```\ncurl  -X\
          \ GET \\\n      -H \"Authorization : Bearer <valid access Token>\"\n   \
          \    'https://api.us-east-1.mbedcloud.com/v3/metrics?include=transactions,total_count&start=20170207&end=20170407&interval=1d'\n\
          \n{\n    \"object\": \"list\",\n    \"limit\": 20,\n    \"total_count\"\
          : 54,\n    \"after\": \"2017-07-26T00:00:00Z\",\n    \"has_more\": true,\n\
          \    \"data\": [\n        {\n            \"id\": \"015d8157c800015e306fffff005374617473000\"\
          ,\n            \"timestamp\": \"2017-07-27T00:00:00Z\",\n            \"\
          transactions\": 27366\n        },\n        {\n            \"id\": \"015d867e2400015e306fffff005374617473000\"\
          ,\n            \"timestamp\": \"2017-07-28T00:00:00Z\",\n            \"\
          transactions\": 27480\n        }\n    ]\n}\n```\n"
        in: query
        name: include
        required: true
        type: string
      - description: 'UTC time/year/date in RFC3339 format. Fetch the data with timestamp
          greater than or equal to this value. Sample values: 20170207T092056990Z/2017-02-07T09:20:56.990Z
          / 2017 / 20170207. The maximum time between start and end parameters cannot
          exceed more than one year (365 days). The parameter is not mandatory, if
          the period is specified.

          '
        format: date
        in: query
        name: start
        required: false
        type: string
      - description: 'UTC time/year/date in RFC3339 format. Fetch the data with timestamp
          less than this value. Sample values: 20170207T092056990Z/2017-02-07T09:20:56.990Z
          / 2017 / 20170207. The maximum time between start and end parameters cannot
          exceed more than one year (365 days). The parameter is not mandatory, if
          the period is specified.

          '
        format: date
        in: query
        name: end
        required: false
        type: string
      - description: 'Period. Fetch the data for the period in minutes, hours, days
          or weeks. Sample values: 5m, 2h, 3d, 4w. The parameter is not mandatory,
          if the start and end time are specified. The maximum period cannot exceed
          one year (365 days). The allowed ranges are 5m-525600m/1h-8760h/1d-365d/1w-53w.

          '
        in: query
        name: period
        required: false
        type: string
      - description: 'Group the data by this interval in minutes, hours, days or weeks.
          Sample values: 5m, 2h, 3d, 4w. The maximum interval cannot exceed one year
          (365 days). The allowed ranges are 5m-525600m/1h-8760h/1d-365d/1w-53w.

          '
        in: query
        name: interval
        required: true
        type: string
      - description: 'The number of results to return. The default value is 50, minimum
          2 and maximum 1000.

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: "The metric ID after which to start fetching. This also can be\
          \ used for pagination as follows:\n\n**Example usage:**\n\n```\ncurl  -X\
          \ GET \\\n      -H \"Authorization : Bearer <valid access Token>\"\n   \
          \    'https://api.us-east-1.mbedcloud.com/v3/metrics?include=transactions,total_count&start=20170707&end=20170829&interval=1d&limit=20'\n\
          {\n   \"object\": \"list\",\n   \"limit\": 20,\n   \"total_count\": 54,\n\
          \   \"has_more\": true,\n   \"data\": [\n       {\n           \"id\": \"\
          015d1a589800015e306fffff005374617473000\",\n           \"timestamp\": \"\
          2017-07-07T00:00:00Z\",\n           \"transactions\": 26381\n       },\n\
          \       .\n       .\n       .\n       {\n           \"id\": \"015d7c316c00015e306fffff005374617473000\"\
          ,\n           \"timestamp\": \"2017-07-26T00:00:00Z\",\n           \"transactions\"\
          : 25569\n       }\n   ]\n}\n```\n\nIf the parameter `has more` is true,\
          \ it indicates that the list is not complete and more values are available.\
          \ You can give the last ID of the list as the value of the `after` query\
          \ parameter, and you get the next page of values. You can keep doing this\
          \ until `has more` is false.\n```\ncurl -X GET \\\n     -H \"Authorization\
          \ : Bearer <valid access Token>\"\n     'https://api.us-east-1.mbedcloud.com/v3/metrics?include=transactions,total_count&start=20170707&end=20170829&interval=1d&limit=20&after=015d7c316c00015e306fffff005374617473000'\n\
          \n{\n   \"object\": \"list\",\n   \"limit\": 20,\n   \"total_count\": 54,\n\
          \   \"after\": \"2017-07-26T00:00:00Z\",\n   \"has_more\": true,\n   \"\
          data\": [\n       {\n           \"id\": \"015d8157c800015e306fffff005374617473000\"\
          ,\n           \"timestamp\": \"2017-07-27T00:00:00Z\",\n           \"transactions\"\
          : 27366\n       },\n     .\n     .\n     .\n       {\n           \"id\"\
          : \"015de3309c00015e306fffff005374617473000\",\n           \"timestamp\"\
          : \"2017-08-15T00:00:00Z\",\n           \"transactions\": 24707\n      \
          \ }\n   ]\n}\n```\n"
        in: query
        name: after
        required: false
        type: string
      - description: 'The order of the records to return. Available values are ASC
          and DESC. The default value is ASC.

          '
        in: query
        name: order
        required: false
        type: string
      produces:
      - application/json
      responses:
        200:
          description: Successful response.
          schema:
            $ref: '#/definitions/successful-response'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/error-response'
        401:
          description: Authentication failure.
          schema:
            $ref: '#/definitions/error-response'
        403:
          description: Access denied.
          schema:
            $ref: '#/definitions/error-response'
      summary: Provides account-specific statistics for other cloud services.
      tags:
      - Statistics
  /v3/policy-groups:
    get:
      description: 'An endpoint for retrieving all group information.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/policy-groups -H ''Authorization:
        Bearer API_KEY''`'
      operationId: getAllGroups
      parameters:
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: Filter for group name
        in: query
        name: name__eq
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all group information.
      tags:
      - Developer
    post:
      consumes:
      - application/json
      description: 'An endpoint for creating a new group.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/policy-groups -d ''{"name":
        "MyGroup1"}'' -H ''content-type: application/json'' -H ''Authorization: Bearer
        API_KEY''`'
      operationId: createGroup
      parameters:
      - description: Details of the group to be created.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GroupCreationInfo'
      produces:
      - application/json
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: Error in input data, for example invalid group name.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A group with that name already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new group.
      tags:
      - Account Admin
  /v3/policy-groups/{group_id}:
    delete:
      description: 'An endpoint for deleting a group.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: deleteGroup
      parameters:
      - description: The ID of the group to be deleted.
        in: path
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden or Administrators group cannot be removed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a group.
      tags:
      - Account Admin
    get:
      description: 'An endpoint for getting general information about the group.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id} -H ''Authorization:
        Bearer API_KEY''`'
      operationId: getGroupSummary
      parameters:
      - description: The ID of the group to be retrieved.
        in: path
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get group information.
      tags:
      - Developer
    post:
      consumes:
      - application/json
      description: 'An endpoint for adding users and API keys to a group.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}
        -d ''{"users": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]}''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: addSubjectsToGroup
      parameters:
      - description: The ID of the group to be updated.
        in: path
        name: group_id
        required: true
        type: string
      - description: A list of users and API keys to be added to the group.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/SubjectList'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data, for example the user or API key does not
            exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user of this API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add members to a group.
      tags:
      - Account Admin
    put:
      consumes:
      - application/json
      description: 'An endpoint for updating a group name.


        **Example usage:**

        `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}
        -d ''{"name": "TestGroup2"}'' -H ''content-type: application/json'' -H ''Authorization:
        Bearer API_KEY''`'
      operationId: updateGroupName
      parameters:
      - description: The ID of the group to be updated.
        in: path
        name: group_id
        required: true
        type: string
      - description: Details of the group to be created.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/GroupUpdateInfo'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data, for example the group name is too long.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update the group name.
      tags:
      - Account Admin
  /v3/policy-groups/{group_id}/api-keys:
    delete:
      consumes:
      - application/json
      description: 'An endpoint for removing API keys from groups.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/api-keys
        -d ''["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: removeApiKeysFromGroup
      parameters:
      - description: The ID of the group whose API keys are removed.
        in: path
        name: group_id
        required: true
        type: string
      - description: A list of API keys to be removed from the group.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/SubjectList'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data, for example the array of API keys is missing.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove API keys from a group.
      tags:
      - Developer
    get:
      description: 'An endpoint for listing the API keys of the group with details.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/api-keys
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getApiKeysOfGroup
      parameters:
      - description: The ID of the group whose API keys are retrieved.
        in: path
        name: group_id
        required: true
        type: string
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the API keys of a group.
      tags:
      - Developer
  /v3/policy-groups/{group_id}/users:
    delete:
      consumes:
      - application/json
      description: 'An endpoint for removing users from groups.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/users
        -d ''["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: removeUsersFromGroup
      parameters:
      - description: The ID of the group whose users are removed.
        in: path
        name: group_id
        required: true
        type: string
      - description: A list of users to be removed from the group.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/SubjectList'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data, for example the user removes itself from
            the Administrators group.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove users from a group.
      tags:
      - Account Admin
    get:
      description: 'An endpoint for listing the users of a group with details.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/users
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getUsersOfGroup
      parameters:
      - description: The ID of the group whose users are retrieved.
        in: path
        name: group_id
        required: true
        type: string
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: An optional filter for getting users by status.
        in: query
        name: status__eq
        required: false
        type: string
      - description: An optional filter for getting users with a specified set of
          statuses.
        in: query
        name: status__in
        required: false
        type: string
      - description: An optional filter for excluding users with a specified set of
          statuses.
        in: query
        name: status__nin
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get users of a group.
      tags:
      - Account Admin
  /v3/server-credentials:
    get:
      description: 'This REST API is intended to be used by customers to fetch all
        (Bootstrap and LwM2M) server credentials that they will need to use with their
        clients to connect to bootstrap or LwM2M server.


        **Example usage:**

        curl -X GET "http://api.us-east-1.mbedcloud.com/v3/server-credentials" -H
        "accept: application/json" -H "Authorization: Bearer THE_ACCESS_TOKEN"

        '
      operationId: getAllServerCredentials
      produces:
      - application/json
      responses:
        200:
          description: all server credentials fetched successfully.
          examples:
            Success:
              bootstrap:
                certificate: '-----BEGIN CERTIFICATE-----\nMIICNTCCAdugAwIBAgIQXCeldn1YhYpDkaBhq8+mWTAKBggqhkjOPQQDAjByMQsw\nCQYDVQQGEwJHQjEXMBUGA1UECBMOQ2FtYnJpZGdlc2hpcmUxEjAQBgNVBAcTCUNh\nbWJyaWRnZTEQMA4GA1UEChMHQVJNIEx0ZDEkMCIGA1UEAxMbQVJNIEludGVncmF0\naW9uIEJvb3RzdHJhcENBMCAXDTE3MDUxNTE5NDkxMVoYDzIwNTIwNTE1MTk1OTEw\nWjByMQswCQYDVQQGEwJHQjEXMBUGA1UECBMOQ2FtYnJpZGdlc2hpcmUxEjAQBgNV\nBAcTCUNhbWJyaWRnZTEQMA4GA1UEChMHQVJNIEx0ZDEkMCIGA1UEAxMbQVJNIElu\ndGVncmF0aW9uIEJvb3RzdHJhcENBMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\ni3yGw4hU5l/gV04brCmC6n2RAGOnSgW8VMVxJzMZGy76Qfh6mgxd/LM3AZnFyb54\nWx3ssBod3ORvVwT0Osqo0qNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMB\nAf8wHQYDVR0OBBYEFBPvafpiPwCG9AW4tuay8dtpELQ5MBAGCSsGAQQBgjcVAQQD\nAgEAMAoGCCqGSM49BAMCA0gAMEUCIQCiUIgPVegmSeb1cYYzKQVM+f0fFJiShdlc\nSAKewnmoWQIgPv48oL/TDxWDVrzy+hYmesFoqryRPGlENvl0oYJ2em4=\n-----END
                  CERTIFICATE-----'
                url: coaps://coap.us-east-1.mbedcloud.com:5684?aid=015843e32ec902420a015e0700000000
              lwm2m:
                certificate: '-----BEGIN CERTIFICATE-----\nMIICMDCCAdWgAwIBAgIQJvkI/PHARqRKTSzxlCf5HzAKBggqhkjOPQQDAjBvMQsw\nCQYDVQQGEwJHQjEXMBUGA1UECBMOQ2FtYnJpZGdlc2hpcmUxEjAQBgNVBAcTCUNh\nbWJyaWRnZTEQMA4GA1UEChMHQVJNIEx0ZDEhMB8GA1UEAxMYQVJNIEludGVncmF0\naW9uIExXTTJNIENBMCAXDTE3MDIxMjEwMzc1MloYDzIwNTIwMjEyMTA0NzUyWjBv\nMQswCQYDVQQGEwJHQjEXMBUGA1UECBMOQ2FtYnJpZGdlc2hpcmUxEjAQBgNVBAcT\nCUNhbWJyaWRnZTEQMA4GA1UEChMHQVJNIEx0ZDEhMB8GA1UEAxMYQVJNIEludGVn\ncmF0aW9uIExXTTJNIENBMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEuuqAAS3w\n4bbFX/l2hDGpKaHHqP2grdmU5+xaM6EsjjZDmxjfznEUJLH7FjQOQ/wjd9QT1xGq\nOWCrot8ks+ugxaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHQYD\nVR0OBBYEFHuhpZSl5Y+VXdTO3A+Kvq2aa2Y+MBAGCSsGAQQBgjcVAQQDAgEAMAoG\nCCqGSM49BAMCA0kAMEYCIQDSBijFMToRjbbLKz/dKpoTMFJ3qtray865XOQyHAL6\nMAIhALOCJKKxZ2tpBw7Nd3SZBpxZsgDAs7s3W8Ab+9lwmLke\n-----END
                  CERTIFICATE-----'
                url: coaps://mds.us-east-1.mbedcloud.com:5684?aid=015843e32ec902420a015e0700000000
          schema:
            $ref: '#/definitions/AllServerCredentialsResponseData'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: The provided access token is not valid.
          examples:
            Authentication Error:
              code: 401
              message: Provided access token is not valid.
              object: error
              request_id: 015fee4431fd38c98640fbfb00000000
              type: invalid_auth
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Fetch all (Bootstrap and LwM2M) server credentials.
      tags:
      - Server credentials
  /v3/server-credentials/bootstrap:
    get:
      deprecated: true
      description: 'This REST API is intended to be used by customers to fetch bootstrap
        server credentials that they will need to use with their clients to connect
        to bootstrap server.


        **Example usage:**

        curl -X GET "http://api.us-east-1.mbedcloud.com/v3/server-credentials/bootstrap"
        -H "accept: application/json" -H "Authorization: Bearer THE_ACCESS_TOKEN"

        '
      operationId: getBootstrapServerCredentials
      produces:
      - application/json
      responses:
        200:
          description: Bootstrap server credentials fetched successfully.
          examples:
            Success:
              created_at: '2017-12-11T14:22:20.009Z'
              etag: '1'
              id: 015fee4431fd38c98640fbfb00000000
              object: server-credentials
              server_certificate: '-----BEGIN CERTIFICATE-----\nMIICNTCCAdugAwIBAgIQXCeldn1YhYpDkaBhq8+mWTAKBggqhkjOPQQDAjByMQsw\nCQYDVQQGEwJHQjEXMBUGA1UECBMOQ2FtYnJpZGdlc2hpcmUxEjAQBgNVBAcTCUNh\nbWJyaWRnZTEQMA4GA1UEChMHQVJNIEx0ZDEkMCIGA1UEAxMbQVJNIEludGVncmF0\naW9uIEJvb3RzdHJhcENBMCAXDTE3MDUxNTE5NDkxMVoYDzIwNTIwNTE1MTk1OTEw\nWjByMQswCQYDVQQGEwJHQjEXMBUGA1UECBMOQ2FtYnJpZGdlc2hpcmUxEjAQBgNV\nBAcTCUNhbWJyaWRnZTEQMA4GA1UEChMHQVJNIEx0ZDEkMCIGA1UEAxMbQVJNIElu\ndGVncmF0aW9uIEJvb3RzdHJhcENBMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\ni3yGw4hU5l/gV04brCmC6n2RAGOnSgW8VMVxJzMZGy76Qfh6mgxd/LM3AZnFyb54\nWx3ssBod3ORvVwT0Osqo0qNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMB\nAf8wHQYDVR0OBBYEFBPvafpiPwCG9AW4tuay8dtpELQ5MBAGCSsGAQQBgjcVAQQD\nAgEAMAoGCCqGSM49BAMCA0gAMEUCIQCiUIgPVegmSeb1cYYzKQVM+f0fFJiShdlc\nSAKewnmoWQIgPv48oL/TDxWDVrzy+hYmesFoqryRPGlENvl0oYJ2em4=\n-----END
                CERTIFICATE-----'
              server_uri: coaps://coap.us-east-1.mbedcloud.com:5684?aid=015843e32ec902420a015e0700000000
          schema:
            $ref: '#/definitions/ServerCredentialsResponseData'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: The provided access token is not valid.
          examples:
            Authentication Error:
              code: 401
              message: Provided access token is not valid.
              object: error
              request_id: 015fee4431fd38c98640fbfb00000000
              type: invalid_auth
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Fetch bootstrap server credentials.
      tags:
      - Server credentials
  /v3/server-credentials/lwm2m:
    get:
      deprecated: true
      description: 'This REST API is intended to be used by customers to fetch LwM2M
        server credentials that they will need to use with their clients to connect
        to LwM2M server.


        **Example usage:**

        curl -X GET "http://api.us-east-1.mbedcloud.com/v3/server-credentials/lwm2m"
        -H "accept: application/json" -H "Authorization: Bearer THE_ACCESS_TOKEN"

        '
      operationId: getL2M2MServerCredentials
      produces:
      - application/json
      responses:
        200:
          description: LwM2M server credentials fetched successfully.
          examples:
            Success:
              created_at: '2017-12-11T14:22:20.009Z'
              etag: '1'
              id: 015fee4431fd38c98640fbfb00000000
              object: server-credentials
              server_certificate: '-----BEGIN CERTIFICATE-----\nMIICNTCCAdugAwIBAgIQXCeldn1YhYpDkaBhq8+mWTAKBggqhkjOPQQDAjByMQsw\nCQYDVQQGEwJHQjEXMBUGA1UECBMOQ2FtYnJpZGdlc2hpcmUxEjAQBgNVBAcTCUNh\nbWJyaWRnZTEQMA4GA1UEChMHQVJNIEx0ZDEkMCIGA1UEAxMbQVJNIEludGVncmF0\naW9uIEJvb3RzdHJhcENBMCAXDTE3MDUxNTE5NDkxMVoYDzIwNTIwNTE1MTk1OTEw\nWjByMQswCQYDVQQGEwJHQjEXMBUGA1UECBMOQ2FtYnJpZGdlc2hpcmUxEjAQBgNV\nBAcTCUNhbWJyaWRnZTEQMA4GA1UEChMHQVJNIEx0ZDEkMCIGA1UEAxMbQVJNIElu\ndGVncmF0aW9uIEJvb3RzdHJhcENBMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\ni3yGw4hU5l/gV04brCmC6n2RAGOnSgW8VMVxJzMZGy76Qfh6mgxd/LM3AZnFyb54\nWx3ssBod3ORvVwT0Osqo0qNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMB\nAf8wHQYDVR0OBBYEFBPvafpiPwCG9AW4tuay8dtpELQ5MBAGCSsGAQQBgjcVAQQD\nAgEAMAoGCCqGSM49BAMCA0gAMEUCIQCiUIgPVegmSeb1cYYzKQVM+f0fFJiShdlc\nSAKewnmoWQIgPv48oL/TDxWDVrzy+hYmesFoqryRPGlENvl0oYJ2em4=\n-----END
                CERTIFICATE-----'
              server_uri: coaps://mds.us-east-1.mbedcloud.com:5684?aid=015843e32ec902420a015e0700000000
          schema:
            $ref: '#/definitions/ServerCredentialsResponseData'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: The provided access token is not valid.
          examples:
            Authentication Error:
              code: 401
              message: Provided access token is not valid.
              object: error
              request_id: 015fee4431fd38c98640fbfb00000000
              type: invalid_auth
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Fetch LwM2M server credentials.
      tags:
      - Server credentials
  /v3/service-packages:
    get:
      description: "Get information of all service packages for the currently authenticated\
        \ commercial account. The response is returned in\ndescending order by service\
        \ package created timestamp, listing first the pending service package, then\
        \ the active service package\nand finally the previous service packages.\n\
        \n**Example usage:**\n\n    curl -X GET https://api.us-east-1.mbedcloud.com/v3/service-packages\
        \ -H 'authorization: Bearer {api-key}'"
      operationId: getServicePackages
      responses:
        200:
          description: Service package information for account's all service packages.
          examples:
            application/json:
              active:
                created: '2017-01-01T00:00:00.000Z'
                expires: '2018-01-01T00:00:00.000Z'
                firmware_update_count: 300000
                grace_perid: false
                id: example-service-package-id-3
                modified: '2017-01-01T00:00:00.000Z'
                next_id: example-service-package-id-4
                previous_id: example-service-package-id-2
                start_time: '2017-01-01T00:00:00.000Z'
              object: service-packages
              pending:
                created: '2017-03-01T00:00:00.000Z'
                expires: '2019-01-01T00:00:00.000Z'
                firmware_update_count: 400000
                id: example-service-package-id-4
                modified: '2017-03-01T00:00:00.000Z'
                previous_id: example-service-package-id-3
                start_time: '2018-01-01T00:00:00.000Z'
              previous:
              - created: '2016-01-01T00:00:00.000Z'
                end_time: '2017-02-01T00:00:00.000Z'
                expires: '2017-01-01T00:00:00.000Z'
                firmware_update_count: 200000
                id: example-service-package-id-2
                modified: '2017-02-01T00:00:00.000Z'
                next_id: example-service-package-id-3
                previous_id: example-service-package-id-3
                reason: renewed
                start_time: '2016-01-01T00:00:00.000Z'
              - created: '2015-01-01T00:00:00.000Z'
                end_time: '2016-02-01T00:00:00.000Z'
                expires: '2016-01-01T00:00:00.000Z'
                firmware_update_count: 100000
                id: example-service-package-id-1
                modified: '2016-02-01T00:00:00.000Z'
                next_id: example-service-package-id-2
                previous_id: null
                reason: renewed
                start_time: '2015-01-01T00:00:00.000Z'
          schema:
            $ref: '#/definitions/ServicePackagesResponse'
        401:
          description: Unauthorized access.
          examples:
            application/json:
              code: 401
              message: Access is denied.
              object: error
              request_id: example-request-id
              type: unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedErrorResponse'
        403:
          description: Forbidden.
          examples:
            application/json:
              code: 403
              message: Account is not a commercial account.
              object: error
              request_id: example-request-id
              type: forbidden
          schema:
            $ref: '#/definitions/ForbiddenErrorResponse'
        500:
          description: Internal Server Error.
          examples:
            application/json:
              code: 500
              message: Unexpected internal server error.
              object: error
              request_id: example-request-id
              type: internal_error
          schema:
            $ref: '#/definitions/InternalServerErrorResponse'
      summary: Get all service packages.
  /v3/service-packages-quota:
    get:
      description: "Get the available firmware update quota for the currently authenticated\
        \ commercial account.\n\n**Example usage:**\n\n    curl -X GET https://api.us-east-1.mbedcloud.com/v3/service-packages-quota\
        \ -H 'authorization: Bearer {api-key}'\n"
      operationId: getServicePackageQuota
      responses:
        200:
          description: 'Current firmware update quota for the currently authenticated
            commercial account.

            '
          examples:
            application/json:
              object: service-package-quota
              quota: 1000
          schema:
            $ref: '#/definitions/ServicePackageQuota'
        401:
          description: Unauthorized access.
          examples:
            application/json:
              code: 401
              message: Access is denied.
              object: error
              request_id: example-request-id
              type: unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedErrorResponse'
        403:
          description: Forbidden.
          examples:
            application/json:
              code: 403
              message: Account is not a commercial account.
              object: error
              request_id: example-request-id
              type: forbidden
          schema:
            $ref: '#/definitions/ForbiddenErrorResponse'
        500:
          description: Internal Server Error.
          examples:
            application/json:
              code: 500
              message: Unexpected internal server error.
              object: error
              request_id: example-request-id
              type: internal_error
          schema:
            $ref: '#/definitions/InternalServerErrorResponse'
      summary: Service package quota.
  /v3/service-packages-quota-history:
    get:
      description: "Get your quota usage history. This API is available for commercial\
        \ accounts.\nAggregator accounts can see own and subtenant quota usage data.\n\
        History data is ordered in ascending order based on the added timestamp.\n\
        \n**Example usage:**\n\n    curl -X GET https://api.us-east-1.mbedcloud.com/v3/service-packages-quota-history\
        \ -H 'authorization: Bearer {api-key}'\n"
      operationId: getServicePackageQuotaHistory
      parameters:
      - description: Maximum amount of quota history entries contained in one paged
          response.
        format: int32
        in: query
        maximum: 1000
        minimum: 2
        name: limit
        required: false
        type: integer
      - description: To fetch after which quota history ID. The results will contain
          entries after specified entry.
        in: query
        maxLength: 32
        minLength: 32
        name: after
        required: false
        type: string
      responses:
        200:
          description: 'Quota history for the currently authenticated commercial account.

            '
          examples:
            application/json:
              after: null
              data:
              - added: '2017-10-10T10:45:12.896Z'
                amount: 20
                id: 787148a58f51434e938f8e0e54c09699
                reason: package_creation
                reservation: null
                service_package:
                  expires: '2018-10-10T10:45:12.300Z'
                  firmware_update_count: 20
                  id: 010c804b945f4c33b2d1e313ed95094e
                  previous_id: null
                  start_time: '2017-10-10T10:45:12.300Z'
              - added: '2017-11-10T13:45:51.273Z'
                amount: -1
                id: b0817554677248a1b038d7fcd2c020c5
                reason: reservation
                reservation:
                  account_id: TEST-commercial.5f1edb5c-c61d-11e7-a05a-00155d004e00
                  campaign_name: campaign
                  id: b5322aabe29d458ea6e4402594085a15
                service_package: null
              has_more: false
              limit: 50
              object: service-package-quota-history
              total_count: 2
          schema:
            $ref: '#/definitions/ServicePackageQuotaHistoryResponse'
        401:
          description: Unauthorized access.
          examples:
            application/json:
              code: 401
              message: Access is denied.
              object: error
              request_id: example-request-id
              type: unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedErrorResponse'
        403:
          description: Forbidden.
          examples:
            application/json:
              code: 403
              message: Account is not a commercial account.
              object: error
              request_id: example-request-id
              type: forbidden
          schema:
            $ref: '#/definitions/ForbiddenErrorResponse'
        500:
          description: Internal Server Error.
          examples:
            application/json:
              code: 500
              message: Unexpected internal server error.
              object: error
              request_id: example-request-id
              type: internal_error
          schema:
            $ref: '#/definitions/InternalServerErrorResponse'
      summary: Service package quota history.
  /v3/trusted-certificates:
    get:
      description: 'An endpoint for retrieving trusted certificates in an array.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates -H ''Authorization:
        Bearer API_KEY''`'
      operationId: getAllCertificates
      parameters:
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: Filter for certificate name
        in: query
        name: name__eq
        required: false
        type: string
      - description: Service filter, either lwm2m or bootstrap
        in: query
        name: service__eq
        required: false
        type: string
      - description: Expire filter in days
        format: int32
        in: query
        name: expire__eq
        required: false
        type: integer
      - description: Device execution mode, as 1 for developer certificates or as
          another natural integer value
        format: int32
        in: query
        name: device_execution_mode__eq
        required: false
        type: integer
      - description: Device execution mode not equals filter
        format: int32
        in: query
        name: device_execution_mode__neq
        required: false
        type: integer
      - description: Owner name filter
        in: query
        name: owner__eq
        required: false
        type: string
      - description: Enrollment mode filter
        in: query
        name: enrollment_mode__eq
        required: false
        type: boolean
      - description: Filter for certificate status
        in: query
        name: status__eq
        required: false
        type: string
      - description: 'Issuer filter. Finds all matches where the filter value is a
          case insensitive substring of the result. Example: issuer__like=cn=iss matches
          CN=issuer.'
        in: query
        name: issuer__like
        required: false
        type: string
      - description: 'Subject filter. Finds all matches where the filter value is
          a case insensitive substring of the result. Example: subject__like=cn=su
          matches CN=subject.'
        in: query
        name: subject__like
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/TrustedCertificateRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all trusted certificates.
      tags:
      - Developer
    post:
      consumes:
      - application/json
      description: 'An endpoint for uploading new trusted certificates.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/trusted-certificates
        -d {"name": "myCert1", "description": "very important cert", "certificate":
        "certificate_data", "service": "lwm2m"} -H ''content-type: application/json''
        -H ''Authorization: Bearer API_KEY''`'
      operationId: addCertificate
      parameters:
      - description: A trusted certificate object with attributes.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/TrustedCertificateReq'
      produces:
      - application/json
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '400':
          description: Invalid certificate data or missing/invalid parameters.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden, only available for admins of commercial accounts.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Certificate with the given name or subject already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Upload a new trusted certificate.
      tags:
      - Account Admin
  /v3/trusted-certificates/{cert_id}:
    delete:
      description: 'An endpoint for deleting a trusted certificate.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: deleteCertificate
      parameters:
      - description: The ID of the trusted certificate to be deleted.
        in: path
        name: cert_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Certificate not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a trusted certificate by ID.
      tags:
      - Developer
    get:
      description: 'An endpoint for retrieving a trusted certificate by ID.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getCertificate
      parameters:
      - description: The ID of the trusted certificate to be retrieved.
        in: path
        name: cert_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Certificate not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get trusted certificate by ID.
      tags:
      - Developer
    put:
      consumes:
      - application/json
      description: 'An endpoint for updating existing trusted certificates.


        **Example usage:**

        `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id}
        -d {"description": "very important cert"} -H ''content-type: application/json''
        -H ''Authorization: Bearer API_KEY''`'
      operationId: updateCertificate
      parameters:
      - description: The ID of the trusted certificate to be updated.
        in: path
        name: cert_id
        required: true
        type: string
      - description: A trusted certificate object with attributes.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/TrustedCertificateUpdateReq'
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '400':
          description: Invalid certificate data or missing/invalid parameters.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Certificate not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Certificate with the given name or subject already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update trusted certificate.
      tags:
      - Developer
  /v3/update-campaigns/:
    get:
      description: Get update campaigns for devices specified by a filter.
      operationId: Update_Campaign_list
      parameters:
      - description: How many update campaigns to retrieve
        in: query
        name: limit
        type: integer
      - description: 'The order of the records. Acceptable values: ASC, DESC. Default:
          ASC'
        in: query
        name: order
        type: string
      - description: The ID of the the item after which to retrieve the next page
        in: query
        name: after
        type: string
      - description: 'A comma-separated list of data fields to return. Currently supported:
          total_count'
        in: query
        name: include
        type: string
      - description: "URL-encoded query string parameter to filter returned data\n\
          \n`?filter={URL-encoded query string}`\n\n\n###### Filterable fields:\n\n\
          The below table lists all the fields that can be filtered on with certain\
          \ filters:\n\n<table>\n  <thead>\n    <tr>\n      <th>Field</th>\n     \
          \ <th>= / __eq / __neq</th>\n      <th>__in /  __nin</th>\n      <th>__lte\
          \ / __gte</th>\n    <tr>\n  <thead>\n  <tbody>\n    <tr>\n      <td>created_at</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n \
          \   </tr>\n    <tr>\n      <td>description</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n   \
          \   <td>device_filter</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n\
          \      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>etag</td>\n     \
          \ <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n    </tr>\n\
          \    <tr>\n      <td>finished</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>\u2713</td>\n    </tr>\n    <tr>\n      <td>id</td>\n \
          \     <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n  \
          \  </tr>\n    <tr>\n      <td>name</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>root_manifest_id</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n      <td>&nbsp;</td>\n \
          \   </tr>\n    <tr>\n      <td>started_at</td>\n      <td>\u2713</td>\n\
          \      <td>\u2713</td>\n      <td>\u2713</td>\n    </tr>\n    <tr>\n   \
          \   <td>state</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n     \
          \ <td>&nbsp;</td>\n    </tr>\n    <tr>\n      <td>updated_at</td>\n    \
          \  <td>\u2713</td>\n      <td>\u2713</td>\n      <td>\u2713</td>\n    </tr>\n\
          \    <tr>\n      <td>when</td>\n      <td>\u2713</td>\n      <td>\u2713\
          </td>\n      <td>\u2713</td>\n    </tr>\n  </tbody>\n</table>\n&nbsp;\n\n\
          The query string is made up of key-value pairs separated by ampersands.\
          \ For example, this query:\n`key1__eq=value1&key2__eq=value2&key3__eq=value3`\n\
          \nwould be URL-encoded as:\n`?filter=key1__eq%3Dvalue1%26key2__eq%3Dvalue2%26key3__eq%3Dvalue3`\n\
          \n\n**Filtering by campaign properties**\n`state__eq=[draft|scheduled|devicefectch|devicecopy|publishing|deploying|deployed|manifestremoved|expired]`\n\
          \n`root_manifest_id__eq=43217771234242e594ddb433816c498a`\n\n**Filtering\
          \ on date-time fields**\n\nDate-time fields should be specified in UTC RFC3339\
          \ format, `YYYY-MM-DDThh:mm:ss.msZ`. There are three permitted variations:\n\
          \n* UTC RFC3339 with milliseconds. Example: `2016-11-30T16:25:12.1234Z`\n\
          * UTC RFC3339 without milliseconds. Example: `2016-11-30T16:25:12Z`\n* UTC\
          \ RFC3339 shortened without milliseconds and punctuation. Example: `20161130T162512Z`\n\
          \nDate-time filtering supports three operators:\n\n* equality by appending\
          \ `__eq` to the field name\n* greater than or equal to by appending `__gte`\
          \ to the field name\n* less than or equal to by appending `__lte` to the\
          \ field name\n\n`{field name}[|__eq|__lte|__gte]={UTC RFC3339 date-time}`\n\
          \nTime ranges may be specified by including both the `__gte` and `__lte`\
          \ forms in the filter. For example:\n\n`created_at__gte=2016-11-30T16:25:12.1234Z&created_at__lte=2016-12-30T00:00:00Z`\n\
          \n**Filtering on multiple fields**\n\n`state__eq=deployed&created_at__gte=2016-11-30T16:25:12.1234Z&created_at__lte=2016-12-30T00:00:00Z`\n\
          \n**Filtering with filter operators**\n\nString field filtering supports\
          \ the following operators:\n\n* equality: `__eq`\n* non-equality: `__neq`\n\
          * in : `__in`\n* not in: `__nin`\n\nFor `__in` and `__nin` filters list\
          \ of parameters must be comma-separated:\n\n`name__in=fw-image1,fw-image2`"
        in: query
        name: filter
        type: string
      responses:
        '200':
          description: Request successful
          schema:
            $ref: '#/definitions/UpdateCampaignPage'
        '400':
          description: 'Validation error: The data used to update the campaign did
            not validate

            '
        '401':
          description: Not authenticated
        '404':
          description: Unable to find content
      summary: List all campaigns
    post:
      description: Create an update campaign.
      operationId: Update_Campaign_create
      parameters:
      - description: Update campaign
        in: body
        name: campaign
        required: true
        schema:
          $ref: '#/definitions/UpdateCampaignPostRequest'
      responses:
        '201':
          description: Update campaign created
          schema:
            $ref: '#/definitions/UpdateCampaign'
        '400':
          description: 'Validation error: The data used to create the campaign did
            not validate

            '
        '401':
          description: Not authenticated
      summary: Create a campaign
  /v3/update-campaigns/{campaign_id}/:
    delete:
      description: Delete an update campaign.
      operationId: Update_Campaign_destroy
      parameters:
      - description: The ID of the update campaign
        in: path
        name: campaign_id
        required: true
        type: string
      responses:
        '204':
          description: Update campaign deleted
        '400':
          description: 'Validation error: The data used to update the campaign did
            not validate

            '
        '401':
          description: Not authenticated
        '404':
          description: Update campaign can't be found
      summary: Delete a campaign
    get:
      description: Get an update campaign.
      operationId: Update_Campaign_retrieve
      parameters:
      - description: The campaign ID
        in: path
        name: campaign_id
        required: true
        type: string
      responses:
        '200':
          description: Retrieved result successfully
          schema:
            $ref: '#/definitions/UpdateCampaign'
        '400':
          description: 'Validation error: The data used to update the campaign did
            not validate

            '
        '401':
          description: Not authenticated
        '404':
          description: Unable to find campaign
      summary: Get a campaign.
    put:
      description: Modify an update campaign.
      operationId: Update_Campaign_update
      parameters:
      - in: path
        name: campaign_id
        required: true
        type: string
      - description: Update campaign
        in: body
        name: campaign
        required: true
        schema:
          $ref: '#/definitions/UpdateCampaignPutRequest'
      responses:
        '200':
          description: Update campaign updated
          schema:
            $ref: '#/definitions/UpdateCampaign'
        '400':
          description: 'Validation error: The data used to update the campaign did
            not validate

            '
        '401':
          description: Not authenticated
        '403':
          description: Fields apart from 'name', 'description' and 'state' cannot
            be modified when the state is not 'draft'.
        '404':
          description: Update campaign can't be found
      summary: Modify a campaign
  /v3/update-campaigns/{campaign_id}/archive:
    post:
      description: This command will archive a campaign.
      operationId: Update_Campaign_archive
      parameters:
      - description: The campaign ID
        in: path
        name: campaign_id
        required: true
        type: string
      responses:
        '202':
          description: The campaign has been archived.
        '400':
          description: Unable to change the phase of the campaign.
        '401':
          description: Not authenticated.
        '404':
          description: Cannot find the campaign.
        '409':
          description: Cannot archive the campaign while in the current phase.
      summary: Archive a campaign.
  /v3/update-campaigns/{campaign_id}/campaign-device-metadata/:
    get:
      description: Get campaign device metadata.
      operationId: Update_Campaign_Metadata_list
      parameters:
      - description: The update campaign ID
        in: path
        name: campaign_id
        required: true
        type: string
      - description: How many objects to retrieve in the page
        in: query
        name: limit
        type: integer
      - description: ASC or DESC
        in: query
        name: order
        type: string
      - description: The ID of the the item after which to retrieve the next page
        in: query
        name: after
        type: string
      - description: 'A comma-separated list of data fields to return. Currently supported:
          total_count'
        in: query
        name: include
        type: string
      responses:
        200:
          description: Request successful
          schema:
            $ref: '#/definitions/CampaignDeviceMetadataPage'
        401:
          description: Unauthorized
      summary: List all campaign device metadata
  /v3/update-campaigns/{campaign_id}/campaign-device-metadata/{campaign_device_metadata_id}/:
    get:
      description: Get update campaign metadata.
      operationId: Update_Campaign_Metadata_retrieve
      parameters:
      - description: The update campaign ID
        in: path
        name: campaign_id
        required: true
        type: string
      - description: The campaign device metadata ID
        in: path
        name: campaign_device_metadata_id
        required: true
        type: string
      responses:
        200:
          description: Request successful
          schema:
            $ref: '#/definitions/CampaignDeviceMetadata'
        401:
          description: Unauthorized
        404:
          description: Not Found
      summary: Get a campaign device metadata
  /v3/update-campaigns/{campaign_id}/metrics:
    get:
      description: Get detailed statistics of a campaign.
      operationId: Update_Campaign_metrics
      parameters:
      - description: The campaign ID
        in: path
        name: campaign_id
        required: true
        type: string
      responses:
        200:
          description: Request successful
          schema:
            $ref: '#/definitions/CampaignMetrics'
        401:
          description: Unauthorized
        404:
          description: Unable to find campaign or the campaign hasn't started.
      summary: Get campaign metrics
  /v3/update-campaigns/{campaign_id}/start:
    post:
      description: This command will begin the process of starting a campaign.
      operationId: Update_Campaign_start
      parameters:
      - description: The campaign ID
        in: path
        name: campaign_id
        required: true
        type: string
      responses:
        '202':
          description: The campaign is starting.
        '400':
          description: Unable to change the phase of the campaign.
        '401':
          description: Not authenticated.
        '404':
          description: Cannot find the campaign.
        '409':
          description: Cannot start the campaign while in the current phase.
      summary: Start a campaign.
  /v3/update-campaigns/{campaign_id}/stop:
    post:
      description: This command will begin the process of stopping a campaign.
      operationId: Update_Campaign_stop
      parameters:
      - description: The campaign ID
        in: path
        name: campaign_id
        required: true
        type: string
      responses:
        '202':
          description: The campaign is stopping.
        '400':
          description: Unable to change the phase of the campaign.
        '401':
          description: Not authenticated.
        '404':
          description: Cannot find the campaign.
        '409':
          description: Cannot stop the campaign while in the current phase.
      summary: Stop a campaign.
  /v3/user-invitations:
    get:
      description: 'An endpoint for retrieving the details of all the active user
        invitations sent for new or existing users to join the account.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/user-invitations -H ''Authorization:
        Bearer API_KEY''`'
      operationId: getAllInvitations
      parameters:
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: Filter for getting user invitations by a specified login profile.
        in: query
        name: login_profile__eq
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInvitationRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the details of all the user invitations.
      tags:
      - Account Admin
    post:
      consumes:
      - application/json
      description: 'An endpoint for inviting a new or an existing user to join the
        account.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/user-invitations -d {"email":
        "myemail@company.com"} -H ''content-type: application/json'' -H ''Authorization:
        Bearer API_KEY''`'
      operationId: createInvitation
      parameters:
      - description: A user invitation object with attributes.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UserInvitationReq'
      produces:
      - application/json
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/UserInvitationResp'
        '400':
          description: Error in input data, for example an invalid email address.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a user invitation.
      tags:
      - Account Admin
  /v3/user-invitations/{invitation_id}:
    delete:
      description: 'An endpoint for deleting an active user invitation which has been
        sent for a new or an existing user to join the account.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/user-invitations/{invitation_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: deleteInvitation
      parameters:
      - description: The ID of the invitation to be deleted.
        in: path
        name: invitation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An invitation with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a user invitation.
      tags:
      - Account Admin
    get:
      description: 'An endpoint for retrieving the details of an active user invitation
        sent for a new or an existing user to join the account.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/user-invitations/{invitation_id}
        -H ''Authorization: Bearer API_KEY''`'
      operationId: getInvitation
      parameters:
      - description: The ID of the invitation to be retrieved.
        in: path
        name: invitation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInvitationResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An invitation with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Details of a user invitation.
      tags:
      - Account Admin
  /v3/users:
    get:
      description: 'An endpoint for retrieving the details of all users.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/users -H ''Authorization: Bearer
        API_KEY''`'
      operationId: getAllUsers
      parameters:
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: Filter for email address
        in: query
        name: email__eq
        required: false
        type: string
      - description: Filter for status, for example active or reset
        in: query
        name: status__eq
        required: false
        type: string
      - description: An optional filter for getting users with a specified set of
          statuses.
        in: query
        name: status__in
        required: false
        type: string
      - description: An optional filter for excluding users with a specified set of
          statuses.
        in: query
        name: status__nin
        required: false
        type: string
      - description: An optional filter for getting users with a specified login profile.
        in: query
        name: login_profile__eq
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the details of all users.
      tags:
      - Account Admin
    post:
      consumes:
      - application/json
      description: 'An endpoint for creating or inviting a new user to the account.
        In case of invitation email address is used only, other attributes are set
        in the 2nd step.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/users?action=invite -d
        {"email": "myemail@company.com"} -H ''content-type: application/json'' -H
        ''Authorization: Bearer API_KEY''`'
      operationId: createUser
      parameters:
      - description: A user object with attributes.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UserInfoReq'
      - default: create
        description: Action, either 'create' or 'invite'.
        in: query
        name: action
        required: false
        type: string
      produces:
      - application/json
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: Error in input data, for example an invalid email address.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A user with the given username or email already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new user.
      tags:
      - Account Admin
  /v3/users/{user_id}:
    delete:
      description: 'An endpoint for deleting a user.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/users/{user_id} -H
        ''Authorization: Bearer API_KEY''`'
      operationId: deleteUser
      parameters:
      - description: The ID of the user to be deleted.
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: Deleted successfully.
        '400':
          description: Bad request, for example trying to delete active user.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a user.
      tags:
      - Account Admin
    get:
      description: 'An endpoint for retrieving the details of a user.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/users/{user_id} -H ''Authorization:
        Bearer API_KEY''`'
      operationId: getUser
      parameters:
      - description: The ID of the user whose details are retrieved.
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Details of a user.
      tags:
      - Account Admin
    put:
      consumes:
      - application/json
      description: 'An endpoint for updating user details.


        **Example usage:**

        `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/{user_id} -d ''{"username":
        "myusername"}'' -H ''content-type: application/json'' -H ''Authorization:
        Bearer API_KEY''`'
      operationId: updateUser
      parameters:
      - description: The ID of the user whose details are updated.
        in: path
        name: user_id
        required: true
        type: string
      - description: A user object with attributes.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UserUpdateReq'
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: Error in input data, for example an invalid email address.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A user with the given username or email already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update user details.
      tags:
      - Account Admin
  /v3/users/{user_id}/groups:
    delete:
      consumes:
      - application/json
      description: 'An endpoint for removing user from groups.


        **Example usage:**

        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/users/{user_id}/groups
        -d ''["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: removeUserFromGroups
      parameters:
      - description: The ID of the user to be removed from the group.
        in: path
        name: user_id
        required: true
        type: string
      - description: A list of IDs of the groups to be updated.
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove user from groups.
      tags:
      - Account Admin
    get:
      description: 'An endpoint for retrieving groups of the user.


        **Example usage:**

        `curl https://api.us-east-1.mbedcloud.com/v3/users/{user_id}/groups -H ''Authorization:
        Bearer API_KEY''`'
      operationId: getGroupsOfUser
      parameters:
      - default: 50
        description: The number of results to return (2-1000), default is 50.
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      - description: The entity ID to fetch after the given one.
        in: query
        name: after
        required: false
        type: string
      - default: ASC
        description: The order of the records based on creation time, ASC or DESC;
          by default ASC
        in: query
        name: order
        required: false
        type: string
      - description: 'Comma separated additional data to return. Currently supported:
          total_count'
        in: query
        name: include
        required: false
        type: string
      - description: The ID of the user whose details are retrieved.
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get groups of the user.
      tags:
      - Account Admin
    post:
      consumes:
      - application/json
      description: 'An endpoint for adding user to groups.


        **Example usage:**

        `curl -X POST https://api.us-east-1.mbedcloud.com/v3/users/{user_id}/groups
        -d ''["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]''
        -H ''content-type: application/json'' -H ''Authorization: Bearer API_KEY''`'
      operationId: addUserToGroups
      parameters:
      - description: The ID of the user to be added to the group.
        in: path
        name: user_id
        required: true
        type: string
      - description: A list of IDs of the groups to be updated.
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UpdatedResponse'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user or a group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add user to a list of groups.
      tags:
      - Account Admin
produces:
- application/json
schemes:
- https
security:
- Bearer: []
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: '2.0'
